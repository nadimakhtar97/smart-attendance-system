{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { expandDims } from './expand_dims';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { tile } from './tile';\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nfunction eye_(numRows, numColumns, batchShape) {\n  let dtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'float32';\n\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n\n  const out = reshape(buff.toTensor(), [numRows, numColumns]);\n\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]);\n    } else if (batchShape.length === 2) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(out, 0), 0), [batchShape[0], batchShape[1], 1, 1]);\n    } else if (batchShape.length === 3) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [batchShape[0], batchShape[1], batchShape[2], 1, 1]);\n    } else {\n      throw new Error(`eye() currently supports only 1D and 2D ` + // tslint:disable-next-line:no-any\n      `batchShapes, but received ${batchShape.length}D.`);\n    }\n  }\n}\n\nexport const eye = op({\n  eye_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,SAAQA,MAAR,QAAqB,UAArB;AACA,SAAQC,UAAR,QAAyB,eAAzB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AAEA;;;;;;;;;;;;;;;AAcA,SAASC,IAAT,CACIC,OADJ,EACqBC,UADrB,EAEIC,UAFJ,EAO+B;AAAA,MAA3BC,KAA2B,uEAAT,SAAS;;AAC7B,MAAIF,UAAU,IAAI,IAAlB,EAAwB;AACtBA,cAAU,GAAGD,OAAb;AACD;;AACD,QAAMI,IAAI,GAAGV,MAAM,CAAC,CAACM,OAAD,EAAUC,UAAV,CAAD,EAAwBE,KAAxB,CAAnB;AACA,QAAME,CAAC,GAAGL,OAAO,IAAIC,UAAX,GAAwBD,OAAxB,GAAkCC,UAA5C;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,CAApB,EAAuB,EAAEC,CAAzB,EAA4B;AAC1BF,QAAI,CAACG,GAAL,CAAS,CAAT,EAAYD,CAAZ,EAAeA,CAAf;AACD;;AACD,QAAME,GAAG,GAAaX,OAAO,CAACO,IAAI,CAACK,QAAL,EAAD,EAAkB,CAACT,OAAD,EAAUC,UAAV,CAAlB,CAA7B;;AACA,MAAIC,UAAU,IAAI,IAAlB,EAAwB;AACtB,WAAOM,GAAP;AACD,GAFD,MAEO;AACL,QAAIN,UAAU,CAACQ,MAAX,KAAsB,CAA1B,EAA6B;AAC3B,aAAOZ,IAAI,CAACH,UAAU,CAACa,GAAD,EAAM,CAAN,CAAX,EAAqB,CAACN,UAAU,CAAC,CAAD,CAAX,EAAgB,CAAhB,EAAmB,CAAnB,CAArB,CAAX;AACD,KAFD,MAEO,IAAIA,UAAU,CAACQ,MAAX,KAAsB,CAA1B,EAA6B;AAClC;AACA,aAAOZ,IAAI,CACAH,UAAU,CAACA,UAAU,CAACa,GAAD,EAAM,CAAN,CAAX,EAAqB,CAArB,CADV,EAEA,CAACN,UAAU,CAAC,CAAD,CAAX,EAAgBA,UAAU,CAAC,CAAD,CAA1B,EAA+B,CAA/B,EAAkC,CAAlC,CAFA,CAAX;AAGD,KALM,MAKA,IAAIA,UAAU,CAACQ,MAAX,KAAsB,CAA1B,EAA6B;AAClC;AACA,aAAOZ,IAAI,CAACH,UAAU,CAACA,UAAU,CAACA,UAAU,CAACa,GAAD,EAAM,CAAN,CAAX,EAAqB,CAArB,CAAX,EAAoC,CAApC,CAAX,EAAmD,CACrDN,UAAU,CAAC,CAAD,CAD2C,EACtCA,UAAU,CAAC,CAAD,CAD4B,EACvBA,UAAU,CAAC,CAAD,CADa,EACR,CADQ,EACL,CADK,CAAnD,CAAX;AAGD,KALM,MAKA;AACL,YAAM,IAAIS,KAAJ,CACF,6CACA;AACA,mCAA8BT,UAAkB,CAACQ,MAAM,IAHrD,CAAN;AAID;AACF;AACF;;AAED,OAAO,MAAME,GAAG,GAAGhB,EAAE,CAAC;AAACG;AAAD,CAAD,CAAd","names":["buffer","expandDims","op","reshape","tile","eye_","numRows","numColumns","batchShape","dtype","buff","n","i","set","out","toTensor","length","Error","eye"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/eye.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor2D} from '../tensor';\nimport {DataType} from '../types';\n\nimport {buffer} from './buffer';\nimport {expandDims} from './expand_dims';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {tile} from './tile';\n\n/**\n * Create an identity matrix.\n *\n * @param numRows Number of rows.\n * @param numColumns Number of columns. Defaults to `numRows`.\n * @param batchShape If provided, will add the batch shape to the beginning\n *   of the shape of the returned `tf.Tensor` by repeating the identity\n *   matrix.\n * @param dtype Data type.\n * @returns Identity matrix of the specified size and data type, possibly\n *   with batch repetition if `batchShape` is specified.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction eye_(\n    numRows: number, numColumns?: number,\n    batchShape?:\n        [\n          number\n        ]|[number,\n           number]|[number, number, number]|[number, number, number, number],\n    dtype: DataType = 'float32'): Tensor2D {\n  if (numColumns == null) {\n    numColumns = numRows;\n  }\n  const buff = buffer([numRows, numColumns], dtype);\n  const n = numRows <= numColumns ? numRows : numColumns;\n  for (let i = 0; i < n; ++i) {\n    buff.set(1, i, i);\n  }\n  const out: Tensor2D = reshape(buff.toTensor(), [numRows, numColumns]);\n  if (batchShape == null) {\n    return out;\n  } else {\n    if (batchShape.length === 1) {\n      return tile(expandDims(out, 0), [batchShape[0], 1, 1]) as Tensor2D;\n    } else if (batchShape.length === 2) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(\n                 expandDims(expandDims(out, 0), 0),\n                 [batchShape[0], batchShape[1], 1, 1]) as Tensor2D;\n    } else if (batchShape.length === 3) {\n      // tslint:disable-next-line:no-unnecessary-type-assertion\n      return tile(expandDims(expandDims(expandDims(out, 0), 0), 0), [\n               batchShape[0], batchShape[1], batchShape[2], 1, 1\n             ]) as Tensor2D;\n    } else {\n      throw new Error(\n          `eye() currently supports only 1D and 2D ` +\n          // tslint:disable-next-line:no-any\n          `batchShapes, but received ${(batchShape as any).length}D.`);\n    }\n  }\n}\n\nexport const eye = op({eye_});\n"]},"metadata":{},"sourceType":"module"}