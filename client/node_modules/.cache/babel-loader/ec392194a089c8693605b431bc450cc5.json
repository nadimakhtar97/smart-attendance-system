{"ast":null,"code":"/**\n* @license\n* Copyright 2018 Google LLC. All Rights Reserved.\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n* http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n* =============================================================================\n*/\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { abs } from '../ops/abs';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { maximum } from '../ops/maximum';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamaxOptimizer extends Optimizer {\n  constructor(learningRate, beta1, beta2) {\n    let epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    let decay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.0;\n    super();\n    this.learningRate = learningRate;\n    this.beta1 = beta1;\n    this.beta2 = beta2;\n    this.epsilon = epsilon;\n    this.decay = decay;\n    this.accumulatedFirstMoment = [];\n    this.accumulatedWeightedInfNorm = [];\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr = div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n        const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const ut0 = mul(weightedInfNorm, this.beta2);\n        const ut1 = abs(gradient);\n        const newWeightedInfNorm = maximum(ut0, ut1);\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n        const newValue = add(mul(div(lr, oneMinusAccBeta1), div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))), value);\n        value.assign(newValue);\n      });\n      this.iteration.assign(add(this.iteration, 1));\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n\n  async getWeights() {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n\n  async setWeights(weightValues) {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon'], config['decay']);\n  }\n\n}\n/** @nocollapse */\n\nAdamaxOptimizer.className = 'Adamax'; // Note: Name matters for Python compatbility.\n\nregisterClass(AdamaxOptimizer);","map":{"version":3,"mappings":"AAAC;;;;;;;;;;;;;;;;AAiBD,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,OAAR,EAAiBC,IAAjB,QAA4B,YAA5B;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAoBC,aAApB,QAA+E,kBAA/E;AAIA,SAAQC,SAAR,QAA2C,aAA3C;AAEA,OAAM,MAAOC,eAAP,SAA+BD,SAA/B,CAAwC;AAS5CE,cACcC,YADd,EAC8CC,KAD9C,EAEcC,KAFd,EAGyB;AAAA,QADcC,OACd,uEADgC,IAChC;AAAA,QAAXC,KAAW,uEAAH,GAAG;AACvB;AAHY;AAAgC;AAChC;AAAyB;AACzB;AANN,kCAA8C,EAA9C;AACA,sCAAkD,EAAlD;AAQNjB,QAAI,CAAC,MAAK;AACR,WAAKkB,SAAL,GAAiBZ,MAAM,CAAC,CAAD,CAAN,CAAUa,QAAV,EAAjB;AACA,WAAKC,QAAL,GAAgBd,MAAM,CAACQ,KAAD,CAAN,CAAcK,QAAd,EAAhB;AACD,KAHG,CAAJ;;AAKA,QAAIH,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAKA,OAAL,GAAelB,MAAM,CAACuB,OAAP,CAAeL,OAAf,EAAf;AACD;AACF;;AAEDM,gBAAc,CAACC,iBAAD,EAAkD;AAC9D,UAAMC,aAAa,GAAGC,KAAK,CAACC,OAAN,CAAcH,iBAAd,IAClBA,iBAAiB,CAACI,GAAlB,CAAsBC,IAAI,IAAIA,IAAI,CAACC,IAAnC,CADkB,GAElBC,MAAM,CAACC,IAAP,CAAYR,iBAAZ,CAFJ;AAIAvB,QAAI,CAAC,MAAK;AACR,YAAMgC,gBAAgB,GAAGzB,GAAG,CAAC,CAAD,EAAI,KAAKa,QAAT,CAA5B;AACA,YAAMa,EAAE,GACJ9B,GAAG,CAAC,CAAC,KAAKU,YAAP,EAAqBX,GAAG,CAACG,GAAG,CAAC,KAAKa,SAAN,EAAiB,KAAKD,KAAtB,CAAJ,EAAkC,CAAlC,CAAxB,CADP;AAGAO,mBAAa,CAACU,OAAd,CAAsB,CAACL,IAAD,EAAOM,CAAP,KAAY;AAChC,cAAMC,KAAK,GAAGtC,MAAM,CAACuC,mBAAP,CAA2BR,IAA3B,CAAd;AACA,cAAMS,SAAS,GAAG,KAAlB;;AACA,YAAI,KAAKC,sBAAL,CAA4BJ,CAA5B,KAAkC,IAAtC,EAA4C;AAC1C,eAAKI,sBAAL,CAA4BJ,CAA5B,IAAiC;AAC/BK,wBAAY,EAAE,GAAGX,IAAI,IADU;AAE/BV,oBAAQ,EAAEX,SAAS,CAAC4B,KAAD,CAAT,CAAiBjB,QAAjB,CAA0BmB,SAA1B;AAFqB,WAAjC;AAID;;AACD,YAAI,KAAKG,0BAAL,CAAgCN,CAAhC,KAAsC,IAA1C,EAAgD;AAC9C,eAAKM,0BAAL,CAAgCN,CAAhC,IAAqC;AACnCK,wBAAY,EAAE,GAAGX,IAAI,IADc;AAEnCV,oBAAQ,EAAEX,SAAS,CAAC4B,KAAD,CAAT,CAAiBjB,QAAjB,CAA0BmB,SAA1B;AAFyB,WAArC;AAID;;AAED,cAAMI,QAAQ,GAAGjB,KAAK,CAACC,OAAN,CAAcH,iBAAd,IACbA,iBAAiB,CAACY,CAAD,CAAjB,CAAqBQ,MADR,GAEbpB,iBAAiB,CAACM,IAAD,CAFrB;;AAGA,YAAIa,QAAQ,IAAI,IAAhB,EAAsB;AACpB;AACD;;AAED,cAAME,WAAW,GAAG,KAAKL,sBAAL,CAA4BJ,CAA5B,EAA+BhB,QAAnD;AACA,cAAM0B,eAAe,GAAG,KAAKJ,0BAAL,CAAgCN,CAAhC,EAAmChB,QAA3D;AAEA,cAAM2B,cAAc,GAChB5C,GAAG,CAACG,GAAG,CAACuC,WAAD,EAAc,KAAK9B,KAAnB,CAAJ,EAA+BT,GAAG,CAACqC,QAAD,EAAW,IAAI,KAAK5B,KAApB,CAAlC,CADP;AAGA,cAAMiC,GAAG,GAAG1C,GAAG,CAACwC,eAAD,EAAkB,KAAK9B,KAAvB,CAAf;AACA,cAAMiC,GAAG,GAAG/C,GAAG,CAACyC,QAAD,CAAf;AAEA,cAAMO,kBAAkB,GAAG7C,OAAO,CAAC2C,GAAD,EAAMC,GAAN,CAAlC;AAEAJ,mBAAW,CAACM,MAAZ,CAAmBJ,cAAnB;AACAD,uBAAe,CAACK,MAAhB,CAAuBD,kBAAvB;AAEA,cAAME,QAAQ,GACVjD,GAAG,CAACG,GAAG,CAACF,GAAG,CAAC8B,EAAD,EAAKD,gBAAL,CAAJ,EACC7B,GAAG,CAAC2C,cAAD,EAAiB5C,GAAG,CAAC+C,kBAAD,EAAqB,KAAKjC,OAA1B,CAApB,CADJ,CAAJ,EAECoB,KAFD,CADP;AAKAA,aAAK,CAACc,MAAN,CAAaC,QAAb;AACD,OA3CD;AA6CA,WAAKjC,SAAL,CAAegC,MAAf,CAAsBhD,GAAG,CAAC,KAAKgB,SAAN,EAAiB,CAAjB,CAAzB;AACA,WAAKE,QAAL,CAAc8B,MAAd,CAAqB7C,GAAG,CAAC,KAAKe,QAAN,EAAgB,KAAKN,KAArB,CAAxB;AACD,KApDG,CAAJ;AAqDA,SAAKsC,mBAAL;AACD;;AAEDrD,SAAO;AACL,SAAKqB,QAAL,CAAcrB,OAAd;AACA,SAAKmB,SAAL,CAAenB,OAAf;;AAEA,QAAI,KAAKwC,sBAAL,IAA+B,IAAnC,EAAyC;AACvCxC,aAAO,CAAC,KAAKwC,sBAAL,CAA4BZ,GAA5B,CAAgC0B,CAAC,IAAIA,CAAC,CAAClC,QAAvC,CAAD,CAAP;AACD;;AACD,QAAI,KAAKsB,0BAAL,IAAmC,IAAvC,EAA6C;AAC3C1C,aAAO,CAAC,KAAK0C,0BAAL,CAAgCd,GAAhC,CAAoC0B,CAAC,IAAIA,CAAC,CAAClC,QAA3C,CAAD,CAAP;AACD;AACF;;AAEe,QAAVmC,UAAU;AACd,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAEe,QAAVC,UAAU,CAACC,YAAD,EAA4B;AAC1C,UAAM,IAAIF,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAEDG,WAAS;AACP,WAAO;AACL,sBAAgB,KAAK7C,YADhB;AAEL,eAAS,KAAKC,KAFT;AAGL,eAAS,KAAKC,KAHT;AAIL,iBAAW,KAAKC,OAJX;AAKL,eAAS,KAAKC;AALT,KAAP;AAOD;AAED;;;AACiB,SAAV0C,UAAU,CACbC,GADa,EACoBC,MADpB,EACsC;AACrD,WAAO,IAAID,GAAJ,CACHC,MAAM,CAAC,cAAD,CADH,EACqBA,MAAM,CAAC,OAAD,CAD3B,EACsCA,MAAM,CAAC,OAAD,CAD5C,EAEHA,MAAM,CAAC,SAAD,CAFH,EAEgBA,MAAM,CAAC,OAAD,CAFtB,CAAP;AAGD;;AA1H2C;AAC5C;;AACOlD,4BAAY,QAAZ,C,CAAuB;;AA0HhCF,aAAa,CAACE,eAAD,CAAb","names":["ENGINE","dispose","tidy","abs","add","div","maximum","mul","scalar","sub","zerosLike","registerClass","Optimizer","AdamaxOptimizer","constructor","learningRate","beta1","beta2","epsilon","decay","iteration","variable","accBeta1","backend","applyGradients","variableGradients","variableNames","Array","isArray","map","item","name","Object","keys","oneMinusAccBeta1","lr","forEach","i","value","registeredVariables","trainable","accumulatedFirstMoment","originalName","accumulatedWeightedInfNorm","gradient","tensor","firstMoment","weightedInfNorm","newFirstMoment","ut0","ut1","newWeightedInfNorm","assign","newValue","incrementIterations","v","getWeights","Error","setWeights","weightValues","getConfig","fromConfig","cls","config"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/optimizers/adamax_optimizer.ts"],"sourcesContent":["ï»¿/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {abs} from '../ops/abs';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {maximum} from '../ops/maximum';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamaxOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adamax';  // Note: Name matters for Python compatbility.\n  private accBeta1: Variable;\n  private iteration: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedWeightedInfNorm: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null,\n      protected decay = 0.0) {\n    super();\n\n    tidy(() => {\n      this.iteration = scalar(0).variable();\n      this.accBeta1 = scalar(beta1).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const lr =\n          div(-this.learningRate, add(mul(this.iteration, this.decay), 1));\n\n      variableNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n        if (this.accumulatedWeightedInfNorm[i] == null) {\n          this.accumulatedWeightedInfNorm[i] = {\n            originalName: `${name}/v`,\n            variable: zerosLike(value).variable(trainable)\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const weightedInfNorm = this.accumulatedWeightedInfNorm[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n\n        const ut0 = mul(weightedInfNorm, this.beta2);\n        const ut1 = abs(gradient);\n\n        const newWeightedInfNorm = maximum(ut0, ut1);\n\n        firstMoment.assign(newFirstMoment);\n        weightedInfNorm.assign(newWeightedInfNorm);\n\n        const newValue =\n            add(mul(div(lr, oneMinusAccBeta1),\n                    div(newFirstMoment, add(newWeightedInfNorm, this.epsilon))),\n                value);\n\n        value.assign(newValue);\n      });\n\n      this.iteration.assign(add(this.iteration, 1));\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.accBeta1.dispose();\n    this.iteration.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedWeightedInfNorm != null) {\n      dispose(this.accumulatedWeightedInfNorm.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for Adamax yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error('setWeights() is not implemented for Adamax yet.');\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n      'decay': this.decay\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon'], config['decay']);\n  }\n}\nregisterClass(AdamaxOptimizer);\n"]},"metadata":{},"sourceType":"module"}