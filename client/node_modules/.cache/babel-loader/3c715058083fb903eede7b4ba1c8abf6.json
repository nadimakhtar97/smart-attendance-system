{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ConcatPackedProgram {\n  constructor(shapes, axis) {\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = [];\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n    const offsets = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1]; // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n\n}\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\n\nfunction shiftedChannels(channels, channel, shift) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}","map":{"version":3,"mappings":"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","names":["backend_util","getChannels","getCoordsDataType","ConcatPackedProgram","constructor","shapes","axis","outputShape","computeOutShape","shape","rank","length","dtype","coords","channels","slice","variableNames","map","_","i","offsets","Array","channel","lastChannels","allChannels","join","getValueSnippet","shift","shiftedChannels","lastIndex","userCode","x","channelIdx","indexOf","res","c","idx"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/concat_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ConcatPackedProgram implements GPGPUProgram {\n  variableNames: string[];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(shapes: number[][], axis: number) {\n    this.outputShape = backend_util.computeOutShape(shapes, axis);\n    const shape = this.outputShape;\n    const rank = shape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, rank);\n    this.variableNames = shapes.map((_, i) => `T${i}`);\n\n    const offsets: number[] = new Array(shapes.length - 1);\n    offsets[0] = shapes[0][axis];\n    for (let i = 1; i < offsets.length; i++) {\n      offsets[i] = offsets[i - 1] + shapes[i][axis];\n    }\n\n    const channel = channels[axis];\n    const lastChannels = channels.slice(-2);\n    const allChannels = channels.join();\n\n    let getValueSnippet = `if (${channel} < ${offsets[0]}) {\n        return getChannel(\n            getT0(${allChannels}), vec2(${lastChannels.join()}));\n        }`;\n    for (let i = 1; i < offsets.length; i++) {\n      const shift = offsets[i - 1];\n      // Note: the >= comparison below may seem unnecessary given the check\n      // above but is needed to workaround branch execution issues on some\n      // devices. It makes all the conditions exclusive without relying on\n      // execution order.\n      getValueSnippet += `\n        if (${channel} < ${offsets[i]}  && ${channel} >= ${offsets[i - 1]}) {\n          return getChannel(\n            getT${i}(${shiftedChannels(channels, channel, shift)}),\n            vec2(${shiftedChannels(lastChannels, channel, shift)}));\n        }`;\n    }\n    const lastIndex = offsets.length;\n    const shift = offsets[offsets.length - 1];\n    getValueSnippet += `\n        return getChannel(\n          getT${lastIndex}(${shiftedChannels(channels, channel, shift)}),\n          vec2(${shiftedChannels(lastChannels, channel, shift)}));`;\n\n    this.userCode = `\n      float getValue(${channels.map(x => 'int ' + x)}) {\n        ${getValueSnippet}\n      }\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        vec4 result = vec4(getValue(${coords}), 0., 0., 0.);\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} + 1;\n        if (${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.g = getValue(${coords});\n        }\n\n        ${coords[rank - 2]} = ${coords[rank - 2]} + 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]}) {\n          result.a = getValue(${coords});\n        }\n\n        ${coords[rank - 1]} = ${coords[rank - 1]} - 1;\n        if (${coords[rank - 2]} < ${shape[rank - 2]} &&\n            ${coords[rank - 1]} < ${shape[rank - 1]}) {\n          result.b = getValue(${coords});\n        }\n        setOutput(result);\n      }\n    `;\n  }\n}\n\n/**\n * Return an expression for coordinates into a vector where a given channel\n * will be offset by [shift].\n *\n * @param channels the channels to consider\n * @param channel the channel we want shifted\n * @param shift  the amount to subtract from the channel.\n *\n * @returns a string of the form 'x, y-[shift], z' where any one channel can\n * have the shift applied.\n */\nfunction shiftedChannels(channels: string[], channel: string, shift: number) {\n  const channelIdx = channels.indexOf(channel);\n  const res = channels.map((c, idx) => {\n    if (idx === channelIdx) {\n      return `${c} - ${shift}`;\n    } else {\n      return c;\n    }\n  });\n  return res.join();\n}\n"]},"metadata":{},"sourceType":"module"}