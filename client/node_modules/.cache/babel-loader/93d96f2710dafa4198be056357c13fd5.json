{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { gatherV2Impl } from './GatherV2_impl';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs;\n  assertNotComplex([x, indices], 'gatherV2'); // Throw error when any index is out of bound.\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values;\n  const axisDim = x.shape[parsedAxis];\n\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n  return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,QAAtB,EAAiHC,IAAjH,QAA4H,uBAA5H;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAUC,QAAV,CAAmBC,IAAnB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC;AAAJ,MAAeJ,MAArB;AACA,QAAM;AAACK,QAAD;AAAOC;AAAP,MAAoBJ,KAA1B;AAEAP,kBAAgB,CAAC,CAACQ,CAAD,EAAIC,OAAJ,CAAD,EAAe,UAAf,CAAhB,CALD,CAOC;;AACA,QAAMG,UAAU,GAAGb,IAAI,CAACc,cAAL,CAAoBH,IAApB,EAA0BF,CAAC,CAACM,KAA5B,EAAmC,CAAnC,CAAnB;AACA,QAAMC,WAAW,GAAGT,OAAO,CAACU,IAAR,CAAaC,GAAb,CAAiBR,OAAO,CAACS,MAAzB,EAAiCC,MAArD;AACA,QAAMC,OAAO,GAAGZ,CAAC,CAACM,KAAF,CAAQF,UAAR,CAAhB;;AACA,OAAK,IAAIS,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,WAAW,CAACO,MAAhC,EAAwC,EAAED,CAA1C,EAA6C;AAC3C,UAAME,KAAK,GAAGR,WAAW,CAACM,CAAD,CAAzB;AACAtB,QAAI,CAACyB,MAAL,CACID,KAAK,IAAIH,OAAO,GAAG,CAAnB,IAAwBG,KAAK,IAAI,CADrC,EAEI,MACI,6BAA6BA,KAAK,kBAAkBH,OAAO,GAAG,CAAC,GAHvE;AAID;;AAED,MAAIK,UAAU,GAAGd,SAAjB;;AAEA,MAAIA,SAAS,IAAI,IAAjB,EAAuB;AACrBc,cAAU,GAAG,CAAb;AACD;;AAED,QAAMC,WAAW,GAAG3B,IAAI,CAAC4B,aAAL,CAAmBlB,OAAO,CAACK,KAA3B,CAApB;AAEA,QAAMc,SAAS,GAAG/B,YAAY,CAACgC,YAAb,CAA0BC,wBAA1B,CACdtB,CADc,EACXC,OADW,EACFG,UADE,EACUa,UADV,CAAlB;AAGA,QAAMM,QAAQ,GAAG7B,OAAO,CAAC;AACvBG,UAAM,EAAE;AAACG;AAAD,KADe;AAEvBF,WAFuB;AAGvBC,SAAK,EAAE;AACLO,WAAK,EAAE,CACLc,SAAS,CAACI,SADL,EACgBJ,SAAS,CAACK,SAD1B,EACqCL,SAAS,CAACM,OAD/C,EAELN,SAAS,CAACO,SAFL;AADF;AAHgB,GAAD,CAAxB;AAWA,QAAMC,YAAY,GAAGlC,OAAO,CAAC;AAC3BG,UAAM,EAAE;AAACG,OAAC,EAAEC;AAAJ,KADmB;AAE3BH,WAF2B;AAG3BC,SAAK,EAAE;AAACO,WAAK,EAAE,CAACc,SAAS,CAACI,SAAX,EAAsBN,WAAW,GAAGE,SAAS,CAACI,SAA9C;AAAR;AAHoB,GAAD,CAA5B;AAMA,QAAMK,kBAAkB,GAAG,CACzBT,SAAS,CAACI,SADe,EACJJ,SAAS,CAACK,SADN,EACiBP,WAAW,GAAGE,SAAS,CAACI,SADzC,EAEzBJ,SAAS,CAACO,SAFe,CAA3B;AAKA,QAAMG,UAAU,GAAGhC,OAAO,CAACiC,UAAR,CAAmBH,YAAnB,CAAnB;AACA,QAAMI,IAAI,GAAGlC,OAAO,CAACiC,UAAR,CAAmBR,QAAnB,CAAb;AACA,QAAMU,MAAM,GAAGxC,YAAY,CAACuC,IAAD,EAAOF,UAAP,EAAmBD,kBAAnB,CAA3B;AAEA/B,SAAO,CAACoC,6BAAR,CAAsCX,QAAtC;AACAzB,SAAO,CAACoC,6BAAR,CAAsCN,YAAtC;AAEA,SAAO9B,OAAO,CAACqC,cAAR,CACHf,SAAS,CAACgB,WADP,EACoBH,MAAM,CAACI,KAD3B,EACkCJ,MAAM,CAACtB,MADzC,CAAP;AAED;AAED,OAAO,MAAM2B,cAAc,GAAiB;AAC1CC,YAAU,EAAEjD,QAD8B;AAE1CkD,aAAW,EAAE,KAF6B;AAG1CC,YAAU,EAAE9C;AAH8B,CAArC","names":["backend_util","GatherV2","util","assertNotComplex","gatherV2Impl","reshape","gatherV2","args","inputs","backend","attrs","x","indices","axis","batchDims","parsedAxis","parseAxisParam","shape","indicesVals","data","get","dataId","values","axisDim","i","length","index","assert","$batchDims","indicesSize","sizeFromShape","shapeInfo","segment_util","collectGatherOpShapeInfo","flattenX","batchSize","outerSize","dimSize","sliceSize","flattenIndex","flattenOutputShape","indicesBuf","bufferSync","xBuf","outBuf","disposeIntermediateTensorInfo","makeTensorInfo","outputShape","dtype","gatherV2Config","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/GatherV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {gatherV2Impl} from './GatherV2_impl';\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendCPU,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  assertNotComplex([x, indices], 'gatherV2');\n\n  // Throw error when any index is out of bound.\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  const indicesVals = backend.data.get(indices.dataId).values as TypedArray;\n  const axisDim = x.shape[parsedAxis];\n  for (let i = 0; i < indicesVals.length; ++i) {\n    const index = indicesVals[i];\n    util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n            `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n  }\n\n  let $batchDims = batchDims;\n\n  if (batchDims == null) {\n    $batchDims = 0;\n  }\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, $batchDims);\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  const indicesBuf = backend.bufferSync(flattenIndex);\n  const xBuf = backend.bufferSync(flattenX);\n  const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(flattenIndex);\n\n  return backend.makeTensorInfo(\n      shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'cpu',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}