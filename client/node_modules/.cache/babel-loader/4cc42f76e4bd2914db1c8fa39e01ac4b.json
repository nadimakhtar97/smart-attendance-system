{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\n\nexport class TensorArray {\n  constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n    this.name = name;\n    this.dtype = dtype;\n    this.maxSize = maxSize;\n    this.elementShape = elementShape;\n    this.identicalElementShapes = identicalElementShapes;\n    this.dynamicSize = dynamicSize;\n    this.clearAfterRead = clearAfterRead;\n    this.tensors = [];\n    this.closed_ = false;\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n\n\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n\n\n  read(index) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n\n    if (tensorWithState.cleared) {\n      throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` + `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n\n\n  readMany(indices) {\n    return indices.map(index => this.read(index));\n  }\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n\n\n  write(index, tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    } // Set the shape for the first time write to unknow shape tensor array\n\n\n    if (this.size() === 0 && (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n\n    if (t.read) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n    this.tensors[index] = t;\n  }\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n\n\n  writeMany(indices, tensors) {\n    if (indices.length !== tensors.length) {\n      throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` + `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n\n\n  gather(indices, dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    } // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n\n\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n    return stack(tensors, 0);\n  }\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n\n\n  concat(dtype) {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    } // Collect all the tensors from the tensors array.\n\n\n    const tensors = this.readMany(indices);\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n    return concat(tensors, 0);\n  }\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n\n\n  scatter(indices, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n\n\n  split(length, tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` + 'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n\n      return tensors;\n    });\n    const indices = [];\n\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n\n    this.writeMany(indices, tensors);\n  }\n\n}","map":{"version":3,"mappings":"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","names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","TensorArray","constructor","name","dtype","maxSize","elementShape","identicalElementShapes","dynamicSize","clearAfterRead","idTensor","id","closed","closed_","clearAndClose","keepIds","tensors","forEach","has","dispose","size","length","read","index","Error","tensorWithState","cleared","readMany","indices","map","write","t","shape","written","writeMany","i","gather","push","scatter","maxIndex","Math","max","split","totalLength","cumulativeLengths","len","elementPerRow","previousLength","sizes"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/executor/tensor_array.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize} from './tensor_utils';\n\nexport interface TensorWithState {\n  tensor?: Tensor;\n  written?: boolean;\n  read?: boolean;\n  cleared?: boolean;\n}\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n  private tensors: TensorWithState[] = [];\n  private closed_ = false;\n  readonly idTensor: Tensor;\n  constructor(\n      readonly name: string, readonly dtype: DataType, private maxSize: number,\n      private elementShape: number[], readonly identicalElementShapes: boolean,\n      readonly dynamicSize: boolean, readonly clearAfterRead: boolean) {\n    this.idTensor = scalar(0);\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n\n  get closed() {\n    return this.closed_;\n  }\n\n  /**\n   * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n        tensor.tensor.dispose();\n      }\n    });\n    this.tensors = [];\n    this.closed_ = true;\n    this.idTensor.dispose();\n  }\n\n  size(): number {\n    return this.tensors.length;\n  }\n\n  /**\n   * Read the value at location index in the TensorArray.\n   * @param index Number the index to read from.\n   */\n  read(index: number): Tensor {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || index >= this.size()) {\n      throw new Error(`Tried to read from index ${index}, but array size is: ${\n          this.size()}`);\n    }\n\n    const tensorWithState = this.tensors[index];\n    if (tensorWithState.cleared) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not read index ${\n              index} twice because it was cleared after a previous read ` +\n          `(perhaps try setting clear_after_read = false?).`);\n    }\n\n    if (this.clearAfterRead) {\n      tensorWithState.cleared = true;\n    }\n\n    tensorWithState.read = true;\n    return tensorWithState.tensor;\n  }\n\n  /**\n   * Helper method to read multiple tensors from the specified indices.\n   */\n  readMany(indices: number[]): Tensor[] {\n    return indices.map(index => this.read(index));\n  }\n\n  /**\n   * Write value into the index of the TensorArray.\n   * @param index number the index to write to.\n   * @param tensor\n   */\n  write(index: number, tensor: Tensor) {\n    if (this.closed_) {\n      throw new Error(`TensorArray ${this.name} has already been closed.`);\n    }\n\n    if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n      throw new Error(`Tried to write to index ${\n          index}, but array is not resizeable and size is: ${this.maxSize}`);\n    }\n\n    const t = this.tensors[index] || {};\n\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray ${\n          this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${\n          tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n    }\n\n    // Set the shape for the first time write to unknow shape tensor array\n    if (this.size() === 0 &&\n        (this.elementShape == null || this.elementShape.length === 0)) {\n      this.elementShape = tensor.shape;\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape,\n        `TensorArray ${this.name}: Could not write to TensorArray index ${\n            index}.`);\n\n    if (t.read) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been read.`);\n    }\n\n    if (t.written) {\n      throw new Error(\n          `TensorArray ${this.name}: Could not write to TensorArray index ${\n              index}, because it has already been written.`);\n    }\n\n    t.tensor = tensor;\n    keep(tensor);\n    t.written = true;\n\n    this.tensors[index] = t;\n  }\n\n  /**\n   * Helper method to write multiple tensors to the specified indices.\n   */\n  writeMany(indices: number[], tensors: Tensor[]) {\n    if (indices.length !== tensors.length) {\n      throw new Error(\n          `TensorArray ${this.name}: could not write multiple tensors,` +\n          `because the index size: ${\n              indices.length} is not the same as tensors size: ${\n              tensors.length}.`);\n    }\n\n    indices.forEach((i, index) => this.write(i, tensors[index]));\n  }\n\n  /**\n   * Return selected values in the TensorArray as a packed Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size(). If not specified returns\n   *    all tensors in the original order.\n   * @param [dtype]\n   */\n  gather(indices?: number[], dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but gather requested dtype ${dtype}`);\n    }\n\n    if (!indices) {\n      indices = [];\n      for (let i = 0; i < this.size(); i++) {\n        indices.push(i);\n      }\n    } else {\n      indices = indices.slice(0, this.size());\n    }\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    // Read all the PersistentTensors into a vector to keep track of\n    // their memory.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n\n    return stack(tensors, 0);\n  }\n\n  /**\n   * Return the values in the TensorArray as a concatenated Tensor.\n   */\n  concat(dtype?: DataType): Tensor {\n    if (!!dtype && dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but concat requested dtype ${dtype}`);\n    }\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(this.elementShape));\n    }\n\n    const indices = [];\n    for (let i = 0; i < this.size(); i++) {\n      indices.push(i);\n    }\n    // Collect all the tensors from the tensors array.\n    const tensors = this.readMany(indices);\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensors[0].shape,\n        `TensorArray shape mismatch: tensor array shape (${\n            this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n\n    return concat(tensors, 0);\n  }\n\n  /**\n   * Scatter the values of a Tensor in specific indices of a TensorArray.\n   * @param indices nummber[] values in [0, max_value). If the\n   *    TensorArray is not dynamic, max_value=size().\n   * @param tensor Tensor input tensor.\n   */\n  scatter(indices: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n\n    if (indices.length !== tensor.shape[0]) {\n      throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n          indices.length} vs. ${tensor.shape[0]}`);\n    }\n\n    const maxIndex = Math.max(...indices);\n\n    if (!this.dynamicSize && maxIndex >= this.maxSize) {\n      throw new Error(\n          `Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n    }\n\n    this.writeMany(indices, unstack(tensor, 0));\n  }\n\n  /**\n   * Split the values of a Tensor into the TensorArray.\n   * @param length number[] with the lengths to use when splitting value along\n   *    its first dimension.\n   * @param tensor Tensor, the tensor to split.\n   */\n  split(length: number[], tensor: Tensor) {\n    if (tensor.dtype !== this.dtype) {\n      throw new Error(`TensorArray dtype is ${\n          this.dtype} but tensor has dtype ${tensor.dtype}`);\n    }\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n      totalLength += len;\n      return totalLength;\n    });\n\n    if (totalLength !== tensor.shape[0]) {\n      throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n\n    if (!this.dynamicSize && length.length !== this.maxSize) {\n      throw new Error(\n          `TensorArray's size is not equal to the size of lengths (${\n              this.maxSize} vs. ${length.length}), ` +\n          'and the TensorArray is not marked as dynamically resizeable');\n    }\n\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors: Tensor[] = [];\n    tidy(() => {\n      tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n      for (let i = 0; i < length.length; ++i) {\n        const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n        const indices = [0, previousLength, 0];\n        const sizes = [1, length[i], elementPerRow];\n        tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n      }\n      return tensors;\n    });\n    const indices = [];\n    for (let i = 0; i < length.length; i++) {\n      indices[i] = i;\n    }\n    this.writeMany(indices, tensors);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}