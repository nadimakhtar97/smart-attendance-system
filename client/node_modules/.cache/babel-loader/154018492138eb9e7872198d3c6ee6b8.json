{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from './Cast';\nimport { equal } from './Equal';\nimport { expandDims } from './ExpandDims';\nimport { multiply } from './Multiply';\nimport { pack } from './Pack';\nimport { sum } from './Sum';\nexport function unsortedSegmentSum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    segmentIds\n  } = inputs;\n  const {\n    numSegments\n  } = attrs;\n  assertNotComplex(x, 'unsortedSegmentSum');\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates = []; // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims({\n      inputs: {\n        input: $segmentIds\n      },\n      backend,\n      attrs: {\n        dim: i + 1\n      }\n    });\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i, 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask = equal({\n      inputs: {\n        a: segmentId,\n        b: $segmentIds\n      },\n      backend\n    });\n    const maskCasted = cast({\n      inputs: {\n        x: mask\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const mul = multiply({\n      inputs: {\n        a: maskCasted,\n        b: x\n      },\n      backend\n    });\n    const sumTensorInfo = sum({\n      inputs: {\n        x: mul\n      },\n      backend,\n      attrs: {\n        axis: 0,\n        keepDims: false\n      }\n    });\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({\n    inputs: res,\n    backend,\n    attrs: {\n      axis: 0\n    }\n  });\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum\n};","map":{"version":3,"mappings":"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","names":["UnsortedSegmentSum","util","assertNotComplex","cast","equal","expandDims","multiply","pack","sum","unsortedSegmentSum","args","inputs","backend","attrs","x","segmentIds","numSegments","xRank","shape","length","segmentIdsRank","res","intermediates","numIters","$segmentIds","i","expanded","input","dim","push","scalarValue","createScalarValue","segmentId","makeTensorInfo","mask","a","b","maskCasted","dtype","mul","sumTensorInfo","axis","keepDims","result","forEach","t","disposeIntermediateTensorInfo","unsortedSegmentSumConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/UnsortedSegmentSum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from './Cast';\nimport {equal} from './Equal';\nimport {expandDims} from './ExpandDims';\nimport {multiply} from './Multiply';\nimport {pack} from './Pack';\nimport {sum} from './Sum';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendCPU,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  assertNotComplex(x, 'unsortedSegmentSum');\n\n  const xRank = x.shape.length;\n  const segmentIdsRank = segmentIds.shape.length;\n  const res = [];\n  const intermediates: TensorInfo[] = [];\n\n  // Reshape the segment id's so that they can be broadcast with\n  // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n  const numIters = xRank - segmentIdsRank;\n  let $segmentIds = segmentIds;\n\n  for (let i = 0; i < numIters; ++i) {\n    const expanded = expandDims(\n        {inputs: {input: $segmentIds}, backend, attrs: {dim: i + 1}});\n    $segmentIds = expanded;\n    intermediates.push(expanded);\n  }\n\n  for (let i = 0; i < numSegments; ++i) {\n    const scalarValue = util.createScalarValue(i as {} as 'int32', 'int32');\n    const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n    const mask =\n        equal({inputs: {a: segmentId, b: $segmentIds}, backend}) as TensorInfo;\n    const maskCasted =\n        cast({inputs: {x: mask}, backend, attrs: {dtype: 'float32'}});\n    const mul =\n        multiply({inputs: {a: maskCasted, b: x}, backend}) as TensorInfo;\n    const sumTensorInfo =\n        sum({inputs: {x: mul}, backend, attrs: {axis: 0, keepDims: false}});\n    res.push(sumTensorInfo);\n    intermediates.push(segmentId);\n    intermediates.push(mask);\n    intermediates.push(maskCasted);\n    intermediates.push(mul);\n    intermediates.push(sumTensorInfo);\n  }\n\n  const result = pack({inputs: res, backend, attrs: {axis: 0}});\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'cpu',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}