{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { div } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    dim\n  } = attrs;\n  const logitsRank = logits.shape.length;\n  let $dim = dim;\n\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n\n  if ($dim !== logitsRank - 1) {\n    throw Error('Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {\n      x: logits\n    },\n    backend,\n    attrs: {\n      reductionIndices: axes,\n      keepDims: false\n    }\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n  const maxLogitReshaped = reshape({\n    inputs: {\n      x: maxLogit\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const a = sub({\n    inputs: {\n      a: logits,\n      b: maxLogitReshaped\n    },\n    backend\n  });\n  const b = exp({\n    inputs: {\n      x: a\n    },\n    backend\n  });\n  const sumExp = sum({\n    inputs: {\n      x: b\n    },\n    backend,\n    attrs: {\n      axis: axes,\n      keepDims: false\n    }\n  });\n  const sumReshaped = reshape({\n    inputs: {\n      x: sumExp\n    },\n    backend,\n    attrs: {\n      shape: expandedShape\n    }\n  });\n  const result = div({\n    inputs: {\n      a: b,\n      b: sumReshaped\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n  return result;\n}\nexport const softmaxConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAgDC,OAAhD,EAAkGC,IAAlG,QAA6G,uBAA7G;AAIA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,WAAlB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AAEA,OAAM,SAAUC,OAAV,CACFC,IADE,EAEuE;AAE3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAWH,MAAjB;AACA,QAAM;AAACI;AAAD,MAAQF,KAAd;AAEA,QAAMG,UAAU,GAAGF,MAAM,CAACG,KAAP,CAAaC,MAAhC;AAEA,MAAIC,IAAI,GAAGJ,GAAX;;AACA,MAAII,IAAI,KAAK,CAAC,CAAd,EAAiB;AACfA,QAAI,GAAGH,UAAU,GAAG,CAApB;AACD;;AACD,MAAIG,IAAI,KAAKH,UAAU,GAAG,CAA1B,EAA6B;AAC3B,UAAMI,KAAK,CACP,8DACA,mBAAmBJ,UAAU,gBAAgBG,IAAI,EAF1C,CAAX;AAGD;;AAED,QAAME,IAAI,GAAGnB,IAAI,CAACoB,cAAL,CAAoB,CAACH,IAAD,CAApB,EAA4BL,MAAM,CAACG,KAAnC,CAAb;AACA,QAAMM,QAAQ,GAAGnB,GAAG,CAAC;AACnBO,UAAM,EAAE;AAACa,OAAC,EAAEV;AAAJ,KADW;AAEnBF,WAFmB;AAGnBC,SAAK,EAAE;AAACY,sBAAgB,EAAEJ,IAAnB;AAAyBK,cAAQ,EAAE;AAAnC;AAHY,GAAD,CAApB;AAKA,QAAMC,aAAa,GAAG3B,YAAY,CAAC4B,oBAAb,CAAkCL,QAAQ,CAACN,KAA3C,EAAkDI,IAAlD,CAAtB;AAEA,QAAMQ,gBAAgB,GAClBvB,OAAO,CAAC;AAACK,UAAM,EAAE;AAACa,OAAC,EAAED;AAAJ,KAAT;AAAwBX,WAAxB;AAAiCC,SAAK,EAAE;AAACI,WAAK,EAAEU;AAAR;AAAxC,GAAD,CADX;AAEA,QAAMG,CAAC,GACHvB,GAAG,CAAC;AAACI,UAAM,EAAE;AAACmB,OAAC,EAAEhB,MAAJ;AAAYiB,OAAC,EAAEF;AAAf,KAAT;AAA2CjB;AAA3C,GAAD,CADP;AAEA,QAAMmB,CAAC,GAAG5B,GAAG,CAAC;AAACQ,UAAM,EAAE;AAACa,OAAC,EAAEM;AAAJ,KAAT;AAAiBlB;AAAjB,GAAD,CAAb;AACA,QAAMoB,MAAM,GACRxB,GAAG,CAAC;AAACG,UAAM,EAAE;AAACa,OAAC,EAAEO;AAAJ,KAAT;AAAiBnB,WAAjB;AAA0BC,SAAK,EAAE;AAACoB,UAAI,EAAEZ,IAAP;AAAaK,cAAQ,EAAE;AAAvB;AAAjC,GAAD,CADP;AAEA,QAAMQ,WAAW,GACb5B,OAAO,CAAC;AAACK,UAAM,EAAE;AAACa,OAAC,EAAEQ;AAAJ,KAAT;AAAsBpB,WAAtB;AAA+BC,SAAK,EAAE;AAACI,WAAK,EAAEU;AAAR;AAAtC,GAAD,CADX;AAGA,QAAMQ,MAAM,GAAG9B,GAAG,CAAC;AAACM,UAAM,EAAE;AAACmB,OAAC,EAAEC,CAAJ;AAAOA,OAAC,EAAEG;AAAV,KAAT;AAAiCtB;AAAjC,GAAD,CAAlB;AAEAA,SAAO,CAACwB,6BAAR,CAAsCb,QAAtC;AACAX,SAAO,CAACwB,6BAAR,CAAsCP,gBAAtC;AACAjB,SAAO,CAACwB,6BAAR,CAAsCN,CAAtC;AACAlB,SAAO,CAACwB,6BAAR,CAAsCL,CAAtC;AACAnB,SAAO,CAACwB,6BAAR,CAAsCJ,MAAtC;AACApB,SAAO,CAACwB,6BAAR,CAAsCF,WAAtC;AAEA,SAAOC,MAAP;AACD;AAED,OAAO,MAAME,aAAa,GAAiB;AACzCC,YAAU,EAAErC,OAD6B;AAEzCsC,aAAW,EAAE,KAF4B;AAGzCC,YAAU,EAAE/B;AAH6B,CAApC","names":["backend_util","Softmax","util","exp","max","div","reshape","sub","sum","softmax","args","inputs","backend","attrs","logits","dim","logitsRank","shape","length","$dim","Error","axes","parseAxisParam","maxLogit","x","reductionIndices","keepDims","expandedShape","expandShapeToKeepDim","maxLogitReshaped","a","b","sumExp","axis","sumReshaped","result","disposeIntermediateTensorInfo","softmaxConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Softmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Softmax, SoftmaxAttrs, SoftmaxInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {exp} from './Exp';\nimport {max} from './Max';\nimport {div} from './RealDiv';\nimport {reshape} from './Reshape';\nimport {sub} from './Sub';\nimport {sum} from './Sum';\n\nexport function softmax(\n    args:\n        {inputs: SoftmaxInputs, backend: MathBackendCPU, attrs: SoftmaxAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {dim} = attrs;\n\n  const logitsRank = logits.shape.length;\n\n  let $dim = dim;\n  if ($dim === -1) {\n    $dim = logitsRank - 1;\n  }\n  if ($dim !== logitsRank - 1) {\n    throw Error(\n        'Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${logitsRank} and dim was ${$dim}`);\n  }\n\n  const axes = util.parseAxisParam([$dim], logits.shape);\n  const maxLogit = max({\n    inputs: {x: logits},\n    backend,\n    attrs: {reductionIndices: axes, keepDims: false}\n  });\n  const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n\n  const maxLogitReshaped =\n      reshape({inputs: {x: maxLogit}, backend, attrs: {shape: expandedShape}});\n  const a =\n      sub({inputs: {a: logits, b: maxLogitReshaped}, backend}) as TensorInfo;\n  const b = exp({inputs: {x: a}, backend}) as TensorInfo;\n  const sumExp =\n      sum({inputs: {x: b}, backend, attrs: {axis: axes, keepDims: false}});\n  const sumReshaped =\n      reshape({inputs: {x: sumExp}, backend, attrs: {shape: expandedShape}});\n\n  const result = div({inputs: {a: b, b: sumReshaped}, backend}) as TensorInfo;\n\n  backend.disposeIntermediateTensorInfo(maxLogit);\n  backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n  backend.disposeIntermediateTensorInfo(a);\n  backend.disposeIntermediateTensorInfo(b);\n  backend.disposeIntermediateTensorInfo(sumExp);\n  backend.disposeIntermediateTensorInfo(sumReshaped);\n\n  return result;\n}\n\nexport const softmaxConfig: KernelConfig = {\n  kernelName: Softmax,\n  backendName: 'cpu',\n  kernelFunc: softmax as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}