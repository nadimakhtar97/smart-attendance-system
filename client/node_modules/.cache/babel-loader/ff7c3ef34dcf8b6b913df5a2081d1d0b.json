{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Cast':\n      {\n        return [tfOps.cast(getParamValue('x', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'ExpandDims':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfOps.expandDims(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'Squeeze':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfOps.squeeze(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'Reshape':\n      {\n        return [tfOps.reshape(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n\n    case 'MirrorPad':\n      {\n        return [tfOps.mirrorPad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('mode', node, tensorMap, context))];\n      }\n\n    case 'PadV2':\n    case 'Pad':\n      {\n        return [tfOps.pad(getParamValue('x', node, tensorMap, context), getParamValue('padding', node, tensorMap, context), getParamValue('constantValue', node, tensorMap, context))];\n      }\n\n    case 'SpaceToBatchND':\n      {\n        const blockShape = getParamValue('blockShape', node, tensorMap, context);\n        const paddings = getParamValue('paddings', node, tensorMap, context);\n        return [tfOps.spaceToBatchND(getParamValue('x', node, tensorMap, context), blockShape, paddings)];\n      }\n\n    case 'BatchToSpaceND':\n      {\n        const blockShape = getParamValue('blockShape', node, tensorMap, context);\n        const crops = getParamValue('crops', node, tensorMap, context);\n        return [tfOps.batchToSpaceND(getParamValue('x', node, tensorMap, context), blockShape, crops)];\n      }\n\n    case 'DepthToSpace':\n      {\n        const blockSize = getParamValue('blockSize', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        return [tfOps.depthToSpace(getParamValue('x', node, tensorMap, context), blockSize, dataFormat)];\n      }\n\n    case 'BroadcastTo':\n      {\n        return [tfOps.broadcastTo(getParamValue('x', node, tensorMap, context), getParamValue('shape', node, tensorMap, context))];\n      }\n\n    case 'BroadcastArgs':\n      {\n        return [tfOps.broadcastArgs(getParamValue('s0', node, tensorMap, context), getParamValue('s1', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'transformation';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","cast","axis","expandDims","squeeze","reshape","mirrorPad","pad","blockShape","paddings","spaceToBatchND","crops","batchToSpaceND","blockSize","dataFormat","toUpperCase","depthToSpace","broadcastTo","broadcastArgs","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/transformation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Cast': {\n          return [tfOps.cast(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('dtype', node, tensorMap, context) as 'int32' |\n                  'float32' | 'bool')];\n        }\n        case 'ExpandDims': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.expandDims(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Squeeze': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          return [tfOps.squeeze(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n\n        case 'Reshape': {\n          return [tfOps.reshape(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'MirrorPad': {\n          return [tfOps.mirrorPad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('mode', node, tensorMap, context) as 'reflect' |\n                  'symmetric')];\n        }\n        case 'PadV2':\n        case 'Pad': {\n          return [tfOps.pad(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('padding', node, tensorMap, context) as\n                  Array<[number, number]>,\n              getParamValue('constantValue', node, tensorMap, context) as\n                  number)];\n        }\n        case 'SpaceToBatchND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const paddings =\n              getParamValue('paddings', node, tensorMap, context) as number[][];\n          return [tfOps.spaceToBatchND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, paddings)];\n        }\n        case 'BatchToSpaceND': {\n          const blockShape =\n              getParamValue('blockShape', node, tensorMap, context) as number[];\n          const crops =\n              getParamValue('crops', node, tensorMap, context) as number[][];\n          return [tfOps.batchToSpaceND(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              blockShape, crops)];\n        }\n        case 'DepthToSpace': {\n          const blockSize =\n              getParamValue('blockSize', node, tensorMap, context) as number;\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as\n               string).toUpperCase() as 'NHWC' |\n              'NCHW';\n          return [tfOps.depthToSpace(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              blockSize, dataFormat)];\n        }\n        case 'BroadcastTo': {\n          return [tfOps.broadcastTo(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('shape', node, tensorMap, context) as number[])];\n        }\n        case 'BroadcastArgs': {\n          return [tfOps.broadcastArgs(\n              getParamValue('s0', node, tensorMap, context) as Tensor,\n              getParamValue('s1', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'transformation';\n"]},"metadata":{},"sourceType":"module"}