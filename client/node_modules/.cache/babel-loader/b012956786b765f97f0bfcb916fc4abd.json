{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function select(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    condition,\n    t,\n    e\n  } = inputs;\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n  const values = backend.data.get(condition.dataId).values;\n  const tValues = backend.data.get(t.dataId).values;\n  const eValues = backend.data.get(e.dataId).values;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues = util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n  let index = 0;\n  const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ? 1 : util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nexport const selectConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,MAAlC,EAAgFC,UAAhF,EAA4FC,IAA5F,QAAuG,uBAAvG;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAUC,MAAV,CAAiBC,IAAjB,EAAsE;AAE1E,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG,aAAD;AAAYC,KAAZ;AAAeC;AAAf,MAAoBJ,MAA1B;AAEAH,kBAAgB,CAAC,CAACK,SAAD,EAAYC,CAAZ,EAAeC,CAAf,CAAD,EAAoB,QAApB,CAAhB;AACA,QAAMC,aAAa,GAAGH,SAAS,CAACI,KAAV,CAAgBC,MAAtC;AAEA,QAAMC,MAAM,GAAGP,OAAO,CAACQ,IAAR,CAAaC,GAAb,CAAiBR,SAAS,CAACS,MAA3B,EAAmCH,MAAlD;AACA,QAAMI,OAAO,GAAGX,OAAO,CAACQ,IAAR,CAAaC,GAAb,CAAiBP,CAAC,CAACQ,MAAnB,EAA2BH,MAA3C;AACA,QAAMK,OAAO,GAAGZ,OAAO,CAACQ,IAAR,CAAaC,GAAb,CAAiBN,CAAC,CAACO,MAAnB,EAA2BH,MAA3C;AACA,QAAMM,WAAW,GAAGnB,UAAU,CAACQ,CAAC,CAACY,KAAH,EAAUX,CAAC,CAACW,KAAZ,CAA9B;AACA,QAAMC,SAAS,GACXpB,IAAI,CAACqB,mBAAL,CAAyBrB,IAAI,CAACsB,aAAL,CAAmBf,CAAC,CAACG,KAArB,CAAzB,EAAsDQ,WAAtD,CADJ;AAGA,MAAIK,KAAK,GAAG,CAAZ;AACA,QAAMC,MAAM,GACRf,aAAa,KAAK,CAAlB,IAAuBA,aAAa,GAAG,CAAvC,IAA4CF,CAAC,CAACG,KAAF,CAAQC,MAAR,KAAmB,CAA/D,GACA,CADA,GAEAX,IAAI,CAACsB,aAAL,CAAmBf,CAAC,CAACG,KAAF,CAAQe,KAAR,CAAc,CAAd,CAAnB,CAHJ;;AAKA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGd,MAAM,CAACD,MAA3B,EAAmCe,CAAC,EAApC,EAAwC;AACtC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/B,UAAIf,MAAM,CAACc,CAAD,CAAN,KAAc,CAAlB,EAAqB;AACnBN,iBAAS,CAACG,KAAK,EAAN,CAAT,GAAqBP,OAAO,CAACU,CAAD,CAA5B;AACD,OAFD,MAEO;AACLN,iBAAS,CAACG,KAAK,EAAN,CAAT,GAAqBN,OAAO,CAACS,CAAD,CAA5B;AACD;AACF;AACF;;AAED,SAAOrB,OAAO,CAACuB,cAAR,CAAuBrB,CAAC,CAACG,KAAzB,EAAgCQ,WAAhC,EAA6CE,SAA7C,CAAP;AACD;AAED,OAAO,MAAMS,YAAY,GAAiB;AACxCC,YAAU,EAAEhC,MAD4B;AAExCiC,aAAW,EAAE,KAF2B;AAGxCC,YAAU,EAAE9B;AAH4B,CAAnC","names":["Select","upcastType","util","assertNotComplex","select","args","inputs","backend","condition","t","e","conditionRank","shape","length","values","data","get","dataId","tValues","eValues","resultDtype","dtype","newValues","makeZerosTypedArray","sizeFromShape","index","offset","slice","i","j","makeTensorInfo","selectConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Select.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Select, SelectInputs, TensorInfo, TypedArray, upcastType, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function select(args: {inputs: SelectInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {condition, t, e} = inputs;\n\n  assertNotComplex([condition, t, e], 'select');\n  const conditionRank = condition.shape.length;\n\n  const values = backend.data.get(condition.dataId).values as TypedArray;\n  const tValues = backend.data.get(t.dataId).values as TypedArray;\n  const eValues = backend.data.get(e.dataId).values as TypedArray;\n  const resultDtype = upcastType(t.dtype, e.dtype);\n  const newValues =\n      util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n\n  let index = 0;\n  const offset =\n      conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n      1 :\n      util.sizeFromShape(t.shape.slice(1));\n\n  for (let i = 0; i < values.length; i++) {\n    for (let j = 0; j < offset; j++) {\n      if (values[i] === 1) {\n        newValues[index++] = tValues[i];\n      } else {\n        newValues[index++] = eValues[i];\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\n\nexport const selectConfig: KernelConfig = {\n  kernelName: Select,\n  backendName: 'cpu',\n  kernelFunc: select as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}