{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { matMul } from './mat_mul';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction dot_(t1, t2) {\n  const $t1 = convertToTensor(t1, 't1', 'dot');\n  const $t2 = convertToTensor(t2, 't2', 'dot');\n  util.assert(($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2), () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` + `${$t1.rank} and ${$t2.rank}.`);\n  const t1Inner = $t1.rank === 1 ? $t1.size : $t1.shape[1];\n  const t2Inner = $t2.rank === 1 ? $t2.size : $t2.shape[0];\n  util.assert(t1Inner === t2Inner, () => `Error in dot: inner dimensions of inputs must match, but got ` + `${t1Inner} and ${t2Inner}.`);\n\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, []);\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul($t1, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else {\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul($t1, t22D);\n    return t1t2;\n  }\n}\n\nexport const dot = op({\n  dot_\n});","map":{"version":3,"mappings":"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","names":["convertToTensor","util","matMul","op","reshape","dot_","t1","t2","$t1","$t2","assert","rank","t1Inner","size","shape","t2Inner","t12D","t22D","t1t2","dot"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/dot.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor,} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {matMul} from './mat_mul';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the dot product of two matrices and/or vectors, `t1` and `t2`.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor2d([[1, 2], [3, 4]]);\n * const c = tf.tensor2d([[1, 2, 3], [4, 5, 6]]);\n *\n * a.dot(b).print();  // or tf.dot(a, b)\n * b.dot(a).print();\n * b.dot(c).print();\n * ```\n * @param t1 The first tensor in the dot operation.\n * @param t2 The second tensor in the dot operation.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction dot_(t1: Tensor|TensorLike, t2: Tensor|TensorLike): Tensor {\n  const $t1 = convertToTensor(t1, 't1', 'dot');\n  const $t2 = convertToTensor(t2, 't2', 'dot');\n\n  util.assert(\n      ($t1.rank === 1 || $t1.rank === 2) && ($t2.rank === 1 || $t2.rank === 2),\n      () => `Error in dot: inputs must all be rank 1 or 2, but got ranks ` +\n          `${$t1.rank} and ${$t2.rank}.`);\n\n  const t1Inner = ($t1.rank === 1 ? $t1.size : $t1.shape[1]);\n  const t2Inner = ($t2.rank === 1 ? $t2.size : $t2.shape[0]);\n\n  util.assert(\n      t1Inner === t2Inner,\n      () => `Error in dot: inner dimensions of inputs must match, but got ` +\n          `${t1Inner} and ${t2Inner}.`);\n\n  if ($t1.rank === 1 && $t2.rank === 1) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, []);\n  } else if ($t1.rank === 1 && $t2.rank === 2) {\n    const t12D = reshape($t1, [1, -1]);\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul(t12D, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else if ($t1.rank === 2 && $t2.rank === 1) {\n    const t22D = reshape($t2, [-1, 1]);\n    const t1t2 = matMul($t1, t22D);\n    return reshape(t1t2, [t1t2.size]);\n  } else {\n    const t22D = reshape($t2, [$t2.shape[0], $t2.shape[1]]);\n    const t1t2 = matMul($t1, t22D);\n    return t1t2;\n  }\n}\n\nexport const dot = op({dot_});\n"]},"metadata":{},"sourceType":"module"}