{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadPackedProgram {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = ['x'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'value',\n      type: 'float'\n    }];\n    this.outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + xShape[i] + p[1]\n    /* afterPad */\n    );\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims = rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n    const componentSetup = [`${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `, rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`, rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`];\n    const paddingArea = rank === 1 ? 'rc < start || rc >= end' : 'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n\n    mainLoop += rank === 1 ? `} ` : `}}`;\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getChannels","getCoordsDataType","PadPackedProgram","constructor","xShape","paddings","constantValue","name","type","outputShape","map","p","i","rank","length","dtype","start","join","end","coords","source","cLimit","innerDims","slice","componentSetup","paddingArea","mainLoop","j","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/pad_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadPackedProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const coords = getChannels('rc', rank);\n    const source = getChannels('source', rank);\n    const cLimit = `${coords[rank - 1]} < ${this.outputShape[rank - 1]}`;\n    const innerDims =\n        rank === 1 ? 'source' : `vec2(${source.slice(-2).join()})`;\n\n    const componentSetup = [\n      `${dtype} rc = outputLoc;`, `${coords[rank - 1]} += 1;\n       if(${cLimit}) {\n      `,\n      rank === 1 ? '' : `}\n       rc = outputLoc;\n       ${coords[rank - 2]} += 1;\n       if(${coords[rank - 2]} < ${this.outputShape[rank - 2]}) {`,\n      rank === 1 ? '' : `  ${coords[rank - 1]} += 1;\n         if(${cLimit}) {`\n    ];\n\n    const paddingArea = rank === 1 ?\n        'rc < start || rc >= end' :\n        'any(lessThan(rc, start)) || any(greaterThanEqual(rc, end))';\n    let mainLoop = '';\n    for (let i = 0, j = rank === 1 ? 2 : 4; i < j; i++) {\n      mainLoop += `\n        ${componentSetup[i]}\n        if (${paddingArea}) {\n          result[${i}] = float(value);\n        } else {\n          ${dtype} source = rc - start;\n          result[${i}] = getChannel(getX(${source.join()}), ${innerDims});\n        }\n      `;\n    }\n    mainLoop += (rank === 1 ? `} ` : `}}`);\n\n    this.userCode = `\n      const ${dtype} start = ${dtype}(${start});\n      const ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outputLoc = getOutputCoords();\n        vec4 result = vec4(0.);\n        ${mainLoop}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}