{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { CropAndResize } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the boxInd[i]'th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction cropAndResize_(image, boxes, boxInd, cropSize) {\n  let method = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'bilinear';\n  let extrapolationValue = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;\n  const $image = convertToTensor(image, 'image', 'cropAndResize');\n  const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n  const numBoxes = $boxes.shape[0];\n  util.assert($image.rank === 4, () => 'Error in cropAndResize: image must be rank 4,' + `but got rank ${$image.rank}.`);\n  util.assert($boxes.rank === 2 && $boxes.shape[1] === 4, () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` + `but had shape ${$boxes.shape}.`);\n  util.assert($boxInd.rank === 1 && $boxInd.shape[0] === numBoxes, () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` + `but had shape ${$boxes.shape}.`);\n  util.assert(cropSize.length === 2, () => `Error in cropAndResize: cropSize must be of length 2, but got ` + `length ${cropSize.length}.`);\n  util.assert(cropSize[0] >= 1 && cropSize[1] >= 1, () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  util.assert(method === 'bilinear' || method === 'nearest', () => `method must be bilinear or nearest, but was ${method}`);\n  const inputs = {\n    image: $image,\n    boxes: $boxes,\n    boxInd: $boxInd\n  };\n  const attrs = {\n    method,\n    extrapolationValue,\n    cropSize\n  };\n  const res = ENGINE.runKernel(CropAndResize, inputs, attrs);\n  return res;\n}\n\nexport const cropAndResize = op({\n  cropAndResize_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,cAArB;AACA,SAAQC,aAAR,QAAqE,oBAArE;AAIA,SAAQC,eAAR,QAA8B,uBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;AAEA,SAAQC,EAAR,QAAiB,cAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,cAAT,CACIC,KADJ,EAEIC,KAFJ,EAGIC,MAHJ,EAIIC,QAJJ,EAM0B;AAAA,MADtBC,MACsB,uEADS,UACT;AAAA,MAAtBC,kBAAsB,uEAAD,CAAC;AAExB,QAAMC,MAAM,GAAGV,eAAe,CAACI,KAAD,EAAQ,OAAR,EAAiB,eAAjB,CAA9B;AACA,QAAMO,MAAM,GAAGX,eAAe,CAACK,KAAD,EAAQ,OAAR,EAAiB,eAAjB,EAAkC,SAAlC,CAA9B;AACA,QAAMO,OAAO,GAAGZ,eAAe,CAACM,MAAD,EAAS,QAAT,EAAmB,eAAnB,EAAoC,OAApC,CAA/B;AAEA,QAAMO,QAAQ,GAAGF,MAAM,CAACG,KAAP,CAAa,CAAb,CAAjB;AAEAb,MAAI,CAACc,MAAL,CACIL,MAAM,CAACM,IAAP,KAAgB,CADpB,EAEI,MAAM,kDACF,gBAAgBN,MAAM,CAACM,IAAI,GAHnC;AAIAf,MAAI,CAACc,MAAL,CACIJ,MAAM,CAACK,IAAP,KAAgB,CAAhB,IAAqBL,MAAM,CAACG,KAAP,CAAa,CAAb,MAAoB,CAD7C,EAEI,MAAM,oDAAoDD,QAAQ,MAA5D,GACF,iBAAiBF,MAAM,CAACG,KAAK,GAHrC;AAIAb,MAAI,CAACc,MAAL,CACIH,OAAO,CAACI,IAAR,KAAiB,CAAjB,IAAsBJ,OAAO,CAACE,KAAR,CAAc,CAAd,MAAqBD,QAD/C,EAEI,MAAM,qDAAqDA,QAAQ,IAA7D,GACF,iBAAiBF,MAAM,CAACG,KAAK,GAHrC;AAIAb,MAAI,CAACc,MAAL,CACIR,QAAQ,CAACU,MAAT,KAAoB,CADxB,EAEI,MAAM,mEACF,UAAUV,QAAQ,CAACU,MAAM,GAHjC;AAIAhB,MAAI,CAACc,MAAL,CACIR,QAAQ,CAAC,CAAD,CAAR,IAAe,CAAf,IAAoBA,QAAQ,CAAC,CAAD,CAAR,IAAe,CADvC,EAEI,MAAM,2CAA2CA,QAAQ,EAF7D;AAGAN,MAAI,CAACc,MAAL,CACIP,MAAM,KAAK,UAAX,IAAyBA,MAAM,KAAK,SADxC,EAEI,MAAM,+CAA+CA,MAAM,EAF/D;AAIA,QAAMU,MAAM,GACc;AAACd,SAAK,EAAEM,MAAR;AAAgBL,SAAK,EAAEM,MAAvB;AAA+BL,UAAM,EAAEM;AAAvC,GAD1B;AAEA,QAAMO,KAAK,GAAuB;AAACX,UAAD;AAASC,sBAAT;AAA6BF;AAA7B,GAAlC;AACA,QAAMa,GAAG,GAAGtB,MAAM,CAACuB,SAAP,CACRtB,aADQ,EACOmB,MADP,EAERC,KAFQ,CAAZ;AAGA,SAAOC,GAAP;AACD;;AAED,OAAO,MAAME,aAAa,GAAGpB,EAAE,CAAC;AAACC;AAAD,CAAD,CAAxB","names":["ENGINE","CropAndResize","convertToTensor","util","op","cropAndResize_","image","boxes","boxInd","cropSize","method","extrapolationValue","$image","$boxes","$boxInd","numBoxes","shape","assert","rank","length","inputs","attrs","res","runKernel","cropAndResize"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/image/crop_and_resize.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {CropAndResize, CropAndResizeAttrs, CropAndResizeInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor1D, Tensor2D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\n\n/**\n * Extracts crops from the input image tensor and resizes them using bilinear\n * sampling or nearest neighbor sampling (possibly with aspect ratio change)\n * to a common output size specified by cropSize.\n *\n * @param image 4d tensor of shape `[batch,imageHeight,imageWidth, depth]`,\n *     where imageHeight and imageWidth must be positive, specifying the\n *     batch of images from which to take crops\n * @param boxes 2d float32 tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the normalized\n *     coordinates of the box in the boxInd[i]'th image in the batch\n * @param boxInd 1d int32 tensor of shape `[numBoxes]` with values in range\n *     `[0, batch)` that specifies the image that the `i`-th box refers to.\n * @param cropSize 1d int32 tensor of 2 elements `[cropHeigh, cropWidth]`\n *     specifying the size to which all crops are resized to.\n * @param method Optional string from `'bilinear' | 'nearest'`,\n *     defaults to bilinear, which specifies the sampling method for resizing\n * @param extrapolationValue A threshold for deciding when to remove boxes based\n *     on score. Defaults to 0.\n * @return A 4D tensor of the shape `[numBoxes,cropHeight,cropWidth,depth]`\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction cropAndResize_(\n    image: Tensor4D|TensorLike,\n    boxes: Tensor2D|TensorLike,\n    boxInd: Tensor1D|TensorLike,\n    cropSize: [number, number],\n    method: 'bilinear'|'nearest' = 'bilinear',\n    extrapolationValue = 0,\n    ): Tensor4D {\n  const $image = convertToTensor(image, 'image', 'cropAndResize');\n  const $boxes = convertToTensor(boxes, 'boxes', 'cropAndResize', 'float32');\n  const $boxInd = convertToTensor(boxInd, 'boxInd', 'cropAndResize', 'int32');\n\n  const numBoxes = $boxes.shape[0];\n\n  util.assert(\n      $image.rank === 4,\n      () => 'Error in cropAndResize: image must be rank 4,' +\n          `but got rank ${$image.rank}.`);\n  util.assert(\n      $boxes.rank === 2 && $boxes.shape[1] === 4,\n      () => `Error in cropAndResize: boxes must be have size [${numBoxes},4] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      $boxInd.rank === 1 && $boxInd.shape[0] === numBoxes,\n      () => `Error in cropAndResize: boxInd must be have size [${numBoxes}] ` +\n          `but had shape ${$boxes.shape}.`);\n  util.assert(\n      cropSize.length === 2,\n      () => `Error in cropAndResize: cropSize must be of length 2, but got ` +\n          `length ${cropSize.length}.`);\n  util.assert(\n      cropSize[0] >= 1 && cropSize[1] >= 1,\n      () => `cropSize must be atleast [1,1], but was ${cropSize}`);\n  util.assert(\n      method === 'bilinear' || method === 'nearest',\n      () => `method must be bilinear or nearest, but was ${method}`);\n\n  const inputs:\n      CropAndResizeInputs = {image: $image, boxes: $boxes, boxInd: $boxInd};\n  const attrs: CropAndResizeAttrs = {method, extrapolationValue, cropSize};\n  const res = ENGINE.runKernel(\n      CropAndResize, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n  return res as Tensor4D;\n}\n\nexport const cropAndResize = op({cropAndResize_});\n"]},"metadata":{},"sourceType":"module"}