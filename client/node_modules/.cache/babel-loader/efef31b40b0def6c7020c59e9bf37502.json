{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImplCPU, bincountReduceImplCPU } from '../kernel_utils/shared';\nexport function denseBincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId);\n    const weightsVals = backend.readSync(weights.dataId);\n    const outVals = bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,aAAR,QAAuH,uBAAvH;AAGA,SAAQC,eAAR,EAAyBC,qBAAzB,QAAqD,wBAArD;AAEA,OAAM,SAAUC,aAAV,CAAwBC,IAAxB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC;AAAJ,MAAeJ,MAArB;AACA,QAAM;AAACK,QAAD;AAAOC;AAAP,MAAuBJ,KAA7B;;AAEA,MAAIC,CAAC,CAACI,KAAF,CAAQC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAMC,KAAK,GAAGR,OAAO,CAACS,QAAR,CAAiBP,CAAC,CAACQ,MAAnB,CAAd;AACA,UAAMC,WAAW,GAAGX,OAAO,CAACS,QAAR,CAAiBN,OAAO,CAACO,MAAzB,CAApB;AAEA,UAAME,OAAO,GACTjB,eAAe,CAACa,KAAD,EAAQG,WAAR,EAAqBR,OAAO,CAACU,KAA7B,EAAoCV,OAAO,CAACG,KAA5C,EAAmDF,IAAnD,CADnB;AAGA,WAAOJ,OAAO,CAACc,cAAR,CAAuB,CAACV,IAAD,CAAvB,EAA+BD,OAAO,CAACU,KAAvC,EAA8CD,OAA9C,CAAP;AACD,GARD,MAQO,IAAIV,CAAC,CAACI,KAAF,CAAQC,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,UAAMQ,IAAI,GAAGf,OAAO,CAACgB,UAAR,CAAmBd,CAAnB,CAAb;AACA,UAAMe,UAAU,GAAGjB,OAAO,CAACgB,UAAR,CAAmBb,OAAnB,CAAnB;AAEA,UAAMe,MAAM,GAAGtB,qBAAqB,CAACmB,IAAD,EAAOE,UAAP,EAAmBb,IAAnB,EAAyBC,YAAzB,CAApC;AAEA,WAAOL,OAAO,CAACc,cAAR,CAAuBI,MAAM,CAACZ,KAA9B,EAAqCH,OAAO,CAACU,KAA7C,EAAoDK,MAAM,CAACC,MAA3D,CAAP;AACD;;AAED,QAAM,IAAIC,KAAJ,CACF,uEACA,GAAGlB,CAAC,CAACI,KAAF,CAAQC,MAAM,GAFf,CAAN;AAGD;AAED,OAAO,MAAMc,mBAAmB,GAAiB;AAC/CC,YAAU,EAAE5B,aADmC;AAE/C6B,aAAW,EAAE,OAFkC;AAG/CC,YAAU,EAAE3B;AAHmC,CAA1C","names":["DenseBincount","bincountImplCPU","bincountReduceImplCPU","denseBincount","args","inputs","backend","attrs","x","weights","size","binaryOutput","shape","length","xVals","readSync","dataId","weightsVals","outVals","dtype","makeTensorInfo","xBuf","bufferSync","weightsBuf","outBuf","values","Error","denseBincountConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/DenseBincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {bincountImplCPU, bincountReduceImplCPU} from '../kernel_utils/shared';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendWebGL,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.readSync(x.dataId) as TypedArray;\n    const weightsVals = backend.readSync(weights.dataId) as TypedArray;\n\n    const outVals =\n        bincountImplCPU(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImplCPU(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'webgl',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}