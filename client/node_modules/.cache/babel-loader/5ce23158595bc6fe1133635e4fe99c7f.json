{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { mul } from '../ops/mul';\nimport { scalar } from '../ops/scalar';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { SGDOptimizer } from './sgd_optimizer';\n/** @doclink Optimizer */\n\nexport class MomentumOptimizer extends SGDOptimizer {\n  constructor(learningRate, momentum) {\n    let useNesterov = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super(learningRate);\n    this.learningRate = learningRate;\n    this.momentum = momentum;\n    this.useNesterov = useNesterov;\n    this.accumulations = [];\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients) {\n    const variableNames = Array.isArray(variableGradients) ? variableGradients.map(item => item.name) : Object.keys(variableGradients);\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n\n        if (this.useNesterov) {\n          newValue = add(mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    this.m.dispose();\n\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n\n\n  setMomentum(momentum) {\n    this.momentum = momentum;\n  }\n\n  async getWeights() {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n\n}\n/** @nocollapse */\n\nMomentumOptimizer.className = 'Momentum'; // Name matters for Python compatibility.\n\nregisterClass(MomentumOptimizer);","map":{"version":3,"mappings":"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","names":["ENGINE","dispose","tidy","add","mul","scalar","zerosLike","registerClass","SGDOptimizer","MomentumOptimizer","constructor","learningRate","momentum","useNesterov","m","applyGradients","variableGradients","variableNames","Array","isArray","map","item","name","Object","keys","forEach","i","value","registeredVariables","accumulations","trainable","originalName","variable","accumulation","gradient","tensor","newValue","newAccumulation","c","assign","incrementIterations","v","setMomentum","getWeights","saveIterations","concat","setWeights","weightValues","extractIterations","getConfig","fromConfig","cls","config"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/optimizers/momentum_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {mul} from '../ops/mul';\nimport {scalar} from '../ops/scalar';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Scalar, Tensor} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {OptimizerVariable} from './optimizer';\nimport {SGDOptimizer} from './sgd_optimizer';\n\n/** @doclink Optimizer */\nexport class MomentumOptimizer extends SGDOptimizer {\n  /** @nocollapse */\n  static className = 'Momentum';  // Name matters for Python compatibility.\n  private m: Scalar;\n  private accumulations: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, private momentum: number,\n      private useNesterov = false) {\n    super(learningRate);\n    this.m = scalar(this.momentum);\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const variableNames = Array.isArray(variableGradients) ?\n        variableGradients.map(item => item.name) :\n        Object.keys(variableGradients);\n\n    variableNames.forEach((name, i) => {\n      const value = ENGINE.registeredVariables[name];\n      if (this.accumulations[i] == null) {\n        const trainable = false;\n        this.accumulations[i] = {\n          originalName: `${name}/momentum`,\n          variable: tidy(() => zerosLike(value).variable(trainable))\n        };\n      }\n\n      const accumulation = this.accumulations[i].variable;\n      const gradient = Array.isArray(variableGradients) ?\n          variableGradients[i].tensor :\n          variableGradients[name];\n      if (gradient == null) {\n        return;\n      }\n\n      tidy(() => {\n        let newValue: Tensor;\n        const newAccumulation = add(mul(this.m, accumulation), gradient);\n        if (this.useNesterov) {\n          newValue = add(\n              mul(this.c, add(gradient, mul(newAccumulation, this.m))), value);\n        } else {\n          newValue = add(mul(this.c, newAccumulation), value);\n        }\n        accumulation.assign(newAccumulation);\n        value.assign(newValue);\n      });\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.m.dispose();\n    if (this.accumulations != null) {\n      dispose(this.accumulations.map(v => v.variable));\n    }\n  }\n\n  /**\n   * Sets the momentum of the optimizer.\n   *\n   * @param momentum\n   */\n  setMomentum(momentum: number) {\n    this.momentum = momentum;\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    return [await this.saveIterations()].concat(this.accumulations.map(\n        v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    const trainable = false;\n    this.accumulations = weightValues.map(\n        v => ({originalName: v.name, variable: v.tensor.variable(trainable)}));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'momentum': this.momentum,\n      'useNesterov': this.useNesterov\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['momentum'], config['useNesterov']);\n  }\n}\nregisterClass(MomentumOptimizer);\n"]},"metadata":{},"sourceType":"module"}