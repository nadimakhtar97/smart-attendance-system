{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class IORouterRegistry {\n  constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  static getInstance() {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n\n    return IORouterRegistry.instance;\n  }\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n\n\n  static registerSaveRouter(saveRouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n\n\n  static registerLoadRouter(loadRouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n\n\n  static getSaveHandlers(url) {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param loadOptions Optional, custom load options.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n\n\n  static getLoadHandlers(url, loadOptions) {\n    return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n  }\n\n  static getHandlers(url, handlerType, loadOptions) {\n    const validHandlers = [];\n    const routers = handlerType === 'load' ? IORouterRegistry.getInstance().loadRouters : IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, loadOptions);\n\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n\n}\nexport const registerSaveRouter = loudRouter => IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = loudRouter => IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = url => IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers = (url, loadOptions) => IORouterRegistry.getLoadHandlers(url, loadOptions);","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAsBA,OAAM,MAAOA,gBAAP,CAAuB;AAO3BC;AACE,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACD;;AAEyB,SAAXC,WAAW;AACxB,QAAIJ,gBAAgB,CAACK,QAAjB,IAA6B,IAAjC,EAAuC;AACrCL,sBAAgB,CAACK,QAAjB,GAA4B,IAAIL,gBAAJ,EAA5B;AACD;;AACD,WAAOA,gBAAgB,CAACK,QAAxB;AACD;AAED;;;;;;;;AAMyB,SAAlBC,kBAAkB,CAACC,UAAD,EAAqB;AAC5CP,oBAAgB,CAACI,WAAjB,GAA+BF,WAA/B,CAA2CM,IAA3C,CAAgDD,UAAhD;AACD;AAED;;;;;;;;AAMyB,SAAlBE,kBAAkB,CAACC,UAAD,EAAqB;AAC5CV,oBAAgB,CAACI,WAAjB,GAA+BD,WAA/B,CAA2CK,IAA3C,CAAgDE,UAAhD;AACD;AAED;;;;;;;;;;AAQsB,SAAfC,eAAe,CAACC,GAAD,EAAqB;AACzC,WAAOZ,gBAAgB,CAACa,WAAjB,CAA6BD,GAA7B,EAAkC,MAAlC,CAAP;AACD;AAED;;;;;;;;;;AAQsB,SAAfE,eAAe,CAACF,GAAD,EAAuBG,WAAvB,EAAgD;AAEpE,WAAOf,gBAAgB,CAACa,WAAjB,CAA6BD,GAA7B,EAAkC,MAAlC,EAA0CG,WAA1C,CAAP;AACD;;AAEyB,SAAXF,WAAW,CACtBD,GADsB,EACAI,WADA,EAEtBD,WAFsB,EAEG;AAC3B,UAAME,aAAa,GAAgB,EAAnC;AACA,UAAMC,OAAO,GAAGF,WAAW,KAAK,MAAhB,GACZhB,gBAAgB,CAACI,WAAjB,GAA+BD,WADnB,GAEZH,gBAAgB,CAACI,WAAjB,GAA+BF,WAFnC;AAGAgB,WAAO,CAACC,OAAR,CAAgBC,MAAM,IAAG;AACvB,YAAMC,OAAO,GAAGD,MAAM,CAACR,GAAD,EAAMG,WAAN,CAAtB;;AACA,UAAIM,OAAO,KAAK,IAAhB,EAAsB;AACpBJ,qBAAa,CAACT,IAAd,CAAmBa,OAAnB;AACD;AACF,KALD;AAMA,WAAOJ,aAAP;AACD;;AA9E0B;AAiF7B,OAAO,MAAMX,kBAAkB,GAAIgB,UAAD,IAC9BtB,gBAAgB,CAACM,kBAAjB,CAAoCgB,UAApC,CADG;AAEP,OAAO,MAAMb,kBAAkB,GAAIa,UAAD,IAC9BtB,gBAAgB,CAACS,kBAAjB,CAAoCa,UAApC,CADG;AAEP,OAAO,MAAMX,eAAe,GAAIC,GAAD,IAC3BZ,gBAAgB,CAACW,eAAjB,CAAiCC,GAAjC,CADG;AAEP,OAAO,MAAME,eAAe,GACxB,CAACF,GAAD,EAAuBG,WAAvB,KACIf,gBAAgB,CAACc,eAAjB,CAAiCF,GAAjC,EAAsCG,WAAtC,CAFD","names":["IORouterRegistry","constructor","saveRouters","loadRouters","getInstance","instance","registerSaveRouter","saveRouter","push","registerLoadRouter","loadRouter","getSaveHandlers","url","getHandlers","getLoadHandlers","loadOptions","handlerType","validHandlers","routers","forEach","router","handler","loudRouter"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/io/router_registry.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {IOHandler, LoadOptions} from './types';\n\nexport type IORouter = (url: string|string[], loadOptions?: LoadOptions) =>\n    IOHandler;\n\nexport class IORouterRegistry {\n  // Singleton instance.\n  private static instance: IORouterRegistry;\n\n  private saveRouters: IORouter[];\n  private loadRouters: IORouter[];\n\n  private constructor() {\n    this.saveRouters = [];\n    this.loadRouters = [];\n  }\n\n  private static getInstance(): IORouterRegistry {\n    if (IORouterRegistry.instance == null) {\n      IORouterRegistry.instance = new IORouterRegistry();\n    }\n    return IORouterRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerSaveRouter(saveRouter: IORouter) {\n    IORouterRegistry.getInstance().saveRouters.push(saveRouter);\n  }\n\n  /**\n   * Register a load-handler router.\n   *\n   * @param loadRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `load` method defined or `null`.\n   */\n  static registerLoadRouter(loadRouter: IORouter) {\n    IORouterRegistry.getInstance().loadRouters.push(loadRouter);\n  }\n\n  /**\n   * Look up IOHandler for saving, given a URL-like string.\n   *\n   * @param url\n   * @returns If only one match is found, an instance of IOHandler with the\n   * `save` method defined. If no match is found, `null`.\n   * @throws Error, if more than one match is found.\n   */\n  static getSaveHandlers(url: string|string[]): IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'save');\n  }\n\n  /**\n   * Look up IOHandler for loading, given a URL-like string.\n   *\n   * @param url\n   * @param loadOptions Optional, custom load options.\n   * @returns All valid handlers for `url`, given the currently registered\n   *   handler routers.\n   */\n  static getLoadHandlers(url: string|string[], loadOptions?: LoadOptions):\n      IOHandler[] {\n    return IORouterRegistry.getHandlers(url, 'load', loadOptions);\n  }\n\n  private static getHandlers(\n      url: string|string[], handlerType: 'save'|'load',\n      loadOptions?: LoadOptions): IOHandler[] {\n    const validHandlers: IOHandler[] = [];\n    const routers = handlerType === 'load' ?\n        IORouterRegistry.getInstance().loadRouters :\n        IORouterRegistry.getInstance().saveRouters;\n    routers.forEach(router => {\n      const handler = router(url, loadOptions);\n      if (handler !== null) {\n        validHandlers.push(handler);\n      }\n    });\n    return validHandlers;\n  }\n}\n\nexport const registerSaveRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerSaveRouter(loudRouter);\nexport const registerLoadRouter = (loudRouter: IORouter) =>\n    IORouterRegistry.registerLoadRouter(loudRouter);\nexport const getSaveHandlers = (url: string|string[]) =>\n    IORouterRegistry.getSaveHandlers(url);\nexport const getLoadHandlers =\n    (url: string|string[], loadOptions?: LoadOptions) =>\n        IORouterRegistry.getLoadHandlers(url, loadOptions);\n"]},"metadata":{},"sourceType":"module"}