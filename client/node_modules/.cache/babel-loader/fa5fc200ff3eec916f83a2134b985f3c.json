{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n/** Convenient class for storing tensor-related data. */\n\nexport class DataStorage {\n  constructor(backend, dataMover) {\n    this.backend = backend;\n    this.dataMover = dataMover;\n    this.data = new WeakMap();\n    this.dataIdsCount = 0;\n  }\n\n  get(dataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n\n    return this.data.get(dataId);\n  }\n\n  set(dataId, value) {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId) {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId) {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds() {\n    return this.dataIdsCount;\n  }\n\n}\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\n\nexport class KernelBackend {\n  refCount(dataId) {\n    return notYetImplemented('refCount');\n  }\n\n  incRef(dataId) {\n    return notYetImplemented('incRef');\n  }\n\n  timerAvailable() {\n    return true;\n  }\n\n  time(f) {\n    return notYetImplemented('time');\n  }\n\n  read(dataId) {\n    return notYetImplemented('read');\n  }\n\n  readSync(dataId) {\n    return notYetImplemented('readSync');\n  }\n\n  readToGPU(dataId, options) {\n    return notYetImplemented('readToGPU');\n  }\n\n  numDataIds() {\n    return notYetImplemented('numDataIds');\n  }\n\n  disposeData(dataId, force) {\n    return notYetImplemented('disposeData');\n  }\n\n  write(values, shape, dtype) {\n    return notYetImplemented('write');\n  }\n\n  move(dataId, values, shape, dtype, refCount) {\n    return notYetImplemented('move');\n  }\n\n  memory() {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n\n\n  floatPrecision() {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  dispose() {\n    return notYetImplemented('dispose');\n  }\n\n}\n\nfunction notYetImplemented(kernelName) {\n  throw new Error(`'${kernelName}' not yet implemented or not found in the registry. ` + `This kernel may not be supported by the tfjs backend you have chosen`);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,OAAO,MAAMA,eAAe,GAAG,IAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,IAAxB;AAuBP;;AACA,OAAM,MAAOC,WAAP,CAAkB;AAItBC,cAAoBC,OAApB,EAAoDC,SAApD,EAAwE;AAApD;AAAgC;AAH5C,gBAAO,IAAIC,OAAJ,EAAP;AACA,wBAAe,CAAf;AAEoE;;AAE5EC,KAAG,CAACC,MAAD,EAAe;AAChB,QAAI,CAAC,KAAKC,IAAL,CAAUC,GAAV,CAAcF,MAAd,CAAL,EAA4B;AAC1B,WAAKH,SAAL,CAAeM,QAAf,CAAwB,KAAKP,OAA7B,EAAsCI,MAAtC;AACD;;AACD,WAAO,KAAKC,IAAL,CAAUF,GAAV,CAAcC,MAAd,CAAP;AACD;;AAEDI,KAAG,CAACJ,MAAD,EAAiBK,KAAjB,EAAyB;AAC1B,SAAKC,YAAL;AACA,SAAKL,IAAL,CAAUG,GAAV,CAAcJ,MAAd,EAAsBK,KAAtB;AACD;;AAEDH,KAAG,CAACF,MAAD,EAAe;AAChB,WAAO,KAAKC,IAAL,CAAUC,GAAV,CAAcF,MAAd,CAAP;AACD;;AAEDO,QAAM,CAACP,MAAD,EAAe;AACnB,SAAKM,YAAL;AACA,WAAO,KAAKL,IAAL,CAAUM,MAAV,CAAiBP,MAAjB,CAAP;AACD;;AAEDQ,YAAU;AACR,WAAO,KAAKF,YAAZ;AACD;;AA7BqB;AA+CxB;;;;;;;AAMA,OAAM,MAAOG,aAAP,CAAoB;AACxBC,UAAQ,CAACV,MAAD,EAAe;AACrB,WAAOW,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AACDC,QAAM,CAACZ,MAAD,EAAe;AACnB,WAAOW,iBAAiB,CAAC,QAAD,CAAxB;AACD;;AACDE,gBAAc;AACZ,WAAO,IAAP;AACD;;AACDC,MAAI,CAACC,CAAD,EAAc;AAChB,WAAOJ,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACDK,MAAI,CAAChB,MAAD,EAAe;AACjB,WAAOW,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACDM,UAAQ,CAACjB,MAAD,EAAe;AACrB,WAAOW,iBAAiB,CAAC,UAAD,CAAxB;AACD;;AACDO,WAAS,CAAClB,MAAD,EAAiBmB,OAAjB,EAA2C;AAClD,WAAOR,iBAAiB,CAAC,WAAD,CAAxB;AACD;;AACDH,YAAU;AACR,WAAOG,iBAAiB,CAAC,YAAD,CAAxB;AACD;;AACDS,aAAW,CAACpB,MAAD,EAAiBqB,KAAjB,EAAgC;AACzC,WAAOV,iBAAiB,CAAC,aAAD,CAAxB;AACD;;AACDW,OAAK,CAACC,MAAD,EAAwBC,KAAxB,EAAyCC,KAAzC,EAAwD;AAC3D,WAAOd,iBAAiB,CAAC,OAAD,CAAxB;AACD;;AACDe,MAAI,CACA1B,MADA,EACgBuB,MADhB,EACuCC,KADvC,EACwDC,KADxD,EAEAf,QAFA,EAEgB;AAClB,WAAOC,iBAAiB,CAAC,MAAD,CAAxB;AACD;;AACDgB,QAAM;AACJ,WAAOhB,iBAAiB,CAAC,QAAD,CAAxB;AACD;AACD;;;AACAiB,gBAAc;AACZ,WAAOjB,iBAAiB,CAAC,gBAAD,CAAxB;AACD;AACD;;;AACAkB,SAAO;AACL,WAAO,KAAKD,cAAL,OAA0B,EAA1B,GAA+BpC,eAA/B,GAAiDC,eAAxD;AACD;;AACDqC,SAAO;AACL,WAAOnB,iBAAiB,CAAC,SAAD,CAAxB;AACD;;AAjDuB;;AAoD1B,SAASA,iBAAT,CAA2BoB,UAA3B,EAA6C;AAC3C,QAAM,IAAIC,KAAJ,CACF,IAAID,UAAU,sDAAd,GACA,sEAFE,CAAN;AAGD","names":["EPSILON_FLOAT32","EPSILON_FLOAT16","DataStorage","constructor","backend","dataMover","WeakMap","get","dataId","data","has","moveData","set","value","dataIdsCount","delete","numDataIds","KernelBackend","refCount","notYetImplemented","incRef","timerAvailable","time","f","read","readSync","readToGPU","options","disposeData","force","write","values","shape","dtype","move","memory","floatPrecision","epsilon","dispose","kernelName","Error"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/backends/backend.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Backend, DataId, DataToGPUOptions, GPUData} from '../tensor';\nimport {BackendValues, DataType} from '../types';\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\n// Required information for all backends.\nexport interface BackendTimingInfo {\n  kernelMs: number|{error: string};\n  getExtraProfileInfo?(): string;  // a field for additional timing information\n                                   // e.g. packing / unpacking for WebGL backend\n}\n\nexport interface TensorStorage {\n  read(dataId: DataId): Promise<BackendValues>;\n  readSync(dataId: DataId): BackendValues;\n  disposeData(dataId: DataId, force?: boolean): boolean;\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId;\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void;\n  memory(): {unreliable: boolean;};  // Backend-specific information.\n  /** Returns number of data ids currently in the storage. */\n  numDataIds(): number;\n  refCount(dataId: DataId): number;\n}\n\n/** Convenient class for storing tensor-related data. */\nexport class DataStorage<T> {\n  private data = new WeakMap<DataId, T>();\n  private dataIdsCount = 0;\n\n  constructor(private backend: KernelBackend, private dataMover: DataMover) {}\n\n  get(dataId: DataId) {\n    if (!this.data.has(dataId)) {\n      this.dataMover.moveData(this.backend, dataId);\n    }\n    return this.data.get(dataId);\n  }\n\n  set(dataId: DataId, value: T): void {\n    this.dataIdsCount++;\n    this.data.set(dataId, value);\n  }\n\n  has(dataId: DataId): boolean {\n    return this.data.has(dataId);\n  }\n\n  delete(dataId: DataId): boolean {\n    this.dataIdsCount--;\n    return this.data.delete(dataId);\n  }\n\n  numDataIds(): number {\n    return this.dataIdsCount;\n  }\n}\n\nexport interface DataMover {\n  /**\n   * To be called by backends whenever they see a dataId that they don't own.\n   * Upon calling this method, the mover will fetch the tensor from another\n   * backend and register it with the current active backend.\n   */\n  moveData(backend: KernelBackend, dataId: DataId): void;\n}\n\nexport interface BackendTimer {\n  // check if backend timer is available\n  timerAvailable(): boolean;\n  time(f: () => void): Promise<BackendTimingInfo>;\n}\n\n/**\n * The interface that defines the kernels that should be implemented when\n * adding a new backend. New backends don't need to implement every one of the\n * methods, this can be done gradually (throw an error for unimplemented\n * methods).\n */\nexport class KernelBackend implements TensorStorage, Backend, BackendTimer {\n  refCount(dataId: DataId): number {\n    return notYetImplemented('refCount');\n  }\n  incRef(dataId: DataId): void {\n    return notYetImplemented('incRef');\n  }\n  timerAvailable(): boolean {\n    return true;\n  }\n  time(f: () => void): Promise<BackendTimingInfo> {\n    return notYetImplemented('time');\n  }\n  read(dataId: object): Promise<BackendValues> {\n    return notYetImplemented('read');\n  }\n  readSync(dataId: object): BackendValues {\n    return notYetImplemented('readSync');\n  }\n  readToGPU(dataId: object, options?: DataToGPUOptions): GPUData {\n    return notYetImplemented('readToGPU');\n  }\n  numDataIds(): number {\n    return notYetImplemented('numDataIds');\n  }\n  disposeData(dataId: object, force?: boolean): boolean {\n    return notYetImplemented('disposeData');\n  }\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    return notYetImplemented('write');\n  }\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    return notYetImplemented('move');\n  }\n  memory(): {unreliable: boolean; reasons?: string[]} {\n    return notYetImplemented('memory');\n  }\n  /** Returns the highest precision for floats in bits (e.g. 16 or 32) */\n  floatPrecision(): 16|32 {\n    return notYetImplemented('floatPrecision');\n  }\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n  dispose(): void {\n    return notYetImplemented('dispose');\n  }\n}\n\nfunction notYetImplemented(kernelName: string): never {\n  throw new Error(\n      `'${kernelName}' not yet implemented or not found in the registry. ` +\n      `This kernel may not be supported by the tfjs backend you have chosen`);\n}\n"]},"metadata":{},"sourceType":"module"}