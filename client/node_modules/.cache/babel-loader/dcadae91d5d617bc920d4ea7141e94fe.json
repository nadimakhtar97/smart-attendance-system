{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nconst preluImpl = createSimpleBinaryKernelImpl((xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\nexport function prelu(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x,\n    alpha\n  } = inputs;\n  assertNotComplex([x, alpha], 'prelu');\n  const aVals = backend.data.get(x.dataId).values;\n  const bVals = backend.data.get(alpha.dataId).values;\n  const [resultData, resultShape] = preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\nexport const preluConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,KAAtB,QAAuE,uBAAvE;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,4BAAR,QAA2C,sBAA3C;AAEA,MAAMC,SAAS,GAAGD,4BAA4B,CAC1C,CAACE,MAAD,EAAiBC,MAAjB,KAAoCD,MAAM,GAAG,CAAT,GAAaC,MAAM,GAAGD,MAAtB,GAA+BA,MADzB,CAA9C;AAGA,OAAM,SAAUE,KAAV,CAAgBC,IAAhB,EAAoE;AAExE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG,KAAD;AAAIC;AAAJ,MAAaH,MAAnB;AAEAP,kBAAgB,CAAC,CAACS,CAAD,EAAIC,KAAJ,CAAD,EAAa,OAAb,CAAhB;AAEA,QAAMC,KAAK,GAAGH,OAAO,CAACI,IAAR,CAAaC,GAAb,CAAiBJ,CAAC,CAACK,MAAnB,EAA2BC,MAAzC;AACA,QAAMC,KAAK,GAAGR,OAAO,CAACI,IAAR,CAAaC,GAAb,CAAiBH,KAAK,CAACI,MAAvB,EAA+BC,MAA7C;AAEA,QAAM,CAACE,UAAD,EAAaC,WAAb,IACFhB,SAAS,CAACO,CAAC,CAACU,KAAH,EAAUT,KAAK,CAACS,KAAhB,EAAuBR,KAAvB,EAA8BK,KAA9B,EAAqC,SAArC,CADb;AAGA,SAAOR,OAAO,CAACY,cAAR,CAAuBF,WAAvB,EAAoC,SAApC,EAA+CD,UAA/C,CAAP;AACD;AAED,OAAO,MAAMI,WAAW,GAAiB;AACvCC,YAAU,EAAEvB,KAD2B;AAEvCwB,aAAW,EAAE,KAF0B;AAGvCC,YAAU,EAAEnB;AAH2B,CAAlC","names":["Prelu","assertNotComplex","createSimpleBinaryKernelImpl","preluImpl","xValue","aValue","prelu","args","inputs","backend","x","alpha","aVals","data","get","dataId","values","bVals","resultData","resultShape","shape","makeTensorInfo","preluConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Prelu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Prelu, PreluInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\n\nconst preluImpl = createSimpleBinaryKernelImpl(\n    (xValue: number, aValue: number) => xValue < 0 ? aValue * xValue : xValue);\n\nexport function prelu(args: {inputs: PreluInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x, alpha} = inputs;\n\n  assertNotComplex([x, alpha], 'prelu');\n\n  const aVals = backend.data.get(x.dataId).values as TypedArray;\n  const bVals = backend.data.get(alpha.dataId).values as TypedArray;\n\n  const [resultData, resultShape] =\n      preluImpl(x.shape, alpha.shape, aVals, bVals, 'float32');\n\n  return backend.makeTensorInfo(resultShape, 'float32', resultData);\n}\n\nexport const preluConfig: KernelConfig = {\n  kernelName: Prelu,\n  backendName: 'cpu',\n  kernelFunc: prelu,\n};\n"]},"metadata":{},"sourceType":"module"}