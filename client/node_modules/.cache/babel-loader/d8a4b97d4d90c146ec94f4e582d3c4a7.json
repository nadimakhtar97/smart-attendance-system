{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropFilterV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    filterShape\n  } = attrs;\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1\n  /* dilations */\n  , pad);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\nexport const conv3DBackpropFilterV2Config = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2\n};","map":{"version":3,"mappings":"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","names":["backend_util","Conv3DBackpropFilterV2","TensorBuffer","util","assertNotComplex","conv3DBackpropFilterV2","args","inputs","backend","attrs","x","dy","strides","pad","filterShape","xStrides","computeStrides","shape","dyStrides","convInfo","computeConv3DInfo","strideDepth","strideHeight","strideWidth","filterDepth","filterHeight","filterWidth","dw","dwValues","values","dwS0","dwS1","dwS2","dwS3","dyValues","data","get","dataId","dyS0","dyS1","dyS2","dyS3","xValues","xS0","xS1","xS2","xS3","frontPad","padInfo","front","leftPad","left","topPad","top","wF","yFMin","Math","max","ceil","yFMax","min","outDepth","inDepth","wOffset1","wR","yRMin","yRMax","outHeight","inHeight","wOffset2","wC","yCMin","yCMax","outWidth","inWidth","wOffset3","d1","inChannels","wOffset4","d2","outChannels","dotProd","b","batchSize","xOffset1","yOffset1","yF","xF","xOffset2","yOffset2","yR","xR","xOffset3","yOffset3","yC","xC","xOffset4","yOffset4","makeTensorInfo","dtype","conv3DBackpropFilterV2Config","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Conv3DBackpropFilterV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv3DBackpropFilterV2, Conv3DBackpropFilterV2Attrs, Conv3DBackpropFilterV2Inputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv3DBackpropFilterV2(args: {\n  inputs: Conv3DBackpropFilterV2Inputs,\n  backend: MathBackendCPU,\n  attrs: Conv3DBackpropFilterV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n\n  const xStrides = util.computeStrides(x.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  const convInfo = backend_util.computeConv3DInfo(\n      x.shape as [number, number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad);\n\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterDepth = convInfo.filterDepth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n\n  const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n  const dwValues = dw.values;\n  const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const [xS0, xS1, xS2, xS3] = xStrides;\n\n  const frontPad = convInfo.padInfo.front;\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n\n  for (let wF = 0; wF < filterDepth; ++wF) {\n    const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n    const yFMax = Math.min(\n        convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n    const wOffset1 = wF * dwS0;\n\n    for (let wR = 0; wR < filterHeight; ++wR) {\n      const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n      const yRMax = Math.min(\n          convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n      const wOffset2 = wR * dwS1 + wOffset1;\n\n      for (let wC = 0; wC < filterWidth; ++wC) {\n        const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n        const yCMax = Math.min(\n            convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n        const wOffset3 = wC * dwS2 + wOffset2;\n\n        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n          const wOffset4 = d1 * dwS3 + wOffset3;\n\n          for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n            let dotProd = 0;\n            for (let b = 0; b < convInfo.batchSize; ++b) {\n              const xOffset1 = b * xS0;\n              const yOffset1 = b * dyS0;\n\n              for (let yF = yFMin; yF < yFMax; ++yF) {\n                const xF = wF + yF * strideDepth - frontPad;\n                const xOffset2 = xF * xS1 + xOffset1;\n                const yOffset2 = yF * dyS1 + yOffset1;\n\n                for (let yR = yRMin; yR < yRMax; ++yR) {\n                  const xR = wR + yR * strideHeight - topPad;\n                  const xOffset3 = xR * xS2 + xOffset2;\n                  const yOffset3 = yR * dyS2 + yOffset2;\n\n                  for (let yC = yCMin; yC < yCMax; ++yC) {\n                    const xC = wC + yC * strideWidth - leftPad;\n                    const xOffset4 = xC * xS3 + xOffset3;\n                    const yOffset4 = yC * dyS3 + yOffset3;\n\n                    dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                  }\n                }\n              }\n            }\n            dwValues[wOffset4 + d2] = dotProd;\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\n\nexport const conv3DBackpropFilterV2Config: KernelConfig = {\n  kernelName: Conv3DBackpropFilterV2,\n  backendName: 'cpu',\n  kernelFunc: conv3DBackpropFilterV2 as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}