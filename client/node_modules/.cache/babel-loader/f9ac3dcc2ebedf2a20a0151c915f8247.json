{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, sumOutType, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { prodImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function prod(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n  let res;\n\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values;\n    const {\n      outVals,\n      outShape,\n      outDtype\n    } = prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: permutedX\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({\n      inputs: {\n        x: res\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\nexport const prodConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod\n};","map":{"version":3,"mappings":"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","names":["backend_util","Prod","sumOutType","util","reduce","prodImplCPU","reshape","transpose","prod","args","inputs","backend","attrs","x","axis","keepDims","xRank","shape","length","toDispose","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","permutedX","perm","getInnerMostAxes","push","assertAxesAreInnerMostDims","res","shouldExecuteOnCPU","xVals","texData","get","dataId","values","outVals","outShape","outDtype","dtype","makeTensorInfo","reduceShape","computeOutAndReduceShapes","inSize","sizeFromShape","a2D","outputDType","reduced","newShape","expandShapeToKeepDim","forEach","t","disposeIntermediateTensorInfo","prodConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Prod.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Prod, ProdAttrs, ProdInputs, sumOutType, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\nimport {prodImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function prod(\n    args: {inputs: ProdInputs, backend: MathBackendWebGL, attrs: ProdAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n  const toDispose = [];\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    toDispose.push(permutedX);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('prod', axes, xRank);\n\n  let res;\n  if (backend.shouldExecuteOnCPU([permutedX])) {\n    const xVals = backend.texData.get(permutedX.dataId).values as TypedArray;\n    const {outVals, outShape, outDtype} =\n        prodImplCPU(permutedX.shape, permutedX.dtype, xVals, axes);\n    res = backend.makeTensorInfo(outShape, outDtype, outVals);\n  } else {\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n    const outputDType = sumOutType(x.dtype);\n    const reduced = reduce(a2D, outputDType, 'prod', backend);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    toDispose.push(a2D);\n    toDispose.push(reduced);\n  }\n\n  if (keepDims) {\n    toDispose.push(res);\n    const newShape = backend_util.expandShapeToKeepDim(res.shape, origAxes);\n    res = reshape({inputs: {x: res}, backend, attrs: {shape: newShape}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return res;\n}\n\nexport const prodConfig: KernelConfig = {\n  kernelName: Prod,\n  backendName: 'webgl',\n  kernelFunc: prod as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}