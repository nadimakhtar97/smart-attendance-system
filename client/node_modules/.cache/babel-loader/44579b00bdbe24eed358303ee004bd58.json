{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV5(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    boxes,\n    scores\n  } = inputs;\n  const {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  } = attrs;\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n  const boxesVals = backend.data.get(boxes.dataId).values;\n  const scoresVals = backend.data.get(scores.dataId).values;\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n  const {\n    selectedIndices,\n    selectedScores\n  } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n  return [backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)), backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))];\n}\nexport const nonMaxSuppressionV5Config = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAgDC,mBAAhD,QAAuJ,uBAAvJ;AAEA,MAAMC,uBAAuB,GAAGF,YAAY,CAACE,uBAA7C;AAEA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAUC,mBAAV,CAA8BC,IAA9B,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,SAAD;AAAQC;AAAR,MAAkBJ,MAAxB;AACA,QAAM;AAACK,iBAAD;AAAgBC,gBAAhB;AAA8BC,kBAA9B;AAA8CC;AAA9C,MAA8DN,KAApE;AAEAL,kBAAgB,CAACM,KAAD,EAAQ,4BAAR,CAAhB;AAEA,QAAMM,SAAS,GAAGR,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBR,KAAK,CAACS,MAAvB,EAA+BC,MAAjD;AACA,QAAMC,UAAU,GAAGb,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBP,MAAM,CAACQ,MAAxB,EAAgCC,MAAnD;AAEA,QAAME,gBAAgB,GAAGV,aAAzB;AACA,QAAMW,eAAe,GAAGV,YAAxB;AACA,QAAMW,iBAAiB,GAAGV,cAA1B;AACA,QAAMW,eAAe,GAAGV,YAAxB;AAEA,QAAM;AAACW,mBAAD;AAAkBC;AAAlB,MAAoCxB,uBAAuB,CAC7Da,SAD6D,EAClDK,UADkD,EACtCC,gBADsC,EACpBC,eADoB,EAE7DC,iBAF6D,EAE1CC,eAF0C,CAAjE;AAIA,SAAO,CACLjB,OAAO,CAACoB,cAAR,CACI,CAACF,eAAe,CAACG,MAAjB,CADJ,EAC8B,OAD9B,EACuC,IAAIC,UAAJ,CAAeJ,eAAf,CADvC,CADK,EAGLlB,OAAO,CAACoB,cAAR,CACI,CAACD,cAAc,CAACE,MAAhB,CADJ,EAC6B,SAD7B,EACwC,IAAIE,YAAJ,CAAiBJ,cAAjB,CADxC,CAHK,CAAP;AAMD;AAED,OAAO,MAAMK,yBAAyB,GAAiB;AACrDC,YAAU,EAAE/B,mBADyC;AAErDgC,aAAW,EAAE,KAFwC;AAGrDC,YAAU,EAAE9B;AAHyC,CAAhD","names":["kernel_impls","NonMaxSuppressionV5","nonMaxSuppressionV5Impl","assertNotComplex","nonMaxSuppressionV5","args","inputs","backend","attrs","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","boxesVals","data","get","dataId","values","scoresVals","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedIndices","selectedScores","makeTensorInfo","length","Int32Array","Float32Array","nonMaxSuppressionV5Config","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/NonMaxSuppressionV5.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {kernel_impls, KernelConfig, KernelFunc, NonMaxSuppressionV5, NonMaxSuppressionV5Attrs, NonMaxSuppressionV5Inputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function nonMaxSuppressionV5(args: {\n  inputs: NonMaxSuppressionV5Inputs,\n  backend: MathBackendCPU,\n  attrs: NonMaxSuppressionV5Attrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {boxes, scores} = inputs;\n  const {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma} = attrs;\n\n  assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n\n  const boxesVals = backend.data.get(boxes.dataId).values as TypedArray;\n  const scoresVals = backend.data.get(scores.dataId).values as TypedArray;\n\n  const maxOutputSizeVal = maxOutputSize;\n  const iouThresholdVal = iouThreshold;\n  const scoreThresholdVal = scoreThreshold;\n  const softNmsSigmaVal = softNmsSigma;\n\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal,\n      scoreThresholdVal, softNmsSigmaVal);\n\n  return [\n    backend.makeTensorInfo(\n        [selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n    backend.makeTensorInfo(\n        [selectedScores.length], 'float32', new Float32Array(selectedScores))\n  ];\n}\n\nexport const nonMaxSuppressionV5Config: KernelConfig = {\n  kernelName: NonMaxSuppressionV5,\n  backendName: 'cpu',\n  kernelFunc: nonMaxSuppressionV5 as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}