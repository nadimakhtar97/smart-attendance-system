{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\n\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB) {\n  let errorMessagePrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n\n  util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\nexport function fullDefinedShape(elementShape) {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\n\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(`Tried to calculate elements of an empty list` + ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n\n  return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n  }\n\n  const result = [];\n\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["util","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","assert","length","i","dim0","dim1","fullDefinedShape","elementShape","some","dim","inferElementShape","listElementShape","tensors","partialShape","mergeElementShape","notfullDefinedShape","Error","forEach","tensor","shape","elementShapeA","elementShapeB","result"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/executor/tensor_utils.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\n\nimport {Tensor, util} from '@tensorflow/tfjs-core';\n\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(\n    shapeA: number|number[], shapeB: number|number[],\n    errorMessagePrefix = ''): void {\n  // constant shape means unknown rank\n  if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n    return;\n  }\n  util.assert(\n      shapeA.length === shapeB.length,\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  for (let i = 0; i < shapeA.length; i++) {\n    const dim0 = shapeA[i];\n    const dim1 = shapeB[i];\n    util.assert(\n        dim0 < 0 || dim1 < 0 || dim0 === dim1,\n        () =>\n            errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n  }\n}\n\nexport function fullDefinedShape(elementShape: number|number[]): boolean {\n  if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n    return false;\n  }\n  return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(\n    listElementShape: number|number[], tensors: Tensor[],\n    elementShape: number|number[]): number[] {\n  let partialShape = mergeElementShape(listElementShape, elementShape);\n  const notfullDefinedShape = !fullDefinedShape(partialShape);\n  if (notfullDefinedShape && tensors.length === 0) {\n    throw new Error(\n        `Tried to calculate elements of an empty list` +\n        ` with non-fully-defined elementShape: ${partialShape}`);\n  }\n  if (notfullDefinedShape) {\n    tensors.forEach(tensor => {\n      partialShape = mergeElementShape(tensor.shape, partialShape);\n    });\n  }\n  if (!fullDefinedShape(partialShape)) {\n    throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n  }\n  return partialShape as number[];\n}\n\nexport function mergeElementShape(\n    elementShapeA: number|number[], elementShapeB: number|number[]): number|\n    number[] {\n  if (typeof elementShapeA === 'number') {\n    return elementShapeB;\n  }\n  if (typeof elementShapeB === 'number') {\n    return elementShapeA;\n  }\n\n  if (elementShapeA.length !== elementShapeB.length) {\n    throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${\n        elementShapeB}`);\n  }\n\n  const result: number[] = [];\n  for (let i = 0; i < elementShapeA.length; ++i) {\n    const dim0 = elementShapeA[i];\n    const dim1 = elementShapeB[i];\n    if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n      throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${\n          elementShapeB}`);\n    }\n    result[i] = dim0 >= 0 ? dim0 : dim1;\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}