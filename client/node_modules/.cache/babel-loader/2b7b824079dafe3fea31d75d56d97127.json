{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util_base';\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\n\nexport function decodeEinsumEquation(equation, numTensors) {\n  equation = equation.replace(/\\s/g, ''); // Remove witespace in equation.\n\n  const numArrows = (equation.length - equation.replace(ARROW_REGEX, '').length) / ARROW.length;\n\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(inputString.indexOf(ELLIPSIS) === -1, () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n\n  if (numTensors !== numInputs) {\n    throw new Error(`Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n\n  if (numInputs > 2) {\n    throw new Error('Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims = [];\n\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(`Output subscripts contain the label ${dimName} ` + `not present in the input subscripts.`);\n    }\n\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims = new Array(inputTerms.length);\n\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(`Found duplicate axes in input component ${inputTerms[i]}. ` + `Support for duplicate axes in input is not implemented yet.`);\n    }\n\n    idDims[i] = [];\n\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length; // Number of unique dimensions.\n\n  const numOutDims = outputString.length; // Number of output dimensions.\n\n  const summedDims = []; // Dimensions being summed over.\n\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n\n  return {\n    allDims,\n    summedDims,\n    idDims\n  };\n}\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\n\nexport function getEinsumPermutation(nDims, idDims) {\n  let permutationIndices = new Array(nDims);\n  permutationIndices.fill(-1);\n\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n\n  const expandDims = [];\n\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {\n    permutationIndices,\n    expandDims\n  };\n}\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\n\nexport function checkEinsumDimSizes(nDims, idDims, tensors) {\n  const dimSizes = new Array(nDims);\n\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape = tensors[i].shape;\n\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(dimSizes[idDims[i][j]] === shape[j], () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` + `of input shaped ${JSON.stringify(shape)}, ` + `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\n\nexport function getEinsumComputePath(summedDims, idDims) {\n  const path = summedDims;\n  const steps = [];\n  let nSteps = 0;\n\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n\n  nSteps = summedDims.length + 1;\n\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n\n  const computedTermIndices = [];\n\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n\n  return {\n    path,\n    steps\n  };\n}\n/** Determines if an axes permutation is the identity permutation. */\n\nexport function isIdentityPermutation(perm) {\n  return perm.every((dim, index) => dim === index);\n}\n\nfunction findTermsWithDim(idDims, dim) {\n  const termIndices = [];\n\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n\n  return termIndices;\n}","map":{"version":3,"mappings":"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","names":["assert","ARROW","ARROW_REGEX","COMMA","ELLIPSIS","decodeEinsumEquation","equation","numTensors","replace","numArrows","length","Error","inputString","outputString","split","indexOf","inputTerms","numInputs","allDims","i","dimName","some","inputTerm","push","idDims","Array","Set","size","j","numDims","numOutDims","summedDims","getEinsumPermutation","nDims","permutationIndices","fill","expandDims","filter","d","checkEinsumDimSizes","tensors","dimSizes","shape","undefined","JSON","stringify","getEinsumComputePath","path","steps","nSteps","computedTermIndices","summedDim","termIndices","findTermsWithDim","termIndex","isIdentityPermutation","perm","every","dim","index"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/backends/einsum_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Utility functions for computing einsum (tensor contraction and summation\n * based on Einstein summation.)\n */\n\nimport {Tensor} from '../tensor';\nimport {assert} from '../util_base';\n\nconst ARROW = '->';\nconst ARROW_REGEX = /->/g;\nconst COMMA = ',';\nconst ELLIPSIS = '...';\n\n/**\n * Parse an equation for einsum.\n *\n * @param equation The einsum equation (e.g., \"ij,jk->ik\").\n * @param numTensors Number of tensors provided along with `equation`. Used to\n *   check matching number of input tensors.\n * @returns An object consisting of the following fields:\n *   - allDims: all dimension names as strings.\n *   - summedDims: a list of all dimensions being summed over, as indices to\n *     the elements of `allDims`.\n *   - idDims: indices of the dimensions in each input tensor, as indices to\n *     the elements of `allDims.\n */\nexport function decodeEinsumEquation(equation: string, numTensors: number): {\n  allDims: string[],\n  summedDims: number[],\n  idDims: number[][],\n} {\n  equation = equation.replace(/\\s/g, '');  // Remove witespace in equation.\n  const numArrows =\n      (equation.length - equation.replace(ARROW_REGEX, '').length) /\n      ARROW.length;\n  if (numArrows < 1) {\n    throw new Error('Equations without an arrow are not supported.');\n  } else if (numArrows > 1) {\n    throw new Error(`Equation must contain exactly one arrow (\"${ARROW}\").`);\n  }\n  const [inputString, outputString] = equation.split(ARROW);\n  assert(\n      inputString.indexOf(ELLIPSIS) === -1,\n      () => `The ellipsis notation (\"${ELLIPSIS}\") is not supported yet.`);\n  const inputTerms = inputString.split(COMMA);\n  const numInputs = inputTerms.length;\n  if (numTensors !== numInputs) {\n    throw new Error(\n        `Expected ${numInputs} input tensors, received ${numTensors}`);\n  }\n  if (numInputs > 2) {\n    throw new Error(\n        'Support for more than 2 input tensors is not implemented yet.');\n  }\n\n  const allDims: string[] = [];\n  for (let i = 0; i < outputString.length; ++i) {\n    const dimName = outputString[i];\n    if (!inputTerms.some(inputTerm => inputTerm.indexOf(dimName) !== -1)) {\n      throw new Error(\n          `Output subscripts contain the label ${dimName} ` +\n          `not present in the input subscripts.`);\n    }\n    if (allDims.indexOf(dimName) === -1) {\n      allDims.push(dimName);\n    }\n  }\n  for (let i = 0; i < inputString.length; ++i) {\n    const dimName = inputString[i];\n    if (allDims.indexOf(dimName) === -1 && dimName !== COMMA) {\n      allDims.push(dimName);\n    }\n  }\n\n  const idDims: number[][] = new Array<number[]>(inputTerms.length);\n  for (let i = 0; i < numInputs; ++i) {\n    if (new Set(inputTerms[i].split('')).size !== inputTerms[i].length) {\n      throw new Error(\n          `Found duplicate axes in input component ${inputTerms[i]}. ` +\n          `Support for duplicate axes in input is not implemented yet.`);\n    }\n    idDims[i] = [];\n    for (let j = 0; j < inputTerms[i].length; ++j) {\n      idDims[i].push(allDims.indexOf(inputTerms[i][j]));\n    }\n  }\n\n  const numDims = allDims.length;          // Number of unique dimensions.\n  const numOutDims = outputString.length;  // Number of output dimensions.\n  const summedDims: number[] = [];         // Dimensions being summed over.\n  for (let i = numOutDims; i < numDims; ++i) {\n    summedDims.push(i);\n  }\n  return {allDims, summedDims, idDims};\n}\n\n/**\n * Get the permutation for a given input tensor.\n *\n * @param nDims Total number of dimension of all tensors involved in the einsum\n *   operation.\n * @param idDims Dimension indices involve in the tensor in question.\n * @returns An object consisting of the following fields:\n *   - permutationIndices: Indices to permute the axes of the tensor with.\n *   - expandDims: Indices to the dimension that need to be expanded from the\n *     tensor after permutation.\n */\nexport function getEinsumPermutation(nDims: number, idDims: number[]):\n    {permutationIndices: number[], expandDims: number[]} {\n  let permutationIndices: number[] = new Array<number>(nDims);\n  permutationIndices.fill(-1);\n  for (let i = 0; i < idDims.length; ++i) {\n    permutationIndices[idDims[i]] = i;\n  }\n  const expandDims: number[] = [];\n  for (let i = 0; i < nDims; ++i) {\n    if (permutationIndices[i] === -1) {\n      expandDims.push(i);\n    }\n  }\n  permutationIndices = permutationIndices.filter(d => d !== -1);\n  return {permutationIndices, expandDims};\n}\n\n/**\n * Checks that the dimension sizes from different input tensors match the\n * equation.\n */\nexport function checkEinsumDimSizes(\n    nDims: number, idDims: number[][], tensors: Tensor[]) {\n  const dimSizes: number[] = new Array<number>(nDims);\n  for (let i = 0; i < tensors.length; ++i) {\n    const shape: number[] = tensors[i].shape;\n    for (let j = 0; j < idDims[i].length; ++j) {\n      if (dimSizes[idDims[i][j]] === undefined) {\n        dimSizes[idDims[i][j]] = shape[j];\n      } else {\n        assert(\n            dimSizes[idDims[i][j]] === shape[j],\n            () => `Expected dimension ${dimSizes[idDims[i][j]]} at axis ${j} ` +\n                `of input shaped ${JSON.stringify(shape)}, ` +\n                `but got dimension ${shape[j]}`);\n      }\n    }\n  }\n}\n\n/**\n * Gets path of computation for einsum.\n *\n * @param summedDims indices to the dimensions being summed over.\n * @param idDims A look up table for the dimensions present in each input\n *     tensor. Each consituent array contains indices for the dimensions in the\n *     corresponding input tensor.\n *\n * @return A map with two fields:\n *   - path: The path of computation, with each element indicating the dimension\n *     being summed over after the element-wise multiplication in that step.\n *   - steps: With the same length as `path`. Each element contains the indices\n *     to the input tensors being used for element-wise multiplication in the\n *     corresponding step.\n */\nexport function getEinsumComputePath(summedDims: number[], idDims: number[][]):\n    {path: number[], steps: number[][]} {\n  const path: number[] = summedDims;\n  const steps: number[][] = [];\n  let nSteps = 0;\n  if (summedDims.length === 0) {\n    // Einsum that involes no summing: e.g., transpose and outer product.\n    path.push(-1);\n  }\n  nSteps = summedDims.length + 1;\n  for (let i = 0; i < nSteps; ++i) {\n    steps.push([]);\n  }\n  const computedTermIndices: number[] = [];\n  for (let i = 0; i < path.length; ++i) {\n    const summedDim = path[i];\n    const termIndices = findTermsWithDim(idDims, summedDim);\n    for (const termIndex of termIndices) {\n      if (computedTermIndices.indexOf(termIndex) === -1) {\n        steps[i].push(termIndex);\n        computedTermIndices.push(termIndex);\n      }\n    }\n  }\n  return {path, steps};\n}\n\n/** Determines if an axes permutation is the identity permutation. */\nexport function isIdentityPermutation(perm: number[]): boolean {\n  return perm.every((dim: number, index: number) => dim === index);\n}\n\nfunction findTermsWithDim(idDims: number[][], dim: number): number[] {\n  const termIndices: number[] = [];\n  for (let i = 0; i < idDims.length; ++i) {\n    if (idDims[i].length === 0 || idDims[i].indexOf(dim) !== -1 || dim === -1) {\n      termIndices.push(i);\n    }\n  }\n  return termIndices;\n}\n"]},"metadata":{},"sourceType":"module"}