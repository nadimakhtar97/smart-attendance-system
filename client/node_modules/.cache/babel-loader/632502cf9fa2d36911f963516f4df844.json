{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { isPromise } from '../util';\nexport const OP_SCOPE_SUFFIX = '__op';\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\n\nexport function op(f) {\n  const keys = Object.keys(f);\n\n  if (keys.length !== 1) {\n    throw new Error(`Please provide an object with a single key ` + `(operation name) mapping to a function. Got an object with ` + `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName]; // Strip the underscore from the end of the function name.\n\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  } // add an __op suffix to distinguish ops from kernels in tf.profile\n\n\n  opName = opName + OP_SCOPE_SUFFIX; // tslint:disable-next-line:no-any\n\n  const f2 = function () {\n    ENGINE.startScope(opName);\n\n    try {\n      const result = fn(...arguments);\n\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n\n  Object.defineProperty(f2, 'name', {\n    value: opName,\n    configurable: true\n  }); // tslint:disable-next-line:no-any\n\n  return f2;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,SAAR,QAAwB,SAAxB;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAxB;AAEP;;;;;;AAKA,OAAM,SAAUC,EAAV,CAAiCC,CAAjC,EAAuD;AAC3D,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYD,CAAZ,CAAb;;AACA,MAAIC,IAAI,CAACE,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CACF,gDACA,6DADA,GAEA,GAAGH,IAAI,CAACE,MAAM,QAHZ,CAAN;AAID;;AAED,MAAIE,MAAM,GAAGJ,IAAI,CAAC,CAAD,CAAjB;AACA,QAAMK,EAAE,GAAGN,CAAC,CAACK,MAAD,CAAZ,CAV2D,CAY3D;;AACA,MAAIA,MAAM,CAACE,QAAP,CAAgB,GAAhB,CAAJ,EAA0B;AACxBF,UAAM,GAAGA,MAAM,CAACG,SAAP,CAAiB,CAAjB,EAAoBH,MAAM,CAACF,MAAP,GAAgB,CAApC,CAAT;AACD,GAf0D,CAiB3D;;;AACAE,QAAM,GAAGA,MAAM,GAAGP,eAAlB,CAlB2D,CAoB3D;;AACA,QAAMW,EAAE,GAAG,YAAmB;AAC5Bb,UAAM,CAACc,UAAP,CAAkBL,MAAlB;;AACA,QAAI;AACF,YAAMM,MAAM,GAAGL,EAAE,CAAC,YAAD,CAAjB;;AACA,UAAIT,SAAS,CAACc,MAAD,CAAb,EAAuB;AACrBC,eAAO,CAACC,KAAR,CAAc,yCAAd;AACD;;AACDjB,YAAM,CAACkB,QAAP,CAAgBH,MAAhB;AACA,aAAOA,MAAP;AACD,KAPD,CAOE,OAAOI,EAAP,EAAW;AACXnB,YAAM,CAACkB,QAAP,CAAgB,IAAhB;AACA,YAAMC,EAAN;AACD;AACF,GAbD;;AAcAb,QAAM,CAACc,cAAP,CAAsBP,EAAtB,EAA0B,MAA1B,EAAkC;AAACQ,SAAK,EAAEZ,MAAR;AAAgBa,gBAAY,EAAE;AAA9B,GAAlC,EAnC2D,CAqC3D;;AACA,SAAOT,EAAP;AACD","names":["ENGINE","isPromise","OP_SCOPE_SUFFIX","op","f","keys","Object","length","Error","opName","fn","endsWith","substring","f2","startScope","result","console","error","endScope","ex","defineProperty","value","configurable"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/operation.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {isPromise} from '../util';\n\nexport const OP_SCOPE_SUFFIX = '__op';\n\n/**\n * Used for wrapping functions that perform math operations on\n * Tensors. The function will be wrapped in a named scope that cleans all\n * memory usage after the function is done.\n */\nexport function op<T extends Function>(f: {[name: string]: T}): T {\n  const keys = Object.keys(f);\n  if (keys.length !== 1) {\n    throw new Error(\n        `Please provide an object with a single key ` +\n        `(operation name) mapping to a function. Got an object with ` +\n        `${keys.length} keys.`);\n  }\n\n  let opName = keys[0];\n  const fn = f[opName];\n\n  // Strip the underscore from the end of the function name.\n  if (opName.endsWith('_')) {\n    opName = opName.substring(0, opName.length - 1);\n  }\n\n  // add an __op suffix to distinguish ops from kernels in tf.profile\n  opName = opName + OP_SCOPE_SUFFIX;\n\n  // tslint:disable-next-line:no-any\n  const f2 = (...args: any[]) => {\n    ENGINE.startScope(opName);\n    try {\n      const result = fn(...args);\n      if (isPromise(result)) {\n        console.error('Cannot return a Promise inside of tidy.');\n      }\n      ENGINE.endScope(result);\n      return result;\n    } catch (ex) {\n      ENGINE.endScope(null);\n      throw ex;\n    }\n  };\n  Object.defineProperty(f2, 'name', {value: opName, configurable: true});\n\n  // tslint:disable-next-line:no-any\n  return f2 as any as T;\n}\n"]},"metadata":{},"sourceType":"module"}