{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropInput } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\nfunction conv2DBackpropInput_(xShape, dy, filter, strides, pad) {\n  let dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NHWC';\n  let dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n  let xShape4D = xShape;\n  let dy4D = dy;\n  let reshapedTo4D = false;\n\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(xShape4D.length === 4, () => `Error in conv2dDerInput: inShape must be length 4, but got length ` + `${xShape4D.length}.`);\n  util.assert(dy4D.rank === 4, () => `Error in conv2dDerInput: dy must be rank 4, but got ` + `rank ${dy4D.rank}`);\n  util.assert(filter.rank === 4, () => `Error in conv2dDerInput: filter must be rank 4, but got ` + `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filter.shape[2], () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(outDepth === filter.shape[3], () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[3]}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);\n  const inputs = {\n    dy: dy4D,\n    filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    inputShape: xShape4D\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(Conv2DBackpropInput, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const conv2DBackpropInput = op({\n  conv2DBackpropInput_\n});","map":{"version":3,"mappings":"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","names":["ENGINE","Conv2DBackpropInput","util","conv_util","op","reshape","conv2DBackpropInput_","xShape","dy","filter","strides","pad","dataFormat","dimRoundingMode","assert","length","rank","xShape4D","dy4D","reshapedTo4D","shape","inDepth","outDepth","checkPadOnDimRoundingMode","inputs","attrs","inputShape","res","runKernel","conv2DBackpropInput"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/conv2d_backprop_input.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the input of a 2D convolution.\n *\n * @param xShape The shape of the input: [batch, height, width, inDepth].\n * If length of 3, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 4 or rank 3 of shape\n *   `[batch, outHeight, outWidth, outDepth]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropInput_<T extends Tensor3D|Tensor4D>(\n    xShape: [number, number, number, number]|[number, number, number], dy: T,\n    filter: Tensor4D, strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape4D = xShape as [number, number, number, number];\n  let dy4D = dy as Tensor4D;\n  let reshapedTo4D = false;\n  if (dy.rank === 3) {\n    reshapedTo4D = true;\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n    xShape4D = [1, xShape[0], xShape[1], xShape[2]];\n  }\n\n  util.assert(\n      xShape4D.length === 4,\n      () =>\n          `Error in conv2dDerInput: inShape must be length 4, but got length ` +\n          `${xShape4D.length}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerInput: dy must be rank 4, but got ` +\n          `rank ${dy4D.rank}`);\n  util.assert(\n      filter.rank === 4,\n      () => `Error in conv2dDerInput: filter must be rank 4, but got ` +\n          `rank ${filter.rank}`);\n  const inDepth = dataFormat === 'NHWC' ? xShape4D[3] : xShape4D[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filter.shape[2],\n      () => `Error in conv2dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[2]}.`);\n  util.assert(\n      outDepth === filter.shape[3],\n      () => `Error in conv2dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[3]}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerInput', pad, dimRoundingMode);\n  const inputs: Conv2DBackpropInputInputs = {dy: dy4D, filter};\n  const attrs: Conv2DBackpropInputAttrs =\n      {strides, pad, dataFormat, dimRoundingMode, inputShape: xShape4D};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv2DBackpropInput, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const conv2DBackpropInput = op({conv2DBackpropInput_});\n"]},"metadata":{},"sourceType":"module"}