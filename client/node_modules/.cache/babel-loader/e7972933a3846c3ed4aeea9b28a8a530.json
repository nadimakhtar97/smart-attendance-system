{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\n\nexport function createSimpleBinaryKernelImpl(op) {\n  return (aShape, bShape, aVals, bVals, dtype) => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n    const result = util.getTypedArrayFromDType(dtype, resultSize);\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAyEC,IAAzE,QAAoF,uBAApF;AAIA;;;;AAGA,OAAM,SAAUC,4BAAV,CAAuCC,EAAvC,EAAgE;AAEpE,SAAO,CAACC,MAAD,EAAmBC,MAAnB,EAAqCC,KAArC,EACCC,KADD,EACoBC,KADpB,KAC+D;AACpE,UAAMC,QAAQ,GAAGT,YAAY,CAACU,0BAAb,CAAwCN,MAAxC,EAAgDC,MAAhD,CAAjB;AAEA,UAAMM,UAAU,GAAGF,QAAQ,CAACG,MAA5B;AACA,UAAMC,aAAa,GAAGZ,IAAI,CAACa,cAAL,CAAoBL,QAApB,CAAtB;AACA,UAAMM,UAAU,GAAGd,IAAI,CAACe,aAAL,CAAmBP,QAAnB,CAAnB;AAEA,UAAMQ,MAAM,GACRhB,IAAI,CAACiB,sBAAL,CAA4BV,KAA5B,EAAsDO,UAAtD,CADJ;AAGA,UAAMI,KAAK,GAAGf,MAAM,CAACQ,MAArB;AACA,UAAMQ,KAAK,GAAGf,MAAM,CAACO,MAArB;AAEA,UAAMS,QAAQ,GAAGpB,IAAI,CAACa,cAAL,CAAoBV,MAApB,CAAjB;AACA,UAAMkB,QAAQ,GAAGrB,IAAI,CAACa,cAAL,CAAoBT,MAApB,CAAjB;AAEA,UAAMkB,cAAc,GAAGvB,YAAY,CAACwB,gBAAb,CAA8BpB,MAA9B,EAAsCK,QAAtC,CAAvB;AACA,UAAMgB,cAAc,GAAGzB,YAAY,CAACwB,gBAAb,CAA8BnB,MAA9B,EAAsCI,QAAtC,CAAvB;;AAEA,QAAIc,cAAc,CAACX,MAAf,GAAwBa,cAAc,CAACb,MAAvC,KAAkD,CAAtD,EAAyD;AACvD,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACL,MAA3B,EAAmC,EAAEc,CAArC,EAAwC;AACtCT,cAAM,CAACS,CAAD,CAAN,GAAYvB,EAAE,CAACG,KAAK,CAACoB,CAAC,GAAGpB,KAAK,CAACM,MAAX,CAAN,EAA0BL,KAAK,CAACmB,CAAC,GAAGnB,KAAK,CAACK,MAAX,CAA/B,CAAd;AACD;AACF,KAJD,MAIO;AACL,WAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,MAAM,CAACL,MAA3B,EAAmC,EAAEc,CAArC,EAAwC;AACtC,cAAMC,GAAG,GAAG1B,IAAI,CAAC2B,UAAL,CAAgBF,CAAhB,EAAmBf,UAAnB,EAA+BE,aAA/B,CAAZ;AAEA,cAAMgB,IAAI,GAAGF,GAAG,CAACG,KAAJ,CAAU,CAACX,KAAX,CAAb;AACAI,sBAAc,CAACQ,OAAf,CAAuBC,CAAC,IAAIH,IAAI,CAACG,CAAD,CAAJ,GAAU,CAAtC;AACA,cAAMC,MAAM,GAAGhC,IAAI,CAACiC,UAAL,CAAgBL,IAAhB,EAAsBV,KAAtB,EAA6BE,QAA7B,CAAf;AAEA,cAAMc,IAAI,GAAGR,GAAG,CAACG,KAAJ,CAAU,CAACV,KAAX,CAAb;AACAK,sBAAc,CAACM,OAAf,CAAuBC,CAAC,IAAIG,IAAI,CAACH,CAAD,CAAJ,GAAU,CAAtC;AACA,cAAMI,MAAM,GAAGnC,IAAI,CAACiC,UAAL,CAAgBC,IAAhB,EAAsBf,KAAtB,EAA6BE,QAA7B,CAAf;AAEAL,cAAM,CAACS,CAAD,CAAN,GAAYvB,EAAE,CAACG,KAAK,CAAC2B,MAAD,CAAN,EAAgB1B,KAAK,CAAC6B,MAAD,CAArB,CAAd;AACD;AACF;;AAED,WAAO,CAACnB,MAAD,EAASR,QAAT,CAAP;AACD,GAzCD;AA0CD","names":["backend_util","util","createSimpleBinaryKernelImpl","op","aShape","bShape","aVals","bVals","dtype","newShape","assertAndGetBroadcastShape","resultRank","length","resultStrides","computeStrides","resultSize","sizeFromShape","result","getTypedArrayFromDType","aRank","bRank","aStrides","bStrides","aBroadcastDims","getBroadcastDims","bBroadcastDims","i","loc","indexToLoc","aLoc","slice","forEach","d","aIndex","locToIndex","bLoc","bIndex"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/utils/binary_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, DataValues, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {SimpleBinaryKernelImpl, SimpleBinaryOperation} from './binary_types';\n\n/**\n * Template that creates implementation for binary ops. Supports broadcast.\n */\nexport function createSimpleBinaryKernelImpl(op: SimpleBinaryOperation):\n    SimpleBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aVals: DataValues,\n          bVals: DataValues, dtype: DataType): [TypedArray, number[]] => {\n    const newShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n\n    const resultRank = newShape.length;\n    const resultStrides = util.computeStrides(newShape);\n    const resultSize = util.sizeFromShape(newShape);\n\n    const result =\n        util.getTypedArrayFromDType(dtype as NumericDataType, resultSize);\n\n    const aRank = aShape.length;\n    const bRank = bShape.length;\n\n    const aStrides = util.computeStrides(aShape);\n    const bStrides = util.computeStrides(bShape);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, newShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, newShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < result.length; ++i) {\n        result[i] = op(aVals[i % aVals.length], bVals[i % bVals.length]);\n      }\n    } else {\n      for (let i = 0; i < result.length; ++i) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        result[i] = op(aVals[aIndex], bVals[bIndex]);\n      }\n    }\n\n    return [result, newShape];\n  };\n}\n"]},"metadata":{},"sourceType":"module"}