{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { notEqual } from './NotEqual';\nimport { real } from './Real';\nimport { int } from '../kernel_utils/int';\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs; // Casting to complex64.\n\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    } // TODO(annxingyuan): Import kernel function once zeros is modularized.\n\n\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensor\n      },\n      backend\n    });\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  } // Casting from complex64\n\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo([], 'bool', util.getTypedArrayFromDType('bool', 1));\n    const binaryInputs = {\n      a: x,\n      b: zerosTensorInfo\n    };\n    const result = notEqual({\n      inputs: binaryInputs,\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast\n};","map":{"version":3,"mappings":"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","names":["tf","Cast","util","complex","identity","notEqual","real","int","cast","args","inputs","backend","attrs","x","dtype","zerosTensor","zeros","shape","floatX","result","imag","dispose","disposeIntermediateTensorInfo","realPart","input","hasEncodingLoss","dataId","zerosTensorInfo","makeTensorInfo","getTypedArrayFromDType","binaryInputs","a","b","Error","castConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Cast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport {BinaryInputs, Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {notEqual} from './NotEqual';\nimport {real} from './Real';\n\nimport {int} from '../kernel_utils/int';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendWebGL, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    // TODO(annxingyuan): Import kernel function once zeros is modularized.\n    const zerosTensor = tf.zeros(x.shape);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensor}, backend});\n\n    zerosTensor.dispose();\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    return int(x, backend);\n  }\n\n  if (dtype === 'bool') {\n    const zerosTensorInfo = backend.makeTensorInfo(\n        [], 'bool', util.getTypedArrayFromDType('bool', 1));\n\n    const binaryInputs: BinaryInputs = {a: x, b: zerosTensorInfo};\n\n    const result = notEqual({inputs: binaryInputs, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    return result;\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'webgl',\n  kernelFunc: cast as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}