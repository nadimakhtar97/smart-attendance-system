{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, PadV2, util } from '@tensorflow/tfjs-core';\nimport { PadProgram } from '../pad_gpu';\nimport { PadPackedProgram } from '../pad_packed_gpu';\nimport { fill } from './Fill';\nexport const padV2 = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n\n  if (util.sizeFromShape(x.shape) === 0) {\n    // Short-circuit the computation, since x doesn't have value, only\n    // the shape is used to compute output shape to pad.\n    const outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + x.shape[i] + p[1]\n    /* afterPad */\n    );\n    return fill({\n      backend,\n      attrs: {\n        shape: outputShape,\n        value: constantValue,\n        dtype: x.dtype\n      }\n    });\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new PadPackedProgram(x.shape, paddings, constantValue) : new PadProgram(x.shape, paddings, constantValue);\n  const customValues = [[constantValue]];\n  return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n};\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,EAAuCC,KAAvC,EAAmFC,IAAnF,QAA8F,uBAA9F;AAGA,SAAQC,UAAR,QAAyB,YAAzB;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;AACA,SAAQC,IAAR,QAAmB,QAAnB;AAEA,OAAO,MAAMC,KAAK,GACbC,IAAD,IACiB;AACX,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,YAAD;AAAWC;AAAX,MAA4BH,KAAlC;;AAEA,MAAIR,IAAI,CAACY,aAAL,CAAmBH,CAAC,CAACI,KAArB,MAAgC,CAApC,EAAuC;AACrC;AACA;AACA,UAAMC,WAAW,GAAGJ,QAAQ,CAACK,GAAT,CAChB,CAACC,CAAD,EAAIC,CAAJ,KACID,CAAC,CAAC,CAAD;AAAI;AAAL,MAAuBP,CAAC,CAACI,KAAF,CAAQI,CAAR,CAAvB,GAAoCD,CAAC,CAAC,CAAD;AAAI;AAF7B,KAApB;AAGA,WAAOb,IAAI,CAAC;AACVI,aADU;AAEVC,WAAK,EAAE;AAACK,aAAK,EAAEC,WAAR;AAAqBI,aAAK,EAAEP,aAA5B;AAA2CQ,aAAK,EAAEV,CAAC,CAACU;AAApD;AAFG,KAAD,CAAX;AAID;;AAED,QAAMC,OAAO,GAAGtB,GAAG,GAAGuB,OAAN,CAAc,6BAAd,IACZ,IAAInB,gBAAJ,CAAqBO,CAAC,CAACI,KAAvB,EAA8BH,QAA9B,EAAwCC,aAAxC,CADY,GAEZ,IAAIV,UAAJ,CAAeQ,CAAC,CAACI,KAAjB,EAAwBH,QAAxB,EAAkCC,aAAlC,CAFJ;AAGA,QAAMW,YAAY,GAAG,CAAC,CAACX,aAAD,CAAD,CAArB;AACA,SAAOJ,OAAO,CAACgB,eAAR,CAAwBH,OAAxB,EAAiC,CAACX,CAAD,CAAjC,EAAsCA,CAAC,CAACU,KAAxC,EAA+CG,YAA/C,CAAP;AACD,CAxBF;AA0BP,OAAO,MAAME,WAAW,GAAiB;AACvCC,YAAU,EAAE1B,KAD2B;AAEvC2B,aAAW,EAAE,OAF0B;AAGvCC,YAAU,EAAEvB;AAH2B,CAAlC","names":["env","PadV2","util","PadProgram","PadPackedProgram","fill","padV2","args","inputs","backend","attrs","x","paddings","constantValue","sizeFromShape","shape","outputShape","map","p","i","value","dtype","program","getBool","customValues","runWebGLProgram","padV2Config","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/PadV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {PadProgram} from '../pad_gpu';\nimport {PadPackedProgram} from '../pad_packed_gpu';\nimport {fill} from './Fill';\n\nexport const padV2 =\n    (args: {inputs: PadV2Inputs, backend: MathBackendWebGL, attrs: PadV2Attrs}):\n        TensorInfo => {\n          const {inputs, backend, attrs} = args;\n          const {x} = inputs;\n          const {paddings, constantValue} = attrs;\n\n          if (util.sizeFromShape(x.shape) === 0) {\n            // Short-circuit the computation, since x doesn't have value, only\n            // the shape is used to compute output shape to pad.\n            const outputShape = paddings.map(\n                (p, i) =>\n                    p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n            return fill({\n              backend,\n              attrs: {shape: outputShape, value: constantValue, dtype: x.dtype}\n            });\n          }\n\n          const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n              new PadPackedProgram(x.shape, paddings, constantValue) :\n              new PadProgram(x.shape, paddings, constantValue);\n          const customValues = [[constantValue]];\n          return backend.runWebGLProgram(program, [x], x.dtype, customValues);\n        };\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'webgl',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}