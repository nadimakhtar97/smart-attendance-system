{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from '../kernels/Cast';\nimport { complex } from '../kernels/Complex';\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\n\nexport function binaryKernelFunc(name, simpleImpl, complexImpl, dtype) {\n  if (complexImpl == null) {\n    return _ref => {\n      let {\n        inputs,\n        backend\n      } = _ref;\n      const {\n        a,\n        b\n      } = inputs;\n      const cpuBackend = backend;\n      assertNotComplex([a, b], name);\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const decodedAVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(aVals) : aVals;\n      const decodedBVals = a.dtype === 'string' ? // tslint:disable-next-line: no-any\n      backend_util.fromUint8ToStringArray(bVals) : bVals;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return _ref2 => {\n    let {\n      inputs,\n      backend\n    } = _ref2;\n    const {\n      a,\n      b\n    } = inputs;\n    const cpuBackend = backend;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast({\n        inputs: {\n          x: a\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n      const aRealVals = cpuBackend.data.get(aReal.dataId).values;\n      const aImagVals = cpuBackend.data.get(aImag.dataId).values;\n      const $bComplex = cast({\n        inputs: {\n          x: b\n        },\n        backend: cpuBackend,\n        attrs: {\n          dtype: 'complex64'\n        }\n      });\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n      const bRealVals = cpuBackend.data.get(bReal.dataId).values;\n      const bImagVals = cpuBackend.data.get(bImag.dataId).values;\n      const [resultRealData, resultImagData, resultShape] = complexImpl(a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n      const resultReal = cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n      const resultImag = cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n      const result = complex({\n        inputs: {\n          real: resultReal,\n          imag: resultImag\n        },\n        backend: cpuBackend\n      });\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values;\n      const bVals = cpuBackend.data.get(b.dataId).values;\n      const $dtype = dtype || a.dtype;\n      const [resultData, resultShape] = simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\n\nexport function createComplexBinaryKernelImpl(op) {\n  return (aShape, bShape, aRealVals, aImagVals, bRealVals, bImagVals) => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n        const result = op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2], bVals[bIdx * 2 + 1]);\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n        const opResult = op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2], bVals[bIndex * 2 + 1]);\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}","map":{"version":3,"mappings":"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","names":["backend_util","util","assertNotComplex","cast","complex","binaryKernelFunc","name","simpleImpl","complexImpl","dtype","inputs","backend","a","b","cpuBackend","aVals","data","get","dataId","values","bVals","decodedAVals","fromUint8ToStringArray","decodedBVals","$dtype","resultData","resultShape","shape","makeTensorInfo","$aComplex","x","attrs","$aComplexVals","aReal","complexTensorInfos","real","aImag","imag","aRealVals","aImagVals","$bComplex","$bComplexVals","bReal","bImag","bRealVals","bImagVals","resultRealData","resultImagData","resultReal","resultImag","result","disposeIntermediateTensorInfo","createComplexBinaryKernelImpl","op","aShape","bShape","assertAndGetBroadcastShape","resultSize","sizeFromShape","resultRank","length","resultStrides","computeStrides","resultRealVals","getTypedArrayFromDType","resultImagVals","aBroadcastDims","getBroadcastDims","bBroadcastDims","mergeRealAndImagArrays","aRank","aStrides","bRank","bStrides","i","aIdx","bIdx","loc","indexToLoc","aLoc","slice","forEach","d","aIndex","locToIndex","bLoc","bIndex","opResult"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/utils/binary_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, DataType, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {cast} from '../kernels/Cast';\nimport {complex} from '../kernels/Complex';\n\nimport {ComplexBinaryKernelImpl, ComplexBinaryOperation, SimpleBinaryKernelImpl} from './binary_types';\n\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param name Kernel name.\n * @param binaryKernelImpl A `SimpleBinaryKernelImpl` for the kernel.\n * @param binaryKernelComplexImpl Optional. If exists, represents a\n *     `ComplexBinaryKernelImpl` for the kernel, will be used when input dtype\n *     is `complex64`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc(\n    name: string, simpleImpl: SimpleBinaryKernelImpl,\n    complexImpl?: ComplexBinaryKernelImpl, dtype?: DataType): KernelFunc {\n  if (complexImpl == null) {\n    return ({inputs, backend}) => {\n      const {a, b} = inputs as BinaryInputs;\n      const cpuBackend = backend as MathBackendCPU;\n\n      assertNotComplex([a, b], name);\n\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const decodedAVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(aVals as any as Uint8Array[]) :\n          aVals;\n      const decodedBVals = a.dtype === 'string' ?\n          // tslint:disable-next-line: no-any\n          backend_util.fromUint8ToStringArray(bVals as any as Uint8Array[]) :\n          bVals;\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, decodedAVals, decodedBVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    };\n  }\n\n  return ({inputs, backend}) => {\n    const {a, b} = inputs as BinaryInputs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    if (a.dtype === 'complex64' || b.dtype === 'complex64') {\n      const $aComplex = cast(\n          {inputs: {x: a}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $aComplexVals = cpuBackend.data.get($aComplex.dataId);\n\n      const aReal = $aComplexVals.complexTensorInfos.real;\n      const aImag = $aComplexVals.complexTensorInfos.imag;\n\n      const aRealVals =\n          cpuBackend.data.get(aReal.dataId).values as Float32Array;\n      const aImagVals =\n          cpuBackend.data.get(aImag.dataId).values as Float32Array;\n\n      const $bComplex = cast(\n          {inputs: {x: b}, backend: cpuBackend, attrs: {dtype: 'complex64'}});\n\n      const $bComplexVals = cpuBackend.data.get($bComplex.dataId);\n\n      const bReal = $bComplexVals.complexTensorInfos.real;\n      const bImag = $bComplexVals.complexTensorInfos.imag;\n\n      const bRealVals =\n          cpuBackend.data.get(bReal.dataId).values as Float32Array;\n      const bImagVals =\n          cpuBackend.data.get(bImag.dataId).values as Float32Array;\n\n      const [resultRealData, resultImagData, resultShape] = complexImpl(\n          a.shape, b.shape, aRealVals, aImagVals, bRealVals, bImagVals);\n\n      const resultReal =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultRealData);\n\n      const resultImag =\n          cpuBackend.makeTensorInfo(resultShape, 'float32', resultImagData);\n\n      const result = complex(\n          {inputs: {real: resultReal, imag: resultImag}, backend: cpuBackend});\n\n      cpuBackend.disposeIntermediateTensorInfo($aComplex);\n      cpuBackend.disposeIntermediateTensorInfo($bComplex);\n      cpuBackend.disposeIntermediateTensorInfo(resultReal);\n      cpuBackend.disposeIntermediateTensorInfo(resultImag);\n\n      return result;\n    } else {\n      const aVals = cpuBackend.data.get(a.dataId).values as TypedArray;\n      const bVals = cpuBackend.data.get(b.dataId).values as TypedArray;\n\n      const $dtype = dtype || a.dtype;\n\n      const [resultData, resultShape] =\n          simpleImpl(a.shape, b.shape, aVals, bVals, $dtype);\n\n      return cpuBackend.makeTensorInfo(resultShape, $dtype, resultData);\n    }\n  };\n}\n\n/**\n * Template that creates the complex type implementation for binary ops.\n * Supports broadcast.\n */\nexport function createComplexBinaryKernelImpl(op: ComplexBinaryOperation):\n    ComplexBinaryKernelImpl {\n  return (aShape: number[], bShape: number[], aRealVals: Float32Array,\n          aImagVals: Float32Array, bRealVals: Float32Array,\n          bImagVals: Float32Array): [TypedArray, TypedArray, number[]] => {\n    const resultShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const resultSize = util.sizeFromShape(resultShape);\n    const resultRank = resultShape.length;\n    const resultStrides = util.computeStrides(resultShape);\n\n    const resultRealVals = util.getTypedArrayFromDType('float32', resultSize);\n    const resultImagVals = util.getTypedArrayFromDType('float32', resultSize);\n\n    const aBroadcastDims = backend_util.getBroadcastDims(aShape, resultShape);\n    const bBroadcastDims = backend_util.getBroadcastDims(bShape, resultShape);\n\n    const aVals = backend_util.mergeRealAndImagArrays(aRealVals, aImagVals);\n    const bVals = backend_util.mergeRealAndImagArrays(bRealVals, bImagVals);\n\n    const aRank = aShape.length;\n    const aStrides = util.computeStrides(aShape);\n\n    const bRank = bShape.length;\n    const bStrides = util.computeStrides(bShape);\n\n    if (aBroadcastDims.length + bBroadcastDims.length === 0) {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const aIdx = i % aVals.length;\n        const bIdx = i % bVals.length;\n\n        const result =\n            op(aVals[aIdx * 2], aVals[aIdx * 2 + 1], bVals[bIdx * 2],\n               bVals[bIdx * 2 + 1]);\n\n        resultRealVals[i] = result.real;\n        resultImagVals[i] = result.imag;\n      }\n    } else {\n      for (let i = 0; i < resultRealVals.length; i++) {\n        const loc = util.indexToLoc(i, resultRank, resultStrides);\n\n        const aLoc = loc.slice(-aRank);\n        aBroadcastDims.forEach(d => aLoc[d] = 0);\n        const aIndex = util.locToIndex(aLoc, aRank, aStrides);\n\n        const bLoc = loc.slice(-bRank);\n        bBroadcastDims.forEach(d => bLoc[d] = 0);\n        const bIndex = util.locToIndex(bLoc, bRank, bStrides);\n\n        const opResult =\n            op(aVals[aIndex * 2], aVals[aIndex * 2 + 1], bVals[bIndex * 2],\n               bVals[bIndex * 2 + 1]);\n\n        resultRealVals[i] = opResult.real;\n        resultImagVals[i] = opResult.imag;\n      }\n    }\n    return [resultRealVals, resultImagVals, resultShape];\n  };\n}\n"]},"metadata":{},"sourceType":"module"}