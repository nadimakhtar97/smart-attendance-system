{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function fft(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const inputSize = util.sizeFromShape(input.shape); // Collapse all outer dimensions to a single batch dimension.\n\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape({\n    inputs: {\n      x: input\n    },\n    backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  const result = fftBatch(input2D, false, backend);\n  const resultReshaped = reshape({\n    inputs: {\n      x: result\n    },\n    backend,\n    attrs: {\n      shape: input.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n  return resultReshaped;\n}\nexport const fftConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,EAA8DC,IAA9D,QAAyE,uBAAzE;AAGA,SAAQC,QAAR,QAAuB,oBAAvB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAUC,GAAV,CAAcC,IAAd,EAAgE;AAEpE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG;AAAD,MAAUF,MAAhB;AAEA,QAAMG,SAAS,GAAGR,IAAI,CAACS,aAAL,CAAmBF,KAAK,CAACG,KAAzB,CAAlB,CALoE,CAOpE;;AACA,QAAMC,kBAAkB,GAAGJ,KAAK,CAACG,KAAN,CAAYH,KAAK,CAACG,KAAN,CAAYE,MAAZ,GAAqB,CAAjC,CAA3B;AACA,QAAMC,KAAK,GAAGL,SAAS,GAAGG,kBAA1B;AAEA,QAAMG,OAAO,GAAGZ,OAAO,CAAC;AACtBG,UAAM,EAAE;AAACU,OAAC,EAAER;AAAJ,KADc;AAEtBD,WAFsB;AAGtBU,SAAK,EAAE;AAACN,WAAK,EAAE,CAACG,KAAD,EAAQF,kBAAR;AAAR;AAHe,GAAD,CAAvB;AAMA,QAAMM,MAAM,GAAGhB,QAAQ,CAACa,OAAD,EAAU,KAAV,EAAiBR,OAAjB,CAAvB;AAEA,QAAMY,cAAc,GAChBhB,OAAO,CAAC;AAACG,UAAM,EAAE;AAACU,OAAC,EAAEE;AAAJ,KAAT;AAAsBX,WAAtB;AAA+BU,SAAK,EAAE;AAACN,WAAK,EAAEH,KAAK,CAACG;AAAd;AAAtC,GAAD,CADX;AAGAJ,SAAO,CAACa,6BAAR,CAAsCL,OAAtC;AACAR,SAAO,CAACa,6BAAR,CAAsCF,MAAtC;AAEA,SAAOC,cAAP;AACD;AAED,OAAO,MAAME,SAAS,GAAiB;AACrCC,YAAU,EAAEtB,GADyB;AAErCuB,aAAW,EAAE,KAFwB;AAGrCC,YAAU,EAAEpB;AAHyB,CAAhC","names":["FFT","util","fftBatch","reshape","fft","args","inputs","backend","input","inputSize","sizeFromShape","shape","innerDimensionSize","length","batch","input2D","x","attrs","result","resultReshaped","disposeIntermediateTensorInfo","fftConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/FFT.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FFT, FFTInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {fftBatch} from '../utils/fft_utils';\nimport {reshape} from './Reshape';\n\nexport function fft(args: {inputs: FFTInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const inputSize = util.sizeFromShape(input.shape);\n\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape({\n    inputs: {x: input},\n    backend,\n    attrs: {shape: [batch, innerDimensionSize]}\n  });\n\n  const result = fftBatch(input2D, false, backend);\n\n  const resultReshaped =\n      reshape({inputs: {x: result}, backend, attrs: {shape: input.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(result);\n\n  return resultReshaped;\n}\n\nexport const fftConfig: KernelConfig = {\n  kernelName: FFT,\n  backendName: 'cpu',\n  kernelFunc: fft as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}