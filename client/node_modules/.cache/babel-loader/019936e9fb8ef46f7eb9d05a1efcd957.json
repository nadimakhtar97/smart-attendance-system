{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { eitherStridesOrDilationsAreOne } from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 3D convolution over the input x.\n *\n * @param x The input tensor, of rank 5 or rank 4, of shape\n *     `[batch, depth, height, width, channels]`. If rank 4,\n * batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\n *      inChannels must match between input and filter.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\n *     dilationWidth]` in which we sample input values across the height\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\n *     If `dilations` is a single number, then\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\n *     than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction conv3d_(x, filter, strides, pad) {\n  let dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NDHWC';\n  let dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1, 1];\n  const $x = convertToTensor(x, 'x', 'conv3d');\n  const $filter = convertToTensor(filter, 'filter', 'conv3d');\n  let x5D = $x;\n  let reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n\n  util.assert(x5D.rank === 5, () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n  util.assert($filter.rank === 5, () => `Error in conv3d: filter must be rank 5, but got rank ` + `${$filter.rank}.`);\n  util.assert(x5D.shape[4] === $filter.shape[3], () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` + `input depth for filter ${$filter.shape[3]}.`);\n  util.assert(eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv3D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(dataFormat === 'NDHWC', () => `Error in conv3d: got dataFormat of ${dataFormat} but only NDHWC is currently supported.`);\n  const inputs = {\n    x: x5D,\n    filter: $filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(Conv3D, inputs, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport const conv3d = op({\n  conv3d_\n});","map":{"version":3,"mappings":"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","names":["ENGINE","Conv3D","convertToTensor","util","eitherStridesOrDilationsAreOne","op","reshape","conv3d_","x","filter","strides","pad","dataFormat","dilations","$x","$filter","x5D","reshapedTo5D","rank","shape","assert","inputs","attrs","res","runKernel","conv3d"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/conv3d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3D, Conv3DAttrs, Conv3DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {eitherStridesOrDilationsAreOne} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 3D convolution over the input x.\n *\n * @param x The input tensor, of rank 5 or rank 4, of shape\n *     `[batch, depth, height, width, channels]`. If rank 4,\n * batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inChannels, outChannels]`.\n *      inChannels must match between input and filter.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat: An optional string from: \"NDHWC\", \"NCDHW\". Defaults to\n *     \"NDHWC\". Specify the data format of the input and output data. With the\n *     default format \"NDHWC\", the data is stored in the order of: [batch,\n *     depth, height, width, channels]. Only \"NDHWC\" is currently supported.\n * @param dilations The dilation rates: `[dilationDepth, dilationHeight,\n *     dilationWidth]` in which we sample input values across the height\n *     and width dimensions in atrous convolution. Defaults to `[1, 1, 1]`.\n *     If `dilations` is a single number, then\n *     `dilationDepth == dilationHeight == dilationWidth`. If it is greater\n *     than 1, then all values of `strides` must be 1.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv3d_<T extends Tensor4D|Tensor5D>(\n    x: T|TensorLike, filter: Tensor5D|TensorLike,\n    strides: [number, number, number]|number, pad: 'valid'|'same',\n    dataFormat: 'NDHWC'|'NCDHW' = 'NDHWC',\n    dilations: [number, number, number]|number = [1, 1, 1]): T {\n  const $x = convertToTensor(x, 'x', 'conv3d');\n  const $filter = convertToTensor(filter, 'filter', 'conv3d');\n\n  let x5D = $x as Tensor5D;\n  let reshapedTo5D = false;\n\n  if ($x.rank === 4) {\n    reshapedTo5D = true;\n    x5D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2], $x.shape[3]]);\n  }\n  util.assert(\n      x5D.rank === 5,\n      () => `Error in conv3d: input must be rank 5, but got rank ${x5D.rank}.`);\n  util.assert(\n      $filter.rank === 5,\n      () => `Error in conv3d: filter must be rank 5, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      x5D.shape[4] === $filter.shape[3],\n      () => `Error in conv3d: depth of input (${x5D.shape[4]}) must match ` +\n          `input depth for filter ${$filter.shape[3]}.`);\n  util.assert(\n      eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv3D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n  util.assert(\n      dataFormat === 'NDHWC',\n      () => `Error in conv3d: got dataFormat of ${\n          dataFormat} but only NDHWC is currently supported.`);\n\n  const inputs: Conv3DInputs = {x: x5D, filter: $filter};\n\n  const attrs: Conv3DAttrs = {strides, pad, dataFormat, dilations};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv3D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n  return res;\n}\n\nexport const conv3d = op({conv3d_});\n"]},"metadata":{},"sourceType":"module"}