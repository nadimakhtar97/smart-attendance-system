{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport const batchToSpaceND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    crops\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const toDispose = [];\n  const reshapedIntermediate = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  const transposedIntermediate = transpose({\n    inputs: {\n      x: reshapedIntermediate\n    },\n    backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  const reshapedIntermediate2 = reshape({\n    inputs: {\n      x: transposedIntermediate\n    },\n    backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  const sliced = slice({\n    inputs: {\n      x: reshapedIntermediate2\n    },\n    backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return sliced;\n};\nexport const batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,cAAtB,EAAuHC,IAAvH,QAAkI,uBAAlI;AAIA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA,OAAO,MAAMC,cAAc,GAAIC,IAAD,IAIb;AACf,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,cAAD;AAAaC;AAAb,MAAsBH,KAA5B;AAEAR,MAAI,CAACY,MAAL,CACIH,CAAC,CAACI,KAAF,CAAQC,MAAR,IAAkB,CADtB,EAEI,MAAM,0DACF,iBAHR;AAIA,QAAMC,IAAI,GAAGL,UAAU,CAACM,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAhC,CAAb;AAEA,QAAMC,QAAQ,GAAGrB,YAAY,CAACsB,WAAb,CAAyBX,CAAC,CAACI,KAA3B,EAAkCH,UAAlC,EAA8CK,IAA9C,CAAjB;AACA,QAAMM,QAAQ,GAAGvB,YAAY,CAACwB,WAAb,CAAyBH,QAAQ,CAACL,MAAlC,EAA0CJ,UAAU,CAACI,MAArD,CAAjB;AACA,QAAMS,gBAAgB,GAClBzB,YAAY,CAAC0B,mBAAb,CAAiCf,CAAC,CAACI,KAAnC,EAA0CH,UAA1C,EAAsDK,IAAtD,CADJ;AAEA,QAAMU,gBAAgB,GAClB3B,YAAY,CAAC4B,mBAAb,CAAiCf,KAAjC,EAAwCD,UAAU,CAACI,MAAnD,CADJ;AAEA,QAAMa,SAAS,GACX7B,YAAY,CAAC8B,YAAb,CAA0BL,gBAA1B,EAA4CZ,KAA5C,EAAmDD,UAAU,CAACI,MAA9D,CADJ;AAGA,QAAMe,SAAS,GAAG,EAAlB;AAEA,QAAMC,oBAAoB,GACtB7B,OAAO,CAAC;AAACK,UAAM,EAAE;AAACG;AAAD,KAAT;AAAcF,WAAd;AAAuBC,SAAK,EAAE;AAACK,WAAK,EAAEM;AAAR;AAA9B,GAAD,CADX;AAEA,QAAMY,sBAAsB,GAAG5B,SAAS,CACpC;AAACG,UAAM,EAAE;AAACG,OAAC,EAAEqB;AAAJ,KAAT;AAAoCvB,WAApC;AAA6CC,SAAK,EAAE;AAACwB,UAAI,EAAEX;AAAP;AAApD,GADoC,CAAxC;AAEA,QAAMY,qBAAqB,GAAGhC,OAAO,CAAC;AACpCK,UAAM,EAAE;AAACG,OAAC,EAAEsB;AAAJ,KAD4B;AAEpCxB,WAFoC;AAGpCC,SAAK,EAAE;AAACK,WAAK,EAAEU;AAAR;AAH6B,GAAD,CAArC;AAKA,QAAMW,MAAM,GAAGhC,KAAK,CAAC;AACnBI,UAAM,EAAE;AAACG,OAAC,EAAEwB;AAAJ,KADW;AAEnB1B,WAFmB;AAGnBC,SAAK,EAAE;AAAC2B,WAAK,EAAEV,gBAAR;AAA0BW,UAAI,EAAET;AAAhC;AAHY,GAAD,CAApB;AAMAE,WAAS,CAACQ,IAAV,CAAeP,oBAAf;AACAD,WAAS,CAACQ,IAAV,CAAeN,sBAAf;AACAF,WAAS,CAACQ,IAAV,CAAeJ,qBAAf;AAEAJ,WAAS,CAACS,OAAV,CAAkBC,CAAC,IAAIhC,OAAO,CAACiC,6BAAR,CAAsCD,CAAtC,CAAvB;AAEA,SAAOL,MAAP;AACD,CAhDM;AAkDP,OAAO,MAAMO,oBAAoB,GAAiB;AAChDC,YAAU,EAAE3C,cADoC;AAEhD4C,aAAW,EAAE,OAFmC;AAGhDC,YAAU,EAAExC;AAHoC,CAA3C","names":["backend_util","BatchToSpaceND","util","reshape","slice","transpose","batchToSpaceND","args","inputs","backend","attrs","x","blockShape","crops","assert","shape","length","prod","reduce","a","b","reshaped","getReshaped","permuted","getPermuted","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","toDispose","reshapedIntermediate","transposedIntermediate","perm","reshapedIntermediate2","sliced","begin","size","push","forEach","t","disposeIntermediateTensorInfo","batchToSpaceNDConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/BatchToSpaceND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport const batchToSpaceND = (args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendWebGL,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'batchToSpaceND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const toDispose = [];\n\n  const reshapedIntermediate =\n      reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const transposedIntermediate = transpose(\n      {inputs: {x: reshapedIntermediate}, backend, attrs: {perm: permuted}});\n  const reshapedIntermediate2 = reshape({\n    inputs: {x: transposedIntermediate},\n    backend,\n    attrs: {shape: reshapedPermuted}\n  });\n  const sliced = slice({\n    inputs: {x: reshapedIntermediate2},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  toDispose.push(reshapedIntermediate);\n  toDispose.push(transposedIntermediate);\n  toDispose.push(reshapedIntermediate2);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return sliced;\n};\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'webgl',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}