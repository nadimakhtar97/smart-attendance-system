{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\n\nexport function temporalPadding(x, padding) {\n  return tidy(() => {\n    if (x.rank !== 3) {\n      throw new ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` + `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [1, 1];\n    }\n\n    if (padding.length !== 2) {\n      throw new ValueError(`temporalPadding expects input padding pattern to be a length-2 ` + `array, but received a length-${padding.length} array.`);\n    }\n\n    const pattern = [[0, 0], padding, [0, 0]];\n    return tfc.pad(x, pattern);\n  });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\n\nexport function spatial2dPadding(x, padding, dataFormat) {\n  return tidy(() => {\n    if (x.rank !== 4) {\n      throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` + `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n\n    if (padding.length !== 2 || padding[0].length !== 2 || padding[1].length !== 2) {\n      throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' + 'each of which is an Array of two integers.');\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n      throw new ValueError(`Unknown data format: ${dataFormat}. ` + `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n    }\n\n    let pattern;\n\n    if (dataFormat === 'channelsFirst') {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n\n    return tfc.pad(x, pattern);\n  });\n}\nexport class ZeroPadding2D extends Layer {\n  constructor(args) {\n    if (args == null) {\n      args = {};\n    }\n\n    super(args);\n    this.dataFormat = args.dataFormat == null ? imageDataFormat() : args.dataFormat; // TODO(cais): Maybe refactor the following logic surrounding `padding`\n    //   into a helper method.\n\n    if (args.padding == null) {\n      this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === 'number') {\n      this.padding = [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding;\n\n      if (args.padding.length !== 2) {\n        throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` + `received a length-${args.padding.length} array.`);\n      }\n\n      let heightPadding;\n      let widthPadding;\n\n      if (typeof args.padding[0] === 'number') {\n        heightPadding = [args.padding[0], args.padding[0]];\n        widthPadding = [args.padding[1], args.padding[1]];\n      } else {\n        args.padding = args.padding;\n\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` + `but received a length-${args.padding[0].length} array.`);\n        }\n\n        heightPadding = args.padding[0];\n\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` + `but received a length-${args.padding[1].length} array.`);\n        }\n\n        widthPadding = args.padding[1];\n      }\n\n      this.padding = [heightPadding, widthPadding];\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    let rows;\n    let cols;\n\n    if (this.dataFormat === 'channelsFirst') {\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n\n      if (inputShape[3] != null && inputShape[3] >= 0) {\n        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      if (inputShape[1] != null && inputShape[1] >= 0) {\n        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n  }\n\n  getConfig() {\n    const config = {\n      padding: this.padding,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nZeroPadding2D.className = 'ZeroPadding2D';\nserialization.registerClass(ZeroPadding2D);","map":{"version":3,"mappings":"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","names":["tfc","serialization","tidy","imageDataFormat","InputSpec","Layer","ValueError","getExactlyOneShape","getExactlyOneTensor","temporalPadding","x","padding","rank","length","pattern","pad","spatial2dPadding","dataFormat","ZeroPadding2D","constructor","args","heightPadding","widthPadding","inputSpec","ndim","computeOutputShape","inputShape","rows","cols","call","inputs","kwargs","getConfig","config","baseConfig","Object","assign","registerClass"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/layers/padding.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Padding Layers.\n */\n\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {ValueError} from '../errors';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {Kwargs} from '../types';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\n\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x: Tensor, padding?: [number, number]): Tensor {\n  return tidy(() => {\n    if (x.rank !== 3) {\n      throw new ValueError(\n          `temporalPadding expects input tensor to be 3-D, but received a ` +\n          `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [1, 1];\n    }\n    if (padding.length !== 2) {\n      throw new ValueError(\n          `temporalPadding expects input padding pattern to be a length-2 ` +\n          `array, but received a length-${padding.length} array.`);\n    }\n\n    const pattern: Array<[number, number]> = [[0, 0], padding, [0, 0]];\n    return tfc.pad(x, pattern);\n  });\n}\n\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(\n    x: Tensor, padding?: [[number, number], [number, number]],\n    dataFormat?: DataFormat): Tensor {\n  return tidy(() => {\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `temporalPadding expects input tensor to be 4-D, but received a ` +\n          `${x.rank}-D tensor.`);\n    }\n\n    if (padding == null) {\n      padding = [[1, 1], [1, 1]];\n    }\n    if (padding.length !== 2 || padding[0].length !== 2 ||\n        padding[1].length !== 2) {\n      throw new ValueError(\n          'spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n          'each of which is an Array of two integers.');\n    }\n\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n      throw new ValueError(\n          `Unknown data format: ${dataFormat}. ` +\n          `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n    }\n\n    let pattern: Array<[number, number]>;\n    if (dataFormat === 'channelsFirst') {\n      pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n    } else {\n      pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n    }\n\n    return tfc.pad(x, pattern);\n  });\n}\n\nexport declare interface ZeroPadding2DLayerArgs extends LayerArgs {\n  /**\n   * Integer, or `Array` of 2 integers, or `Array` of 2 `Array`s, each of\n   * which is an `Array` of 2 integers.\n   * - If integer, the same symmetric padding is applied to width and height.\n   * - If Array` of 2 integers, interpreted as two different symmetric values\n   *   for height and width:\n   *   `[symmetricHeightPad, symmetricWidthPad]`.\n   * - If `Array` of 2 `Array`s, interpreted as:\n   *   `[[topPad, bottomPad], [leftPad, rightPad]]`.\n   */\n  padding?: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * One of `'channelsLast'` (default) and `'channelsFirst'`.\n   *\n   * The ordering of the dimensions in the inputs.\n   * `channelsLast` corresponds to inputs with shape\n   * `[batch, height, width, channels]` while `channelsFirst`\n   * corresponds to inputs with shape\n   * `[batch, channels, height, width]`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class ZeroPadding2D extends Layer {\n  /** @nocollapse */\n  static className = 'ZeroPadding2D';\n  readonly dataFormat: DataFormat;\n  readonly padding: [[number, number], [number, number]];\n\n  constructor(args?: ZeroPadding2DLayerArgs) {\n    if (args == null) {\n      args = {};\n    }\n    super(args);\n\n    this.dataFormat =\n        args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n    // TODO(cais): Maybe refactor the following logic surrounding `padding`\n    //   into a helper method.\n    if (args.padding == null) {\n      this.padding = [[1, 1], [1, 1]];\n    } else if (typeof args.padding === 'number') {\n      this.padding =\n          [[args.padding, args.padding], [args.padding, args.padding]];\n    } else {\n      args.padding = args.padding;\n      if (args.padding.length !== 2) {\n        throw new ValueError(\n            `ZeroPadding2D expects padding to be a length-2 array, but ` +\n            `received a length-${args.padding.length} array.`);\n      }\n\n      let heightPadding: [number, number];\n      let widthPadding: [number, number];\n      if (typeof args.padding[0] === 'number') {\n        heightPadding = [args.padding[0], args.padding[0]];\n        widthPadding = [args.padding[1] as number, args.padding[1] as number];\n      } else {\n        args.padding = args.padding as [[number, number], [number, number]];\n\n        if (args.padding[0].length !== 2) {\n          throw new ValueError(\n              `ZeroPadding2D expects height padding to be a length-2 array, ` +\n              `but received a length-${args.padding[0].length} array.`);\n        }\n        heightPadding = args.padding[0] as [number, number];\n\n        if (args.padding[1].length !== 2) {\n          throw new ValueError(\n              `ZeroPadding2D expects width padding to be a length-2 array, ` +\n              `but received a length-${args.padding[1].length} array.`);\n        }\n        widthPadding = args.padding[1] as [number, number];\n      }\n      this.padding = [heightPadding, widthPadding];\n    }\n    this.inputSpec = [new InputSpec({ndim: 4})];\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n\n    let rows: number;\n    let cols: number;\n    if (this.dataFormat === 'channelsFirst') {\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[3] != null && inputShape[3] >= 0) {\n        cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      if (inputShape[1] != null && inputShape[1] >= 0) {\n        rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n      } else {\n        rows = null;\n      }\n      if (inputShape[2] != null && inputShape[2] >= 0) {\n        cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n      } else {\n        cols = null;\n      }\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(\n        () => spatial2dPadding(\n            getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(ZeroPadding2D);\n"]},"metadata":{},"sourceType":"module"}