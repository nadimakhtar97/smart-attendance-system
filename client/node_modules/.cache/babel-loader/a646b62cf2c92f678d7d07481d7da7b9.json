{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mean } from '../kernel_names';\nimport { computeOutAndReduceShapes } from '../ops/axis_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { ones } from '../ops/ones';\nimport { reshape } from '../ops/reshape';\nimport * as util from '../util';\nexport const meanGradConfig = {\n  kernelName: Mean,\n  inputsToSave: ['x'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const {\n      axis\n    } = attrs;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const shapes = computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = util.sizeFromShape(reduceShape);\n\n    const derX = () => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach(axis => {\n        expandedDyShape[axis] = 1;\n      });\n      const expandedDy = reshape(dy, expandedDyShape);\n      const res = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n      return res;\n    };\n\n    return {\n      x: derX\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAR,QAA8B,iBAA9B;AAEA,SAAQC,yBAAR,QAAwC,kBAAxC;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,OAAO,MAAMC,cAAc,GAAe;AACxCC,YAAU,EAAER,IAD4B;AAExCS,cAAY,EAAE,CAAC,GAAD,CAF0B;AAGxCC,UAAQ,EAAE,CAACC,EAAD,EAAaC,KAAb,EAA8BC,KAA9B,KAAqD;AAC7D,UAAM,CAACC,CAAD,IAAMF,KAAZ;AACA,UAAM;AAACG;AAAD,QAASF,KAAf;AACA,UAAMG,IAAI,GAAGV,IAAI,CAACW,cAAL,CAAoBF,IAApB,EAA0BD,CAAC,CAACI,KAA5B,CAAb;AACA,UAAMC,MAAM,GAAGlB,yBAAyB,CAACa,CAAC,CAACI,KAAH,EAAUF,IAAV,CAAxC;AACA,UAAMI,WAAW,GAAGD,MAAM,CAAC,CAAD,CAA1B;AACA,UAAME,UAAU,GAAGf,IAAI,CAACgB,aAAL,CAAmBF,WAAnB,CAAnB;;AAEA,UAAMG,IAAI,GAAG,MAAK;AAChB,YAAMC,eAAe,GAAGV,CAAC,CAACI,KAAF,CAAQO,KAAR,EAAxB;AACAT,UAAI,CAACU,OAAL,CAAaX,IAAI,IAAG;AAClBS,uBAAe,CAACT,IAAD,CAAf,GAAwB,CAAxB;AACD,OAFD;AAGA,YAAMY,UAAU,GAAGtB,OAAO,CAACM,EAAD,EAAKa,eAAL,CAA1B;AACA,YAAMI,GAAG,GAAG1B,GAAG,CAACC,GAAG,CAACwB,UAAD,EAAavB,IAAI,CAACU,CAAC,CAACI,KAAH,EAAU,SAAV,CAAjB,CAAJ,EAA4CG,UAA5C,CAAf;AACA,aAAOO,GAAP;AACD,KARD;;AAUA,WAAO;AAACd,OAAC,EAAES;AAAJ,KAAP;AACD;AAtBuC,CAAnC","names":["Mean","computeOutAndReduceShapes","div","mul","ones","reshape","util","meanGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x","axis","axes","parseAxisParam","shape","shapes","reduceShape","reduceSize","sizeFromShape","derX","expandedDyShape","slice","forEach","expandedDy","res"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/Mean_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Mean, MeanAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {computeOutAndReduceShapes} from '../ops/axis_util';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {ones} from '../ops/ones';\nimport {reshape} from '../ops/reshape';\nimport {Tensor} from '../tensor';\nimport * as util from '../util';\n\nexport const meanGradConfig: GradConfig = {\n  kernelName: Mean,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {axis} = attrs as {} as MeanAttrs;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const shapes = computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = util.sizeFromShape(reduceShape);\n\n    const derX = () => {\n      const expandedDyShape = x.shape.slice();\n      axes.forEach(axis => {\n        expandedDyShape[axis] = 1;\n      });\n      const expandedDy = reshape(dy, expandedDyShape);\n      const res = div(mul(expandedDy, ones(x.shape, 'float32')), reduceSize);\n      return res;\n    };\n\n    return {x: derX};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}