{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LRN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\n\nfunction localResponseNormalization_(x) {\n  let depthRadius = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n  let bias = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let alpha = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let beta = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0.5;\n  const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert($x.rank === 4 || $x.rank === 3, () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n  util.assert(util.isInt(depthRadius), () => `Error in localResponseNormalization: depthRadius must be an ` + `integer but got depthRadius ${depthRadius}.`);\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  const inputs = {\n    x: x4D\n  };\n  const attrs = {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(LRN, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  } else {\n    return res;\n  }\n}\n\nexport const localResponseNormalization = op({\n  localResponseNormalization_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,GAAR,QAAuC,iBAAvC;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;AAeA,SAASC,2BAAT,CACIC,CADJ,EACqE;AAAA,MAAhDC,WAAgD,uEAAlC,CAAkC;AAAA,MAA/BC,IAA+B,uEAAxB,CAAwB;AAAA,MAArBC,KAAqB,uEAAb,CAAa;AAAA,MAAVC,IAAU,uEAAH,GAAG;AACnE,QAAMC,EAAE,GAAGV,eAAe,CAACK,CAAD,EAAI,GAAJ,EAAS,4BAAT,CAA1B;AACAJ,MAAI,CAACU,MAAL,CACID,EAAE,CAACE,IAAH,KAAY,CAAZ,IAAiBF,EAAE,CAACE,IAAH,KAAY,CADjC,EAEI,MAAM;sBACUF,EAAE,CAACE,IAAI,GAH3B;AAIAX,MAAI,CAACU,MAAL,CACIV,IAAI,CAACY,KAAL,CAAWP,WAAX,CADJ,EAEI,MAAM,iEACF,+BAA+BA,WAAW,GAHlD;AAKA,MAAIQ,GAAG,GAAGJ,EAAV;AACA,MAAIK,YAAY,GAAG,KAAnB;;AACA,MAAIL,EAAE,CAACE,IAAH,KAAY,CAAhB,EAAmB;AACjBG,gBAAY,GAAG,IAAf;AACAD,OAAG,GAAGX,OAAO,CAACO,EAAD,EAAK,CAAC,CAAD,EAAIA,EAAE,CAACM,KAAH,CAAS,CAAT,CAAJ,EAAiBN,EAAE,CAACM,KAAH,CAAS,CAAT,CAAjB,EAA8BN,EAAE,CAACM,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAb;AACD;;AAED,QAAMC,MAAM,GAAc;AAACZ,KAAC,EAAES;AAAJ,GAA1B;AAEA,QAAMI,KAAK,GAAa;AAACZ,eAAD;AAAcC,QAAd;AAAoBC,SAApB;AAA2BC;AAA3B,GAAxB,CApBmE,CAsBnE;;AACA,QAAMU,GAAG,GAAGrB,MAAM,CAACsB,SAAP,CACIrB,GADJ,EACSkB,MADT,EAEIC,KAFJ,CAAZ;;AAIA,MAAIH,YAAJ,EAAkB;AAChB,WAAOZ,OAAO,CAACgB,GAAD,EAAM,CAACA,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAD,EAAeG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAf,EAA6BG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD,GAFD,MAEO;AACL,WAAOG,GAAP;AACD;AACF;;AAED,OAAO,MAAME,0BAA0B,GAAGnB,EAAE,CAAC;AAACE;AAAD,CAAD,CAArC","names":["ENGINE","LRN","convertToTensor","util","op","reshape","localResponseNormalization_","x","depthRadius","bias","alpha","beta","$x","assert","rank","isInt","x4D","reshapedTo4D","shape","inputs","attrs","res","runKernel","localResponseNormalization"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/local_response_normalization.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {LRN, LRNAttrs, LRNInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Normalizes the activation of a local neighborhood across or within\n * channels.\n *\n * @param x The input tensor. The 4-D input tensor is treated as a 3-D array\n *     of 1D vectors (along the last dimension), and each vector is\n *     normalized independently.\n * @param depthRadius The number of adjacent channels in the 1D normalization\n *     window.\n * @param bias A constant bias term for the basis.\n * @param alpha A scale factor, usually positive.\n * @param beta An exponent.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction localResponseNormalization_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthRadius = 5, bias = 1, alpha = 1, beta = 0.5): T {\n  const $x = convertToTensor(x, 'x', 'localResponseNormalization');\n  util.assert(\n      $x.rank === 4 || $x.rank === 3,\n      () => `Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank ${$x.rank}.`);\n  util.assert(\n      util.isInt(depthRadius),\n      () => `Error in localResponseNormalization: depthRadius must be an ` +\n          `integer but got depthRadius ${depthRadius}.`);\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  const inputs: LRNInputs = {x: x4D};\n\n  const attrs: LRNAttrs = {depthRadius, bias, alpha, beta};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  LRN, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  } else {\n    return res;\n  }\n}\n\nexport const localResponseNormalization = op({localResponseNormalization_});\n"]},"metadata":{},"sourceType":"module"}