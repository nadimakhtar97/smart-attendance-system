{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const dilations = 1;\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n  let res;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 && util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  } else {\n    const xValues = backend.data.get(x.dataId).values;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n  }\n\n  return res;\n}\nexport const maxPoolConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,YAAR,EAAgDC,OAAhD,EAA8GC,IAA9G,QAAyH,uBAAzH;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,IAAR,QAAmB,qBAAnB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAUC,OAAV,CACFC,IADE,EAEuE;AAE3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACAL,kBAAgB,CAACQ,CAAD,EAAI,SAAJ,CAAhB;AACA,QAAM;AAACC,cAAD;AAAaC,WAAb;AAAsBC,OAAtB;AAA2BC;AAA3B,MAA8CL,KAApD;AACA,QAAMM,SAAS,GAAG,CAAlB;AAEAd,MAAI,CAACe,MAAL,CACIjB,YAAY,CAACkB,8BAAb,CAA4CL,OAA5C,EAAqDG,SAArD,CADJ,EAEI,MAAM,8DACF,eAAeH,OAAO,mBAAmBG,SAAS,GAH1D;AAKA,QAAMG,QAAQ,GAAGnB,YAAY,CAACoB,iBAAb,CACbT,CAAC,CAACU,KADW,EACgCT,UADhC,EAC4CC,OAD5C,EAEbG,SAFa,EAEFF,GAFE,EAEGC,eAFH,CAAjB;AAGA,MAAIO,GAAJ;;AAEA,MAAIH,QAAQ,CAACI,WAAT,KAAyB,CAAzB,IAA8BJ,QAAQ,CAACK,YAAT,KAA0B,CAAxD,IACAtB,IAAI,CAACuB,WAAL,CAAiBN,QAAQ,CAACO,OAA1B,EAAmCP,QAAQ,CAACQ,QAA5C,CADJ,EAC2D;AACzDL,OAAG,GAAGjB,QAAQ,CAAC;AAACG,YAAM,EAAE;AAACG;AAAD,OAAT;AAAcF;AAAd,KAAD,CAAd;AACD,GAHD,MAGO;AACL,UAAMmB,OAAO,GAAGnB,OAAO,CAACoB,IAAR,CAAaC,GAAb,CAAiBnB,CAAC,CAACoB,MAAnB,EAA2BC,MAA3C;AACA,UAAMnB,OAAO,GAAGX,IAAI,CAAC+B,cAAL,CAAoBtB,CAAC,CAACU,KAAtB,CAAhB;AACA,UAAMa,MAAM,GAAG9B,IAAI,CAACwB,OAAD,EAAUjB,CAAC,CAACU,KAAZ,EAAmBV,CAAC,CAACwB,KAArB,EAA4BtB,OAA5B,EAAqCM,QAArC,EAA+C,KAA/C,CAAnB;AACAG,OAAG,GAAGb,OAAO,CAAC2B,cAAR,CACFjB,QAAQ,CAACQ,QADP,EACiBhB,CAAC,CAACwB,KADnB,EAC0BD,MAAM,CAACF,MADjC,CAAN;AAED;;AACD,SAAOV,GAAP;AACD;AAED,OAAO,MAAMe,aAAa,GAAiB;AACzCC,YAAU,EAAErC,OAD6B;AAEzCsC,aAAW,EAAE,KAF4B;AAGzCC,YAAU,EAAElC;AAH6B,CAApC","names":["backend_util","MaxPool","util","assertNotComplex","pool","identity","maxPool","args","inputs","backend","attrs","x","filterSize","strides","pad","dimRoundingMode","dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computePool2DInfo","shape","res","filterWidth","filterHeight","arraysEqual","inShape","outShape","xValues","data","get","dataId","values","computeStrides","buffer","dtype","makeTensorInfo","maxPoolConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/MaxPool.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPool, MaxPoolAttrs, MaxPoolInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool} from '../utils/pool_utils';\nimport {identity} from './Identity';\n\nexport function maxPool(\n    args:\n        {inputs: MaxPoolInputs, backend: MathBackendCPU, attrs: MaxPoolAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  assertNotComplex(x, 'maxPool');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n  const dilations = 1;\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      dilations, pad, dimRoundingMode);\n  let res: TensorInfo;\n\n  if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n      util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n    res = identity({inputs: {x}, backend});\n  } else {\n    const xValues = backend.data.get(x.dataId).values as TypedArray;\n    const strides = util.computeStrides(x.shape);\n    const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n    res = backend.makeTensorInfo(\n        convInfo.outShape, x.dtype, buffer.values as TypedArray);\n  }\n  return res;\n}\n\nexport const maxPoolConfig: KernelConfig = {\n  kernelName: MaxPool,\n  backendName: 'cpu',\n  kernelFunc: maxPool as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}