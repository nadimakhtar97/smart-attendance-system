{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BroadcastTo } from '../kernel_names';\nimport { sum } from '../ops/sum';\nexport const broadcastToGradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: (dy, saved, attrs) => {\n    const broadCastToAttrs = attrs;\n    const inputShape = broadCastToAttrs.inputShape;\n    const outputShape = broadCastToAttrs.shape;\n    const reps = Array.from(outputShape);\n\n    for (let i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(`broadcastTo(): [${inputShape}] cannot be broadcast to [${outputShape}].`);\n      }\n    }\n\n    const axes = [];\n\n    for (let i = 0; i < reps.length; i++) {\n      if (reps[i] > 1) {\n        axes.push(i);\n      }\n    }\n\n    return {\n      x: () => sum(dy, axes, true\n      /* keepDims */\n      )\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,WAAR,QAA4C,iBAA5C;AAEA,SAAQC,GAAR,QAAkB,YAAlB;AAGA,OAAO,MAAMC,qBAAqB,GAAe;AAC/CC,YAAU,EAAEH,WADmC;AAE/CI,UAAQ,EAAE,CAACC,EAAD,EAAaC,KAAb,EAA8BC,KAA9B,KAAqD;AAC7D,UAAMC,gBAAgB,GAClBD,KADJ;AAGA,UAAME,UAAU,GAAGD,gBAAgB,CAACC,UAApC;AACA,UAAMC,WAAW,GAAGF,gBAAgB,CAACG,KAArC;AAEA,UAAMC,IAAI,GAAaC,KAAK,CAACC,IAAN,CAAWJ,WAAX,CAAvB;;AACA,SAAK,IAAIK,CAAC,GAAGN,UAAU,CAACO,MAAX,GAAoB,CAAjC,EAAoCD,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD;AAC/C,UAAIN,UAAU,CAACM,CAAD,CAAV,KAAkBL,WAAW,CAACK,CAAD,CAAjC,EAAsC;AACpCH,YAAI,CAACG,CAAD,CAAJ,GAAU,CAAV;AACD,OAFD,MAEO,IAAIN,UAAU,CAACM,CAAD,CAAV,KAAkB,CAAtB,EAAyB;AAC9B,cAAM,IAAIE,KAAJ,CAAU,mBACZR,UAAU,6BAA6BC,WAAW,IADhD,CAAN;AAED;AACF;;AACD,UAAMQ,IAAI,GAAa,EAAvB;;AACA,SAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAIH,IAAI,CAACG,CAAD,CAAJ,GAAU,CAAd,EAAiB;AACfG,YAAI,CAACC,IAAL,CAAUJ,CAAV;AACD;AACF;;AAED,WAAO;AAACK,OAAC,EAAE,MAAMnB,GAAG,CAACI,EAAD,EAAKa,IAAL,EAAW;AAAK;AAAhB;AAAb,KAAP;AACD;AA1B8C,CAA1C","names":["BroadcastTo","sum","broadcastToGradConfig","kernelName","gradFunc","dy","saved","attrs","broadCastToAttrs","inputShape","outputShape","shape","reps","Array","from","i","length","Error","axes","push","x"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/BroadcastTo_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BroadcastTo, BroadCastToAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const broadcastToGradConfig: GradConfig = {\n  kernelName: BroadcastTo,\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const broadCastToAttrs: BroadCastToAttrs =\n        attrs as unknown as BroadCastToAttrs;\n\n    const inputShape = broadCastToAttrs.inputShape;\n    const outputShape = broadCastToAttrs.shape;\n\n    const reps: number[] = Array.from(outputShape);\n    for (let i = inputShape.length - 1; i >= 0; i--) {\n      if (inputShape[i] === outputShape[i]) {\n        reps[i] = 1;\n      } else if (inputShape[i] !== 1) {\n        throw new Error(`broadcastTo(): [${\n            inputShape}] cannot be broadcast to [${outputShape}].`);\n      }\n    }\n    const axes: number[] = [];\n    for (let i = 0; i < reps.length; i++) {\n      if (reps[i] > 1) {\n        axes.push(i);\n      }\n    }\n\n    return {x: () => sum(dy, axes, true /* keepDims */)};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}