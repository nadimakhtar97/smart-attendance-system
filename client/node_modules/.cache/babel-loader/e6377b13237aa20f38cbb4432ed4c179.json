{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport * as shader_compiler from './shader_compiler';\nimport { createFragmentShader } from './webgl_util';\nexport function compileProgram(gpgpu, program, inputs, output) {\n  const inputInfos = inputs.map((input, i) => {\n    const shapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n\n    if (input.texData != null && input.texData.slice != null && input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n\n    return {\n      name: program.variableNames[i],\n      shapeInfo\n    };\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader); // Add special uniforms (NAN, INFINITY)\n\n  let infLoc = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  } // Add user-defined uniforms\n\n\n  const shouldThrow = false;\n  const uniformLocations = {};\n  const inShapesLocations = {};\n  const inTexShapesLocations = {};\n\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] = gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] = gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  let outShapeLocation;\n  let outTexShapeLocation;\n  let outShapeStridesLocation;\n\n  if (program.enableShapeUniforms) {\n    outShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation = gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation = gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  const customUniformLocations = [];\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] = gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    program,\n    fragmentShader,\n    source,\n    webGLProgram,\n    uniformLocations,\n    customUniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(shapeInfos, inputs) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(`Binary was compiled with ${shapeInfos.length} inputs, but ` + `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(`Binary was compiled with different shapes than ` + `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    } // The input is uploaded as uniform.\n\n\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(`Binary was compiled with different texture shapes than the` + ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram(gpgpu, binary, inputs, output, customUniformValues) {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n\n  gpgpu.setProgram(binary.webGLProgram); // Set special uniforms (NAN, INFINITY)\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  } // Set user-defined inputs\n\n\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {\n        uniformShape\n      } = shader_compiler.getUniformInfoFromShape(binary.program.packedInputs, input.shape, input.texData.texShape);\n\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n\n      return;\n    } // If the input was sliced, upload the flat offset index.\n\n\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  });\n  const outShapeLoc = binary.outShapeLocation;\n\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n\n      case 3:\n        gpgpu.gl.uniform2iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n\n      case 4:\n        gpgpu.gl.uniform3iv(binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n\n      default:\n        break;\n    }\n  }\n\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(binary.outTexShapeLocation, output.texData.texShape[0], output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n\n  gpgpu.executeProgram();\n}\nexport function makeShaderKey(program, inputs, output) {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null && x.texData.slice.flatOffset > 0; // TODO: Remove the condition of !x.isUniform.\n\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {\n        useSqueezeShape,\n        uniformShape,\n        keptDims\n      } = shader_compiler.getUniformInfoFromShape(program.packedInputs, x.shape, xTexShape);\n      let rank1 = '',\n          rank2 = '',\n          rank34 = '';\n\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape = [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${strides[strides.length - 1] === xTexShape[1]}`;\n      }\n\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual = uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims = backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs && xRank === output.shape.length && util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne = program.packedInputs || uniformShape.length > 2 ? '' : `${xTexShape[0] > 1}_${xTexShape[1] > 1}`; // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name; // Fast string concat. See https://jsperf.com/string-concatenation/14.\n\n  key += '_' + keyInputs + '_' + keyUserCode + `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\nexport function useShapeUniforms(rank) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}","map":{"version":3,"mappings":"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","names":["backend_util","env","util","shader_compiler","createFragmentShader","compileProgram","gpgpu","program","inputs","output","inputInfos","map","input","i","shapeInfo","logicalShape","shape","texShape","isUniform","texData","isPacked","flatOffset","slice","name","variableNames","inShapeInfos","x","outShapeInfo","source","makeShader","fragmentShader","gl","webGLProgram","createProgram","infLoc","nanLoc","getUniformLocation","getNumber","shouldThrow","uniformLocations","inShapesLocations","inTexShapesLocations","length","varName","enableShapeUniforms","outShapeLocation","outTexShapeLocation","outShapeStridesLocation","customUniformLocations","customUniforms","forEach","d","validateBinaryAndProgram","shapeInfos","Error","s","shapeA","shapeB","arraysEqual","texShapeA","texShapeB","runProgram","binary","customUniformValues","outTex","texture","outTexShape","setOutputPackedMatrixTexture","setOutputMatrixTexture","setProgram","uniform1f","Infinity","NaN","varLoc","varOffsetLoc","varShapeLoc","varTexShapeLoc","uniformShape","getUniformInfoFromShape","packedInputs","uniform1iv","Int32Array","uniform2iv","uniform3iv","uniform4iv","uniform2i","sizeFromShape","uniformValues","vals","Float32Array","uniform1fv","uniform1i","setInputMatrixTexture","outShapeLoc","strides","computeStrides","customLoc","customValue","type","uniform2fv","uniform3fv","uniform4fv","executeProgram","makeShaderKey","keyInputs","concat","hasOffset","xTexShape","useSqueezeShape","keptDims","rank1","rank2","rank34","packedTexShape","Math","ceil","xRank","isLogicalShapTexShapeEqual","isScalar","broadcastDims","getBroadcastDims","isInOutTexShapeEqual","isTexShapeGreaterThanOne","keyUserCode","userCode","key","constructor","useShapeUniforms","rank","getBool"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/gpgpu_math.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, Tensor, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUContext} from './gpgpu_context';\nimport * as shader_compiler from './shader_compiler';\nimport {InputInfo, ShapeInfo, UniformType} from './shader_compiler';\nimport {PackingScheme, TextureData, TextureUsage} from './tex_util';\nimport {createFragmentShader} from './webgl_util';\n\nexport interface GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  /** If true, this program expects packed input textures. Defaults to false. */\n  packedInputs?: boolean;\n  /** If true, this program produces a packed texture. Defaults to false. */\n  packedOutput?: boolean;\n  /**\n   * Affects what type of texture we allocate for the output. Defaults to\n   * `TextureUsage.RENDER`.\n   */\n  outTexUsage?: TextureUsage;\n  /**\n   * The type of scheme to use when packing texels for the output values.\n   * See `PackingScheme` for details. Defaults to `PackingScheme.SHARED_BATCH`.\n   */\n  outPackingScheme?: PackingScheme;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport interface GPGPUBinary {\n  webGLProgram: WebGLProgram;\n  program: GPGPUProgram;\n  uniformLocations: {[name: string]: WebGLUniformLocation};\n  customUniformLocations?: WebGLUniformLocation[];\n  source: string;\n  fragmentShader: WebGLShader;\n  inShapeInfos: ShapeInfo[];\n  outShapeInfo: ShapeInfo;\n  infLoc: WebGLUniformLocation;\n  nanLoc: WebGLUniformLocation;\n  inShapesLocations?: {[name: string]: WebGLUniformLocation};\n  inTexShapesLocations?: {[name: string]: WebGLUniformLocation};\n  outShapeLocation?: WebGLUniformLocation;\n  outShapeStridesLocation?: WebGLUniformLocation;\n  outTexShapeLocation?: WebGLUniformLocation;\n}\n\nexport interface TensorData {\n  shape: number[];\n  texData: TextureData;\n  isUniform: boolean;\n  // Available when we decide to upload as uniform instead of texture.\n  uniformValues?: TypedArray;\n}\n\nexport function compileProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, program: GPGPUProgram, inputs: TensorData[],\n    output: TensorData): GPGPUBinary {\n  const inputInfos: InputInfo[] = inputs.map((input, i) => {\n    const shapeInfo: ShapeInfo = {\n      logicalShape: input.shape,\n      texShape: input.isUniform ? null : input.texData.texShape,\n      isUniform: input.isUniform,\n      isPacked: input.isUniform ? false : input.texData.isPacked,\n      flatOffset: null\n    };\n    if (input.texData != null && input.texData.slice != null &&\n        input.texData.slice.flatOffset > 0) {\n      shapeInfo.flatOffset = input.texData.slice.flatOffset;\n    }\n    return {name: program.variableNames[i], shapeInfo};\n  });\n  const inShapeInfos = inputInfos.map(x => x.shapeInfo);\n  const outShapeInfo: ShapeInfo = {\n    logicalShape: output.shape,\n    texShape: output.texData.texShape,\n    isUniform: false,\n    isPacked: output.texData.isPacked,\n    flatOffset: null\n  };\n  const source = shader_compiler.makeShader(inputInfos, outShapeInfo, program);\n  const fragmentShader = createFragmentShader(gpgpu.gl, source);\n  const webGLProgram = gpgpu.createProgram(fragmentShader);\n\n  // Add special uniforms (NAN, INFINITY)\n  let infLoc: WebGLUniformLocation = null;\n  const nanLoc = gpgpu.getUniformLocation(webGLProgram, 'NAN', false);\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    infLoc = gpgpu.getUniformLocation(webGLProgram, 'INFINITY', false);\n  }\n\n  // Add user-defined uniforms\n  const shouldThrow = false;\n  const uniformLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  const inTexShapesLocations: {[name: string]: WebGLUniformLocation} = {};\n  for (let i = 0; i < program.variableNames.length; i++) {\n    const varName = program.variableNames[i];\n    uniformLocations[varName] =\n        gpgpu.getUniformLocation(webGLProgram, varName, shouldThrow);\n    uniformLocations[`offset${varName}`] =\n        gpgpu.getUniformLocation(webGLProgram, `offset${varName}`, shouldThrow);\n    if (program.enableShapeUniforms) {\n      inShapesLocations[`${varName}Shape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}Shape`, shouldThrow);\n      inTexShapesLocations[`${varName}TexShape`] = gpgpu.getUniformLocation(\n          webGLProgram, `${varName}TexShape`, shouldThrow);\n    }\n  }\n\n  let outShapeLocation: WebGLUniformLocation;\n  let outTexShapeLocation: WebGLUniformLocation;\n  let outShapeStridesLocation: WebGLUniformLocation;\n  if (program.enableShapeUniforms) {\n    outShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShape', shouldThrow);\n    outShapeStridesLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outShapeStrides', shouldThrow);\n    outTexShapeLocation =\n        gpgpu.getUniformLocation(webGLProgram, 'outTexShape', shouldThrow);\n  }\n\n  const customUniformLocations: WebGLUniformLocation[] = [];\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d, i) => {\n      customUniformLocations[i] =\n          gpgpu.getUniformLocation(webGLProgram, d.name, shouldThrow);\n    });\n  }\n\n  return {\n    program,\n    fragmentShader,\n    source,\n    webGLProgram,\n    uniformLocations,\n    customUniformLocations,\n    inShapeInfos,\n    outShapeInfo,\n    infLoc,\n    nanLoc,\n    inShapesLocations,\n    inTexShapesLocations,\n    outShapeLocation,\n    outShapeStridesLocation,\n    outTexShapeLocation\n  };\n}\n\nfunction validateBinaryAndProgram(\n    shapeInfos: ShapeInfo[], inputs: TensorData[]) {\n  if (shapeInfos.length !== inputs.length) {\n    throw Error(\n        `Binary was compiled with ${shapeInfos.length} inputs, but ` +\n        `was executed with ${inputs.length} inputs`);\n  }\n\n  shapeInfos.forEach((s, i) => {\n    const shapeA = s.logicalShape;\n    const input = inputs[i];\n    const shapeB = input.shape;\n\n    if (!util.arraysEqual(shapeA, shapeB)) {\n      throw Error(\n          `Binary was compiled with different shapes than ` +\n          `the current args. Shapes ${shapeA} and ${shapeB} must match`);\n    }\n    // The input is uploaded as uniform.\n    if (s.isUniform && input.isUniform) {\n      return;\n    }\n\n    const texShapeA = s.texShape;\n    const texShapeB = input.isUniform ? null : input.texData.texShape;\n    if (!util.arraysEqual(texShapeA, texShapeB)) {\n      throw Error(\n          `Binary was compiled with different texture shapes than the` +\n          ` current args. Shape ${texShapeA} and ${texShapeB} must match`);\n    }\n  });\n}\n\nexport function runProgram<T extends Tensor, K extends Tensor>(\n    gpgpu: GPGPUContext, binary: GPGPUBinary, inputs: TensorData[],\n    output: TensorData, customUniformValues?: number[][]): void {\n  if (!binary.program.enableShapeUniforms) {\n    validateBinaryAndProgram(binary.inShapeInfos, inputs);\n    validateBinaryAndProgram([binary.outShapeInfo], [output]);\n  }\n\n  const outTex = output.texData.texture;\n  const outTexShape = output.texData.texShape;\n  if (output.texData.isPacked) {\n    gpgpu.setOutputPackedMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  } else {\n    gpgpu.setOutputMatrixTexture(\n        outTex.texture, outTexShape[0], outTexShape[1]);\n  }\n  gpgpu.setProgram(binary.webGLProgram);\n\n  // Set special uniforms (NAN, INFINITY)\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    if (binary.infLoc !== null) {\n      gpgpu.gl.uniform1f(binary.infLoc, Infinity);\n    }\n  }\n  if (binary.nanLoc !== null) {\n    gpgpu.gl.uniform1f(binary.nanLoc, NaN);\n  }\n\n  // Set user-defined inputs\n  inputs.forEach((input, i) => {\n    const varName = binary.program.variableNames[i];\n    const varLoc = binary.uniformLocations[varName];\n    const varOffsetLoc = binary.uniformLocations[`offset${varName}`];\n    const varShapeLoc = binary.inShapesLocations[`${varName}Shape`];\n    const varTexShapeLoc = binary.inTexShapesLocations[`${varName}TexShape`];\n\n    if (varShapeLoc) {\n      const {uniformShape} = shader_compiler.getUniformInfoFromShape(\n          binary.program.packedInputs, input.shape, input.texData.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          gpgpu.gl.uniform1iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 2:\n          gpgpu.gl.uniform2iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 3:\n          gpgpu.gl.uniform3iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        case 4:\n          gpgpu.gl.uniform4iv(varShapeLoc, new Int32Array(uniformShape));\n          break;\n        default:\n          break;\n      }\n    }\n    if (varTexShapeLoc) {\n      gpgpu.gl.uniform2i(\n          varTexShapeLoc, input.texData.texShape[0], input.texData.texShape[1]);\n    }\n\n    if (varLoc == null) {\n      // The compiler inferred that this variable is not used in this shader.\n      return;\n    }\n\n    if (input.isUniform) {\n      // Upload the values of the tensor as uniform.\n      if (util.sizeFromShape(input.shape) < 2) {\n        gpgpu.gl.uniform1f(varLoc, input.uniformValues[0]);\n      } else {\n        let vals = input.uniformValues;\n        if (!(vals instanceof Float32Array)) {\n          vals = new Float32Array(vals);\n        }\n        gpgpu.gl.uniform1fv(varLoc, vals);\n      }\n      return;\n    }\n\n    // If the input was sliced, upload the flat offset index.\n    if (input.texData.slice != null && varOffsetLoc != null) {\n      gpgpu.gl.uniform1i(varOffsetLoc, input.texData.slice.flatOffset);\n    }\n\n    gpgpu.setInputMatrixTexture(input.texData.texture.texture, varLoc, i);\n  });\n\n  const outShapeLoc = binary.outShapeLocation;\n  if (outShapeLoc) {\n    switch (output.shape.length) {\n      case 1:\n        gpgpu.gl.uniform1iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 2:\n        gpgpu.gl.uniform2iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 3:\n        gpgpu.gl.uniform3iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      case 4:\n        gpgpu.gl.uniform4iv(outShapeLoc, new Int32Array(output.shape));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outShapeStridesLocation) {\n    const strides = util.computeStrides(output.shape);\n    switch (output.shape.length) {\n      case 2:\n        gpgpu.gl.uniform1iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 3:\n        gpgpu.gl.uniform2iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      case 4:\n        gpgpu.gl.uniform3iv(\n            binary.outShapeStridesLocation, new Int32Array(strides));\n        break;\n      default:\n        break;\n    }\n  }\n  if (binary.outTexShapeLocation) {\n    gpgpu.gl.uniform2i(\n        binary.outTexShapeLocation, output.texData.texShape[0],\n        output.texData.texShape[1]);\n  }\n\n  if (binary.program.customUniforms && customUniformValues) {\n    binary.program.customUniforms.forEach((d, i) => {\n      const customLoc = binary.customUniformLocations[i];\n      const customValue = customUniformValues[i];\n      if (d.type === 'float') {\n        gpgpu.gl.uniform1fv(customLoc, customValue);\n      } else if (d.type === 'vec2') {\n        gpgpu.gl.uniform2fv(customLoc, customValue);\n      } else if (d.type === 'vec3') {\n        gpgpu.gl.uniform3fv(customLoc, customValue);\n      } else if (d.type === 'vec4') {\n        gpgpu.gl.uniform4fv(customLoc, customValue);\n      } else if (d.type === 'int') {\n        gpgpu.gl.uniform1iv(customLoc, customValue);\n      } else if (d.type === 'ivec2') {\n        gpgpu.gl.uniform2iv(customLoc, customValue);\n      } else if (d.type === 'ivec3') {\n        gpgpu.gl.uniform3iv(customLoc, customValue);\n      } else if (d.type === 'ivec4') {\n        gpgpu.gl.uniform4iv(customLoc, customValue);\n      } else {\n        throw Error(`uniform type ${d.type} is not supported yet.`);\n      }\n    });\n  }\n  gpgpu.executeProgram();\n}\n\nexport function makeShaderKey(\n    program: GPGPUProgram, inputs: TensorData[], output: TensorData): string {\n  let keyInputs = '';\n  inputs.concat(output).forEach(x => {\n    const hasOffset = x.texData != null && x.texData.slice != null &&\n        x.texData.slice.flatOffset > 0;\n    // TODO: Remove the condition of !x.isUniform.\n    if (program.enableShapeUniforms && !x.isUniform) {\n      const xTexShape = x.texData.texShape;\n      const {useSqueezeShape, uniformShape, keptDims} =\n          shader_compiler.getUniformInfoFromShape(\n              program.packedInputs, x.shape, xTexShape);\n      let rank1 = '', rank2 = '', rank34 = '';\n      if (uniformShape.length === 1 && program.packedInputs) {\n        const packedTexShape =\n            [Math.ceil(xTexShape[0] / 2), Math.ceil(xTexShape[1] / 2)];\n        rank1 = `${packedTexShape[0] > 1}_${packedTexShape[1] > 1}`;\n      } else if (uniformShape.length === 2 && !program.packedInputs) {\n        rank2 = `${uniformShape[0] > 1}_${uniformShape[1] > 1}`;\n      } else if (uniformShape.length > 2 && !program.packedInputs) {\n        const strides = util.computeStrides(uniformShape);\n        rank34 = `${strides[0] === xTexShape[1]}_${\n            strides[strides.length - 1] === xTexShape[1]}`;\n      }\n      const xRank = x.shape.length;\n      const isLogicalShapTexShapeEqual =\n          uniformShape.length === 2 && util.arraysEqual(x.shape, xTexShape);\n      const isScalar = util.sizeFromShape(x.shape) === 1;\n      const broadcastDims =\n          backend_util.getBroadcastDims(x.shape, output.shape);\n      const isInOutTexShapeEqual = !program.packedInputs &&\n          xRank === output.shape.length &&\n          util.arraysEqual(xTexShape, output.texData.texShape);\n      const isTexShapeGreaterThanOne =\n          program.packedInputs || uniformShape.length > 2 ?\n          '' :\n          `${xTexShape[0] > 1}_${xTexShape[1] > 1}`;\n      // These key components are needed due to shader_compiler is embedding\n      // them in the shader.\n      // |xRank| is used to determine the coords length. See\n      // get[Packed]SamplerAtOutputCoords.\n      // |isInOutTexShapeEqual| is used to determine whether going to an\n      // optimization path in getSamplerAtOutputCoords.\n      // |useSqueezeShape| is extracted from squeezeInputInfo of\n      // getSampler[2|3|4]D/getPackedSampler3D.\n      // |isScalar| is extracted from isInputScalar/isOutputScalar in\n      // getPackedSamplerAtOutputCoords.\n      // |broadcastDims| is extracted from get[Packed]SamplerAtOutputCoords.\n      // |isLogicalShapTexShapeEqual| is used in\n      // getOutput[Packed]2DCoords/get[Packed]Sampler2D.\n      // |rank1| is used in getOutputPacked1DCoords.\n      // |rank2| is used in getOutput2DCoords.\n      // |rank34| is used in getSampler3D/getSampler4D.\n      // |isTexShapeGreaterThanOne| are used in\n      // getSampler[Scalar|1D|2D]/getOutput1DCoords.\n      keyInputs += `${xRank}_${isInOutTexShapeEqual}_${\n          useSqueezeShape ? keptDims : ''}_${uniformShape.length}_${isScalar}_${\n          broadcastDims}_${isLogicalShapTexShapeEqual}_${rank1}_${rank2}_${\n          rank34}_${isTexShapeGreaterThanOne}_${hasOffset}`;\n    } else {\n      const texShape = x.isUniform ? 'uniform' : x.texData.texShape;\n      keyInputs += `${x.shape}_${texShape}_${hasOffset}`;\n    }\n  });\n  const keyUserCode = program.userCode;\n  let key = program.constructor.name;\n  // Fast string concat. See https://jsperf.com/string-concatenation/14.\n  key += '_' + keyInputs + '_' + keyUserCode +\n      `${env().getNumber('WEBGL_VERSION')}`;\n  return key;\n}\n\nexport function useShapeUniforms(rank: number) {\n  // TODO: Remove the limitaion of rank <= 4.\n  return env().getBool('WEBGL_USE_SHAPES_UNIFORMS') && rank <= 4;\n}\n"]},"metadata":{},"sourceType":"module"}