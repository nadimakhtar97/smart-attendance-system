{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2DBackpropFilter } from '../kernel_names';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\nfunction conv2DBackpropFilter_(x, dy, filterShape, strides, pad) {\n  let dataFormat = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'NHWC';\n  let dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  let x4D = x;\n\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n\n  let dy4D = dy;\n\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` + `${x4D.shape}.`);\n  util.assert(dy4D.rank === 4, () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` + `${dy4D.shape}.`);\n  util.assert(filterShape.length === 4, () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` + `${filterShape}.`);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(inDepth === filterShape[2], () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` + `match input depth in filter (${filterShape[2]}.`);\n  util.assert(outDepth === filterShape[3], () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` + `match output depth for filter (${filterShape[3]}).`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerFilter', pad, dimRoundingMode);\n  const inputs = {\n    x: x4D,\n    dy: dy4D\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    filterShape\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  return ENGINE.runKernel(Conv2DBackpropFilter, inputs, attrs);\n}\n\nexport const conv2DBackpropFilter = op({\n  conv2DBackpropFilter_\n});","map":{"version":3,"mappings":"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","names":["ENGINE","Conv2DBackpropFilter","util","conv_util","op","reshape","conv2DBackpropFilter_","x","dy","filterShape","strides","pad","dataFormat","dimRoundingMode","x4D","rank","shape","dy4D","assert","length","inDepth","outDepth","checkPadOnDimRoundingMode","inputs","attrs","runKernel","conv2DBackpropFilter"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/conv2d_backprop_filter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the filter of a 2D convolution.\n *\n * @param x The input tensor, of rank 4 or rank 3 of shape\n *     [batch, height, width, inChannels]. If rank 3, batch of 1 is assumed.\n * @param dy The dy image, of rank 4 or rank 3, of shape\n *     [batch, height, width, outDepth]. If rank 3, batch of 1 is assumed.\n * @param filterShape The shape of the filter, length 4,\n *     [filterHeight, filterWidth, inDepth, outDepth].\n * @param strides The strides of the convolution: [strideHeight,\n * strideWidth].\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction conv2DBackpropFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2dDerFilter: input must be rank 4, but got shape ` +\n          `${x4D.shape}.`);\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in conv2dDerFilter: dy must be rank 4, but got shape ` +\n          `${dy4D.shape}.`);\n  util.assert(\n      filterShape.length === 4,\n      () => `Error in conv2dDerFilter: filterShape must be length 4, but got ` +\n          `${filterShape}.`);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  const outDepth = dataFormat === 'NHWC' ? dy4D.shape[3] : dy4D.shape[1];\n  util.assert(\n      inDepth === filterShape[2],\n      () => `Error in conv2dDerFilter: depth of input ${inDepth}) must ` +\n          `match input depth in filter (${filterShape[2]}.`);\n  util.assert(\n      outDepth === filterShape[3],\n      () => `Error in conv2dDerFilter: depth of dy (${outDepth}) must ` +\n          `match output depth for filter (${filterShape[3]}).`);\n  conv_util.checkPadOnDimRoundingMode('conv2dDerFilter', pad, dimRoundingMode);\n  const inputs: Conv2DBackpropFilterInputs = {x: x4D, dy: dy4D};\n  const attrs: Conv2DBackpropFilterAttrs =\n      {strides, pad, dataFormat, dimRoundingMode, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             Conv2DBackpropFilter, inputs as {} as NamedTensorMap,\n             attrs as {} as NamedAttrMap) as Tensor4D;\n}\n\nexport const conv2DBackpropFilter = op({conv2DBackpropFilter_});\n"]},"metadata":{},"sourceType":"module"}