{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Max':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.max(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Mean':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.mean(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Min':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.min(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Sum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.sum(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'All':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.all(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Any':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.any(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'ArgMax':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfOps.argMax(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'ArgMin':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        return [tfOps.argMin(getParamValue('x', node, tensorMap, context), axis)];\n      }\n\n    case 'Prod':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const keepDims = getParamValue('keepDims', node, tensorMap, context);\n        return [tfOps.prod(getParamValue('x', node, tensorMap, context), axis, keepDims)];\n      }\n\n    case 'Cumsum':\n      {\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const exclusive = getParamValue('exclusive', node, tensorMap, context);\n        const reverse = getParamValue('reverse', node, tensorMap, context);\n        return [tfOps.cumsum(getParamValue('x', node, tensorMap, context), axis, exclusive, reverse)];\n      }\n\n    case 'Bincount':\n      const x = getParamValue('x', node, tensorMap, context);\n      const weights = getParamValue('weights', node, tensorMap, context);\n      const size = getParamValue('size', node, tensorMap, context);\n      return [tfOps.bincount(x, weights, size)];\n\n    case 'DenseBincount':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const weights = getParamValue('weights', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const binaryOutput = getParamValue('binaryOutput', node, tensorMap, context);\n        return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'reduction';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","axis","keepDims","max","mean","min","sum","all","any","argMax","argMin","prod","exclusive","reverse","cumsum","x","weights","size","bincount","binaryOutput","denseBincount","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/reduction_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Max': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.max(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Mean': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.mean(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Min': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.min(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Sum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.sum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'All': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.all(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Any': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.any(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'ArgMax': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMax(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'ArgMin': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          return [tfOps.argMin(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis)];\n        }\n        case 'Prod': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number[];\n          const keepDims =\n              getParamValue('keepDims', node, tensorMap, context) as boolean;\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              keepDims)];\n        }\n        case 'Cumsum': {\n          const axis =\n              getParamValue('axis', node, tensorMap, context) as number;\n          const exclusive =\n              getParamValue('exclusive', node, tensorMap, context) as boolean;\n          const reverse =\n              getParamValue('reverse', node, tensorMap, context) as boolean;\n          return [tfOps.cumsum(\n              getParamValue('x', node, tensorMap, context) as Tensor, axis,\n              exclusive, reverse)];\n        }\n        case 'Bincount':\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          return [tfOps.bincount(x, weights, size)];\n        case 'DenseBincount': {\n          const x = getParamValue('x', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const weights =\n              getParamValue('weights', node, tensorMap, context) as Tensor1D |\n              Tensor2D;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number;\n\n          const binaryOutput =\n              getParamValue('binaryOutput', node, tensorMap, context) as\n              boolean;\n\n          return [tfOps.denseBincount(x, weights, size, binaryOutput)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'reduction';\n"]},"metadata":{},"sourceType":"module"}