{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Slice } from '../kernel_names';\nimport { pad } from '../ops/pad';\nimport { parseSliceParams } from '../ops/slice_util';\nexport const sliceGradConfig = {\n  kernelName: Slice,\n  inputsToSave: ['x'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const {\n      begin,\n      size\n    } = attrs;\n    const inputShape = x.shape;\n    const [begin_, size_] = parseSliceParams(x, begin, size); // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n\n    const paddings = [];\n\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n\n    return {\n      x: () => pad(dy, paddings)\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,KAAR,QAAgC,iBAAhC;AAEA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,gBAAR,QAA+B,mBAA/B;AAGA,OAAO,MAAMC,eAAe,GAAe;AACzCC,YAAU,EAAEJ,KAD6B;AAEzCK,cAAY,EAAE,CAAC,GAAD,CAF2B;AAGzCC,UAAQ,EAAE,CAACC,EAAD,EAAaC,KAAb,EAA8BC,KAA9B,KAAqD;AAC7D,UAAM,CAACC,CAAD,IAAMF,KAAZ;AACA,UAAM;AAACG,WAAD;AAAQC;AAAR,QAAgBH,KAAtB;AAEA,UAAMI,UAAU,GAAGH,CAAC,CAACI,KAArB;AACA,UAAM,CAACC,MAAD,EAASC,KAAT,IAAkBd,gBAAgB,CAACQ,CAAD,EAAIC,KAAJ,EAAWC,IAAX,CAAxC,CAL6D,CAO7D;AACA;AACA;AAEA;AACA;;AACA,UAAMK,QAAQ,GAA4B,EAA1C;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,EAAE,CAACY,IAAvB,EAA6BD,CAAC,EAA9B,EAAkC;AAChCD,cAAQ,CAACG,IAAT,CAAc,CAACL,MAAM,CAACG,CAAD,CAAP,EAAYL,UAAU,CAACK,CAAD,CAAV,GAAgBH,MAAM,CAACG,CAAD,CAAtB,GAA4BF,KAAK,CAACE,CAAD,CAA7C,CAAd;AACD;;AACD,WAAO;AAACR,OAAC,EAAE,MAAMT,GAAG,CAACM,EAAD,EAAKU,QAAL;AAAb,KAAP;AACD;AArBwC,CAApC","names":["Slice","pad","parseSliceParams","sliceGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x","begin","size","inputShape","shape","begin_","size_","paddings","i","rank","push"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/Slice_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Slice, SliceAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {pad} from '../ops/pad';\nimport {parseSliceParams} from '../ops/slice_util';\nimport {Tensor} from '../tensor';\n\nexport const sliceGradConfig: GradConfig = {\n  kernelName: Slice,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {begin, size} = attrs as {} as SliceAttrs;\n\n    const inputShape = x.shape;\n    const [begin_, size_] = parseSliceParams(x, begin, size);\n\n    // Create an Nx2 padding where the first column represents how many\n    // zeros are prepended (at start) for each dimension, and the second\n    // column indicates how many zeros are appended (at end).\n\n    // The number of zeros to append is the shape of the input\n    // elementwise-subtracted by both the begin vector and sizes vector.\n    const paddings: Array<[number, number]> = [];\n    for (let i = 0; i < dy.rank; i++) {\n      paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n    }\n    return {x: () => pad(dy, paddings)};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}