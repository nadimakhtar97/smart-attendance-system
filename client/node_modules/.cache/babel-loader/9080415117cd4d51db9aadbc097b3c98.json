{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Transpose } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction transpose_(x, perm) {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n\n  util.assert($x.rank === perm.length, () => `Error in transpose: rank of input ${$x.rank} ` + `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(axis >= 0 && axis < $x.rank, () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` + ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    perm\n  };\n  return ENGINE.runKernel(Transpose, inputs, attrs);\n}\n\nexport const transpose = op({\n  transpose_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,SAAR,QAAyD,iBAAzD;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;AAmBA,SAASC,UAAT,CAAsCC,CAAtC,EAAuDC,IAAvD,EAAsE;AACpE,QAAMC,EAAE,GAAGN,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;;AAEA,MAAIC,IAAI,IAAI,IAAZ,EAAkB;AAChBA,QAAI,GAAGC,EAAE,CAACC,KAAH,CAASC,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUA,CAAvB,EAA0BC,OAA1B,EAAP;AACD;;AACDV,MAAI,CAACW,MAAL,CACIN,EAAE,CAACO,IAAH,KAAYR,IAAI,CAACS,MADrB,EAEI,MAAM,qCAAqCR,EAAE,CAACO,IAAI,GAA5C,GACF,6BAA6BR,IAAI,GAHzC;AAIAA,MAAI,CAACU,OAAL,CAAaC,IAAI,IAAG;AAClBf,QAAI,CAACW,MAAL,CACII,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAGV,EAAE,CAACO,IAD3B,EAEI,MAAM,+CAA+CP,EAAE,CAACO,IAAH,GAAU,CAAC,EAA1D,GACF,YAAYR,IAAI,EAHxB;AAID,GALD;;AAOA,MAAIC,EAAE,CAACO,IAAH,IAAW,CAAf,EAAkB;AAChB,WAAOP,EAAE,CAACW,KAAH,EAAP;AACD;;AAED,QAAMC,MAAM,GAAoB;AAACd,KAAC,EAAEE;AAAJ,GAAhC;AACA,QAAMa,KAAK,GAAmB;AAACd;AAAD,GAA9B;AAEA,SAAOP,MAAM,CAACsB,SAAP,CACHrB,SADG,EACQmB,MADR,EACwCC,KADxC,CAAP;AAED;;AAED,OAAO,MAAME,SAAS,GAAGnB,EAAE,CAAC;AAACC;AAAD,CAAD,CAApB","names":["ENGINE","Transpose","convertToTensor","util","op","transpose_","x","perm","$x","shape","map","s","i","reverse","assert","rank","length","forEach","axis","clone","inputs","attrs","runKernel","transpose"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/transpose.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Transpose, TransposeAttrs, TransposeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Transposes the `tf.Tensor`. Permutes the dimensions according to `perm`.\n *\n * The returned `tf.Tensor`'s dimension `i` will correspond to the input\n * dimension `perm[i]`. If `perm` is not given, it is set to `[n-1...0]`,\n * where `n` is the rank of the input `tf.Tensor`. Hence by default, this\n * operation performs a regular matrix transpose on 2-D input `tf.Tensor`s.\n *\n * ```js\n * const a = tf.tensor2d([1, 2, 3, 4, 5, 6], [2, 3]);\n *\n * a.transpose().print();  // or tf.transpose(a)\n * ```\n *\n * @param x The tensor to transpose.\n * @param perm The permutation of the dimensions of a.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction transpose_<T extends Tensor>(x: T|TensorLike, perm?: number[]): T {\n  const $x = convertToTensor(x, 'x', 'transpose');\n\n  if (perm == null) {\n    perm = $x.shape.map((s, i) => i).reverse();\n  }\n  util.assert(\n      $x.rank === perm.length,\n      () => `Error in transpose: rank of input ${$x.rank} ` +\n          `must match length of perm ${perm}.`);\n  perm.forEach(axis => {\n    util.assert(\n        axis >= 0 && axis < $x.rank,\n        () => `All entries in 'perm' must be between 0 and ${$x.rank - 1}` +\n            ` but got ${perm}`);\n  });\n\n  if ($x.rank <= 1) {\n    return $x.clone();\n  }\n\n  const inputs: TransposeInputs = {x: $x};\n  const attrs: TransposeAttrs = {perm};\n\n  return ENGINE.runKernel(\n      Transpose, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const transpose = op({transpose_});\n"]},"metadata":{},"sourceType":"module"}