{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class GatherProgram {\n  constructor(aShape, outputShape) {\n    this.variableNames = ['A', 'indices'];\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n\n} // The input and output are always flattened into rank 4 tensors.\n\nfunction getSourceCoords(aShape, axis) {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n  const sourceCoords = [];\n\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n\n  return sourceCoords.join();\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAR,QAAgC,mBAAhC;AAIA,OAAM,MAAOC,aAAP,CAAoB;AAMxBC,cAAYC,MAAZ,EAAiCC,WAAjC,EAAyD;AALzD,yBAAgB,CAAC,GAAD,EAAM,SAAN,CAAhB;AAME,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,IAAL,GAAYD,WAAW,CAACE,MAAxB;AACA,UAAMC,KAAK,GAAGP,iBAAiB,CAAC,KAAKK,IAAN,CAA/B;AACA,UAAMG,YAAY,GAAGC,eAAe,CAACN,MAAD,EAAS,CAAT,CAApC;AAEA,SAAKO,QAAL,GAAgB;;UAEVH,KAAK;;oDAEqCJ,MAAM,CAAC,CAAD,CAAG;oCACzBK,YAAY;;KAL5C;AAQD;;AApBuB,C,CAuB1B;;AACA,SAASC,eAAT,CAAyBN,MAAzB,EAA8CQ,IAA9C,EAA0D;AACxD,QAAMC,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAtB;AAEA,QAAMJ,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,MAAM,CAACG,MAA3B,EAAmCO,CAAC,EAApC,EAAwC;AACtC,QAAIA,CAAC,KAAK,CAAV,EAAa;AACXL,kBAAY,CAACM,IAAb,CAAkB,OAAlB;AACD,KAFD,MAEO;AACLN,kBAAY,CAACM,IAAb,CAAkB,GAAGF,aAAa,CAACC,CAAD,CAAG,EAArC;AACD;AACF;;AACD,SAAOL,YAAY,CAACO,IAAb,EAAP;AACD","names":["getCoordsDataType","GatherProgram","constructor","aShape","outputShape","rank","length","dtype","sourceCoords","getSourceCoords","userCode","axis","currentCoords","i","push","join"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/gather_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport type GatherShape = [number, number, number, number];\n\nexport class GatherProgram implements GPGPUProgram {\n  variableNames = ['A', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: GatherShape, outputShape: GatherShape) {\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape, 2);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        int index = int(getIndices(resRC.x, resRC.z));\n        float inBounds = (index >= 0) && (index < ${aShape[2]}) ? 1.0 : 0.0;\n        setOutput(inBounds * getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\n// The input and output are always flattened into rank 4 tensors.\nfunction getSourceCoords(aShape: GatherShape, axis: number): string {\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    if (i === 2) {\n      sourceCoords.push('index');\n    } else {\n      sourceCoords.push(`${currentCoords[i]}`);\n    }\n  }\n  return sourceCoords.join();\n}\n"]},"metadata":{},"sourceType":"module"}