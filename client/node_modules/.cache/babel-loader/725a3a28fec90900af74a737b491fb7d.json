{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n  assertNotComplex(x, 'stridedSlice');\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n  let result; // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(x.shape.length >= 1, () => `Input must have rank at least 1, got: ${x.shape.length}`);\n    const size = slice_util.computeOutShape($begin, $end, $strides); // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin: $begin,\n        size\n      }\n    });\n    result = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: finalShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\nexport const stridedSliceConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,UAAlC,EAA8CC,YAA9C,EAA+GC,IAA/G,QAA0H,uBAA1H;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,gBAAR,QAA+B,qBAA/B;AAEA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AACJI,SADI;AAEJC,OAFI;AAGJC,WAHI;AAIJC,aAJI;AAKJC,WALI;AAMJC,gBANI;AAOJC,eAPI;AAQJC;AARI,MASFT,KATJ;AAWAR,kBAAgB,CAACS,CAAD,EAAI,cAAJ,CAAhB;AAEA,QAAM;AACJS,oBADI;AAEJC,cAFI;AAGJC,cAHI;AAIJC,aAJI;AAKJC,iBALI;AAMJZ,SAAK,EAAEa,MANH;AAOJZ,OAAG,EAAEa,IAPD;AAQJZ,WAAO,EAAEa;AARL,MAUF5B,UAAU,CAAC6B,SAAX,CACIjB,CAAC,CAACkB,KADN,EACajB,KADb,EACoBC,GADpB,EACyBC,OADzB,EACkCC,SADlC,EAC6CC,OAD7C,EACsDC,YADtD,EAEIC,WAFJ,EAEiBC,cAFjB,CAVJ;AAcA,MAAIW,MAAJ,CA9BD,CAgCC;AACA;;AACA,MAAIR,UAAJ,EAAgB;AACd;AACAQ,UAAM,GAAG3B,OAAO,CAAC;AAACK,YAAM,EAAE;AAACG;AAAD,OAAT;AAAcF,aAAd;AAAuBC,WAAK,EAAE;AAACmB,aAAK,EAAER;AAAR;AAA9B,KAAD,CAAhB;AACD,GAHD,MAGO,IAAIE,SAAS,IAAIC,aAAjB,EAAgC;AACrC;AACAvB,QAAI,CAAC8B,MAAL,CACIpB,CAAC,CAACkB,KAAF,CAAQG,MAAR,IAAkB,CADtB,EAEI,MAAM,yCAAyCrB,CAAC,CAACkB,KAAF,CAAQG,MAAM,EAFjE;AAIA,UAAMC,IAAI,GAAGlC,UAAU,CAACmC,eAAX,CAA2BT,MAA3B,EAAmCC,IAAnC,EAAyCC,QAAzC,CAAb,CANqC,CAOrC;;AACA,UAAMQ,MAAM,GAAG/B,KAAK,CAAC;AAACI,YAAM,EAAE;AAACG;AAAD,OAAT;AAAcF,aAAd;AAAuBC,WAAK,EAAE;AAACE,aAAK,EAAEa,MAAR;AAAgBQ;AAAhB;AAA9B,KAAD,CAApB;AACAH,UAAM,GACF3B,OAAO,CAAC;AAACK,YAAM,EAAE;AAACG,SAAC,EAAEwB;AAAJ,OAAT;AAAsB1B,aAAtB;AAA+BC,WAAK,EAAE;AAACmB,aAAK,EAAER;AAAR;AAAtC,KAAD,CADX;AAEAZ,WAAO,CAAC2B,6BAAR,CAAsCD,MAAtC;AACD,GAZM,MAYA;AACL,UAAME,IAAI,GAAG5B,OAAO,CAAC6B,UAAR,CAAmB3B,CAAnB,CAAb;AACA,UAAM4B,MAAM,GAAGlC,gBAAgB,CAACe,gBAAD,EAAmBiB,IAAnB,EAAyBV,QAAzB,EAAmCF,MAAnC,CAA/B;AAEAK,UAAM,GAAGrB,OAAO,CAAC+B,cAAR,CAAuBnB,UAAvB,EAAmCkB,MAAM,CAACE,KAA1C,EAAiDF,MAAM,CAACG,MAAxD,CAAT;AACD;;AAED,SAAOZ,MAAP;AACD;AAED,OAAO,MAAMa,kBAAkB,GAAiB;AAC9CC,YAAU,EAAE5C,YADkC;AAE9C6C,aAAW,EAAE,KAFiC;AAG9CC,YAAU,EAAExC;AAHkC,CAAzC","names":["slice_util","StridedSlice","util","assertNotComplex","reshape","slice","stridedSliceImpl","stridedSlice","args","inputs","backend","attrs","x","begin","end","strides","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","finalShapeSparse","finalShape","isIdentity","sliceDim0","isSimpleSlice","$begin","$end","$strides","sliceInfo","shape","result","assert","length","size","computeOutShape","sliced","disposeIntermediateTensorInfo","xBuf","bufferSync","outBuf","makeTensorInfo","dtype","values","stridedSliceConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/StridedSlice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, slice_util, StridedSlice, StridedSliceAttrs, StridedSliceInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {stridedSliceImpl} from './StridedSlice_impl';\n\nexport function stridedSlice(args: {\n  inputs: StridedSliceInputs,\n  backend: MathBackendCPU,\n  attrs: StridedSliceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {\n    begin,\n    end,\n    strides,\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  } = attrs;\n\n  assertNotComplex(x, 'stridedSlice');\n\n  const {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: $begin,\n    end: $end,\n    strides: $strides\n  } =\n      slice_util.sliceInfo(\n          x.shape, begin, end, strides, beginMask, endMask, ellipsisMask,\n          newAxisMask, shrinkAxisMask);\n\n  let result;\n\n  // ref:\n  // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/strided_slice_op.cc\n  if (isIdentity) {\n    // Optimization #1, slice is a no-op plus reshape\n    result = reshape({inputs: {x}, backend, attrs: {shape: finalShape}});\n  } else if (sliceDim0 || isSimpleSlice) {\n    // Optimization #2, slice is memory contiguous (only occurs in dim 0)\n    util.assert(\n        x.shape.length >= 1,\n        () => `Input must have rank at least 1, got: ${x.shape.length}`);\n\n    const size = slice_util.computeOutShape($begin, $end, $strides);\n    // To tolerate begin[0] > end[0] (a 0-output slice), we min(begin, end).\n    const sliced = slice({inputs: {x}, backend, attrs: {begin: $begin, size}});\n    result =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: finalShape}});\n    backend.disposeIntermediateTensorInfo(sliced);\n  } else {\n    const xBuf = backend.bufferSync(x);\n    const outBuf = stridedSliceImpl(finalShapeSparse, xBuf, $strides, $begin);\n\n    result = backend.makeTensorInfo(finalShape, outBuf.dtype, outBuf.values);\n  }\n\n  return result;\n}\n\nexport const stridedSliceConfig: KernelConfig = {\n  kernelName: StridedSlice,\n  backendName: 'cpu',\n  kernelFunc: stridedSlice as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}