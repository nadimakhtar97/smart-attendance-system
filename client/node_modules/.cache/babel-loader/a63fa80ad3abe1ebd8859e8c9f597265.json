{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { getGlslDifferences } from './glsl_version';\nimport * as tex_util from './tex_util';\nimport * as webgl_util from './webgl_util';\nexport function createVertexShader(gl) {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\nexport function createVertexBuffer(gl) {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array([-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\nexport function createIndexBuffer(gl) {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(gl, width, height, internalFormat, textureFormat, textureType) {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(tex2d, 0, internalFormat, width, height, 0, textureFormat, textureType, null));\n  } else {\n    webgl_util.callAndCheck(gl, () => gl.texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n  return {\n    texture,\n    texShape: [height, width]\n  };\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatFloat;\n}\nexport function createFloat32MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat32MatrixTexture(textureConfig), textureConfig.textureFormatFloat, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16MatrixTexture(textureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\nexport function createFloat16MatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16MatrixTexture(textureConfig), textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\nexport function getInternalFormatForUnsignedBytesMatrixTexture(textureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\nexport function createUnsignedBytesMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA, gl.UNSIGNED_BYTE);\n}\nexport function getInternalFormatForPackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\nexport function createPackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig), gl.RGBA, gl.FLOAT);\n}\nexport function getInternalFormatForFloat16PackedMatrixTexture(textureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\nexport function createFloat16PackedMatrixTexture(gl, rows, columns, textureConfig) {\n  const [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(gl, width, height, getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA, textureConfig.textureTypeHalfFloat);\n}\nexport function bindVertexProgramAttributeStreams(gl, program, vertexBuffer) {\n  const posOffset = 0; // x is the first buffer element\n\n  const uvOffset = 3 * 4; // uv comes after [x y z]\n\n  const stride = 3 * 4 + 2 * 4; // xyz + uv, each entry is 4-byte float.\n\n  webgl_util.callAndCheck(gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success && webgl_util.bindVertexBufferToProgramAttribute(gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\nexport function uploadDenseMatrixToTexture(gl, texture, width, height, data, textureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  let dataForUpload, texelDataType, internalFormat;\n\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType, dataForUpload));\n  } else {\n    webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA, texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function uploadPixelDataToTexture(gl, texture, pixels) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  if (pixels.data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    } else {\n      webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels.data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(gl, () => gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    } else {\n      webgl_util.callAndCheck(gl, () => gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, pixels));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\nexport function createBufferFromOutputTexture(gl2, rows, columns, textureConfig) {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer)); // Initialize the buffer to the size of the texture in bytes.\n\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n  webgl_util.callAndCheck(gl2, () => gl2.bufferData(gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ)); // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n\n  webgl_util.callAndCheck(gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n  webgl_util.callAndCheck(gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n  return buffer;\n}\nexport function downloadFloat32MatrixFromBuffer(gl, buffer, size) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(size);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(gl, rows, columns, textureConfig) {\n  const [w, h] = tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE, downloadTarget)); // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n\n  return new Float32Array(downloadTarget.buffer);\n}\nexport function downloadPackedMatrixFromBuffer(gl, buffer, batch, rows, cols, physicalRows, physicalCols, textureConfig) {\n  const gl2 = gl;\n  const downloadTarget = new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(physicalRows, physicalCols));\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n  return downloadTarget;\n}\nexport function downloadMatrixFromPackedOutputTexture(gl, physicalRows, physicalCols) {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(gl, () => gl.readPixels(0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n  return packedRGBA;\n}","map":{"version":3,"mappings":"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","names":["env","getGlslDifferences","tex_util","webgl_util","createVertexShader","gl","glsl","vertexShaderSource","version","attribute","varyingVs","createVertexBuffer","vertexArray","Float32Array","createStaticVertexBuffer","createIndexBuffer","triangleVertexIndices","Uint16Array","createStaticIndexBuffer","createAndConfigureTexture","width","height","internalFormat","textureFormat","textureType","validateTextureSize","texture","createTexture","tex2d","TEXTURE_2D","callAndCheck","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","getNumber","texImage2D","texStorage2D","texShape","getInternalFormatForFloat32MatrixTexture","textureConfig","internalFormatFloat","createFloat32MatrixTexture","rows","columns","getUnpackedMatrixTextureShapeWidthHeight","textureFormatFloat","FLOAT","getInternalFormatForFloat16MatrixTexture","internalFormatHalfFloat","createFloat16MatrixTexture","textureTypeHalfFloat","getInternalFormatForUnsignedBytesMatrixTexture","downloadTextureFormat","createUnsignedBytesMatrixTexture","RGBA","UNSIGNED_BYTE","getInternalFormatForPackedMatrixTexture","internalFormatPackedFloat","createPackedMatrixTexture","getPackedMatrixTextureShapeWidthHeight","getInternalFormatForFloat16PackedMatrixTexture","internalFormatPackedHalfFloat","createFloat16PackedMatrixTexture","bindVertexProgramAttributeStreams","program","vertexBuffer","posOffset","uvOffset","stride","bindBuffer","ARRAY_BUFFER","success","bindVertexBufferToProgramAttribute","uploadDenseMatrixToTexture","data","dataForUpload","texelDataType","Uint8Array","set","texSubImage2D","uploadPixelDataToTexture","pixels","createBufferFromOutputTexture","gl2","buffer","createBuffer","PIXEL_PACK_BUFFER","bytesPerFloat","valuesPerTexel","bufferSizeBytes","bufferData","STREAM_READ","readPixels","downloadFloat32MatrixFromBuffer","size","downloadTarget","getBufferSubData","downloadByteEncodedFloatMatrixFromOutputTexture","w","h","numChannels","getUnpackedArraySizeFromMatrixSize","downloadPackedMatrixFromBuffer","batch","cols","physicalRows","physicalCols","getPackedRGBAArraySizeFromMatrixShape","downloadMatrixFromPackedOutputTexture","packedRGBA"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/gpgpu_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, PixelData, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {getGlslDifferences} from './glsl_version';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureConfig} from './tex_util';\nimport * as webgl_util from './webgl_util';\n\nexport function createVertexShader(gl: WebGLRenderingContext): WebGLShader {\n  const glsl = getGlslDifferences();\n  const vertexShaderSource = `${glsl.version}\n    precision highp float;\n    ${glsl.attribute} vec3 clipSpacePos;\n    ${glsl.attribute} vec2 uv;\n    ${glsl.varyingVs} vec2 resultUV;\n\n    void main() {\n      gl_Position = vec4(clipSpacePos, 1);\n      resultUV = uv;\n    }`;\n  return webgl_util.createVertexShader(gl, vertexShaderSource);\n}\n\nexport function createVertexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // [x y z u v] * [upper-left, lower-left, upper-right, lower-right]\n  const vertexArray = new Float32Array(\n      [-1, 1, 0, 0, 1, -1, -1, 0, 0, 0, 1, 1, 0, 1, 1, 1, -1, 0, 1, 0]);\n  return webgl_util.createStaticVertexBuffer(gl, vertexArray);\n}\n\nexport function createIndexBuffer(gl: WebGLRenderingContext): WebGLBuffer {\n  // OpenGL (and WebGL) have \"CCW == front\" winding\n  const triangleVertexIndices = new Uint16Array([0, 1, 2, 2, 1, 3]);\n  return webgl_util.createStaticIndexBuffer(gl, triangleVertexIndices);\n}\n\nfunction createAndConfigureTexture(\n    gl: WebGLRenderingContext, width: number, height: number,\n    internalFormat: number, textureFormat: number,\n    textureType: number): Texture {\n  webgl_util.validateTextureSize(width, height);\n  const texture = webgl_util.createTexture(gl);\n\n  const tex2d = gl.TEXTURE_2D;\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(tex2d, texture));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MIN_FILTER, gl.NEAREST));\n  webgl_util.callAndCheck(\n      gl, () => gl.texParameteri(tex2d, gl.TEXTURE_MAG_FILTER, gl.NEAREST));\n  if (env().getNumber('WEBGL_VERSION') === 1) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            tex2d, 0, internalFormat, width, height, 0, textureFormat,\n            textureType, null));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => (gl as WebGL2RenderingContext)\n                  .texStorage2D(tex2d, 1, internalFormat, width, height));\n  }\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n\n  return {texture, texShape: [height, width]};\n}\n\nexport function getInternalFormatForFloat32MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatFloat;\n}\n\nexport function createFloat32MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat32MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16MatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatHalfFloat;\n}\n\nexport function createFloat16MatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16MatrixTexture(textureConfig),\n      textureConfig.textureFormatFloat, textureConfig.textureTypeHalfFloat);\n}\n\nexport function getInternalFormatForUnsignedBytesMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.downloadTextureFormat;\n}\n\nexport function createUnsignedBytesMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForUnsignedBytesMatrixTexture(textureConfig), gl.RGBA,\n      gl.UNSIGNED_BYTE);\n}\n\nexport function getInternalFormatForPackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedFloat;\n}\n\nexport function createPackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height, getInternalFormatForPackedMatrixTexture(textureConfig),\n      gl.RGBA, gl.FLOAT);\n}\n\nexport function getInternalFormatForFloat16PackedMatrixTexture(\n    textureConfig: TextureConfig) {\n  return textureConfig.internalFormatPackedHalfFloat;\n}\n\nexport function createFloat16PackedMatrixTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): Texture {\n  const [width, height] =\n      tex_util.getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return createAndConfigureTexture(\n      gl, width, height,\n      getInternalFormatForFloat16PackedMatrixTexture(textureConfig), gl.RGBA,\n      textureConfig.textureTypeHalfFloat);\n}\n\nexport function bindVertexProgramAttributeStreams(\n    gl: WebGLRenderingContext, program: WebGLProgram,\n    vertexBuffer: WebGLBuffer): boolean {\n  const posOffset = 0;               // x is the first buffer element\n  const uvOffset = 3 * 4;            // uv comes after [x y z]\n  const stride = (3 * 4) + (2 * 4);  // xyz + uv, each entry is 4-byte float.\n  webgl_util.callAndCheck(\n      gl, () => gl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer));\n  const success = webgl_util.bindVertexBufferToProgramAttribute(\n      gl, program, 'clipSpacePos', vertexBuffer, 3, stride, posOffset);\n  return success &&\n      webgl_util.bindVertexBufferToProgramAttribute(\n          gl, program, 'uv', vertexBuffer, 2, stride, uvOffset);\n}\n\nexport function uploadDenseMatrixToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture, width: number,\n    height: number, data: TypedArray, textureConfig: TextureConfig) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n\n  let dataForUpload: TypedArray, texelDataType: number, internalFormat: number;\n  if (data instanceof Uint8Array) {\n    dataForUpload = new Uint8Array(width * height * 4);\n    texelDataType = gl.UNSIGNED_BYTE;\n    internalFormat = gl.RGBA;\n  } else {\n    dataForUpload = new Float32Array(width * height * 4);\n    texelDataType = gl.FLOAT;\n    internalFormat = textureConfig.internalFormatPackedFloat;\n  }\n\n  dataForUpload.set(data);\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texSubImage2D(\n            gl.TEXTURE_2D, 0, 0, 0, width, height, gl.RGBA, texelDataType,\n            dataForUpload));\n  } else {\n    webgl_util.callAndCheck(\n        gl,\n        () => gl.texImage2D(\n            gl.TEXTURE_2D, 0, internalFormat, width, height, 0, gl.RGBA,\n            texelDataType, dataForUpload));\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function uploadPixelDataToTexture(\n    gl: WebGLRenderingContext, texture: WebGLTexture,\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap) {\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, texture));\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, pixels.width, pixels.height, gl.RGBA,\n              gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, pixels.width, pixels.height, 0,\n              gl.RGBA, gl.UNSIGNED_BYTE, (pixels as PixelData).data));\n    }\n  } else {\n    if (env().getNumber('WEBGL_VERSION') === 2) {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texSubImage2D(\n              gl.TEXTURE_2D, 0, 0, 0, gl.RGBA, gl.UNSIGNED_BYTE,\n              (pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n               HTMLVideoElement | ImageBitmap)));\n    } else {\n      webgl_util.callAndCheck(\n          gl,\n          () => gl.texImage2D(\n              gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE,\n              pixels as ImageData | HTMLImageElement | HTMLCanvasElement |\n                  HTMLVideoElement | ImageBitmap));\n    }\n  }\n\n  webgl_util.callAndCheck(gl, () => gl.bindTexture(gl.TEXTURE_2D, null));\n}\n\nexport function createBufferFromOutputTexture(\n    gl2: WebGL2RenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig): WebGLBuffer {\n  // Create and bind the buffer.\n  const buffer = gl2.createBuffer();\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer));\n\n  // Initialize the buffer to the size of the texture in bytes.\n  const bytesPerFloat = 4;\n  const valuesPerTexel = 4;\n  const bufferSizeBytes = bytesPerFloat * valuesPerTexel * rows * columns;\n\n  webgl_util.callAndCheck(\n      gl2,\n      () => gl2.bufferData(\n          gl2.PIXEL_PACK_BUFFER, bufferSizeBytes, gl2.STREAM_READ));\n\n  // Enqueue a command on the GPU command queue to copy of texture into the\n  // buffer.\n  webgl_util.callAndCheck(\n      gl2, () => gl2.readPixels(0, 0, columns, rows, gl2.RGBA, gl2.FLOAT, 0));\n\n  webgl_util.callAndCheck(\n      gl2, () => gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null));\n\n  return buffer;\n}\n\nexport function downloadFloat32MatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer,\n    size: number): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget = new Float32Array(size);\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadByteEncodedFloatMatrixFromOutputTexture(\n    gl: WebGLRenderingContext, rows: number, columns: number,\n    textureConfig: TextureConfig) {\n  const [w, h] =\n      tex_util.getUnpackedMatrixTextureShapeWidthHeight(rows, columns);\n\n  const numChannels = 4;\n  const downloadTarget = new Uint8Array(\n      tex_util.getUnpackedArraySizeFromMatrixSize(rows * columns, numChannels));\n\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, w, h, textureConfig.downloadTextureFormat, gl.UNSIGNED_BYTE,\n          downloadTarget));\n\n  // By wrapping the buffer in a Float32Array, we use native browser IEEE 754\n  // decoding of the 4 bytes that back each 32 bit float.\n  return new Float32Array(downloadTarget.buffer);\n}\n\nexport function downloadPackedMatrixFromBuffer(\n    gl: WebGLRenderingContext, buffer: WebGLBuffer, batch: number, rows: number,\n    cols: number, physicalRows: number, physicalCols: number,\n    textureConfig: TextureConfig): Float32Array {\n  const gl2 = gl as WebGL2RenderingContext;\n\n  const downloadTarget =\n      new Float32Array(tex_util.getPackedRGBAArraySizeFromMatrixShape(\n          physicalRows, physicalCols));\n\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, buffer);\n  gl2.getBufferSubData(gl2.PIXEL_PACK_BUFFER, 0, downloadTarget);\n  gl2.bindBuffer(gl2.PIXEL_PACK_BUFFER, null);\n\n  return downloadTarget;\n}\n\nexport function downloadMatrixFromPackedOutputTexture(\n    gl: WebGLRenderingContext, physicalRows: number,\n    physicalCols: number): Float32Array {\n  const packedRGBA = new Float32Array(physicalRows * physicalCols * 4);\n  webgl_util.callAndCheck(\n      gl,\n      () => gl.readPixels(\n          0, 0, physicalCols, physicalRows, gl.RGBA, gl.FLOAT, packedRGBA));\n\n  return packedRGBA;\n}\n"]},"metadata":{},"sourceType":"module"}