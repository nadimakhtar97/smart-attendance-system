{"ast":null,"code":"import { getCoordsDataType } from './shader_compiler';\nexport class GatherNDProgram {\n  constructor(sliceDim, strides, shape) {\n    this.sliceDim = sliceDim;\n    this.strides = strides;\n    this.variableNames = ['x', 'indices'];\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n\n}","map":{"version":3,"mappings":"AAiBA,SAAQA,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAOC,eAAP,CAAsB;AAI1BC,cACYC,QADZ,EACsCC,OADtC,EACyDC,KADzD,EACwE;AAA5D;AAA0B;AAJtC,yBAAgB,CAAC,GAAD,EAAM,SAAN,CAAhB;AAKE,SAAKC,WAAL,GAAmBD,KAAnB;AACA,UAAME,WAAW,GAAGP,iBAAiB,CAACI,OAAO,CAACI,MAAT,CAArC;AACA,UAAMC,KAAK,GAAGT,iBAAiB,CAACK,KAAK,CAACG,MAAP,CAA/B;AACA,UAAME,YAAY,GAAG,KAAKP,QAAL,GAAgB,CAAhB,GAAoB,YAApB,GAAmC,SAAxD;AACA,SAAKQ,QAAL,GAAgB;UACVJ,WAAW,cAAcA,WAAW,IAAI,KAAKH,OAAO;;YAElDK,KAAK;;gCAEe,KAAKN,QAAQ;;sCAEPO,YAAY;;;;OAP9C;AAYD;;AAtByB","names":["getCoordsDataType","GatherNDProgram","constructor","sliceDim","strides","shape","outputShape","stridesType","length","dtype","strideString","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/gather_nd_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class GatherNDProgram implements GPGPUProgram {\n  variableNames = ['x', 'indices'];\n  outputShape: number[];\n  userCode: string;\n  constructor(\n      private sliceDim: number, private strides: number[], shape: number[]) {\n    this.outputShape = shape;\n    const stridesType = getCoordsDataType(strides.length);\n    const dtype = getCoordsDataType(shape.length);\n    const strideString = this.sliceDim > 1 ? 'strides[j]' : 'strides';\n    this.userCode = `\n        ${stridesType} strides = ${stridesType}(${this.strides});\n         void main() {\n          ${dtype} coords = getOutputCoords();\n          int flattenIndex = 0;\n          for (int j = 0; j < ${this.sliceDim}; j++) {\n            int index = round(getIndices(coords[0], j));\n            flattenIndex += index * ${strideString};\n          }\n          setOutput(getX(flattenIndex, coords[1]));\n        }\n      `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}