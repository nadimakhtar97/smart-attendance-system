{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nexport class StringIterator extends LazyIterator {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator) {\n    return new SplitIterator(this, separator);\n  }\n\n} // ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass SplitIterator extends StringIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n\n}\n\nclass SplitIteratorImpl extends OneToManyIterator {\n  constructor(upstream, separator) {\n    super();\n    this.upstream = upstream;\n    this.separator = separator; // A partial string at the end of an upstream chunk\n\n    this.carryover = '';\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n\n  async pump() {\n    const chunkResult = await this.upstream.next();\n\n    if (chunkResult.done) {\n      if (this.carryover === '') {\n        return false;\n      } // Pretend that the pump succeeded in order to emit the small last batch.\n      // The next pump() call will actually fail.\n\n\n      this.outputQueue.push(this.carryover);\n      this.carryover = '';\n      return true;\n    }\n\n    const lines = chunkResult.value.split(this.separator); // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n    // Thus the carryover may be '' if the separator falls on a chunk\n    // boundary; this produces the correct result.\n\n    lines[0] = this.carryover + lines[0];\n\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n\n    this.carryover = lines[lines.length - 1];\n    return true;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,YAAR,EAAsBC,iBAAtB,QAA8C,iBAA9C;AAEA,OAAM,MAAgBC,cAAhB,SAAuCF,YAAvC,CAA2D;AAC/D;;;;;;;;;;;;;;;;;;AAkBAG,OAAK,CAACC,SAAD,EAAkB;AACrB,WAAO,IAAIC,aAAJ,CAAkB,IAAlB,EAAwBD,SAAxB,CAAP;AACD;;AArB8D,C,CAwBjE;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA,MAAMC,aAAN,SAA4BH,cAA5B,CAA0C;AAGxCI,cAAsBC,QAAtB,EAAsDH,SAAtD,EAAuE;AACrE;AADoB;AAEpB,SAAKI,IAAL,GAAY,IAAIC,iBAAJ,CAAsBF,QAAtB,EAAgCH,SAAhC,CAAZ;AACD;;AAEDM,SAAO;AACL,WAAO,KAAKF,IAAL,CAAUE,OAAV,EAAP;AACD;;AAES,QAAJC,IAAI;AACR,WAAO,KAAKH,IAAL,CAAUG,IAAV,EAAP;AACD;;AAduC;;AAiB1C,MAAMF,iBAAN,SAAgCR,iBAAhC,CAAyD;AAIvDK,cACcC,QADd,EACwDH,SADxD,EACyE;AACvE;AADY;AAA0C,+BAAiB,CAJzE;;AACA,qBAAY,EAAZ;AAKC;;AAEDM,SAAO;AACL,WAAO,GAAG,KAAKH,QAAL,CAAcG,OAAd,EAAuB,cAAc,KAAKN,SAAS,IAA7D;AACD;;AAES,QAAJQ,IAAI;AACR,UAAMC,WAAW,GAAG,MAAM,KAAKN,QAAL,CAAcI,IAAd,EAA1B;;AACA,QAAIE,WAAW,CAACC,IAAhB,EAAsB;AACpB,UAAI,KAAKC,SAAL,KAAmB,EAAvB,EAA2B;AACzB,eAAO,KAAP;AACD,OAHmB,CAKpB;AACA;;;AACA,WAAKC,WAAL,CAAiBC,IAAjB,CAAsB,KAAKF,SAA3B;AACA,WAAKA,SAAL,GAAiB,EAAjB;AACA,aAAO,IAAP;AACD;;AACD,UAAMG,KAAK,GAAGL,WAAW,CAACM,KAAZ,CAAkBhB,KAAlB,CAAwB,KAAKC,SAA7B,CAAd,CAbQ,CAcR;AACA;AACA;;AAEAc,SAAK,CAAC,CAAD,CAAL,GAAW,KAAKH,SAAL,GAAiBG,KAAK,CAAC,CAAD,CAAjC;;AACA,SAAK,MAAME,IAAX,IAAmBF,KAAK,CAACG,KAAN,CAAY,CAAZ,EAAe,CAAC,CAAhB,CAAnB,EAAuC;AACrC,WAAKL,WAAL,CAAiBC,IAAjB,CAAsBG,IAAtB;AACD;;AACD,SAAKL,SAAL,GAAiBG,KAAK,CAACA,KAAK,CAACI,MAAN,GAAe,CAAhB,CAAtB;AAEA,WAAO,IAAP;AACD;;AAtCsD","names":["LazyIterator","OneToManyIterator","StringIterator","split","separator","SplitIterator","constructor","upstream","impl","SplitIteratorImpl","summary","next","pump","chunkResult","done","carryover","outputQueue","push","lines","value","line","slice","length"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-data/src/iterators/string_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {LazyIterator, OneToManyIterator} from './lazy_iterator';\n\nexport abstract class StringIterator extends LazyIterator<string> {\n  /**\n   * Splits a string stream on a given separator.\n   *\n   * It is assumed that the incoming chunk boundaries have no semantic meaning,\n   * so conceptually the incoming stream is treated simply as the concatenation\n   * of its elements.\n   *\n   * The outgoing stream provides chunks corresponding to the results of the\n   * standard string split() operation (even if such a chunk spanned incoming\n   * chunks).  The separators are not included.\n   *\n   * A typical usage is to split a text file (represented as a stream with\n   * arbitrary chunk boundaries) into lines.\n   *\n   * @param upstream A readable stream of strings that can be treated as\n   *   concatenated.\n   * @param separator A character to split on.\n   */\n  split(separator: string): StringIterator {\n    return new SplitIterator(this, separator);\n  }\n}\n\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on StringIterator.  Unfortunately they can't be placed in separate files, due\n// to resulting trouble with circular imports.\n// ============================================================================\n\n// We wanted multiple inheritance, e.g.\n//   class SplitIterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\n\nclass SplitIterator extends StringIterator {\n  private impl: SplitIteratorImpl;\n\n  constructor(protected upstream: LazyIterator<string>, separator: string) {\n    super();\n    this.impl = new SplitIteratorImpl(upstream, separator);\n  }\n\n  summary() {\n    return this.impl.summary();\n  }\n\n  async next() {\n    return this.impl.next();\n  }\n}\n\nclass SplitIteratorImpl extends OneToManyIterator<string> {\n  // A partial string at the end of an upstream chunk\n  carryover = '';\n\n  constructor(\n      protected upstream: LazyIterator<string>, protected separator: string) {\n    super();\n  }\n\n  summary() {\n    return `${this.upstream.summary()} -> Split('${this.separator}')`;\n  }\n\n  async pump(): Promise<boolean> {\n    const chunkResult = await this.upstream.next();\n    if (chunkResult.done) {\n      if (this.carryover === '') {\n        return false;\n      }\n\n      // Pretend that the pump succeeded in order to emit the small last batch.\n      // The next pump() call will actually fail.\n      this.outputQueue.push(this.carryover);\n      this.carryover = '';\n      return true;\n    }\n    const lines = chunkResult.value.split(this.separator);\n    // Note the behavior: \" ab \".split(' ') === ['', 'ab', '']\n    // Thus the carryover may be '' if the separator falls on a chunk\n    // boundary; this produces the correct result.\n\n    lines[0] = this.carryover + lines[0];\n    for (const line of lines.slice(0, -1)) {\n      this.outputQueue.push(line);\n    }\n    this.carryover = lines[lines.length - 1];\n\n    return true;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}