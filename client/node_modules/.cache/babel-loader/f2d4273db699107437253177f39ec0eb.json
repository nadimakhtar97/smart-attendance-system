{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { transposeImpl } from './Transpose_impl';\nimport { transposeImplCPU as cpuTranspose } from './Transpose_impl';\nexport function transpose(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    perm\n  } = attrs;\n  const webglBackend = backend;\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out;\n\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n\n  return out;\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,SAA9C,QAA2G,uBAA3G;AAIA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,SAAQC,gBAAgB,IAAIC,YAA5B,QAA+C,kBAA/C;AAEA,OAAM,SAAUC,SAAV,CAAoBC,IAApB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI;AAAD,MAASF,KAAf;AACA,QAAMG,YAAY,GAAGJ,OAArB;AAEA,QAAMK,KAAK,GAAGH,CAAC,CAACI,KAAF,CAAQC,MAAtB;AAEA,QAAMC,QAAQ,GAAa,IAAIC,KAAJ,CAAUJ,KAAV,CAA3B;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACD,MAA7B,EAAqCG,CAAC,EAAtC,EAA0C;AACxCF,YAAQ,CAACE,CAAD,CAAR,GAAcR,CAAC,CAACI,KAAF,CAAQH,IAAI,CAACO,CAAD,CAAZ,CAAd;AACD;;AAED,MAAIC,GAAJ;;AACA,MAAIP,YAAY,CAACQ,kBAAb,CAAgC,CAACV,CAAD,CAAhC,CAAJ,EAA0C;AACxC,UAAMW,QAAQ,GAAGT,YAAY,CAACU,OAAb,CAAqBC,GAArB,CAAyBb,CAAC,CAACc,MAA3B,CAAjB;AACA,UAAMC,MAAM,GAAGJ,QAAQ,CAACI,MAAxB;AACA,UAAMC,SAAS,GAAGtB,YAAY,CAACqB,MAAD,EAASf,CAAC,CAACI,KAAX,EAAkBJ,CAAC,CAACiB,KAApB,EAA2BhB,IAA3B,EAAiCK,QAAjC,CAA9B;AAEAG,OAAG,GAAGP,YAAY,CAACgB,cAAb,CAA4BZ,QAA5B,EAAsCN,CAAC,CAACiB,KAAxC,CAAN;AACA,UAAME,OAAO,GAAGjB,YAAY,CAACU,OAAb,CAAqBC,GAArB,CAAyBJ,GAAG,CAACK,MAA7B,CAAhB;AACAK,WAAO,CAACJ,MAAR,GAAiBC,SAAjB;AACD,GARD,MAQO;AACLP,OAAG,GAAGjB,aAAa,CAACQ,CAAD,EAAIC,IAAJ,EAAUC,YAAV,CAAnB;AACD;;AACD,SAAOO,GAAP;AACD;AAED,OAAO,MAAMW,eAAe,GAAiB;AAC3CC,YAAU,EAAE9B,SAD+B;AAE3C+B,aAAW,EAAE,OAF8B;AAG3CC,YAAU,EAAE5B;AAH+B,CAAtC","names":["Transpose","transposeImpl","transposeImplCPU","cpuTranspose","transpose","args","inputs","backend","attrs","x","perm","webglBackend","xRank","shape","length","newShape","Array","i","out","shouldExecuteOnCPU","xTexData","texData","get","dataId","values","outValues","dtype","makeTensorInfo","outData","transposeConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Transpose.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {transposeImpl} from './Transpose_impl';\nimport {transposeImplCPU as cpuTranspose} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n  const webglBackend = backend;\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  let out: TensorInfo;\n  if (webglBackend.shouldExecuteOnCPU([x])) {\n    const xTexData = webglBackend.texData.get(x.dataId);\n    const values = xTexData.values as TypedArray;\n    const outValues = cpuTranspose(values, x.shape, x.dtype, perm, newShape);\n\n    out = webglBackend.makeTensorInfo(newShape, x.dtype);\n    const outData = webglBackend.texData.get(out.dataId);\n    outData.values = outValues;\n  } else {\n    out = transposeImpl(x, perm, webglBackend);\n  }\n  return out;\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'webgl',\n  kernelFunc: transpose as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}