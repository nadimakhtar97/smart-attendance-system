{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nonMaxSuppressionV5Impl } from '../../backends/non_max_suppression_impl';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { nonMaxSuppSanityCheck } from '../nonmax_util';\nimport { tensor1d } from '../tensor1d';\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nasync function nonMaxSuppressionWithScoreAsync_(boxes, scores, maxOutputSize) {\n  let iouThreshold = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.5;\n  let scoreThreshold = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Number.NEGATIVE_INFINITY;\n  let softNmsSigma = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n  const params = nonMaxSuppSanityCheck($boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1]; // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n\n  const {\n    selectedIndices,\n    selectedScores\n  } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    selectedScores: tensor1d(selectedScores)\n  };\n}\n\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,uBAAR,QAAsC,yCAAtC;AAGA,SAAQC,eAAR,QAA8B,uBAA9B;AAEA,SAAQC,qBAAR,QAAoC,gBAApC;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,eAAeC,gCAAf,CACIC,KADJ,EACgCC,MADhC,EAEIC,aAFJ,EAIsB;AAAA,MAFKC,YAEL,uEAFoB,GAEpB;AAAA,MADlBC,cACkB,uEADDC,MAAM,CAACC,iBACN;AAAA,MAAlBC,YAAkB,uEAAH,GAAG;AACpB,QAAMC,MAAM,GAAGZ,eAAe,CAACI,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,CAA9B;AACA,QAAMS,OAAO,GAAGb,eAAe,CAACK,MAAD,EAAS,QAAT,EAAmB,wBAAnB,CAA/B;AAEA,QAAMS,MAAM,GAAGb,qBAAqB,CAChCW,MADgC,EACxBC,OADwB,EACfP,aADe,EACAC,YADA,EACcC,cADd,EAEhCG,YAFgC,CAApC;AAGAL,eAAa,GAAGQ,MAAM,CAACR,aAAvB;AACAC,cAAY,GAAGO,MAAM,CAACP,YAAtB;AACAC,gBAAc,GAAGM,MAAM,CAACN,cAAxB;AACAG,cAAY,GAAGG,MAAM,CAACH,YAAtB;AAEA,QAAMI,cAAc,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACL,MAAM,CAACM,IAAP,EAAD,EAAgBL,OAAO,CAACK,IAAR,EAAhB,CAAZ,CAA7B;AACA,QAAMC,SAAS,GAAGJ,cAAc,CAAC,CAAD,CAAhC;AACA,QAAMK,UAAU,GAAGL,cAAc,CAAC,CAAD,CAAjC,CAdoB,CAgBpB;AACA;AACA;;AACA,QAAM;AAACM,mBAAD;AAAkBC;AAAlB,MAAoCvB,uBAAuB,CAC7DoB,SAD6D,EAClDC,UADkD,EACtCd,aADsC,EACvBC,YADuB,EACTC,cADS,EAE7DG,YAF6D,CAAjE;;AAIA,MAAIC,MAAM,KAAKR,KAAf,EAAsB;AACpBQ,UAAM,CAACW,OAAP;AACD;;AACD,MAAIV,OAAO,KAAKR,MAAhB,EAAwB;AACtBQ,WAAO,CAACU,OAAR;AACD;;AAED,SAAO;AACLF,mBAAe,EAAEnB,QAAQ,CAACmB,eAAD,EAAkB,OAAlB,CADpB;AAELC,kBAAc,EAAEpB,QAAQ,CAACoB,cAAD;AAFnB,GAAP;AAID;;AAED,OAAO,MAAME,+BAA+B,GAAGrB,gCAAxC","names":["nonMaxSuppressionV5Impl","convertToTensor","nonMaxSuppSanityCheck","tensor1d","nonMaxSuppressionWithScoreAsync_","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","Number","NEGATIVE_INFINITY","softNmsSigma","$boxes","$scores","params","boxesAndScores","Promise","all","data","boxesVals","scoresVals","selectedIndices","selectedScores","dispose","nonMaxSuppressionWithScoreAsync"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/image/non_max_suppression_with_score_async.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {nonMaxSuppressionV5Impl} from '../../backends/non_max_suppression_impl';\nimport {Tensor1D, Tensor2D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {nonMaxSuppSanityCheck} from '../nonmax_util';\nimport {tensor1d} from '../tensor1d';\n\n/**\n * Asynchronously performs non maximum suppression of bounding boxes based on\n * iou (intersection over union).\n *\n * This op also supports a Soft-NMS mode (c.f.\n * Bodla et al, https://arxiv.org/abs/1704.04503) where boxes reduce the score\n * of other overlapping boxes, therefore favoring different regions of the image\n * with high scores. To enable this Soft-NMS mode, set the `softNmsSigma`\n * parameter to be larger than 0.\n *\n * @param boxes a 2d tensor of shape `[numBoxes, 4]`. Each entry is\n *     `[y1, x1, y2, x2]`, where `(y1, x1)` and `(y2, x2)` are the corners of\n *     the bounding box.\n * @param scores a 1d tensor providing the box scores of shape `[numBoxes]`.\n * @param maxOutputSize The maximum number of boxes to be selected.\n * @param iouThreshold A float representing the threshold for deciding whether\n *     boxes overlap too much with respect to IOU. Must be between [0, 1].\n *     Defaults to 0.5 (50% box overlap).\n * @param scoreThreshold A threshold for deciding when to remove boxes based\n *     on score. Defaults to -inf, which means any score is accepted.\n * @param softNmsSigma A float representing the sigma parameter for Soft NMS.\n *     When sigma is 0, it falls back to nonMaxSuppression.\n * @return A map with the following properties:\n *     - selectedIndices: A 1D tensor with the selected box indices.\n *     - selectedScores: A 1D tensor with the corresponding scores for each\n *       selected box.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nasync function nonMaxSuppressionWithScoreAsync_(\n    boxes: Tensor2D|TensorLike, scores: Tensor1D|TensorLike,\n    maxOutputSize: number, iouThreshold = 0.5,\n    scoreThreshold = Number.NEGATIVE_INFINITY,\n    softNmsSigma = 0.0): Promise<NamedTensorMap> {\n  const $boxes = convertToTensor(boxes, 'boxes', 'nonMaxSuppressionAsync');\n  const $scores = convertToTensor(scores, 'scores', 'nonMaxSuppressionAsync');\n\n  const params = nonMaxSuppSanityCheck(\n      $boxes, $scores, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n  maxOutputSize = params.maxOutputSize;\n  iouThreshold = params.iouThreshold;\n  scoreThreshold = params.scoreThreshold;\n  softNmsSigma = params.softNmsSigma;\n\n  const boxesAndScores = await Promise.all([$boxes.data(), $scores.data()]);\n  const boxesVals = boxesAndScores[0];\n  const scoresVals = boxesAndScores[1];\n\n  // We call a cpu based impl directly with the typedarray data  here rather\n  // than a kernel because all kernels are synchronous (and thus cannot await\n  // .data()).\n  const {selectedIndices, selectedScores} = nonMaxSuppressionV5Impl(\n      boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold,\n      softNmsSigma);\n\n  if ($boxes !== boxes) {\n    $boxes.dispose();\n  }\n  if ($scores !== scores) {\n    $scores.dispose();\n  }\n\n  return {\n    selectedIndices: tensor1d(selectedIndices, 'int32'),\n    selectedScores: tensor1d(selectedScores)\n  };\n}\n\nexport const nonMaxSuppressionWithScoreAsync = nonMaxSuppressionWithScoreAsync_;\n"]},"metadata":{},"sourceType":"module"}