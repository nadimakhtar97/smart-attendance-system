{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '../kernel_names';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const divGradConfig = {\n  kernelName: RealDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n\n      return res;\n    };\n\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,OAAR,QAAsB,iBAAtB;AAEA,OAAO,KAAKC,cAAZ,MAAgC,uBAAhC;AACA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AAGA,OAAO,MAAMC,aAAa,GAAe;AACvCC,YAAU,EAAEV,OAD2B;AAEvCW,cAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFyB;AAGvCC,UAAQ,EAAE,CAACC,EAAD,EAAaC,KAAb,KAAgC;AACxC,UAAM,CAACC,CAAD,EAAIC,CAAJ,IAASF,KAAf;AACA,UAAMG,QAAQ,GACVhB,cAAc,CAACiB,0BAAf,CAA0CH,CAAC,CAACI,KAA5C,EAAmDH,CAAC,CAACG,KAArD,CADJ;;AAEA,UAAMC,IAAI,GAAG,MAAK;AAChB,YAAMC,GAAG,GAAGlB,GAAG,CAACU,EAAD,EAAKX,IAAI,CAACc,CAAD,EAAI,SAAJ,CAAT,CAAf;AACA,YAAMM,UAAU,GAAGrB,cAAc,CAACsB,gBAAf,CAAgCR,CAAC,CAACI,KAAlC,EAAyCF,QAAzC,CAAnB;;AACA,UAAIK,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B;AACzB,eAAOlB,OAAO,CAACE,GAAG,CAACa,GAAD,EAAMC,UAAN,CAAJ,EAAuBP,CAAC,CAACI,KAAzB,CAAd;AACD;;AACD,aAAOE,GAAP;AACD,KAPD;;AAQA,UAAMI,IAAI,GAAG,MAAK;AAChB,UAAIJ,GAAG,GAAGjB,GAAG,CAACS,EAAD,EAAKX,IAAI,CAACa,CAAD,EAAI,SAAJ,CAAT,CAAb;AACA,YAAMO,UAAU,GAAGrB,cAAc,CAACsB,gBAAf,CAAgCP,CAAC,CAACG,KAAlC,EAAyCF,QAAzC,CAAnB;;AACA,UAAIK,UAAU,CAACE,MAAX,GAAoB,CAAxB,EAA2B;AACzBH,WAAG,GAAGf,OAAO,CAACE,GAAG,CAACa,GAAD,EAAMC,UAAN,CAAJ,EAAuBN,CAAC,CAACG,KAAzB,CAAb;AACD;;AACD,YAAMO,GAAG,GAAGnB,MAAM,CAACS,CAAD,CAAlB;AACA,aAAOX,GAAG,CAACF,GAAG,CAACkB,GAAD,EAAMnB,IAAI,CAACwB,GAAD,EAAM,SAAN,CAAV,CAAJ,CAAV;AACD,KARD;;AASA,WAAO;AAACX,OAAC,EAAEK,IAAJ;AAAUJ,OAAC,EAAES;AAAb,KAAP;AACD;AAzBsC,CAAlC","names":["RealDiv","broadcast_util","cast","div","mul","neg","reshape","square","sum","divGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","a","b","outShape","assertAndGetBroadcastShape","shape","derA","res","reduceAxes","getReductionAxes","length","derB","tmp"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/RealDiv_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {RealDiv} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport * as broadcast_util from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {square} from '../ops/square';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const divGradConfig: GradConfig = {\n  kernelName: RealDiv,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape =\n        broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    const derA = () => {\n      const res = div(dy, cast(b, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      let res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = broadcast_util.getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = reshape(sum(res, reduceAxes), b.shape);\n      }\n      const tmp = square(b);\n      return neg(div(res, cast(tmp, 'float32')));\n    };\n    return {a: derA, b: derB};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}