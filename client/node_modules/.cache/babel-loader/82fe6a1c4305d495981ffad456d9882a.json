{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImplCPU } from '../kernel_utils/shared';\nexport function stringNGrams(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {\n    data,\n    dataSplits\n  } = inputs;\n  const $data = backend.readSync(data.dataId);\n  const $dataSplits = backend.readSync(dataSplits.dataId);\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAlC,QAAwG,uBAAxG;AAGA,SAAQC,mBAAR,QAAkC,wBAAlC;AAEA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AACJI,aADI;AAEJC,eAFI;AAGJC,WAHI;AAIJC,YAJI;AAKJC,YALI;AAMJC;AANI,MAOFN,KAPJ;AAQA,QAAM;AAACO,QAAD;AAAOC;AAAP,MAAqBV,MAA3B;AACA,QAAMW,KAAK,GAAGV,OAAO,CAACW,QAAR,CAAiBH,IAAI,CAACI,MAAtB,CAAd;AACA,QAAMC,WAAW,GAAGb,OAAO,CAACW,QAAR,CAAiBF,UAAU,CAACG,MAA5B,CAApB;AAEA,QAAM,CAACE,MAAD,EAASC,YAAT,IAAyBnB,mBAAmB,CAC9Cc,KAD8C,EACvCG,WADuC,EAC1BX,SAD0B,EACfC,WADe,EACFC,OADE,EACOC,QADP,EACiBC,QADjB,EAE9CC,sBAF8C,CAAlD;AAGA,SAAO,CACLP,OAAO,CAACgB,cAAR,CAAuB,CAACF,MAAM,CAACG,MAAR,CAAvB,EAAwC,QAAxC,EAAkDH,MAAlD,CADK,EAELd,OAAO,CAACgB,cAAR,CAAuBP,UAAU,CAACS,KAAlC,EAAyC,OAAzC,EAAkDH,YAAlD,CAFK,CAAP;AAID;AAED,OAAO,MAAMI,kBAAkB,GAAiB;AAC9CC,YAAU,EAAEzB,YADkC;AAE9C0B,aAAW,EAAE,OAFiC;AAG9CC,YAAU,EAAEzB;AAHkC,CAAzC","names":["StringNGrams","stringNGramsImplCPU","stringNGrams","args","inputs","backend","attrs","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","data","dataSplits","$data","readSync","dataId","$dataSplits","nGrams","nGramsSplits","makeTensorInfo","length","shape","stringNGramsConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/StringNGrams.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {stringNGramsImplCPU} from '../kernel_utils/shared';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendWebGL,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.readSync(data.dataId) as Uint8Array[];\n  const $dataSplits = backend.readSync(dataSplits.dataId) as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImplCPU(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'webgl',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}