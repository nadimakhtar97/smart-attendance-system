{"ast":null,"code":"import { assert } from '../util';\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\n\nexport function prepareSplitSize(x, numOrSizeSplits) {\n  let axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let splitSizes = [];\n\n  if (typeof numOrSizeSplits === 'number') {\n    assert(x.shape[axis] % numOrSizeSplits === 0, () => 'Number of splits must evenly divide the axis.');\n    splitSizes = new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n  } else {\n    const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n      if (value === -1) {\n        count += 1;\n      }\n\n      return count;\n    }, 0);\n    assert(numOfNegs <= 1, () => 'There should be only one negative value in split array.');\n    const negIndex = numOrSizeSplits.indexOf(-1); // Allow the number of split array to be -1, which indicates the rest\n    // of dimension is allocated to that split.\n\n    if (negIndex !== -1) {\n      const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n      numOrSizeSplits[negIndex] = x.shape[axis] - total;\n    }\n\n    assert(x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b), () => 'The sum of sizes must match the size of the axis dimension.');\n    splitSizes = numOrSizeSplits;\n  }\n\n  return splitSizes;\n}","map":{"version":3,"mappings":"AAkBA,SAAQA,MAAR,QAAqB,SAArB;AAEA;;;;;;AAKA,OAAM,SAAUC,gBAAV,CACFC,CADE,EACoBC,eADpB,EAEM;AAAA,MAARC,IAAQ,uEAAD,CAAC;AACV,MAAIC,UAAU,GAAG,EAAjB;;AACA,MAAI,OAAQF,eAAR,KAA6B,QAAjC,EAA2C;AACzCH,UAAM,CACFE,CAAC,CAACI,KAAF,CAAQF,IAAR,IAAgBD,eAAhB,KAAoC,CADlC,EAEF,MAAM,+CAFJ,CAAN;AAGAE,cAAU,GACN,IAAIE,KAAJ,CAAUJ,eAAV,EAA2BK,IAA3B,CAAgCN,CAAC,CAACI,KAAF,CAAQF,IAAR,IAAgBD,eAAhD,CADJ;AAED,GAND,MAMO;AACL,UAAMM,SAAS,GAAGN,eAAe,CAACO,MAAhB,CAAuB,CAACC,KAAD,EAAQC,KAAR,KAAiB;AACxD,UAAIA,KAAK,KAAK,CAAC,CAAf,EAAkB;AAChBD,aAAK,IAAI,CAAT;AACD;;AACD,aAAOA,KAAP;AACD,KALiB,EAKf,CALe,CAAlB;AAMAX,UAAM,CACFS,SAAS,IAAI,CADX,EAEF,MAAM,yDAFJ,CAAN;AAGA,UAAMI,QAAQ,GAAGV,eAAe,CAACW,OAAhB,CAAwB,CAAC,CAAzB,CAAjB,CAVK,CAWL;AACA;;AACA,QAAID,QAAQ,KAAK,CAAC,CAAlB,EAAqB;AACnB,YAAME,KAAK,GAAGZ,eAAe,CAACO,MAAhB,CAAuB,CAACM,CAAD,EAAIC,CAAJ,KAAUA,CAAC,GAAG,CAAJ,GAAQD,CAAC,GAAGC,CAAZ,GAAgBD,CAAjD,CAAd;AACAb,qBAAe,CAACU,QAAD,CAAf,GAA4BX,CAAC,CAACI,KAAF,CAAQF,IAAR,IAAgBW,KAA5C;AACD;;AACDf,UAAM,CACFE,CAAC,CAACI,KAAF,CAAQF,IAAR,MAAkBD,eAAe,CAACO,MAAhB,CAAuB,CAACM,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAArC,CADhB,EAEF,MAAM,6DAFJ,CAAN;AAGAZ,cAAU,GAAGF,eAAb;AACD;;AAED,SAAOE,UAAP;AACD","names":["assert","prepareSplitSize","x","numOrSizeSplits","axis","splitSizes","shape","Array","fill","numOfNegs","reduce","count","value","negIndex","indexOf","total","a","b"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/split_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {TensorInfo} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {assert} from '../util';\n\n/**\n * Prepare the split size array. When the input is a number, the axis is evenly\n * divided among the split size. When the input contains the negative value, the\n * rest of the axis is allocated toward that.\n */\nexport function prepareSplitSize(\n    x: Tensor|TensorInfo, numOrSizeSplits: number[]|number,\n    axis = 0): number[] {\n  let splitSizes = [];\n  if (typeof (numOrSizeSplits) === 'number') {\n    assert(\n        x.shape[axis] % numOrSizeSplits === 0,\n        () => 'Number of splits must evenly divide the axis.');\n    splitSizes =\n        new Array(numOrSizeSplits).fill(x.shape[axis] / numOrSizeSplits);\n  } else {\n    const numOfNegs = numOrSizeSplits.reduce((count, value) => {\n      if (value === -1) {\n        count += 1;\n      }\n      return count;\n    }, 0);\n    assert(\n        numOfNegs <= 1,\n        () => 'There should be only one negative value in split array.');\n    const negIndex = numOrSizeSplits.indexOf(-1);\n    // Allow the number of split array to be -1, which indicates the rest\n    // of dimension is allocated to that split.\n    if (negIndex !== -1) {\n      const total = numOrSizeSplits.reduce((a, b) => b > 0 ? a + b : a);\n      numOrSizeSplits[negIndex] = x.shape[axis] - total;\n    }\n    assert(\n        x.shape[axis] === numOrSizeSplits.reduce((a, b) => a + b),\n        () => 'The sum of sizes must match the size of the axis dimension.');\n    splitSizes = numOrSizeSplits;\n  }\n\n  return splitSizes;\n}\n"]},"metadata":{},"sourceType":"module"}