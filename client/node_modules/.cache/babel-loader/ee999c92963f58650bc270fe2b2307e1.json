{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { add } from './add';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { exp } from './exp';\nimport { log } from './log';\nimport { max } from './max';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { sub } from './sub';\nimport { sum } from './sum';\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions)).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\n\nfunction logSumExp_(x) {\n  let axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let keepDims = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const $x = convertToTensor(x, 'x', 'logSumExp');\n  const axes = parseAxisParam(axis, $x.shape);\n  const xMax = max($x, axes, true\n  /* keepDims */\n  );\n  const a = sub($x, xMax);\n  const b = exp(a);\n  const c = sum(b, axes);\n  const d = log(c);\n  const res = add(reshape(xMax, d.shape), d);\n\n  if (keepDims) {\n    const newShape = expandShapeToKeepDim(res.shape, axes);\n    return reshape(res, newShape);\n  }\n\n  return res;\n}\n\nexport const logSumExp = op({\n  logSumExp_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAR,QAA8B,oBAA9B;AAEA,SAAQC,cAAR,QAA6B,SAA7B;AAEA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,oBAAR,QAAmC,aAAnC;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,SAASC,UAAT,CACIC,CADJ,EACwE;AAAA,MAA9CC,IAA8C,uEAAtB,IAAsB;AAAA,MAAhBC,QAAgB,uEAAL,KAAK;AACtE,QAAMC,EAAE,GAAGf,eAAe,CAACY,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;AAEA,QAAMI,IAAI,GAAGf,cAAc,CAACY,IAAD,EAAOE,EAAE,CAACE,KAAV,CAA3B;AACA,QAAMC,IAAI,GAAGZ,GAAG,CAACS,EAAD,EAAKC,IAAL,EAAW;AAAK;AAAhB,GAAhB;AACA,QAAMG,CAAC,GAAGV,GAAG,CAACM,EAAD,EAAKG,IAAL,CAAb;AACA,QAAME,CAAC,GAAGhB,GAAG,CAACe,CAAD,CAAb;AACA,QAAME,CAAC,GAAGX,GAAG,CAACU,CAAD,EAAIJ,IAAJ,CAAb;AACA,QAAMM,CAAC,GAAGjB,GAAG,CAACgB,CAAD,CAAb;AACA,QAAME,GAAG,GAAGrB,GAAG,CAACM,OAAO,CAACU,IAAD,EAAOI,CAAC,CAACL,KAAT,CAAR,EAAyBK,CAAzB,CAAf;;AAEA,MAAIR,QAAJ,EAAc;AACZ,UAAMU,QAAQ,GAAGrB,oBAAoB,CAACoB,GAAG,CAACN,KAAL,EAAYD,IAAZ,CAArC;AACA,WAAOR,OAAO,CAACe,GAAD,EAAMC,QAAN,CAAd;AACD;;AACD,SAAOD,GAAP;AACD;;AAED,OAAO,MAAME,SAAS,GAAGlB,EAAE,CAAC;AAACI;AAAD,CAAD,CAApB","names":["convertToTensor","parseAxisParam","add","expandShapeToKeepDim","exp","log","max","op","reshape","sub","sum","logSumExp_","x","axis","keepDims","$x","axes","shape","xMax","a","b","c","d","res","newShape","logSumExp"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/log_sum_exp.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {add} from './add';\nimport {expandShapeToKeepDim} from './axis_util';\nimport {exp} from './exp';\nimport {log} from './log';\nimport {max} from './max';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {sub} from './sub';\nimport {sum} from './sum';\n\n/**\n * Computes the log(sum(exp(elements across the reduction dimensions)).\n *\n * Reduces the input along the dimensions given in `axis`. Unless `keepDims`\n * is true, the rank of the array is reduced by 1 for each entry in `axis`.\n * If `keepDims` is true, the reduced dimensions are retained with length 1.\n * If `axis` has no entries, all dimensions are reduced, and an array with a\n * single element is returned.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3]);\n *\n * x.logSumExp().print();  // or tf.logSumExp(x)\n * ```\n *\n * ```js\n * const x = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * const axis = 1;\n * x.logSumExp(axis).print();  // or tf.logSumExp(a, axis)\n * ```\n * @param x The input tensor.\n * @param axis The dimension(s) to reduce. If null (the default),\n *     reduces all dimensions.\n * @param keepDims If true, retains reduced dimensions with length\n *     of 1. Defaults to false.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction logSumExp_<T extends Tensor>(\n    x: Tensor|TensorLike, axis: number|number[] = null, keepDims = false): T {\n  const $x = convertToTensor(x, 'x', 'logSumExp');\n\n  const axes = parseAxisParam(axis, $x.shape);\n  const xMax = max($x, axes, true /* keepDims */);\n  const a = sub($x, xMax);\n  const b = exp(a);\n  const c = sum(b, axes);\n  const d = log(c);\n  const res = add(reshape(xMax, d.shape), d);\n\n  if (keepDims) {\n    const newShape = expandShapeToKeepDim(res.shape, axes);\n    return reshape(res, newShape) as T;\n  }\n  return res as T;\n}\n\nexport const logSumExp = op({logSumExp_});\n"]},"metadata":{},"sourceType":"module"}