{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { OneHot } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`.\n * `indices` used to encode prediction class must start from 0. For example,\n *  if you have 3 classes of data, class 1 should be encoded as 0, class 2\n *  should be 1, and class 3 should be 2.\n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`. Indices must\n * start from 0.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nfunction oneHot_(indices, depth) {\n  let onValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let offValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n\n  const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n  const inputs = {\n    indices: $indices\n  };\n  const attrs = {\n    depth,\n    onValue,\n    offValue\n  };\n  return ENGINE.runKernel(OneHot, inputs, attrs);\n}\n\nexport const oneHot = op({\n  oneHot_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,MAAR,QAAgD,iBAAhD;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAGA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,SAASC,OAAT,CACIC,OADJ,EACgCC,KADhC,EAEgB;AAAA,MAD+BC,OAC/B,uEADyC,CACzC;AAAA,MAAZC,QAAY,uEAAD,CAAC;;AACd,MAAIF,KAAK,GAAG,CAAZ,EAAe;AACb,UAAM,IAAIG,KAAJ,CAAU,iDAAiDH,KAAK,EAAhE,CAAN;AACD;;AACD,QAAMI,QAAQ,GAAGR,eAAe,CAACG,OAAD,EAAU,SAAV,EAAqB,QAArB,EAA+B,OAA/B,CAAhC;AAEA,QAAMM,MAAM,GAAiB;AAACN,WAAO,EAAEK;AAAV,GAA7B;AACA,QAAME,KAAK,GAAgB;AAACN,SAAD;AAAQC,WAAR;AAAiBC;AAAjB,GAA3B;AAEA,SAAOR,MAAM,CAACa,SAAP,CACHZ,MADG,EACKU,MADL,EAEHC,KAFG,CAAP;AAGD;;AAED,OAAO,MAAME,MAAM,GAAGX,EAAE,CAAC;AAACC;AAAD,CAAD,CAAjB","names":["ENGINE","OneHot","convertToTensor","op","oneHot_","indices","depth","onValue","offValue","Error","$indices","inputs","attrs","runKernel","oneHot"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/one_hot.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {OneHot, OneHotAttrs, OneHotInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Creates a one-hot `tf.Tensor`. The locations represented by `indices` take\n * value `onValue` (defaults to 1), while all other locations take value\n * `offValue` (defaults to 0). If `indices` is rank `R`, the output has rank\n * `R+1` with the last axis of size `depth`. \n * `indices` used to encode prediction class must start from 0. For example,\n *  if you have 3 classes of data, class 1 should be encoded as 0, class 2\n *  should be 1, and class 3 should be 2. \n *\n * ```js\n * tf.oneHot(tf.tensor1d([0, 1], 'int32'), 3).print();\n * ```\n *\n * @param indices `tf.Tensor` of indices with dtype `int32`. Indices must \n * start from 0.\n * @param depth The depth of the one hot dimension.\n * @param onValue A number used to fill in the output when the index matches\n * the location.\n * @param offValue A number used to fill in the output when the index does\n *     not match the location.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nfunction oneHot_(\n    indices: Tensor|TensorLike, depth: number, onValue = 1,\n    offValue = 0): Tensor {\n  if (depth < 2) {\n    throw new Error(`Error in oneHot: depth must be >=2, but it is ${depth}`);\n  }\n  const $indices = convertToTensor(indices, 'indices', 'oneHot', 'int32');\n\n  const inputs: OneHotInputs = {indices: $indices};\n  const attrs: OneHotAttrs = {depth, onValue, offValue};\n\n  return ENGINE.runKernel(\n      OneHot, inputs as unknown as NamedTensorMap,\n      attrs as unknown as NamedAttrMap);\n}\n\nexport const oneHot = op({oneHot_});\n"]},"metadata":{},"sourceType":"module"}