{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n  const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n\n      if (Number.isNaN(value) || value > max) {\n        // comparison with NaN always return false\n        max = value;\n      }\n    }\n\n    vals[i] = max;\n  }\n\n  return vals;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA+CA,IAA/C,QAA0D,uBAA1D;AAEA,OAAM,SAAUC,OAAV,CACFC,KADE,EACiBC,UADjB,EACqCC,QADrC,EAEFC,KAFE,EAEa;AACjB,QAAMC,IAAI,GAAGN,IAAI,CAACO,sBAAL,CACTF,KADS,EACiBL,IAAI,CAACQ,aAAL,CAAmBJ,QAAnB,CADjB,CAAb;;AAGA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,IAAI,CAACI,MAAzB,EAAiC,EAAED,CAAnC,EAAsC;AACpC,UAAME,MAAM,GAAGF,CAAC,GAAGN,UAAnB;AACA,QAAIS,GAAG,GAAGV,KAAK,CAACS,MAAD,CAAf;;AACA,SAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGV,UAApB,EAAgC,EAAEU,CAAlC,EAAqC;AACnC,YAAMC,KAAK,GAAGZ,KAAK,CAACS,MAAM,GAAGE,CAAV,CAAnB;;AACA,UAAIE,MAAM,CAACC,KAAP,CAAaF,KAAb,KACAA,KAAK,GAAGF,GADZ,EACiB;AAAG;AAClBA,WAAG,GAAGE,KAAN;AACD;AACF;;AACDR,QAAI,CAACG,CAAD,CAAJ,GAAUG,GAAV;AACD;;AACD,SAAON,IAAP;AACD","names":["util","maxImpl","aVals","reduceSize","outShape","dtype","vals","getTypedArrayFromDType","sizeFromShape","i","length","offset","max","j","value","Number","isNaN"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Max_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, NumericDataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function maxImpl(\n    aVals: TypedArray, reduceSize: number, outShape: number[],\n    dtype: DataType): TypedArray {\n  const vals = util.getTypedArrayFromDType(\n      dtype as NumericDataType, util.sizeFromShape(outShape));\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let max = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value > max) {  // comparison with NaN always return false\n        max = value;\n      }\n    }\n    vals[i] = max;\n  }\n  return vals;\n}\n"]},"metadata":{},"sourceType":"module"}