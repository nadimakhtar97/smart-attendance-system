{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref;\n    const {\n      image\n    } = inputs;\n    const {\n      radians,\n      fillValue,\n      center\n    } = attrs;\n    const cpuBackend = backend;\n    const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n            const x = coords[2];\n            const y = coords[1]; // coordX/coordY are the result of rotating and translating x/y.\n\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n            let outputValue = fillValue;\n\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            } // If the coordinate position falls within the image boundaries...\n\n\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 && coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {\n      dataId,\n      shape: image.shape,\n      dtype: image.dtype\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["backend_util","RotateWithOffset","util","rotateWithOffsetConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","image","radians","fillValue","center","cpuBackend","output","getTypedArrayFromDType","dtype","sizeFromShape","shape","batch","imageHeight","imageWidth","numChannels","centerX","centerY","getImageCenter","fullOpacityValue","sinFactor","Math","sin","cosFactor","cos","imageVals","data","get","dataId","values","batchIdx","batchOffset","row","rowOffset","col","colOffset","channel","coords","x","y","coordX","coordY","round","outputValue","rotatedRowOffset","rotatedColOffset","imageIdx","outIdx","write"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/RotateWithOffset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, NumericDataType, TypedArray} from '@tensorflow/tfjs-core';\nimport {backend_util, RotateWithOffset, RotateWithOffsetAttrs, RotateWithOffsetInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const rotateWithOffsetConfig: KernelConfig = {\n  kernelName: RotateWithOffset,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {image} = inputs as RotateWithOffsetInputs;\n    const {radians, fillValue, center} = attrs as {} as RotateWithOffsetAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const output = util.getTypedArrayFromDType(\n        image.dtype as NumericDataType, util.sizeFromShape(image.shape));\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n\n    const [centerX, centerY] =\n        backend_util.getImageCenter(center, imageHeight, imageWidth);\n    const fullOpacityValue = 255;\n\n    const sinFactor = Math.sin(radians);\n    const cosFactor = Math.cos(radians);\n    const imageVals = cpuBackend.data.get(image.dataId).values as TypedArray;\n\n    for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n      const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n\n      for (let row = 0; row < imageHeight; row++) {\n        const rowOffset = row * (imageWidth * numChannels);\n\n        for (let col = 0; col < imageWidth; col++) {\n          const colOffset = col * numChannels;\n\n          for (let channel = 0; channel < numChannels; channel++) {\n            const coords = [batch, row, col, channel];\n\n            const x = coords[2];\n            const y = coords[1];\n\n            // coordX/coordY are the result of rotating and translating x/y.\n            let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n            let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n            coordX = Math.round(coordX + centerX);\n            coordY = Math.round(coordY + centerY);\n\n            let outputValue = fillValue;\n            if (typeof fillValue !== 'number') {\n              if (channel === 3) {\n                outputValue = fullOpacityValue;\n              } else {\n                outputValue = fillValue[channel];\n              }\n            }\n\n            // If the coordinate position falls within the image boundaries...\n            if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                coordY < imageHeight) {\n              // set the output to the image value at the coordinate position.\n              const rotatedRowOffset = coordY * (imageWidth * numChannels);\n              const rotatedColOffset = coordX * numChannels;\n              const imageIdx =\n                  batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n              outputValue = imageVals[imageIdx];\n            }\n\n            const outIdx = batchOffset + rowOffset + colOffset + channel;\n            output[outIdx] = outputValue as number;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(output, image.shape, image.dtype);\n    return {dataId, shape: image.shape, dtype: image.dtype};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}