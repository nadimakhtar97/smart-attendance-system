{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '../kernel_names';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { cast } from '../ops/cast';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { sum } from '../ops/sum';\nexport const multiplyGradConfig = {\n  kernelName: Multiply,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = mul(dy, cast(b, 'float32'));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n\n      return res;\n    };\n\n    const derB = () => {\n      const res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), b.shape);\n      }\n\n      return res;\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,QAAR,QAAuB,iBAAvB;AAEA,SAAQC,0BAAR,EAAoCC,gBAApC,QAA2D,uBAA3D;AACA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AAGA,OAAO,MAAMC,kBAAkB,GAAe;AAC5CC,YAAU,EAAER,QADgC;AAE5CS,cAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAF8B;AAG5CC,UAAQ,EAAE,CAACC,EAAD,EAAaC,KAAb,KAAgC;AACxC,UAAM,CAACC,CAAD,EAAIC,CAAJ,IAASF,KAAf;AACA,UAAMG,QAAQ,GAAGd,0BAA0B,CAACY,CAAC,CAACG,KAAH,EAAUF,CAAC,CAACE,KAAZ,CAA3C;;AAEA,UAAMC,IAAI,GAAG,MAAK;AAChB,YAAMC,GAAG,GAAGd,GAAG,CAACO,EAAD,EAAKR,IAAI,CAACW,CAAD,EAAI,SAAJ,CAAT,CAAf;AACA,YAAMK,UAAU,GAAGjB,gBAAgB,CAACW,CAAC,CAACG,KAAH,EAAUD,QAAV,CAAnC;;AACA,UAAII,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,eAAOf,OAAO,CAACC,GAAG,CAACY,GAAD,EAAMC,UAAN,CAAJ,EAAuBN,CAAC,CAACG,KAAzB,CAAd;AACD;;AACD,aAAOE,GAAP;AACD,KAPD;;AAQA,UAAMG,IAAI,GAAG,MAAK;AAChB,YAAMH,GAAG,GAAGd,GAAG,CAACO,EAAD,EAAKR,IAAI,CAACU,CAAD,EAAI,SAAJ,CAAT,CAAf;AACA,YAAMM,UAAU,GAAGjB,gBAAgB,CAACY,CAAC,CAACE,KAAH,EAAUD,QAAV,CAAnC;;AACA,UAAII,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,eAAOf,OAAO,CAACC,GAAG,CAACY,GAAD,EAAMC,UAAN,CAAJ,EAAuBL,CAAC,CAACE,KAAzB,CAAd;AACD;;AACD,aAAOE,GAAP;AACD,KAPD;;AAQA,WAAO;AAACL,OAAC,EAAEI,IAAJ;AAAUH,OAAC,EAAEO;AAAb,KAAP;AACD;AAxB2C,CAAvC","names":["Multiply","assertAndGetBroadcastShape","getReductionAxes","cast","mul","reshape","sum","multiplyGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","a","b","outShape","shape","derA","res","reduceAxes","length","derB"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/Multiply_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Multiply} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {assertAndGetBroadcastShape, getReductionAxes} from '../ops/broadcast_util';\nimport {cast} from '../ops/cast';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const multiplyGradConfig: GradConfig = {\n  kernelName: Multiply,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const res = mul(dy, cast(b, 'float32'));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), a.shape);\n      }\n      return res;\n    };\n    const derB = () => {\n      const res = mul(dy, cast(a, 'float32'));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        return reshape(sum(res, reduceAxes), b.shape);\n      }\n      return res;\n    };\n    return {a: derA, b: derB};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}