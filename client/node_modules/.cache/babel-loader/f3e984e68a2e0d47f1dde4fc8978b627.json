{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ConcatProgram } from '../concat_gpu';\nimport { ConcatPackedProgram } from '../concat_packed_gpu';\nimport { concatImplCPU } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concatImpl(inputs, axis, backend) {\n  const dtype = inputs[0].dtype;\n\n  if (dtype === 'complex64') {\n    const reals = inputs.map(t => real({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const imags = inputs.map(t => imag({\n      inputs: {\n        input: t\n      },\n      backend\n    }));\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n    const result = complex({\n      inputs: {\n        real: realConcated,\n        imag: imagConcated\n      },\n      backend\n    });\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs); // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({\n        inputs: {\n          x: t\n        },\n        backend,\n        attrs: {\n          shape\n        }\n      });\n    });\n    const inputsValShapes = tensors2D.map(t => {\n      return {\n        vals: backend.readSync(t.dataId),\n        shape: t.shape\n      };\n    }); // Concats 2d tensors along axis=1.\n\n    const outShape = backend_util.computeOutShape(tensors2D.map(t => t.shape), 1\n    /* axis */\n    );\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals = concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n    const result = concatImpl([leftSide, rightSide], axis, backend);\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') && inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {\n    tensors2D,\n    outShape\n  } = computeTensors2D(inputs, axis, backend);\n  const program = new ConcatProgram(tensors2D.map(t => t.shape));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult = reshape({\n    inputs: {\n      x: result\n    },\n    attrs: {\n      shape: outShape\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(result);\n  return reshapedResult;\n}\n\nfunction computeTensors2D(inputs, axis, backend) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(x => reshape({\n    inputs: {\n      x\n    },\n    attrs: {\n      shape: [-1, util.sizeFromShape(x.shape.slice(axis))]\n    },\n    backend\n  }));\n  return {\n    tensors2D,\n    outShape\n  };\n}","map":{"version":3,"mappings":"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","names":["backend_util","env","util","ConcatProgram","ConcatPackedProgram","concatImplCPU","complex","imag","real","reshape","concatImpl","inputs","axis","backend","dtype","reals","map","t","input","imags","realConcated","imagConcated","result","forEach","r","disposeIntermediateTensorInfo","i","runOnCpu","shouldExecuteOnCPU","tensors2D","innerSize","sizeFromShape","shape","slice","x","attrs","inputsValShapes","vals","readSync","dataId","outShape","computeOutShape","simplyConcat","outVals","finalOutShape","outInfo","makeTensorInfo","length","getNumber","midIndex","Math","floor","leftSide","rightSide","getBool","program","runWebGLProgram","computeTensors2D","reshapedResult"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Concat_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, ConcatInputs, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ConcatProgram} from '../concat_gpu';\nimport {ConcatPackedProgram} from '../concat_packed_gpu';\nimport {concatImplCPU} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {reshape} from './Reshape';\n\nexport function concatImpl(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL): TensorInfo {\n  const dtype = inputs[0].dtype;\n  if (dtype === 'complex64') {\n    const reals = inputs.map((t) => real({inputs: {input: t}, backend}));\n    const imags = inputs.map((t) => imag({inputs: {input: t}, backend}));\n\n    const realConcated = concatImpl(reals, axis, backend);\n    const imagConcated = concatImpl(imags, axis, backend);\n\n    const result =\n        complex({inputs: {real: realConcated, imag: imagConcated}, backend});\n\n    reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n    imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n    backend.disposeIntermediateTensorInfo(realConcated);\n    backend.disposeIntermediateTensorInfo(imagConcated);\n\n    return result;\n  }\n\n  let runOnCpu = backend.shouldExecuteOnCPU(inputs);\n\n  // Run on cpu if dtype is string. For string, the backend represents it\n  // as Uint8Array[], where each Uint8Array is a character. Given that the\n  // computation is only on the outer array, uploading the whole data onto\n  // gpu is wasteful. Also, currently webgl doesn't have a design to\n  // upload and retrieve Uint8Array[] between cpu and gpu. Therefore, we\n  // just run the kernel on cpu if dtype is string.\n  if (dtype === 'string') {\n    runOnCpu = true;\n  }\n\n  if (runOnCpu) {\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const tensors2D = inputs.map(t => {\n      const innerSize = util.sizeFromShape(t.shape.slice(axis));\n      const shape = [-1, innerSize];\n      return reshape({inputs: {x: t}, backend, attrs: {shape}});\n    });\n\n    const inputsValShapes = tensors2D.map(t => {\n      return {vals: backend.readSync(t.dataId), shape: t.shape};\n    });\n\n    // Concats 2d tensors along axis=1.\n    const outShape =\n        backend_util.computeOutShape(tensors2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = tensors2D[0].shape[0] === 1;\n    const outVals =\n        concatImplCPU(inputsValShapes, outShape, dtype, simplyConcat);\n\n    const finalOutShape =\n        backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n\n    const outInfo = backend.makeTensorInfo(finalOutShape, dtype, outVals);\n\n    tensors2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return outInfo;\n  }\n\n  if (inputs.length > env().getNumber('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(inputs.length / 2);\n    const leftSide = concatImpl(inputs.slice(0, midIndex), axis, backend);\n    const rightSide = concatImpl(inputs.slice(midIndex), axis, backend);\n\n    const result = concatImpl([leftSide, rightSide], axis, backend);\n\n    backend.disposeIntermediateTensorInfo(leftSide);\n    backend.disposeIntermediateTensorInfo(rightSide);\n\n    return result;\n  }\n\n  if (env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') &&\n      inputs[0].shape.length > 1) {\n    const program = new ConcatPackedProgram(inputs.map(t => t.shape), axis);\n    return backend.runWebGLProgram(program, inputs, dtype);\n  }\n\n  const {tensors2D, outShape} = computeTensors2D(inputs, axis, backend);\n  const program =\n      new ConcatProgram(tensors2D.map(t => t.shape as [number, number]));\n  const result = backend.runWebGLProgram(program, tensors2D, dtype);\n\n  tensors2D.forEach(r => backend.disposeIntermediateTensorInfo(r));\n  const reshapedResult =\n      reshape({inputs: {x: result}, attrs: {shape: outShape}, backend});\n  backend.disposeIntermediateTensorInfo(result);\n\n  return reshapedResult;\n}\n\nfunction computeTensors2D(\n    inputs: ConcatInputs, axis: number, backend: MathBackendWebGL) {\n  // Any concat of n-dimensional tensors across any axis can be reduced to\n  // a concatenation of two-dimensional tensors across the axis 1 by first\n  // partitioning the axes of the original tensors into those less than the\n  // axis to be concatenated and the rest. Then reshape the tensors\n  // into a two-dimensional tensor by collapsing these two sets of axes and\n  // concatenate the resulting matrices across the axis 1, finally reshaping\n  // the result to have the proper shape.\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), axis);\n  const tensors2D = inputs.map(\n      x => reshape({\n        inputs: {x},\n        attrs: {shape: [-1, util.sizeFromShape(x.shape.slice(axis))]},\n        backend\n      }));\n\n  return {tensors2D, outShape};\n}\n"]},"metadata":{},"sourceType":"module"}