{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { nearestDivisor } from '../util';\nimport { PARALLELIZE_THRESHOLD } from './reduce_util';\nexport function segOpComputeOptimalWindowSize(inSize, numSegments) {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n\n  return res;\n}\nexport function computeOutShape(aShape, axis, numSegments) {\n  const outShape = [];\n  const rank = aShape.length;\n\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n\n  return outShape;\n}\nexport function collectGatherOpShapeInfo(x, indices, axis, batchDims) {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(`x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${i}]: ${indices.shape[i]}.`);\n    }\n  }\n\n  const dimSize = x.shape[axis];\n  const outputShape = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {\n    batchSize,\n    sliceSize,\n    outerSize,\n    dimSize,\n    outputShape\n  };\n}","map":{"version":3,"mappings":"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","names":["nearestDivisor","PARALLELIZE_THRESHOLD","segOpComputeOptimalWindowSize","inSize","numSegments","done","res","Math","floor","sqrt","computeOutShape","aShape","axis","outShape","rank","length","dim","push","collectGatherOpShapeInfo","x","indices","batchDims","indicesRank","shape","xRank","Error","i","dimSize","outputShape","batchSize","outerSize","sliceSize"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/segment_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '../kernel_registry';\nimport {nearestDivisor} from '../util';\n\nimport {PARALLELIZE_THRESHOLD} from './reduce_util';\n\nexport interface SegOpInfo {\n  windowSize: number;\n  batchSize: number;\n  inSize: number;\n  numSegments: number;\n}\n\nexport function segOpComputeOptimalWindowSize(\n    inSize: number, numSegments: number): number {\n  let done = false;\n  let res;\n\n  if (inSize <= PARALLELIZE_THRESHOLD) {\n    res = inSize;\n    done = true;\n  } else {\n    res = nearestDivisor(inSize, Math.floor(Math.sqrt(inSize)));\n  }\n\n  while (!done) {\n    if (res > numSegments || res === inSize) {\n      done = true;\n    } else {\n      res = nearestDivisor(inSize, res + 1);\n    }\n  }\n  return res;\n}\n\nexport function computeOutShape(\n    aShape: number[], axis: number, numSegments: number): number[] {\n  const outShape = [];\n  const rank = aShape.length;\n  for (let dim = 0; dim < rank; dim++) {\n    if (dim !== axis) {\n      outShape.push(aShape[dim]);\n    } else {\n      outShape.push(numSegments);\n    }\n  }\n  return outShape;\n}\n\nexport interface GatherOpShapeInfo {\n  batchSize: number;\n  sliceSize: number;\n  outerSize: number;\n  dimSize: number;\n  outputShape: number[];\n}\n\nexport function collectGatherOpShapeInfo(\n    x: TensorInfo, indices: TensorInfo, axis: number,\n    batchDims: number): GatherOpShapeInfo {\n  const indicesRank = indices.shape.length;\n  const xRank = x.shape.length;\n\n  if (batchDims !== 0) {\n    if (batchDims < -indicesRank || batchDims > indicesRank) {\n      throw new Error(`Expect batchDims in the range of [-${indicesRank}, ${\n          indicesRank}], but got ${batchDims}`);\n    }\n  }\n\n  if (batchDims < 0) {\n    batchDims += indicesRank;\n  }\n\n  if (batchDims > xRank) {\n    throw new Error(`batchDims (${batchDims}) must be less than rank(x) (\n    ${xRank}).`);\n  }\n\n  if (axis < batchDims) {\n    throw new Error(`batchDims (${\n        batchDims}) must be less than or equal to axis (${axis}).`);\n  }\n\n  for (let i = 0; i < batchDims; ++i) {\n    if (x.shape[i] !== indices.shape[i]) {\n      throw new Error(\n          `x.shape[${i}]: ${x.shape[i]} should be equal to indices.shape[${\n              i}]: ${indices.shape[i]}.`);\n    }\n  }\n  const dimSize = x.shape[axis];\n\n  const outputShape: number[] = [];\n  let batchSize = 1;\n  let outerSize = 1;\n  let sliceSize = 1;\n\n  for (let i = 0; i < batchDims; ++i) {\n    outputShape.push(x.shape[i]);\n    batchSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < axis; i++) {\n    outputShape.push(x.shape[i]);\n    outerSize *= x.shape[i];\n  }\n\n  for (let i = batchDims; i < indicesRank; i++) {\n    outputShape.push(indices.shape[i]);\n  }\n\n  for (let i = axis + 1; i < xRank; i++) {\n    outputShape.push(x.shape[i]);\n    sliceSize *= x.shape[i];\n  }\n\n  return {batchSize, sliceSize, outerSize, dimSize, outputShape};\n}\n"]},"metadata":{},"sourceType":"module"}