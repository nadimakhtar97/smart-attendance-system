{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n  const $x = cast({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      dtype: 'float32'\n    }\n  });\n  toDispose.push($x);\n  const res = div({\n    inputs: {\n      a: $x,\n      b: reduceSizeScalar\n    },\n    backend\n  });\n  toDispose.push(res);\n  const result = sum({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      axis,\n      keepDims\n    }\n  });\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAgDC,IAAhD,EAAyFC,IAAzF,QAAoG,uBAApG;AAGA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,GAAR,QAAkB,WAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AAEA,OAAM,SAAUC,IAAV,CACFC,IADE,EACmE;AAEvE,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,QAAD;AAAOC;AAAP,MAAmBH,KAAzB;AAEA,QAAMI,IAAI,GAAGZ,IAAI,CAACa,cAAL,CAAoBH,IAApB,EAA0BD,CAAC,CAACK,KAA5B,CAAb;AACA,QAAMC,MAAM,GAAGjB,YAAY,CAACkB,yBAAb,CAAuCP,CAAC,CAACK,KAAzC,EAAgDF,IAAhD,CAAf;AACA,QAAMK,WAAW,GAAGF,MAAM,CAAC,CAAD,CAA1B;AACA,QAAMG,UAAU,GAAGlB,IAAI,CAACmB,aAAL,CAAmBF,WAAnB,CAAnB;AACA,QAAMG,SAAS,GAAG,EAAlB;AACA,QAAMC,gBAAgB,GAClBd,OAAO,CAACe,cAAR,CAAuB,EAAvB,EAA2B,SAA3B,EAAsC,IAAIC,YAAJ,CAAiB,CAACL,UAAD,CAAjB,CAAtC,CADJ;AAEAE,WAAS,CAACI,IAAV,CAAeH,gBAAf;AAEA,QAAMI,EAAE,GAAGxB,IAAI,CAAC;AAACK,UAAM,EAAE;AAACG;AAAD,KAAT;AAAcF,WAAd;AAAuBC,SAAK,EAAE;AAACkB,WAAK,EAAE;AAAR;AAA9B,GAAD,CAAf;AACAN,WAAS,CAACI,IAAV,CAAeC,EAAf;AAEA,QAAME,GAAG,GACLzB,GAAG,CAAC;AAACI,UAAM,EAAE;AAACsB,OAAC,EAAEH,EAAJ;AAAQI,OAAC,EAAER;AAAX,KAAT;AAAuCd;AAAvC,GAAD,CADP;AAEAa,WAAS,CAACI,IAAV,CAAeG,GAAf;AAEA,QAAMG,MAAM,GAAG3B,GAAG,CAAC;AAACG,UAAM,EAAE;AAACG,OAAC,EAAEkB;AAAJ,KAAT;AAAmBpB,WAAnB;AAA4BC,SAAK,EAAE;AAACE,UAAD;AAAOC;AAAP;AAAnC,GAAD,CAAlB;AAEAS,WAAS,CAACW,OAAV,CAAkBC,CAAC,IAAIzB,OAAO,CAAC0B,6BAAR,CAAsCD,CAAtC,CAAvB;AAEA,SAAOF,MAAP;AACD;AAED,OAAO,MAAMI,UAAU,GAAiB;AACtCC,YAAU,EAAEpC,IAD0B;AAEtCqC,aAAW,EAAE,KAFyB;AAGtCC,YAAU,EAAEjC;AAH0B,CAAjC","names":["backend_util","Mean","util","cast","div","sum","mean","args","inputs","backend","attrs","x","axis","keepDims","axes","parseAxisParam","shape","shapes","computeOutAndReduceShapes","reduceShape","reduceSize","sizeFromShape","toDispose","reduceSizeScalar","makeTensorInfo","Float32Array","push","$x","dtype","res","a","b","result","forEach","t","disposeIntermediateTensorInfo","meanConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Mean.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Mean, MeanAttrs, MeanInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {cast} from './Cast';\nimport {div} from './RealDiv';\nimport {sum} from './Sum';\n\nexport function mean(\n    args: {inputs: MeanInputs, backend: MathBackendCPU, attrs: MeanAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const axes = util.parseAxisParam(axis, x.shape);\n  const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n  const reduceShape = shapes[1];\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const toDispose = [];\n  const reduceSizeScalar =\n      backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n  toDispose.push(reduceSizeScalar);\n\n  const $x = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n  toDispose.push($x);\n\n  const res =\n      div({inputs: {a: $x, b: reduceSizeScalar}, backend}) as TensorInfo;\n  toDispose.push(res);\n\n  const result = sum({inputs: {x: res}, backend, attrs: {axis, keepDims}});\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'cpu',\n  kernelFunc: mean as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}