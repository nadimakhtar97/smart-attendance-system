{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'TopKV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const k = getParamValue('k', node, tensorMap, context);\n        const sorted = getParamValue('sorted', node, tensorMap, context);\n        const result = tfOps.topk(x, k, sorted);\n        return [result.values, result.indices];\n      }\n\n    case 'Unique':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const result = tfOps.unique(x);\n        return [result.values, result.indices];\n      }\n\n    case 'UniqueV2':\n      {\n        const x = getParamValue('x', node, tensorMap, context);\n        const axis = getParamValue('axis', node, tensorMap, context);\n        const result = tfOps.unique(x, axis);\n        return [result.values, result.indices];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'evaluation';","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA;AACA,OAAO,KAAKA,KAAZ,MAAuB,kDAAvB;AAMA,SAAQC,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAMC,SAAS,GAClB,CAACC,IAAD,EAAaC,SAAb,EAAyCC,OAAzC,KACe;AACT,UAAQF,IAAI,CAACG,EAAb;AACE,SAAK,QAAL;AAAe;AACb,cAAMC,CAAC,GAAGN,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;AACA,cAAMG,CAAC,GAAGP,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;AACA,cAAMI,MAAM,GACRR,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CADjB;AAEA,cAAMK,MAAM,GAAGV,KAAK,CAACW,IAAN,CAAWJ,CAAX,EAAcC,CAAd,EAAiBC,MAAjB,CAAf;AACA,eAAO,CAACC,MAAM,CAACE,MAAR,EAAgBF,MAAM,CAACG,OAAvB,CAAP;AACD;;AACD,SAAK,QAAL;AAAe;AACb,cAAMN,CAAC,GAAGN,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;AACA,cAAMK,MAAM,GAAGV,KAAK,CAACc,MAAN,CAAaP,CAAb,CAAf;AACA,eAAO,CAACG,MAAM,CAACE,MAAR,EAAgBF,MAAM,CAACG,OAAvB,CAAP;AACD;;AACD,SAAK,UAAL;AAAiB;AACf,cAAMN,CAAC,GAAGN,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CAAvB;AACA,cAAMU,IAAI,GACNd,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CADjB;AAEA,cAAMK,MAAM,GAAGV,KAAK,CAACc,MAAN,CAAaP,CAAb,EAAgBQ,IAAhB,CAAf;AACA,eAAO,CAACL,MAAM,CAACE,MAAR,EAAgBF,MAAM,CAACG,OAAvB,CAAP;AACD;;AACD;AACE,YAAMG,SAAS,CAAC,aAAab,IAAI,CAACG,EAAE,qBAArB,CAAf;AAtBJ;AAwBD,CA3BF;AA6BP,OAAO,MAAMW,QAAQ,GAAG,YAAjB","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","x","k","sorted","result","topk","values","indices","unique","axis","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/evaluation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'TopKV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const k = getParamValue('k', node, tensorMap, context) as number;\n              const sorted =\n                  getParamValue('sorted', node, tensorMap, context) as boolean;\n              const result = tfOps.topk(x, k, sorted);\n              return [result.values, result.indices];\n            }\n            case 'Unique': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const result = tfOps.unique(x);\n              return [result.values, result.indices];\n            }\n            case 'UniqueV2': {\n              const x = getParamValue('x', node, tensorMap, context) as Tensor;\n              const axis =\n                  getParamValue('axis', node, tensorMap, context) as number;\n              const result = tfOps.unique(x, axis);\n              return [result.values, result.indices];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'evaluation';\n"]},"metadata":{},"sourceType":"module"}