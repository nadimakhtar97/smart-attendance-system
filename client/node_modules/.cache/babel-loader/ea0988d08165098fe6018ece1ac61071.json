{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SliceProgram {\n  constructor(destSize) {\n    this.variableNames = ['source'];\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{\n      name: 'start',\n      arrayIndex: this.rank,\n      type: 'int'\n    }];\n    const sourceCoords = getCoords(this.rank);\n    let body;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n\n}\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank) {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAR,QAA6C,mBAA7C;AAEA,OAAM,MAAOC,YAAP,CAAmB;AAOvBC,cAAYC,QAAZ,EAA8B;AAN9B,yBAAgB,CAAC,QAAD,CAAhB;AAOE,SAAKC,WAAL,GAAmBD,QAAnB;AACA,SAAKE,IAAL,GAAYF,QAAQ,CAACG,MAArB;AAEA,UAAMC,KAAK,GAAGP,iBAAiB,CAAC,KAAKK,IAAN,CAA/B;AACA,SAAKG,cAAL,GAAsB,CAAC;AAACC,UAAI,EAAE,OAAP;AAAgBC,gBAAU,EAAE,KAAKL,IAAjC;AAAuCM,UAAI,EAAE;AAA7C,KAAD,CAAtB;AACA,UAAMC,YAAY,GAAGC,SAAS,CAAC,KAAKR,IAAN,CAA9B;AAEA,QAAIS,IAAJ;AACA,UAAMC,QAAQ,GAAGZ,QAAQ,CAACa,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAS;AACrC,aAAO,aAAaC,MAAM,CAACD,CAAD,CAAG,YAAYA,CAAC,cAAcC,MAAM,CAACD,CAAD,CAAG,GAAjE;AACD,KAFgB,CAAjB;AAGAJ,QAAI,GAAG;UACDP,KAAK;UACLA,KAAK;UACLQ,QAAQ,CAACK,IAAT,CAAc,IAAd,CAAmB;OAHzB;AAKA,SAAKC,QAAL,GAAgB;;UAEVP,IAAI;8BACgBF,YAAY;;KAHtC;AAMD;;AA9BsB;AAiCzB,MAAMO,MAAM,GAAG,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,EAAqB,GAArB,EAA0B,GAA1B,CAAf;;AAEA,SAASN,SAAT,CAAmBR,IAAnB,EAA+B;AAC7B,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,WAAP;AACD,GAFD,MAEO,IAAIA,IAAI,IAAI,CAAZ,EAAe;AACpB,WAAOc,MAAM,CAACG,KAAP,CAAa,CAAb,EAAgBjB,IAAhB,EAAsBW,GAAtB,CAA0BO,CAAC,IAAI,eAAeA,CAA9C,EAAiDH,IAAjD,CAAsD,GAAtD,CAAP;AACD,GAFM,MAEA;AACL,UAAMI,KAAK,CAAC,oBAAoBnB,IAAI,uBAAzB,CAAX;AACD;AACF","names":["getCoordsDataType","SliceProgram","constructor","destSize","outputShape","rank","length","dtype","customUniforms","name","arrayIndex","type","sourceCoords","getCoords","body","coordSum","map","_","i","coords","join","userCode","slice","x","Error"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/slice_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class SliceProgram implements GPGPUProgram {\n  variableNames = ['source'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  customUniforms: Array<{name: string; arrayIndex: number; type: UniformType;}>;\n\n  constructor(destSize: number[]) {\n    this.outputShape = destSize;\n    this.rank = destSize.length;\n\n    const dtype = getCoordsDataType(this.rank);\n    this.customUniforms = [{name: 'start', arrayIndex: this.rank, type: 'int'}];\n    const sourceCoords = getCoords(this.rank);\n\n    let body: string;\n    const coordSum = destSize.map((_, i) => {\n      return `sourceLoc.${coords[i]} = start[${i}] + coords.${coords[i]};`;\n    });\n    body = `\n        ${dtype} sourceLoc;\n        ${dtype} coords = getOutputCoords();\n        ${coordSum.join('\\n')}\n      `;\n    this.userCode = `\n      void main() {\n        ${body}\n        setOutput(getSource(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nconst coords = ['x', 'y', 'z', 'w', 'u', 'v'];\n\nfunction getCoords(rank: number): string {\n  if (rank === 1) {\n    return 'sourceLoc';\n  } else if (rank <= 6) {\n    return coords.slice(0, rank).map(x => 'sourceLoc.' + x).join(',');\n  } else {\n    throw Error(`Slicing for rank ${rank} is not yet supported`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}