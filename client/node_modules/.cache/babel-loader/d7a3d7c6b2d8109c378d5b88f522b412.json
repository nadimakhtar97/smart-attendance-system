{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\nexport class BinaryOpPackedProgram {\n  constructor(op, aShape, bShape) {\n    let checkOutOfBounds = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    this.variableNames = ['A', 'B'];\n    this.supportsBroadcasting = true;\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,IAAtB,QAAiC,uBAAjC;AAEA,SAAsBC,gBAAtB,QAA6C,cAA7C;AACA,SAAQC,WAAR,QAA0B,gBAA1B;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;AAEA,OAAO,MAAMC,iBAAiB,GAAG;;;;;CAA1B;AAOP,OAAO,MAAMC,OAAO,GAAG;;;CAAhB;AAKP,OAAO,MAAMC,SAAS,GAAG;;CAAlB;AAIP,OAAM,MAAOC,qBAAP,CAA4B;AAShCC,cACIC,EADJ,EACgBC,MADhB,EACkCC,MADlC,EAE4B;AAAA,QAAxBC,gBAAwB,uEAAL,KAAK;AAV5B,yBAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AAGA,gCAAuB,IAAvB;AACA,wBAAe,IAAf;AACA,wBAAe,IAAf;AAME,SAAKC,WAAL,GAAmBd,YAAY,CAACe,0BAAb,CAAwCJ,MAAxC,EAAgDC,MAAhD,CAAnB;AACA,UAAMI,IAAI,GAAG,KAAKF,WAAL,CAAiBG,MAA9B;AACA,SAAKC,mBAAL,GAA2BhB,gBAAgB,CAACc,IAAD,CAA3C;AACA,QAAIG,sBAAsB,GAAG,EAA7B;;AACA,QAAIN,gBAAJ,EAAsB;AACpB,UAAIG,IAAI,KAAK,CAAT,IAAcf,IAAI,CAACmB,aAAL,CAAmB,KAAKN,WAAxB,MAAyC,CAA3D,EAA8D;AAC5DK,8BAAsB,GAAG;;;;SAAzB;AAKD,OAND,MAMO;AACL,cAAME,KAAK,GAAGjB,iBAAiB,CAACY,IAAD,CAA/B;AACAG,8BAAsB,GAAG;YACrBE,KAAK;SADT;;AAGA,YAAIL,IAAI,KAAK,CAAb,EAAgB;AACd,cAAI,KAAKE,mBAAT,EAA8B;AAC5BC,kCAAsB,IAAI;;;;WAA1B;AAKD,WAND,MAMO;AACLA,kCAAsB,IAAI;yCACG,KAAKL,WAAL,CAAiB,CAAjB,CAAmB;;;WADhD;AAKD;AACF,SAdD,MAcO;AACL,gBAAMQ,QAAQ,GAAGnB,WAAW,CAAC,QAAD,EAAWa,IAAX,CAA5B;;AACA,cAAI,KAAKE,mBAAT,EAA8B;AAC5BC,kCAAsB,IAAI;;iBAErBG,QAAQ,CAACN,IAAI,GAAG,CAAR,CAAU,qBAAqBA,IAAI;;iBAE3CM,QAAQ,CAACN,IAAI,GAAG,CAAR,CAAU,qBAAqBA,IAAI;;;;WAJhD;AASD,WAVD,MAUO;AACLG,kCAAsB,IAAI;;iBAErBG,QAAQ,CAACN,IAAI,GAAG,CAAR,CAAU,YAAY,KAAKF,WAAL,CAAiBE,IAAI,GAAG,CAAxB,CAA0B;;iBAExDM,QAAQ,CAACN,IAAI,GAAG,CAAR,CAAU,YAAY,KAAKF,WAAL,CAAiBE,IAAI,GAAG,CAAxB,CAA0B;;;;WAJ7D;AASD;AACF;AACF;AACF;;AAED,SAAKO,QAAL,GAAgB;;UAEVb,EAAE;;;;;;;;UAQFS,sBAAsB;;;;KAV5B;AAeD;;AApF+B","names":["backend_util","util","useShapeUniforms","getChannels","getCoordsDataType","CHECK_NAN_SNIPPET","ELU_DER","NOT_EQUAL","BinaryOpPackedProgram","constructor","op","aShape","bShape","checkOutOfBounds","outputShape","assertAndGetBroadcastShape","rank","length","enableShapeUniforms","checkOutOfBoundsString","sizeFromShape","dtype","channels","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/binaryop_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport const CHECK_NAN_SNIPPET = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n\nexport const ELU_DER = `\n  vec4 bGTEZero = vec4(greaterThanEqual(b, vec4(0.)));\n  return (bGTEZero * a) + ((vec4(1.0) - bGTEZero) * (a * (b + vec4(1.0))));\n`;\n\nexport const NOT_EQUAL = `\n  return vec4(notEqual(a, b));\n`;\n\nexport class BinaryOpPackedProgram implements GPGPUProgram {\n  variableNames = ['A', 'B'];\n  outputShape: number[];\n  userCode: string;\n  supportsBroadcasting = true;\n  packedInputs = true;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n\n  constructor(\n      op: string, aShape: number[], bShape: number[],\n      checkOutOfBounds = false) {\n    this.outputShape = backend_util.assertAndGetBroadcastShape(aShape, bShape);\n    const rank = this.outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(rank);\n    let checkOutOfBoundsString = '';\n    if (checkOutOfBounds) {\n      if (rank === 0 || util.sizeFromShape(this.outputShape) === 1) {\n        checkOutOfBoundsString = `\n          result.y = 0.;\n          result.z = 0.;\n          result.w = 0.;\n        `;\n      } else {\n        const dtype = getCoordsDataType(rank);\n        checkOutOfBoundsString = `\n          ${dtype} coords = getOutputCoords();\n        `;\n        if (rank === 1) {\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= outShape ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            result.y = (coords + 1) >= ${this.outputShape[0]} ? 0. : result.y;\n            result.z = 0.;\n            result.w = 0.;\n          `;\n          }\n        } else {\n          const channels = getChannels('coords', rank);\n          if (this.enableShapeUniforms) {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= outShape[${rank} - 2];\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= outShape[${rank} - 1];\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          } else {\n            checkOutOfBoundsString += `\n            bool nextRowOutOfBounds =\n              (${channels[rank - 2]} + 1) >= ${this.outputShape[rank - 2]};\n            bool nextColOutOfBounds =\n              (${channels[rank - 1]} + 1) >= ${this.outputShape[rank - 1]};\n            result.y = nextColOutOfBounds ? 0. : result.y;\n            result.z = nextRowOutOfBounds ? 0. : result.z;\n            result.w = nextColOutOfBounds || nextRowOutOfBounds ? 0. : result.w;\n          `;\n          }\n        }\n      }\n    }\n\n    this.userCode = `\n      vec4 binaryOperation(vec4 a, vec4 b) {\n        ${op}\n      }\n\n      void main() {\n        vec4 a = getAAtOutCoords();\n        vec4 b = getBAtOutCoords();\n\n        vec4 result = binaryOperation(a, b);\n        ${checkOutOfBoundsString}\n\n        setOutput(result);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}