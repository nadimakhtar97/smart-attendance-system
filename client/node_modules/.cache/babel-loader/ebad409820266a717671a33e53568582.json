{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { customGrad } from '../../gradients';\nimport { FusedDepthwiseConv2D } from '../../kernel_names';\nimport { makeTypesMatch } from '../../tensor_util';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { add } from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport * as conv_util from '../conv_util';\nimport { depthwiseConv2d as unfusedDepthwiseConv2d } from '../depthwise_conv2d';\nimport { depthwiseConv2dNativeBackpropFilter } from '../depthwise_conv2d_native_backprop_filter';\nimport { depthwiseConv2dNativeBackpropInput } from '../depthwise_conv2d_native_backprop_input';\nimport { applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse } from '../fused_util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * Computes depthwise 2D convolution, optionally fused with adding a\n * bias and applying an activation.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`).\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\n\nfunction fusedDepthwiseConv2d_(_ref) {\n  let {\n    x,\n    filter,\n    strides,\n    pad,\n    dataFormat = 'NHWC',\n    dilations = [1, 1],\n    dimRoundingMode,\n    bias,\n    activation = 'linear',\n    preluActivationWeights,\n    leakyreluAlpha\n  } = _ref;\n\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedDepthwiseConv2d(x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(result, activation, preluActivationWeights, leakyreluAlpha);\n  }\n\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);\n  util.assert($filter.rank === 4, () => `Error in fused depthwiseConv2d: filter must be rank 4, ` + `but got rank ${$filter.rank}.`);\n  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in fused depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);\n\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in fused depthwiseConv2d: Either strides or dilations must ' + `be 1. Got strides ${strides} and dilations '${dilations}'`);\n  conv_util.checkPadOnDimRoundingMode('fused depthwiseConv2d', pad, dimRoundingMode);\n  const convInfo = conv_util.computeConv2DInfo(x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  let $bias;\n\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights;\n\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');\n  }\n\n  const grad = (dy, saved) => {\n    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' + `greater than 1 are not yet supported. Got dilations ` + `'${dilations}'`);\n    const [$filter, x4D, y, bias] = saved;\n    const dyActivation = getFusedDyActivation(dy, y, activation);\n    const xDer = depthwiseConv2dNativeBackpropInput(x4D.shape, dyActivation, $filter, strides, pad, dilations, dimRoundingMode);\n    const filterDer = depthwiseConv2dNativeBackpropFilter(x4D, dyActivation, $filter.shape, strides, pad, dilations, dimRoundingMode);\n\n    if (bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      return [xDer, filterDer, biasDer];\n    }\n\n    return [xDer, filterDer];\n  };\n\n  const inputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  }; // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n\n  if (bias == null) {\n    const customOp = customGrad((x4D, filter, save) => {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      let res = ENGINE.runKernel(FusedDepthwiseConv2D, inputs, attrs);\n      save([filter, x4D, res]);\n\n      if (reshapedTo4D) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n\n      return {\n        value: res,\n        gradFunc: grad\n      };\n    });\n    return customOp(x4D, $filter);\n  } else {\n    const customOpWithBias = customGrad((x4D, filter, bias, save) => {\n      // tslint:disable-next-line: no-unnecessary-type-assertion\n      let res = ENGINE.runKernel(FusedDepthwiseConv2D, inputs, attrs);\n      save([filter, x4D, res, bias]);\n\n      if (reshapedTo4D) {\n        // tslint:disable-next-line: no-unnecessary-type-assertion\n        res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n      }\n\n      return {\n        value: res,\n        gradFunc: grad\n      };\n    });\n    return customOpWithBias(x4D, $filter, $bias);\n  }\n}\n\nexport const depthwiseConv2d = op({\n  fusedDepthwiseConv2d_\n});","map":{"version":3,"mappings":"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","names":["ENGINE","customGrad","FusedDepthwiseConv2D","makeTypesMatch","convertToTensor","util","add","broadcast_util","conv_util","depthwiseConv2d","unfusedDepthwiseConv2d","depthwiseConv2dNativeBackpropFilter","depthwiseConv2dNativeBackpropInput","applyActivation","getFusedBiasGradient","getFusedDyActivation","shouldFuse","op","reshape","fusedDepthwiseConv2d_","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","bias","activation","preluActivationWeights","leakyreluAlpha","state","gradientDepth","result","$x","$filter","x4D","reshapedTo4D","rank","shape","assert","eitherStridesOrDilationsAreOne","checkPadOnDimRoundingMode","convInfo","computeConv2DInfo","$bias","assertAndGetBroadcastShape","outShape","$preluActivationWeights","grad","dy","saved","tupleValuesAreOne","y","dyActivation","xDer","filterDer","biasDer","inputs","attrs","customOp","save","res","runKernel","value","gradFunc","customOpWithBias"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/fused/depthwise_conv2d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {customGrad} from '../../gradients';\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor, Tensor3D, Tensor4D} from '../../tensor';\nimport {GradSaveFunc, NamedTensorMap} from '../../tensor_types';\nimport {makeTypesMatch} from '../../tensor_util';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\nimport {add} from '../add';\nimport * as broadcast_util from '../broadcast_util';\nimport * as conv_util from '../conv_util';\nimport {depthwiseConv2d as unfusedDepthwiseConv2d} from '../depthwise_conv2d';\nimport {depthwiseConv2dNativeBackpropFilter} from '../depthwise_conv2d_native_backprop_filter';\nimport {depthwiseConv2dNativeBackpropInput} from '../depthwise_conv2d_native_backprop_input';\nimport {Activation} from '../fused_types';\nimport {applyActivation, getFusedBiasGradient, getFusedDyActivation, shouldFuse} from '../fused_util';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * Computes depthwise 2D convolution, optionally fused with adding a\n * bias and applying an activation.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param obj An object with the following properties:\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n * @param bias Tensor to be added to the result.\n * @param activation Name of activation kernel (defaults to `linear`).\n * @param preluActivationWeights Tensor of prelu weights to be applied as part\n *     of a `prelu` activation, typically the same shape as `x`.\n * @param leakyreluAlpha Optional. Alpha to be applied as part of a `leakyrelu`\n *     activation.\n */\nfunction fusedDepthwiseConv2d_<T extends Tensor3D|Tensor4D>({\n  x,\n  filter,\n  strides,\n  pad,\n  dataFormat = 'NHWC',\n  dilations = [1, 1],\n  dimRoundingMode,\n  bias,\n  activation = 'linear',\n  preluActivationWeights,\n  leakyreluAlpha\n}: {\n  x: T|TensorLike,\n  filter: Tensor4D|TensorLike,\n  strides: [number, number]|number,\n  pad: 'valid'|'same'|number,\n  dataFormat?: 'NHWC'|'NCHW',\n  dilations?: [number, number]|number,\n  dimRoundingMode?: 'floor'|'round'|'ceil',\n  bias?: Tensor|TensorLike,\n  activation?: Activation,\n  preluActivationWeights?: Tensor,\n  leakyreluAlpha?: number\n}): T {\n  if (shouldFuse(ENGINE.state.gradientDepth, activation) === false) {\n    let result = unfusedDepthwiseConv2d(\n        x, filter, strides, pad, dataFormat, dilations, dimRoundingMode);\n    if (bias != null) {\n      result = add(result, bias);\n    }\n\n    return applyActivation(\n               result, activation, preluActivationWeights, leakyreluAlpha) as T;\n  }\n\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n  const $filter =\n      convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in fused depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in fused depthwiseConv2d: filter must be rank 4, ` +\n          `but got rank ${$filter.rank}.`);\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in fused depthwiseConv2d: number of input channels ` +\n          `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  if (dilations == null) {\n    dilations = [1, 1];\n  }\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () =>\n          'Error in fused depthwiseConv2d: Either strides or dilations must ' +\n          `be 1. Got strides ${strides} and dilations '${dilations}'`);\n  conv_util.checkPadOnDimRoundingMode(\n      'fused depthwiseConv2d', pad, dimRoundingMode);\n  const convInfo = conv_util.computeConv2DInfo(\n      x4D.shape, $filter.shape, strides, dilations, pad, dimRoundingMode,\n      true /* depthwise */);\n\n  let $bias: Tensor;\n  if (bias != null) {\n    $bias = convertToTensor(bias, 'bias', 'fused conv2d');\n    [$bias] = makeTypesMatch($bias, $x);\n\n    broadcast_util.assertAndGetBroadcastShape(convInfo.outShape, $bias.shape);\n  }\n\n  let $preluActivationWeights: Tensor;\n  if (preluActivationWeights != null) {\n    $preluActivationWeights = convertToTensor(\n        preluActivationWeights, 'prelu weights', 'fused depthwiseConv2d');\n  }\n\n  const grad = (dy: Tensor4D, saved: Tensor[]) => {\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of fused depthwiseConv2d: dilation rates ' +\n            `greater than 1 are not yet supported. Got dilations ` +\n            `'${dilations}'`);\n    const [$filter, x4D, y, bias] = saved;\n\n    const dyActivation = getFusedDyActivation(dy, y, activation) as Tensor4D;\n\n    const xDer = depthwiseConv2dNativeBackpropInput(\n        (x4D as Tensor4D).shape, dyActivation, $filter as Tensor4D, strides,\n        pad, dilations, dimRoundingMode);\n    const filterDer = depthwiseConv2dNativeBackpropFilter(\n        x4D as Tensor4D, dyActivation, ($filter as Tensor4D).shape, strides,\n        pad, dilations, dimRoundingMode);\n\n    if (bias != null) {\n      const biasDer = getFusedBiasGradient($bias, dyActivation);\n      return [xDer, filterDer, biasDer];\n    }\n    return [xDer, filterDer];\n  };\n\n  const inputs: FusedDepthwiseConv2DInputs = {\n    x: x4D,\n    filter: $filter,\n    bias: $bias,\n    preluActivationWeights: $preluActivationWeights\n  };\n  const attrs: FusedDepthwiseConv2DAttrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  };\n\n  // Depending on the the params passed in we will have different number of\n  // inputs and thus a a different number of elements in the gradient.\n  if (bias == null) {\n    const customOp =\n        customGrad((x4D: Tensor4D, filter: Tensor4D, save: GradSaveFunc) => {\n          // tslint:disable-next-line: no-unnecessary-type-assertion\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedDepthwiseConv2D, inputs as {} as NamedTensorMap,\n              attrs as {} as NamedAttrMap);\n\n          save([filter, x4D, res]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n    return customOp(x4D, $filter) as T;\n  } else {\n    const customOpWithBias = customGrad(\n        (x4D: Tensor4D, filter: Tensor4D, bias: Tensor, save: GradSaveFunc) => {\n          // tslint:disable-next-line: no-unnecessary-type-assertion\n          let res: Tensor4D|Tensor3D = ENGINE.runKernel(\n              FusedDepthwiseConv2D, inputs as {} as NamedTensorMap,\n              attrs as {} as NamedAttrMap);\n\n          save([filter, x4D, res, bias]);\n\n          if (reshapedTo4D) {\n            // tslint:disable-next-line: no-unnecessary-type-assertion\n            res = reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as\n                Tensor3D;\n          }\n\n          return {value: res, gradFunc: grad};\n        });\n\n    return customOpWithBias(x4D, $filter, $bias) as T;\n  }\n}\nexport const depthwiseConv2d = op({fusedDepthwiseConv2d_});\n"]},"metadata":{},"sourceType":"module"}