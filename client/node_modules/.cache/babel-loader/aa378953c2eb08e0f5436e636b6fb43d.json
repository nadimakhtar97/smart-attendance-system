{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function avgPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(x.shape, 'float32');\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n  const dyData = backend.data.get(dy.dataId).values;\n  const dyBuf = buffer(dy.shape, 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const avgPoolGradConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad\n};","map":{"version":3,"mappings":"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","names":["AvgPoolGrad","backend_util","buffer","assertNotComplex","avgPoolGrad","args","inputs","backend","attrs","dy","input","x","filterSize","strides","pad","convInfo","computePool2DInfo","shape","strideHeight","strideWidth","filterHeight","filterWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padLeft","padInfo","left","padTop","top","dx","avgMultiplier","dyData","data","get","dataId","values","dyBuf","b","batchSize","d","inChannels","dxR","inHeight","dxC","inWidth","dyRCorner","dyCCorner","dotProd","wR","dyR","outHeight","Math","floor","wC","dyC","outWidth","pixel","set","makeTensorInfo","dtype","avgPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/AvgPoolGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs, backend_util, buffer, KernelConfig, KernelFunc, Rank, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function avgPoolGrad(args: {\n  inputs: AvgPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const x = input;\n  assertNotComplex([dy, input], 'avgPoolGrad');\n  const {filterSize, strides, pad} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const avgMultiplier = 1 / (filterHeight * filterWidth);\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel;\n            }\n          }\n          dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const avgPoolGradConfig: KernelConfig = {\n  kernelName: AvgPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: avgPoolGrad as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}