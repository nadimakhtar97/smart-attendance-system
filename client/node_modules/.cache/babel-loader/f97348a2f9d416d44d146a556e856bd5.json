{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as generic_utils from '../utils/generic_utils'; // tslint:enable\n\n/**\n * Test whether a value in an array is the name of a LayersModel or Layer.\n * @param key The key name that the value is found under. Note that the key\n *   may not be at the level immediately above the value, if the value is in a\n *   nested array.\n * @param index Index of the value in the Array that it is found in.\n * @param value The value object.\n * @returns A boolean indicating whether value is a name.\n */\n\nfunction isArrayItemInputOrOutputName(key, index, value) {\n  return (key === 'inboundNodes' || key === 'outputLayers' || key === 'inputLayers') && index === 0 && typeof value === 'string';\n}\n/**\n * Convert a Pythonic config object to TypeScript config object.\n * @param pythonicConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\n\n\nexport function convertPythonicToTs(pythonicConfig, key) {\n  if (pythonicConfig === null) {\n    return null;\n  } else if (typeof pythonicConfig === 'string') {\n    return generic_utils.toCamelCase(pythonicConfig);\n  } else if (typeof pythonicConfig === 'number' || typeof pythonicConfig === 'boolean') {\n    return pythonicConfig;\n  } else if (pythonicConfig instanceof Array) {\n    const tsArray = [];\n    const arrayLength = pythonicConfig.length;\n\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = pythonicConfig[i];\n\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        tsArray.push(item);\n      } else {\n        tsArray.push(convertPythonicToTs(item, key));\n      }\n    }\n\n    return tsArray;\n  } else {\n    const tsDict = {};\n\n    for (const pythonicKey of Object.keys(pythonicConfig)) {\n      const pythonicValue = pythonicConfig[pythonicKey];\n\n      if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // camel-case conversion.\n        tsDict[pythonicKey] = pythonicValue;\n      } else {\n        const tsKey = generic_utils.toCamelCase(pythonicKey);\n        tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n      }\n    }\n\n    return tsDict;\n  }\n}\n/**\n * Convert a TypeScript config object to Python config object.\n * @param tsConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\n\nexport function convertTsToPythonic(tsConfig, key) {\n  if (tsConfig === null || tsConfig === undefined) {\n    return null;\n  } else if (typeof tsConfig === 'string') {\n    return generic_utils.toSnakeCase(tsConfig);\n  } else if (typeof tsConfig === 'number' || typeof tsConfig === 'boolean') {\n    return tsConfig;\n  } else if (tsConfig instanceof Array) {\n    const pyArray = [];\n    const arrayLength = tsConfig.length;\n\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = tsConfig[i];\n\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        pyArray.push(item);\n      } else {\n        pyArray.push(convertTsToPythonic(item, key));\n      }\n    }\n\n    return pyArray;\n  } else {\n    const pyDict = {};\n\n    for (const tsKey of Object.keys(tsConfig)) {\n      const tsValue = tsConfig[tsKey];\n      const pyKey = generic_utils.toSnakeCase(tsKey);\n\n      if ((tsKey === 'name' || tsKey === 'className') && typeof tsValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // snake-case conversion.\n        pyDict[pyKey] = tsValue;\n      } else {\n        pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n      }\n    }\n\n    return pyDict;\n  }\n}","map":{"version":3,"mappings":"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","names":["generic_utils","isArrayItemInputOrOutputName","key","index","value","convertPythonicToTs","pythonicConfig","toCamelCase","Array","tsArray","arrayLength","length","i","item","push","tsDict","pythonicKey","Object","keys","pythonicValue","tsKey","convertTsToPythonic","tsConfig","undefined","toSnakeCase","pyArray","pyDict","tsValue","pyKey"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/utils/serialization_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n// Porting note: This file doesn't exist in PyKeras.\n// Its purpose here is to centralize the boundary layer between\n// tfjs-layers's internal Config TS-Centric format and PyKeras's\n// serialized Python Config format.\n\nimport {serialization} from '@tensorflow/tfjs-core';\n\nimport {PyJsonValue} from '../keras_format/types';\nimport * as generic_utils from '../utils/generic_utils';\n// tslint:enable\n\n/**\n * Test whether a value in an array is the name of a LayersModel or Layer.\n * @param key The key name that the value is found under. Note that the key\n *   may not be at the level immediately above the value, if the value is in a\n *   nested array.\n * @param index Index of the value in the Array that it is found in.\n * @param value The value object.\n * @returns A boolean indicating whether value is a name.\n */\nfunction isArrayItemInputOrOutputName<T>(\n    key: string, index: number, value: T): boolean {\n  return (key === 'inboundNodes' || key === 'outputLayers' ||\n          key === 'inputLayers') &&\n      index === 0 && typeof value === 'string';\n}\n\n/**\n * Convert a Pythonic config object to TypeScript config object.\n * @param pythonicConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertPythonicToTs(\n    pythonicConfig: PyJsonValue, key?: string): serialization.ConfigDictValue {\n  if (pythonicConfig === null) {\n    return null;\n  } else if (typeof pythonicConfig === 'string') {\n    return generic_utils.toCamelCase(pythonicConfig);\n  } else if (\n      (typeof pythonicConfig === 'number') ||\n      (typeof pythonicConfig === 'boolean')) {\n    return pythonicConfig;\n  } else if (pythonicConfig instanceof Array) {\n    const tsArray = [];\n    const arrayLength = pythonicConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = pythonicConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        tsArray.push(item);\n      } else {\n        tsArray.push(convertPythonicToTs(item, key));\n      }\n    }\n    return tsArray;\n  } else {\n    const tsDict: serialization.ConfigDict = {};\n    for (const pythonicKey of Object.keys(pythonicConfig)) {\n      const pythonicValue = pythonicConfig[pythonicKey];\n      if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // camel-case conversion.\n        tsDict[pythonicKey] = pythonicValue;\n      } else {\n        const tsKey = generic_utils.toCamelCase(pythonicKey);\n        tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n      }\n    }\n    return tsDict;\n  }\n}\n\n/**\n * Convert a TypeScript config object to Python config object.\n * @param tsConfig The config object to convert.\n * @param key Optional key name of the object being converted.\n * @returns Result of the conversion.\n */\nexport function convertTsToPythonic(\n    tsConfig: serialization.ConfigDictValue, key?: string): PyJsonValue {\n  if (tsConfig === null || tsConfig === undefined) {\n    return null;\n  } else if (typeof tsConfig === 'string') {\n    return generic_utils.toSnakeCase(tsConfig);\n  } else if (\n      (typeof tsConfig === 'number') || (typeof tsConfig === 'boolean')) {\n    return tsConfig;\n  } else if (tsConfig instanceof Array) {\n    const pyArray = [];\n    const arrayLength = tsConfig.length;\n    for (let i = 0; i < arrayLength; ++i) {\n      const item = tsConfig[i];\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        pyArray.push(item);\n      } else {\n        pyArray.push(convertTsToPythonic(item, key));\n      }\n    }\n    return pyArray;\n  } else {\n    const pyDict: serialization.ConfigDict = {};\n    for (const tsKey of Object.keys(tsConfig)) {\n      const tsValue = tsConfig[tsKey];\n      const pyKey = generic_utils.toSnakeCase(tsKey);\n      if ((tsKey === 'name' || tsKey === 'className') &&\n          typeof tsValue === 'string') {\n        // Special case the 'name' key with a string value. Name values, such as\n        // the names of LayersModel and Layer instances, should not undergo the\n        // snake-case conversion.\n        pyDict[pyKey] = tsValue;\n      } else {\n        pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n      }\n    }\n    return pyDict;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}