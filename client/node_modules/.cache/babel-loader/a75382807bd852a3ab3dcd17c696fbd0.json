{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { meanImpl } from './Mean_impl';\nimport { transposeImpl, transposeImplCPU } from './Transpose_impl';\nexport const meanConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref;\n    const {\n      x\n    } = inputs;\n    const {\n      keepDims,\n      axis\n    } = attrs;\n    const webglBackend = backend;\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n    const intermediates = [];\n    let meanInput = x;\n\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values;\n        const newShape = new Array(xRank);\n\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n\n        const meanInputValues = transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n    let outShape = meanOutShape;\n\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};","map":{"version":3,"mappings":"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","names":["backend_util","Mean","util","meanImpl","transposeImpl","transposeImplCPU","meanConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","x","keepDims","axis","webglBackend","xRank","shape","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","meanInputIsTransposed","shouldExecuteOnCPU","intermediates","meanInput","xTexData","texData","get","dataId","values","newShape","Array","i","meanInputValues","dtype","makeTensorInfo","meanInputData","push","getInnerMostAxes","assertAxesAreInnerMostDims","meanOutShape","reduceShape","computeOutAndReduceShapes","outShape","expandShapeToKeepDim","out","disposeIntermediateTensorInfo"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Mean.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, Mean, MeanAttrs, MeanInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {meanImpl} from './Mean_impl';\nimport {transposeImpl, transposeImplCPU} from './Transpose_impl';\n\nexport const meanConfig: KernelConfig = {\n  kernelName: Mean,\n  backendName: 'webgl',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MeanInputs;\n    const {keepDims, axis} = attrs as {} as MeanAttrs;\n    const webglBackend = backend as MathBackendWebGL;\n\n    const xRank = x.shape.length;\n    const origAxes = util.parseAxisParam(axis, x.shape);\n\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    const meanInputIsTransposed = permutedAxes != null;\n    const shouldExecuteOnCPU = webglBackend.shouldExecuteOnCPU([x]);\n\n    const intermediates: TensorInfo[] = [];\n\n    let meanInput = x;\n    if (meanInputIsTransposed) {\n      if (shouldExecuteOnCPU) {\n        const xTexData = webglBackend.texData.get(meanInput.dataId);\n        const values = xTexData.values as TypedArray;\n\n        const newShape: number[] = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n          newShape[i] = x.shape[permutedAxes[i]];\n        }\n        const meanInputValues =\n            transposeImplCPU(values, x.shape, x.dtype, permutedAxes, newShape);\n\n        meanInput = webglBackend.makeTensorInfo(newShape, x.dtype);\n        const meanInputData = webglBackend.texData.get(meanInput.dataId);\n        meanInputData.values = meanInputValues;\n      } else {\n        meanInput = transposeImpl(x, permutedAxes, webglBackend);\n      }\n\n      intermediates.push(meanInput);\n      axes = backend_util.getInnerMostAxes(axes.length, xRank);\n    }\n\n    backend_util.assertAxesAreInnerMostDims('sum', axes, xRank);\n    const [meanOutShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(meanInput.shape, axes);\n\n    let outShape = meanOutShape;\n    if (keepDims) {\n      // rather than reshape at the end, set the target shape here.\n      outShape = backend_util.expandShapeToKeepDim(meanOutShape, origAxes);\n    }\n\n    const out = meanImpl(meanInput, reduceShape, outShape, webglBackend);\n    for (const i of intermediates) {\n      webglBackend.disposeIntermediateTensorInfo(i);\n    }\n\n    return out;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}