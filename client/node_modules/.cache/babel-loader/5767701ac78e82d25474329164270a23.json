{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'FFT':\n      {\n        return [tfOps.fft(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'IFFT':\n      {\n        return [tfOps.ifft(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'RFFT':\n      {\n        return [tfOps.rfft(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'IRFFT':\n      {\n        return [tfOps.irfft(getParamValue('x', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'spectral';","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA;AACA,OAAO,KAAKA,KAAZ,MAAuB,kDAAvB;AAMA,SAAQC,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAMC,SAAS,GAClB,CAACC,IAAD,EAAaC,SAAb,EAAyCC,OAAzC,KACe;AACT,UAAQF,IAAI,CAACG,EAAb;AACE,SAAK,KAAL;AAAY;AACV,eAAO,CAACN,KAAK,CAACO,GAAN,CACJN,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CADT,CAAD,CAAP;AAED;;AACD,SAAK,MAAL;AAAa;AACX,eAAO,CAACL,KAAK,CAACQ,IAAN,CACJP,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CADT,CAAD,CAAP;AAED;;AACD,SAAK,MAAL;AAAa;AACX,eAAO,CAACL,KAAK,CAACS,IAAN,CACJR,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CADT,CAAD,CAAP;AAED;;AACD,SAAK,OAAL;AAAc;AACZ,eAAO,CAACL,KAAK,CAACU,KAAN,CACJT,aAAa,CAAC,GAAD,EAAME,IAAN,EAAYC,SAAZ,EAAuBC,OAAvB,CADT,CAAD,CAAP;AAED;;AACD;AACE,YAAMM,SAAS,CAAC,aAAaR,IAAI,CAACG,EAAE,qBAArB,CAAf;AAlBJ;AAoBD,CAvBF;AAyBP,OAAO,MAAMM,QAAQ,GAAG,UAAjB","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","fft","ifft","rfft","irfft","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/spectral_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext):\n        Tensor[] => {\n          switch (node.op) {\n            case 'FFT': {\n              return [tfOps.fft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IFFT': {\n              return [tfOps.ifft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'RFFT': {\n              return [tfOps.rfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            case 'IRFFT': {\n              return [tfOps.irfft(\n                  getParamValue('x', node, tensorMap, context) as Tensor)];\n            }\n            default:\n              throw TypeError(`Node type ${node.op} is not implemented`);\n          }\n        };\n\nexport const CATEGORY = 'spectral';\n"]},"metadata":{},"sourceType":"module"}