{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length; // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n\n  const outputShape = [];\n  let product = 1;\n  let unknownIndex = -1;\n\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(backend_util.getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(unknownIndex, d));\n      }\n\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(backend_util.getSparseReshapeNegativeOutputDimErrorMessage(d, size));\n      }\n\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n\n    const missing = Math.trunc(denseSize / product);\n\n    if (product * missing !== denseSize) {\n      throw new Error(backend_util.getSparseReshapeInputOutputMultipleErrorMessage(inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n\n  const outputSize = util.sizeFromShape(outputShape);\n\n  if (outputSize !== denseSize) {\n    throw new Error(backend_util.getSparseReshapeInputOutputMismatchErrorMessage(inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides = [];\n\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides = [];\n\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n\n  return [newIndices, [nnz, outputRank], outputShape];\n}","map":{"version":3,"mappings":"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","names":["backend_util","util","sparseReshapeImpl","inputIndices","inputIndicesShape","inputDType","inputShape","targetShape","denseSize","sizeFromShape","nnz","outputRank","length","outputShape","product","unknownIndex","d","size","Error","getSparseReshapeMultipleNegativeOneOutputDimErrorMessage","push","getSparseReshapeNegativeOutputDimErrorMessage","getSparseReshapeEmptyTensorZeroOutputDimErrorMessage","missing","Math","trunc","getSparseReshapeInputOutputMultipleErrorMessage","outputSize","getSparseReshapeInputOutputMismatchErrorMessage","inputRank","inputStrides","outputStrides","newIndices","getArrayFromDType","i","id","j"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/SparseReshape_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseReshapeImpl(\n    inputIndices: TypedArray, inputIndicesShape: number[], inputDType: DataType,\n    inputShape: number[],\n    targetShape: number[]): [TypedArray, number[], number[]] {\n  const denseSize = util.sizeFromShape(inputShape);\n  const nnz = inputIndicesShape[0];\n  const outputRank = targetShape.length;\n\n  // Compute the output shape. Determine product of specified dimensions, and\n  // find the index of the unspecified one.\n  const outputShape: number[] = [];\n  let product = 1;\n  let unknownIndex = -1;\n  for (let d = 0; d < outputRank; ++d) {\n    const size = targetShape[d];\n    if (size === -1) {\n      if (unknownIndex !== -1) {\n        throw new Error(\n            backend_util\n                .getSparseReshapeMultipleNegativeOneOutputDimErrorMessage(\n                    unknownIndex, d));\n      }\n      unknownIndex = d;\n      outputShape.push(1);\n    } else {\n      if (size < 0) {\n        throw new Error(\n            backend_util.getSparseReshapeNegativeOutputDimErrorMessage(\n                d, size));\n      }\n      product *= size;\n      outputShape.push(size);\n    }\n  }\n  if (unknownIndex !== -1) {\n    if (product <= 0) {\n      throw new Error(\n          backend_util.getSparseReshapeEmptyTensorZeroOutputDimErrorMessage());\n    }\n    const missing = Math.trunc(denseSize / product);\n    if (product * missing !== denseSize) {\n      throw new Error(\n          backend_util.getSparseReshapeInputOutputMultipleErrorMessage(\n              inputShape, outputShape));\n    }\n\n    outputShape[unknownIndex] = missing;\n  }\n  const outputSize = util.sizeFromShape(outputShape);\n  if (outputSize !== denseSize) {\n    throw new Error(\n        backend_util.getSparseReshapeInputOutputMismatchErrorMessage(\n            inputShape, outputShape));\n  }\n\n  const inputRank = inputShape.length;\n  const inputStrides: number[] = [];\n  if (inputRank > 0) {\n    inputStrides[inputRank - 1] = 1;\n    for (let d = inputRank - 2; d >= 0; --d) {\n      inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n    }\n  }\n\n  const outputStrides: number[] = [];\n  if (outputRank > 0) {\n    outputStrides[outputRank - 1] = 1;\n    for (let d = outputRank - 2; d >= 0; --d) {\n      outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n    }\n  }\n\n  const newIndices =\n      util.getArrayFromDType(inputDType, nnz * outputRank) as TypedArray;\n  for (let i = 0; i < nnz; ++i) {\n    let id = 0;\n    for (let j = 0; j < inputRank; ++j) {\n      // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n      id += inputIndices[i * inputRank + j] * inputStrides[j];\n    }\n    for (let j = 0; j < outputRank; ++j) {\n      // newIndices is a 2d tensor with shape of [nnz, outputRank]\n      newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n      id %= outputStrides[j];\n    }\n  }\n  return [newIndices, [nnz, outputRank], outputShape];\n}\n"]},"metadata":{},"sourceType":"module"}