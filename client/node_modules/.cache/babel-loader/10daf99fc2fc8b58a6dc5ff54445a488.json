{"ast":null,"code":"var _jsxFileName = \"/home/nadimakhtar97/smart-attendance-system/client/src/Components/WebCam/WebCam.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport Webcam from \"react-webcam\";\nimport styles from \"../WebCam/WebCam.module.css\";\nimport * as tf from '@tensorflow-models/blazeface';\nimport axios from 'axios';\nimport { Button, Box, Image, Flex, Text } from '@chakra-ui/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WebCam() {\n  _s();\n\n  const [image, setImage] = useState('');\n  const videoConstraints = {\n    width: 720,\n    height: 360,\n    facingMode: \"user\"\n  };\n  const webcamRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  const blazeface = require('@tensorflow-models/blazeface');\n\n  const runFacedetection = async () => {\n    const model = await blazeface.load();\n    console.log(\"FaceDetection Model is Loaded..\");\n    setInterval(() => {\n      detect(model);\n    }, 100);\n  };\n\n  const returnTensors = false;\n\n  const detect = async model => {\n    if (typeof webcamRef.current !== \"undefined\" && webcamRef.current !== null && webcamRef.current.video.readyState === 4) {\n      // Get video properties\n      const video = webcamRef.current.video;\n      const videoWidth = webcamRef.current.video.videoWidth;\n      const videoHeight = webcamRef.current.video.videoHeight; //Set video height and width\n      // webcamRef.current.video.width = videoWidth;\n      // webcamRef.current.video.height = videoHeight;\n      //Set canvas height and width\n\n      canvasRef.current.width = videoWidth;\n      canvasRef.current.height = videoHeight; // Make detections\n\n      const prediction = await model.estimateFaces(video, returnTensors);\n      console.log(prediction);\n      const ctx = canvasRef.current.getContext(\"2d\");\n      draw(prediction, ctx);\n    }\n  };\n\n  const capture = useCallback(async () => {\n    try {\n      const imageSrc = webcamRef.current.getScreenshot();\n      setImage(imageSrc);\n      const response = await axios.post('http://localhost:5000/img', {\n        \"base64image\": imageSrc\n      });\n      console.log(response);\n    } catch (error) {\n      console.log(error);\n    }\n  }, [webcamRef]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    direction: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      className: styles.cam,\n      mirrored: true,\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      screenshotQuality: 1,\n      height: 360,\n      width: 720,\n      videoConstraints: videoConstraints\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      size: \"md\",\n      width: \"40%\",\n      m: \"20px\",\n      colorScheme: \"blue\",\n      onClick: () => {\n        capture();\n      },\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: \"Capture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 101\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WebCam, \"1uHxV1fXTrsU8yLFUPuHv7WOTqw=\");\n\n_c = WebCam;\nexport default WebCam;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebCam\");","map":{"version":3,"sources":["/home/nadimakhtar97/smart-attendance-system/client/src/Components/WebCam/WebCam.js"],"names":["React","useState","useRef","useCallback","Webcam","styles","tf","axios","Button","Box","Image","Flex","Text","WebCam","image","setImage","videoConstraints","width","height","facingMode","webcamRef","canvasRef","blazeface","require","runFacedetection","model","load","console","log","setInterval","detect","returnTensors","current","video","readyState","videoWidth","videoHeight","prediction","estimateFaces","ctx","getContext","draw","capture","imageSrc","getScreenshot","response","post","error","cam"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'\nimport Webcam from \"react-webcam\";\nimport styles from \"../WebCam/WebCam.module.css\";\nimport * as tf from '@tensorflow-models/blazeface'\nimport axios from 'axios'\nimport { Button, Box, Image,Flex, Text } from '@chakra-ui/react'\n\nfunction WebCam() {\n\n    const [image, setImage] = useState('')\n    const videoConstraints = {\n        width: 720,\n        height: 360,\n        facingMode: \"user\"\n    };\n\n    const webcamRef = useRef(null);\n    const canvasRef = useRef(null);\n    const blazeface = require('@tensorflow-models/blazeface');\n\n    const runFacedetection = async () => {\n\n        const model = await blazeface.load()\n        console.log(\"FaceDetection Model is Loaded..\") \n        setInterval(() => {\n          detect(model);\n        }, 100);\n     \n    }\n\n    const returnTensors = false;\n\n    const detect = async (model) => {\n        if(\n            typeof webcamRef.current !== \"undefined\" &&\n            webcamRef.current !== null &&\n            webcamRef.current.video.readyState === 4\n          ){\n            // Get video properties\n            const video = webcamRef.current.video;\n            const videoWidth = webcamRef.current.video.videoWidth;\n            const videoHeight = webcamRef.current.video.videoHeight;\n       \n            //Set video height and width\n            // webcamRef.current.video.width = videoWidth;\n            // webcamRef.current.video.height = videoHeight;\n       \n            //Set canvas height and width\n              canvasRef.current.width = videoWidth;\n              canvasRef.current.height = videoHeight;\n  \n            // Make detections\n  \n            const prediction = await model.estimateFaces(video, returnTensors);\n  \n            console.log(prediction)\n  \n            const ctx = canvasRef.current.getContext(\"2d\");\n            draw(prediction, ctx)\n          }\n  \n        }\n\n\n\n\n    const capture = useCallback(\n        async () => {\n            try {\n                const imageSrc = webcamRef.current.getScreenshot();\n                setImage(imageSrc);\n                const response = await axios.post('http://localhost:5000/img', { \"base64image\": imageSrc })\n                console.log(response);\n\n            }\n            catch (error) {\n                console.log(error)\n            }\n\n        },\n        [webcamRef]\n    );\n    return (\n        <Flex justifyContent='center' alignItems='center' alignContent='space-between' direction='column'>\n            <Webcam\n                className={styles.cam}\n                mirrored={true}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                screenshotQuality={1}\n                height={360}\n                width={720}\n                videoConstraints={videoConstraints}\n            ></Webcam>\n            <Button size='md' width='40%' m='20px' colorScheme='blue' onClick={() => { capture() }}><Text>Capture</Text></Button>\n            {/* {image ? <Box>\n                <Image src={image}/>\n            </Box> : null} */}\n        </Flex>\n\n    )\n}\n\nexport default WebCam"]},"metadata":{},"sourceType":"module"}