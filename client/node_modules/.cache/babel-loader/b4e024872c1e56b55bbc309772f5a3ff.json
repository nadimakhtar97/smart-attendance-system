{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { MaxPool2DBackpropProgram } from '../max_pool_backprop_gpu';\nimport { Pool2DProgram } from '../pool_gpu';\nimport { assertNotComplex } from '../webgl_util';\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input,\n    output\n  } = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram = new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions = backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,YAAR,EAAgDC,WAAhD,QAAmH,uBAAnH;AAGA,SAAQC,wBAAR,QAAuC,0BAAvC;AACA,SAAQC,aAAR,QAA4B,aAA5B;AACA,SAAQC,gBAAR,QAA+B,eAA/B;AAEA,OAAM,SAAUC,WAAV,CAAsBC,IAAtB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,MAAD;AAAKC,SAAL;AAAYC;AAAZ,MAAsBL,MAA5B;AACA,QAAMM,CAAC,GAAGF,KAAV;AACAP,kBAAgB,CAAC,CAACO,KAAD,EAAQC,MAAR,CAAD,EAAkB,aAAlB,CAAhB;AACA,QAAM;AAACE,cAAD;AAAaC,WAAb;AAAsBC,OAAtB;AAA2BC;AAA3B,MAA8CR,KAApD;AAEA,QAAMS,QAAQ,GAAGlB,YAAY,CAACmB,iBAAb,CACbN,CAAC,CAACO,KADW,EACgCN,UADhC,EAC4CC,OAD5C,EAEb;AAAE;AAFW,IAEMC,GAFN,EAEWC,eAFX,CAAjB;AAGA,QAAMI,YAAY,GAAG,IAArB;AACA,QAAMC,uBAAuB,GACzB,IAAInB,aAAJ,CAAkBe,QAAlB,EAA4B,KAA5B,EAAmCG,YAAnC,CADJ;AAEA,QAAME,gBAAgB,GAClBf,OAAO,CAACgB,eAAR,CAAwBF,uBAAxB,EAAiD,CAACT,CAAD,CAAjD,EAAsDA,CAAC,CAACY,KAAxD,CADJ;AAGA,QAAMC,sBAAsB,GAAG,IAAIxB,wBAAJ,CAA6BgB,QAA7B,CAA/B;AACA,QAAMS,MAAM,GAAGnB,OAAO,CAACgB,eAAR,CACXE,sBADW,EACa,CAAChB,EAAD,EAAKa,gBAAL,CADb,EACqCV,CAAC,CAACY,KADvC,CAAf;AAEAjB,SAAO,CAACoB,6BAAR,CAAsCL,gBAAtC;AACA,SAAOI,MAAP;AACD;AAED,OAAO,MAAME,iBAAiB,GAAiB;AAC7CC,YAAU,EAAE7B,WADiC;AAE7C8B,aAAW,EAAE,OAFgC;AAG7CC,YAAU,EAAE3B;AAHiC,CAAxC","names":["backend_util","MaxPoolGrad","MaxPool2DBackpropProgram","Pool2DProgram","assertNotComplex","maxPoolGrad","args","inputs","backend","attrs","dy","input","output","x","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","getPositions","maxPoolPositionsProgram","maxPoolPositions","runWebGLProgram","dtype","maxPoolBackPropProgram","result","disposeIntermediateTensorInfo","maxPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/MaxPoolGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MaxPool2DBackpropProgram} from '../max_pool_backprop_gpu';\nimport {Pool2DProgram} from '../pool_gpu';\nimport {assertNotComplex} from '../webgl_util';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendWebGL,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const getPositions = true;\n  const maxPoolPositionsProgram =\n      new Pool2DProgram(convInfo, 'max', getPositions);\n  const maxPoolPositions: TensorInfo =\n      backend.runWebGLProgram(maxPoolPositionsProgram, [x], x.dtype);\n\n  const maxPoolBackPropProgram = new MaxPool2DBackpropProgram(convInfo);\n  const result = backend.runWebGLProgram(\n      maxPoolBackPropProgram, [dy, maxPoolPositions], x.dtype);\n  backend.disposeIntermediateTensorInfo(maxPoolPositions);\n  return result;\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'webgl',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}