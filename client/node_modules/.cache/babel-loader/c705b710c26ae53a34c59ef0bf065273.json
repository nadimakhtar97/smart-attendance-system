{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport { getGlobal } from './global_util';\nimport * as log from './log';\nconst kernelRegistry = getGlobal('kernelRegistry', () => new Map());\nconst gradRegistry = getGlobal('gradRegistry', () => new Map());\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\n\nexport function getKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\n\nexport function getGradient(kernelName) {\n  return gradRegistry.get(kernelName);\n}\nexport function getKernelsForBackend(backendName) {\n  const it = kernelRegistry.entries();\n  const result = [];\n\n  while (true) {\n    const {\n      done,\n      value\n    } = it.next();\n\n    if (done) {\n      break;\n    }\n\n    const [key, config] = value;\n    const [backend] = key.split('_');\n\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n\n  return result;\n}\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\n\nexport function registerKernel(config) {\n  const {\n    kernelName,\n    backendName\n  } = config;\n  const key = makeKey(kernelName, backendName);\n\n  if (kernelRegistry.has(key)) {\n    log.warn(`The kernel '${kernelName}' for backend ` + `'${backendName}' is already registered`);\n  }\n\n  kernelRegistry.set(key, config);\n}\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\n\nexport function registerGradient(config) {\n  const {\n    kernelName\n  } = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n\n  gradRegistry.set(kernelName, config);\n}\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\n\nexport function unregisterKernel(kernelName, backendName) {\n  const key = makeKey(kernelName, backendName);\n\n  if (!kernelRegistry.has(key)) {\n    throw new Error(`The kernel '${kernelName}' for backend ` + `'${backendName}' is not registered`);\n  }\n\n  kernelRegistry.delete(key);\n}\n/** Removes the registered gradient from the global registry. */\n\nexport function unregisterGradient(kernelName) {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(`The gradient '${kernelName}' for backend is not registered`);\n  }\n\n  gradRegistry.delete(kernelName);\n}\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\n\nexport function copyRegisteredKernels(registeredBackendName, newBackendName) {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig = Object.assign({}, kernelConfig, {\n      backendName: newBackendName\n    });\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName, backendName) {\n  return `${backendName}_${kernelName}`;\n}","map":{"version":3,"mappings":"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","names":["env","getGlobal","log","kernelRegistry","Map","gradRegistry","getKernel","kernelName","backendName","key","makeKey","get","getGradient","getKernelsForBackend","it","entries","result","done","value","next","config","backend","split","push","registerKernel","has","warn","set","registerGradient","getBool","unregisterKernel","Error","delete","unregisterGradient","copyRegisteredKernels","registeredBackendName","newBackendName","kernels","forEach","kernelConfig","newKernelConfig","Object","assign"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/kernel_registry.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from './environment';\nimport {getGlobal} from './global_util';\nimport * as log from './log';\nimport {NamedGradientMap} from './tape';\nimport {Tensor} from './tensor';\nimport {DataType, RecursiveArray} from './types';\n\nconst kernelRegistry =\n    getGlobal('kernelRegistry', () => new Map<string, KernelConfig>());\nconst gradRegistry =\n    getGlobal('gradRegistry', () => new Map<string, GradConfig>());\n\nexport type DataId = object;\n\ntype AttributeValue =\n    number|number[]|boolean|boolean[]|string|string[]|NamedAttrMap;\n\n/** These are extra non-tensor/primitive params passed to kernel functions. */\nexport type Attribute = AttributeValue|RecursiveArray<AttributeValue>;\n\n/** Specifies the code to run when executing a kernel. */\nexport type KernelFunc = (params: {\n  inputs: NamedTensorInfoMap,\n  backend: {},\n  attrs?: NamedAttrMap,\n}) => TensorInfo|TensorInfo[];\n\n/** The function to run when computing a gradient during backprop. */\nexport type GradFunc =\n    (dy: Tensor|Tensor[], saved: Tensor[], attrs: NamedAttrMap) =>\n        NamedGradientMap;\n\n/** Function that gets called after the backend initializes. */\nexport type KernelSetupFunc = (backend: {}) => void;\n/** Function that gets called right before the backend is disposed. */\nexport type KernelDisposeFunc = KernelSetupFunc;\n\n/** Config object for registering a kernel in the global registry. */\nexport interface KernelConfig {\n  kernelName: string;\n  backendName: string;\n  kernelFunc: KernelFunc;\n  setupFunc?: KernelSetupFunc;\n  disposeFunc?: KernelDisposeFunc;\n}\n\n/** Config object for registering a gradient in the global registry. */\nexport interface GradConfig {\n  kernelName: string;\n  inputsToSave?: string[];\n  // When saveAllInputs is true, all inputs will be saved. Only use this flag\n  // if inputs is an array of Tensors.\n  saveAllInputs?: boolean;\n  outputsToSave?: boolean[];\n  gradFunc: GradFunc;\n}\n\n/** Holds metadata for a given tensor. */\nexport interface TensorInfo {\n  dataId: DataId;\n  shape: number[];\n  dtype: DataType;\n}\n\nexport interface NamedTensorInfoMap {\n  [name: string]: TensorInfo|undefined;\n}\n\nexport interface NamedAttrMap {\n  [name: string]: Attribute;\n}\n\n/**\n * Returns the kernel function (code) associated with the provided names.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n */\nexport function getKernel(\n    kernelName: string, backendName: string): KernelConfig {\n  const key = makeKey(kernelName, backendName);\n  return kernelRegistry.get(key);\n}\n\n/**\n * Returns the registered gradient info associated with the provided kernel.\n * @param kernelName The official TF kernel name.\n */\nexport function getGradient(kernelName: string): GradConfig {\n  return gradRegistry.get(kernelName);\n}\n\nexport function getKernelsForBackend(backendName: string): KernelConfig[] {\n  const it = kernelRegistry.entries();\n  const result: KernelConfig[] = [];\n\n  while (true) {\n    const {done, value} = it.next();\n    if (done) {\n      break;\n    }\n    const [key, config] = value;\n    const [backend, ] = key.split('_');\n    if (backend === backendName) {\n      result.push(config);\n    }\n  }\n  return result;\n}\n\n/**\n * Registers the function (forward pass) for the kernel in a global registry.\n *\n * @param config A config object with the following properties:\n * - `kernelName` The official name of the kernel.\n * - `backendName` The official name of the backend.\n * - `kernelFunc` The function to run during the forward pass of the kernel.\n * - `setupFunc` Optional. Gets called once, after the backend initializes.\n * - `disposeFunc` Optional. Gets called once, right before the backend is\n * disposed.\n */\nexport function registerKernel(config: KernelConfig) {\n  const {kernelName, backendName} = config;\n  const key = makeKey(kernelName, backendName);\n  if (kernelRegistry.has(key)) {\n    log.warn(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is already registered`);\n  }\n  kernelRegistry.set(key, config);\n}\n\n/**\n * Registers a gradient function for a given kernel in the global registry,\n * to be used during the back-propagation of that kernel.\n *\n * @param config An object with the following properties:\n * - `kernelName` The name of the kernel that the gradient function is for.\n * - `gradFunc` The function to run during back-propagation.\n */\nexport function registerGradient(config: GradConfig) {\n  const {kernelName} = config;\n\n  if (gradRegistry.has(kernelName)) {\n    // TODO (yassogba) after 3.0 assess whether we need to keep this gated\n    // to debug mode.\n    if (env().getBool('DEBUG')) {\n      log.warn(`Overriding the gradient for '${kernelName}'`);\n    }\n  }\n  gradRegistry.set(kernelName, config);\n}\n\n/**\n * Removes the kernel function from the registry.\n *\n * @param kernelName The official name of the kernel.\n * @param backendName The official name of the backend.\n *\n */\nexport function unregisterKernel(\n    kernelName: string, backendName: string): void {\n  const key = makeKey(kernelName, backendName);\n  if (!kernelRegistry.has(key)) {\n    throw new Error(\n        `The kernel '${kernelName}' for backend ` +\n        `'${backendName}' is not registered`);\n  }\n  kernelRegistry.delete(key);\n}\n\n/** Removes the registered gradient from the global registry. */\nexport function unregisterGradient(kernelName: string): void {\n  if (!gradRegistry.has(kernelName)) {\n    throw new Error(\n        `The gradient '${kernelName}' for backend is not registered`);\n  }\n  gradRegistry.delete(kernelName);\n}\n\n/**\n * Finds kernels that have already been registered to a backend and re-registers\n * them for a new backend. Useful for registering custom backends.\n * @param registeredBackendName Already registered backend.\n * @param newBackendName New backend.\n */\nexport function copyRegisteredKernels(\n    registeredBackendName: string, newBackendName: string): void {\n  const kernels = getKernelsForBackend(registeredBackendName);\n  kernels.forEach(kernelConfig => {\n    const newKernelConfig =\n        Object.assign({}, kernelConfig, {backendName: newBackendName});\n    registerKernel(newKernelConfig);\n  });\n}\n\nfunction makeKey(kernelName: string, backendName: string) {\n  return `${backendName}_${kernelName}`;\n}\n"]},"metadata":{},"sourceType":"module"}