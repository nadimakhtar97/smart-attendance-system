{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class DepthwiseConv2DProgram {\n  constructor(convInfo) {\n    let addBias = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let activation = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n    let hasPreluActivation = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n    let hasLeakyReluAlpha = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    this.variableNames = ['x', 'W'];\n    this.customUniforms = [{\n      name: 'pads',\n      type: 'ivec2'\n    }, {\n      name: 'strides',\n      type: 'ivec2'\n    }, {\n      name: 'dilations',\n      type: 'ivec2'\n    }, {\n      name: 'inDims',\n      type: 'ivec2'\n    }];\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n    let activationSnippet = '',\n        applyActivationSnippet = '';\n\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAsBA,gBAAtB,QAA6C,cAA7C;AAEA,OAAM,MAAOC,sBAAP,CAA6B;AAYjCC,cACIC,QADJ,EAG6B;AAAA,QAFUC,OAEV,uEAFoB,KAEpB;AAAA,QADzBC,UACyB,uEADJ,IACI;AAAA,QADEC,kBACF,uEADuB,KACvB;AAAA,QAAzBC,iBAAyB,uEAAL,KAAK;AAd7B,yBAAgB,CAAC,GAAD,EAAM,GAAN,CAAhB;AAIA,0BAAiB,CACf;AAACC,UAAI,EAAE,MAAP;AAAeC,UAAI,EAAE;AAArB,KADe,EAEf;AAACD,UAAI,EAAE,SAAP;AAAkBC,UAAI,EAAE;AAAxB,KAFe,EAGf;AAACD,UAAI,EAAE,WAAP;AAAoBC,UAAI,EAAE;AAA1B,KAHe,EAIf;AAACD,UAAI,EAAE,QAAP;AAAiBC,UAAI,EAAE;AAAvB,KAJe,CAAjB;AAWE,SAAKC,WAAL,GAAmBP,QAAQ,CAACQ,QAA5B;AACA,SAAKC,mBAAL,GAA2BZ,gBAAgB,CAAC,KAAKU,WAAL,CAAiBG,MAAlB,CAA3C;AAEA,UAAMC,YAAY,GAAGX,QAAQ,CAACW,YAA9B;AACA,UAAMC,WAAW,GAAGZ,QAAQ,CAACY,WAA7B;AACA,UAAMC,UAAU,GAAGb,QAAQ,CAACc,WAAT,GAAuBd,QAAQ,CAACe,UAAnD;AAEA,QAAIC,iBAAiB,GAAG,EAAxB;AAAA,QAA4BC,sBAAsB,GAAG,EAArD;;AACA,QAAIf,UAAJ,EAAgB;AACd,UAAIC,kBAAJ,EAAwB;AACtBa,yBAAiB,GAAG;;YAEhBd,UAAU;UAFd;AAID,OALD,MAKO,IAAIE,iBAAJ,EAAuB;AAC5BY,yBAAiB,GAAG;;YAEhBd,UAAU;UAFd;AAID,OALM,MAKA;AACLc,yBAAiB,GAAG;;cAEdd,UAAU;;SAFhB;AAKD;;AAEDe,4BAAsB,GAAG,8BAAzB;AACD;;AAED,UAAMC,cAAc,GAAGjB,OAAO,GAAG,iCAAH,GAAuC,EAArE;;AACA,QAAIA,OAAJ,EAAa;AACX,WAAKkB,aAAL,CAAmBC,IAAnB,CAAwB,MAAxB;AACD;;AAED,QAAIjB,kBAAJ,EAAwB;AACtB,WAAKgB,aAAL,CAAmBC,IAAnB,CAAwB,wBAAxB;AACD;;AACD,QAAIhB,iBAAJ,EAAuB;AACrB,WAAKe,aAAL,CAAmBC,IAAnB,CAAwB,gBAAxB;AACD;;AAED,SAAKC,QAAL,GAAgB;QACZL,iBAAiB;;;;;;;wBAODH,UAAU;4BACNA,UAAU;;;;;;;;;gCASNF,YAAY;;;;;;;kCAOVC,WAAW;;;;;;;;;;;;;;UAcnCM,cAAc;UACdD,sBAAsB;;;KAxC5B;AA4CD;;AAtGgC","names":["useShapeUniforms","DepthwiseConv2DProgram","constructor","convInfo","addBias","activation","hasPreluActivation","hasLeakyReluAlpha","name","type","outputShape","outShape","enableShapeUniforms","length","filterHeight","filterWidth","channelMul","outChannels","inChannels","activationSnippet","applyActivationSnippet","addBiasSnippet","variableNames","push","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/conv_gpu_depthwise.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class DepthwiseConv2DProgram implements GPGPUProgram {\n  variableNames = ['x', 'W'];\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'pads', type: 'ivec2' as const },\n    {name: 'strides', type: 'ivec2' as const },\n    {name: 'dilations', type: 'ivec2' as const },\n    {name: 'inDims', type: 'ivec2' as const },\n  ];\n\n  constructor(\n      convInfo: backend_util.Conv2DInfo, addBias = false,\n      activation: string = null, hasPreluActivation = false,\n      hasLeakyReluAlpha = false) {\n    this.outputShape = convInfo.outShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const channelMul = convInfo.outChannels / convInfo.inChannels;\n\n    let activationSnippet = '', applyActivationSnippet = '';\n    if (activation) {\n      if (hasPreluActivation) {\n        activationSnippet = `float activation(float a) {\n          float b = getPreluActivationWeightsAtOutCoords();\n          ${activation}\n        }`;\n      } else if (hasLeakyReluAlpha) {\n        activationSnippet = `float activation(float a) {\n          float b = getLeakyreluAlphaAtOutCoords();\n          ${activation}\n        }`;\n      } else {\n        activationSnippet = `\n          float activation(float x) {\n            ${activation}\n          }\n        `;\n      }\n\n      applyActivationSnippet = `result = activation(result);`;\n    }\n\n    const addBiasSnippet = addBias ? 'result += getBiasAtOutCoords();' : '';\n    if (addBias) {\n      this.variableNames.push('bias');\n    }\n\n    if (hasPreluActivation) {\n      this.variableNames.push('preluActivationWeights');\n    }\n    if (hasLeakyReluAlpha) {\n      this.variableNames.push('leakyreluAlpha');\n    }\n\n    this.userCode = `\n      ${activationSnippet}\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int batch = coords.x;\n        ivec2 xRCCorner = coords.yz * strides - pads;\n        int d2 = coords.w;\n        int d1 = d2 / ${channelMul};\n        int q = d2 - d1 * ${channelMul};\n\n        int xRCorner = xRCCorner.x;\n        int xCCorner = xRCCorner.y;\n\n        // Convolve x(?, ?, d1) with w(:, :, d1, q) to get y(yR, yC, d2).\n        // ? = to be determined. : = across all values in that axis.\n        float dotProd = 0.0;\n        // TO DO(dsmilkov): Flatten the two for loops and vec4 the operations.\n        for (int wR = 0; wR < ${filterHeight}; wR++) {\n          int xR = xRCorner + wR * dilations[0];\n\n          if (xR < 0 || xR >= inDims[0]) {\n            continue;\n          }\n\n          for (int wC = 0; wC < ${filterWidth}; wC++) {\n            int xC = xCCorner + wC * dilations[1];\n\n            if (xC < 0 || xC >= inDims[1]) {\n              continue;\n            }\n\n            float xVal = getX(batch, xR, xC, d1);\n            float wVal = getW(wR, wC, d1, q);\n            dotProd += xVal * wVal;\n          }\n        }\n\n        float result = dotProd;\n        ${addBiasSnippet}\n        ${applyActivationSnippet}\n        setOutput(result);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}