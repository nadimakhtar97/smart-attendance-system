{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\n\nfunction calcL2Norms(w, axis) {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\n\n\nexport class Constraint extends serialization.Serializable {\n  getConfig() {\n    return {};\n  }\n\n}\nexport class MaxNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultMaxValue = 2;\n    this.defaultAxis = 0;\n    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w) {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig() {\n    return {\n      maxValue: this.maxValue,\n      axis: this.axis\n    };\n  }\n\n}\n/** @nocollapse */\n\nMaxNorm.className = 'MaxNorm';\nserialization.registerClass(MaxNorm);\nexport class UnitNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultAxis = 0;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w) {\n    return tidy(() => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  getConfig() {\n    return {\n      axis: this.axis\n    };\n  }\n\n}\n/** @nocollapse */\n\nUnitNorm.className = 'UnitNorm';\nserialization.registerClass(UnitNorm);\nexport class NonNeg extends Constraint {\n  apply(w) {\n    return tfc.relu(w);\n  }\n\n}\n/** @nocollapse */\n\nNonNeg.className = 'NonNeg';\nserialization.registerClass(NonNeg);\nexport class MinMaxNorm extends Constraint {\n  constructor(args) {\n    super();\n    this.defaultMinValue = 0.0;\n    this.defaultMaxValue = 1.0;\n    this.defaultRate = 1.0;\n    this.defaultAxis = 0;\n    this.minValue = args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue = args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w) {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(tfc.mul(this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)), tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig() {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n\n}\n/** @nocollapse */\n\nMinMaxNorm.className = 'MinMaxNorm';\nserialization.registerClass(MinMaxNorm); // Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\n\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'maxNorm': 'MaxNorm',\n  'minMaxNorm': 'MinMaxNorm',\n  'nonNeg': 'NonNeg',\n  'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config) {\n  let customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ? CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    const config = {\n      className,\n      config: {}\n    };\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}","map":{"version":3,"mappings":"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","names":["tfc","serialization","tidy","epsilon","deserializeKerasObject","serializeKerasObject","calcL2Norms","w","axis","sqrt","sum","mul","Constraint","Serializable","getConfig","MaxNorm","constructor","args","maxValue","defaultMaxValue","defaultAxis","apply","norms","desired","clipByValue","div","add","registerClass","UnitNorm","NonNeg","relu","MinMaxNorm","minValue","defaultMinValue","rate","defaultRate","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeConstraint","constraint","deserializeConstraint","config","customObjects","SerializationMap","getMap","classNameMap","getConstraint","identifier","className"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/constraints.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: keras/contraints.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, tidy} from '@tensorflow/tfjs-core';\nimport {epsilon} from './backend/common';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w: Tensor, axis: number): Tensor {\n  return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport abstract class Constraint extends serialization.Serializable {\n  /* Porting note: was __call__, apply chosen to match other similar choices */\n  abstract apply(w: Tensor): Tensor;\n  getConfig(): serialization.ConfigDict {\n    return {};\n  }\n}\n\nexport interface MaxNormArgs {\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   *\n   *  For instance, in a `Dense` layer the weight matrix\n   *  has shape `[inputDim, outputDim]`,\n   *  set `axis` to `0` to constrain each weight vector\n   *  of length `[inputDim,]`.\n   *  In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   *  the weight tensor has shape\n   *  `[rows, cols, inputDepth, outputDepth]`,\n   *  set `axis` to `[0, 1, 2]`\n   *  to constrain the weights of each filter tensor of size\n   *  `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class MaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MaxNorm';\n  private maxValue: number;\n  private axis: number;\n  private readonly defaultMaxValue = 2;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MaxNormArgs) {\n    super();\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.clipByValue(norms, 0, this.maxValue);\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {maxValue: this.maxValue, axis: this.axis};\n  }\n}\nserialization.registerClass(MaxNorm);\n\nexport interface UnitNormArgs {\n  /**\n   * Axis along which to calculate norms.\n   *\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * [rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n}\n\nexport class UnitNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'UnitNorm';\n  private axis: number;\n  private readonly defaultAxis = 0;\n  constructor(args: UnitNormArgs) {\n    super();\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(\n        () => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {axis: this.axis};\n  }\n}\nserialization.registerClass(UnitNorm);\n\nexport class NonNeg extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'NonNeg';\n\n  apply(w: Tensor): Tensor {\n    return tfc.relu(w);\n  }\n}\nserialization.registerClass(NonNeg);\n\nexport interface MinMaxNormArgs {\n  /**\n   * Minimum norm for incoming weights\n   */\n  minValue?: number;\n  /**\n   * Maximum norm for incoming weights\n   */\n  maxValue?: number;\n  /**\n   * Axis along which to calculate norms.\n   * For instance, in a `Dense` layer the weight matrix\n   * has shape `[inputDim, outputDim]`,\n   * set `axis` to `0` to constrain each weight vector\n   * of length `[inputDim,]`.\n   * In a `Conv2D` layer with `dataFormat=\"channels_last\"`,\n   * the weight tensor has shape\n   * `[rows, cols, inputDepth, outputDepth]`,\n   * set `axis` to `[0, 1, 2]`\n   * to constrain the weights of each filter tensor of size\n   * `[rows, cols, inputDepth]`.\n   */\n  axis?: number;\n  /**\n   * Rate for enforcing the constraint: weights will be rescaled to yield:\n   * `(1 - rate) * norm + rate * norm.clip(minValue, maxValue)`.\n   * Effectively, this means that rate=1.0 stands for strict\n   * enforcement of the constraint, while rate<1.0 means that\n   * weights will be rescaled at each step to slowly move\n   * towards a value inside the desired interval.\n   */\n  rate?: number;\n}\n\nexport class MinMaxNorm extends Constraint {\n  /** @nocollapse */\n  static readonly className = 'MinMaxNorm';\n  private minValue: number;\n  private maxValue: number;\n  private rate: number;\n  private axis: number;\n  private readonly defaultMinValue = 0.0;\n  private readonly defaultMaxValue = 1.0;\n  private readonly defaultRate = 1.0;\n  private readonly defaultAxis = 0;\n\n  constructor(args: MinMaxNormArgs) {\n    super();\n    this.minValue =\n        args.minValue != null ? args.minValue : this.defaultMinValue;\n    this.maxValue =\n        args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n    this.rate = args.rate != null ? args.rate : this.defaultRate;\n    this.axis = args.axis != null ? args.axis : this.defaultAxis;\n  }\n\n  apply(w: Tensor): Tensor {\n    return tidy(() => {\n      const norms = calcL2Norms(w, this.axis);\n      const desired = tfc.add(\n          tfc.mul(\n              this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)),\n          tfc.mul(1.0 - this.rate, norms));\n      return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {\n      minValue: this.minValue,\n      maxValue: this.maxValue,\n      rate: this.rate,\n      axis: this.axis\n    };\n  }\n}\nserialization.registerClass(MinMaxNorm);\n\n/** @docinline */\nexport type ConstraintIdentifier =\n    'maxNorm'|'minMaxNorm'|'nonNeg'|'unitNorm'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in ConstraintIdentifier]: string} = {\n      'maxNorm': 'MaxNorm',\n      'minMaxNorm': 'MinMaxNorm',\n      'nonNeg': 'NonNeg',\n      'unitNorm': 'UnitNorm'\n    };\n\nexport function serializeConstraint(constraint: Constraint):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeConstraint(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Constraint {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'constraint');\n}\n\nexport function getConstraint(identifier: ConstraintIdentifier|\n                              serialization.ConfigDict|Constraint): Constraint {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeConstraint(config);\n  } else if (identifier instanceof Constraint) {\n    return identifier;\n  } else {\n    return deserializeConstraint(identifier);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}