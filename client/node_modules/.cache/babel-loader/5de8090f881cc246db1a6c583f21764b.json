{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\nexport function leakyRelu(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    alpha\n  } = attrs;\n  const $alpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(alpha, 'float32'));\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ? new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) : new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n  backend.disposeIntermediateTensorInfo($alpha);\n  return result;\n}\nexport const leakyReluConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,EAAuCC,SAAvC,EAA+FC,IAA/F,QAA0G,uBAA1G;AAEA,SAAQC,eAAR,QAA8B,iBAA9B;AACA,SAAQC,qBAAR,QAAoC,wBAApC;AAEA,OAAO,MAAMC,SAAS,GAAG,8BAAlB;AACP,OAAO,MAAMC,gBAAgB,GAAG;;;CAAzB;AAKP,OAAM,SAAUC,SAAV,CAAoBC,IAApB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI;AAAD,MAAUF,KAAhB;AAEA,QAAMG,MAAM,GAAGJ,OAAO,CAACK,cAAR,CACX,EADW,EACP,SADO,EAEXb,IAAI,CAACc,iBAAL,CAAuBH,KAAvB,EAAiD,SAAjD,CAFW,CAAf;AAIA,QAAMI,OAAO,GAAGjB,GAAG,GAAGkB,OAAN,CAAc,8BAAd,IACZ,IAAId,qBAAJ,CAA0BE,gBAA1B,EAA4CM,CAAC,CAACO,KAA9C,EAAqDL,MAAM,CAACK,KAA5D,CADY,GAEZ,IAAIhB,eAAJ,CAAoBE,SAApB,EAA+BO,CAAC,CAACO,KAAjC,EAAwCL,MAAM,CAACK,KAA/C,CAFJ;AAGA,QAAMC,MAAM,GAAGV,OAAO,CAACW,eAAR,CAAwBJ,OAAxB,EAAiC,CAACL,CAAD,EAAIE,MAAJ,CAAjC,EAA8C,SAA9C,CAAf;AAEAJ,SAAO,CAACY,6BAAR,CAAsCR,MAAtC;AAEA,SAAOM,MAAP;AACD;AAED,OAAO,MAAMG,eAAe,GAAiB;AAC3CC,YAAU,EAAEvB,SAD+B;AAE3CwB,aAAW,EAAE,OAF8B;AAG3CC,YAAU,EAAEnB;AAH+B,CAAtC","names":["env","LeakyRelu","util","BinaryOpProgram","BinaryOpPackedProgram","LEAKYRELU","LEAKYRELU_PACKED","leakyRelu","args","inputs","backend","attrs","x","alpha","$alpha","makeTensorInfo","createScalarValue","program","getBool","shape","result","runWebGLProgram","disposeIntermediateTensorInfo","leakyReluConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/LeakyRelu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, LeakyRelu, LeakyReluAttrs, LeakyReluInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\n\nexport const LEAKYRELU = `return (a < 0.) ? b * a : a;`;\nexport const LEAKYRELU_PACKED = `\n  vec4 aLessThanZero = vec4(lessThan(a, vec4(0.)));\n  return (aLessThanZero * (b * a)) + ((vec4(1.0) - aLessThanZero) * a);\n`;\n\nexport function leakyRelu(args: {\n  inputs: LeakyReluInputs,\n  backend: MathBackendWebGL,\n  attrs: LeakyReluAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {alpha} = attrs;\n\n  const $alpha = backend.makeTensorInfo(\n      [], 'float32',\n      util.createScalarValue(alpha as {} as 'float32', 'float32'));\n\n  const program = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') ?\n      new BinaryOpPackedProgram(LEAKYRELU_PACKED, x.shape, $alpha.shape) :\n      new BinaryOpProgram(LEAKYRELU, x.shape, $alpha.shape);\n  const result = backend.runWebGLProgram(program, [x, $alpha], 'float32');\n\n  backend.disposeIntermediateTensorInfo($alpha);\n\n  return result;\n}\n\nexport const leakyReluConfig: KernelConfig = {\n  kernelName: LeakyRelu,\n  backendName: 'webgl',\n  kernelFunc: leakyRelu as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}