{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1; // Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\n\nconst MODEL_STORE_NAME = 'models_store'; // 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\n\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\n\nexport async function deleteDatabase() {\n  const idbFactory = getIndexedDBFactory();\n  return new Promise((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n\n    deleteRequest.onsuccess = () => resolve();\n\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory() {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error('Failed to obtain IndexedDB factory because the current environment' + 'is not a web browser.');\n  } // tslint:disable-next-line:no-any\n\n\n  const theWindow = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB || theWindow.webkitIndexedDB || theWindow.msIndexedDB || theWindow.shimIndexedDB;\n\n  if (factory == null) {\n    throw new Error('The current browser does not appear to support IndexedDB.');\n  }\n\n  return factory;\n}\n\nfunction setUpDatabase(openRequest) {\n  const db = openRequest.result;\n  db.createObjectStore(MODEL_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n  db.createObjectStore(INFO_STORE_NAME, {\n    keyPath: 'modelPath'\n  });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\n\n\nexport class BrowserIndexedDB {\n  constructor(modelPath) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts) {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts);\n  }\n\n  async load() {\n    return this.databaseAction(this.modelPath);\n  }\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n\n\n  databaseAction(modelPath, modelArtifacts) {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(`Cannot find model with path '${this.modelPath}' ` + `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts); // First, put ModelArtifactsInfo into info store.\n\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest = infoStore.put({\n            modelPath: this.modelPath,\n            modelArtifactsInfo\n          });\n          let modelTx;\n\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n\n            putModelRequest.onsuccess = () => resolve({\n              modelArtifactsInfo\n            });\n\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport const indexedDBRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\n\nexport function browserIndexedDB(modelPath) {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ? key.slice(BrowserIndexedDB.URL_SCHEME.length) : key;\n}\n\nexport class BrowserIndexedDBManager {\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels() {\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n        const store = tx.objectStore(INFO_STORE_NAME); // tslint:disable:max-line-length\n        // Need to cast `store` as `any` here because TypeScript's DOM\n        // library does not have the `getAll()` method even though the\n        // method is supported in the latest version of most mainstream\n        // browsers:\n        // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n        // tslint:enable:max-line-length\n        // tslint:disable-next-line:no-any\n\n        const getAllInfoRequest = store.getAll();\n\n        getAllInfoRequest.onsuccess = () => {\n          const out = {};\n\n          for (const item of getAllInfoRequest.result) {\n            out[item.modelPath] = item.modelArtifactsInfo;\n          }\n\n          resolve(out);\n        };\n\n        getAllInfoRequest.onerror = error => {\n          db.close();\n          return reject(getAllInfoRequest.error);\n        };\n\n        tx.oncomplete = () => db.close();\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    return new Promise((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n        const getInfoRequest = infoStore.get(path);\n        let modelTx;\n\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(`Cannot find model with path '${path}' ` + `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n\n              deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n\n              deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n            }; // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n\n\n            deleteInfoRequest.onsuccess = deleteModelData;\n\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n\n}","map":{"version":3,"mappings":"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","names":["env","getModelArtifactsInfoForJSON","IORouterRegistry","DATABASE_NAME","DATABASE_VERSION","MODEL_STORE_NAME","INFO_STORE_NAME","deleteDatabase","idbFactory","getIndexedDBFactory","Promise","resolve","reject","deleteRequest","onsuccess","onerror","error","getBool","Error","theWindow","window","self","factory","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","setUpDatabase","openRequest","db","result","createObjectStore","keyPath","BrowserIndexedDB","constructor","modelPath","save","modelArtifacts","modelTopology","ArrayBuffer","databaseAction","load","open","onupgradeneeded","modelTx","transaction","modelStore","objectStore","getRequest","get","close","oncomplete","modelArtifactsInfo","infoTx","infoStore","putInfoRequest","put","putModelRequest","deleteInfoRequest","delete","indexedDBRouter","url","Array","isArray","startsWith","URL_SCHEME","browserIndexedDB","slice","length","registerSaveRouter","registerLoadRouter","maybeStripScheme","key","BrowserIndexedDBManager","listModels","tx","store","getAllInfoRequest","getAll","out","item","removeModel","path","getInfoRequest","deleteModelData","deleteModelRequest"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/io/indexed_db.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\n\nimport {env} from '../environment';\n\nimport {getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelStoreManager, SaveResult} from './types';\n\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase(): Promise<void> {\n  const idbFactory = getIndexedDBFactory();\n\n  return new Promise<void>((resolve, reject) => {\n    const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n    deleteRequest.onsuccess = () => resolve();\n    deleteRequest.onerror = error => reject(error);\n  });\n}\n\nfunction getIndexedDBFactory(): IDBFactory {\n  if (!env().getBool('IS_BROWSER')) {\n    // TODO(cais): Add more info about what IOHandler subtypes are available.\n    //   Maybe point to a doc page on the web and/or automatically determine\n    //   the available IOHandlers and print them in the error message.\n    throw new Error(\n        'Failed to obtain IndexedDB factory because the current environment' +\n        'is not a web browser.');\n  }\n  // tslint:disable-next-line:no-any\n  const theWindow: any = typeof window === 'undefined' ? self : window;\n  const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n      theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n      theWindow.shimIndexedDB;\n  if (factory == null) {\n    throw new Error(\n        'The current browser does not appear to support IndexedDB.');\n  }\n  return factory;\n}\n\nfunction setUpDatabase(openRequest: IDBRequest) {\n  const db = openRequest.result as IDBDatabase;\n  db.createObjectStore(MODEL_STORE_NAME, {keyPath: 'modelPath'});\n  db.createObjectStore(INFO_STORE_NAME, {keyPath: 'modelPath'});\n}\n\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nexport class BrowserIndexedDB implements IOHandler {\n  protected readonly indexedDB: IDBFactory;\n  protected readonly modelPath: string;\n\n  static readonly URL_SCHEME = 'indexeddb://';\n\n  constructor(modelPath: string) {\n    this.indexedDB = getIndexedDBFactory();\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For IndexedDB, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    // TODO(cais): Support saving GraphDef models.\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    return this.databaseAction(this.modelPath, modelArtifacts) as\n        Promise<SaveResult>;\n  }\n\n  async load(): Promise<ModelArtifacts> {\n    return this.databaseAction(this.modelPath) as Promise<ModelArtifacts>;\n  }\n\n  /**\n   * Perform database action to put model artifacts into or read model artifacts\n   * from IndexedDB object store.\n   *\n   * Whether the action is put or get depends on whether `modelArtifacts` is\n   * specified. If it is specified, the action will be put; otherwise the action\n   * will be get.\n   *\n   * @param modelPath A unique string path for the model.\n   * @param modelArtifacts If specified, it will be the model artifacts to be\n   *   stored in IndexedDB.\n   * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n   *   of `ModelArtifacts`, if the action is get.\n   */\n  private databaseAction(modelPath: string, modelArtifacts?: ModelArtifacts):\n      Promise<ModelArtifacts|SaveResult> {\n    return new Promise<ModelArtifacts|SaveResult>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n\n        if (modelArtifacts == null) {\n          // Read model out from object store.\n          const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n          const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n          const getRequest = modelStore.get(this.modelPath);\n          getRequest.onsuccess = () => {\n            if (getRequest.result == null) {\n              db.close();\n              return reject(new Error(\n                  `Cannot find model with path '${this.modelPath}' ` +\n                  `in IndexedDB.`));\n            } else {\n              resolve(getRequest.result.modelArtifacts);\n            }\n          };\n          getRequest.onerror = error => {\n            db.close();\n            return reject(getRequest.error);\n          };\n          modelTx.oncomplete = () => db.close();\n        } else {\n          // Put model into object store.\n          const modelArtifactsInfo: ModelArtifactsInfo =\n              getModelArtifactsInfoForJSON(modelArtifacts);\n          // First, put ModelArtifactsInfo into info store.\n          const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n          let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n          const putInfoRequest =\n              infoStore.put({modelPath: this.modelPath, modelArtifactsInfo});\n          let modelTx: IDBTransaction;\n          putInfoRequest.onsuccess = () => {\n            // Second, put model data into model store.\n            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n            const putModelRequest = modelStore.put({\n              modelPath: this.modelPath,\n              modelArtifacts,\n              modelArtifactsInfo\n            });\n            putModelRequest.onsuccess = () => resolve({modelArtifactsInfo});\n            putModelRequest.onerror = error => {\n              // If the put-model request fails, roll back the info entry as\n              // well.\n              infoStore = infoTx.objectStore(INFO_STORE_NAME);\n              const deleteInfoRequest = infoStore.delete(this.modelPath);\n              deleteInfoRequest.onsuccess = () => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n              deleteInfoRequest.onerror = error => {\n                db.close();\n                return reject(putModelRequest.error);\n              };\n            };\n          };\n          putInfoRequest.onerror = error => {\n            db.close();\n            return reject(putInfoRequest.error);\n          };\n          infoTx.oncomplete = () => {\n            if (modelTx == null) {\n              db.close();\n            } else {\n              modelTx.oncomplete = () => db.close();\n            }\n          };\n        }\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n\nexport const indexedDBRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n      return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (sublcass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath: string): IOHandler {\n  return new BrowserIndexedDB(modelPath);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n      key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n      key;\n}\n\nexport class BrowserIndexedDBManager implements ModelStoreManager {\n  private indexedDB: IDBFactory;\n\n  constructor() {\n    this.indexedDB = getIndexedDBFactory();\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    return new Promise<{[path: string]: ModelArtifactsInfo}>(\n        (resolve, reject) => {\n          const openRequest =\n              this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n          openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n          openRequest.onsuccess = () => {\n            const db = openRequest.result;\n            const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n            const store = tx.objectStore(INFO_STORE_NAME);\n            // tslint:disable:max-line-length\n            // Need to cast `store` as `any` here because TypeScript's DOM\n            // library does not have the `getAll()` method even though the\n            // method is supported in the latest version of most mainstream\n            // browsers:\n            // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n            // tslint:enable:max-line-length\n            // tslint:disable-next-line:no-any\n            const getAllInfoRequest = (store as any).getAll() as IDBRequest;\n            getAllInfoRequest.onsuccess = () => {\n              const out: {[path: string]: ModelArtifactsInfo} = {};\n              for (const item of getAllInfoRequest.result) {\n                out[item.modelPath] = item.modelArtifactsInfo;\n              }\n              resolve(out);\n            };\n            getAllInfoRequest.onerror = error => {\n              db.close();\n              return reject(getAllInfoRequest.error);\n            };\n            tx.oncomplete = () => db.close();\n          };\n          openRequest.onerror = error => reject(openRequest.error);\n        });\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    return new Promise<ModelArtifactsInfo>((resolve, reject) => {\n      const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n      openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n        const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n\n        const getInfoRequest = infoStore.get(path);\n        let modelTx: IDBTransaction;\n        getInfoRequest.onsuccess = () => {\n          if (getInfoRequest.result == null) {\n            db.close();\n            return reject(new Error(\n                `Cannot find model with path '${path}' ` +\n                `in IndexedDB.`));\n          } else {\n            // First, delete the entry in the info store.\n            const deleteInfoRequest = infoStore.delete(path);\n            const deleteModelData = () => {\n              // Second, delete the entry in the model store.\n              modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n              const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n              const deleteModelRequest = modelStore.delete(path);\n              deleteModelRequest.onsuccess = () =>\n                  resolve(getInfoRequest.result.modelArtifactsInfo);\n              deleteModelRequest.onerror = error =>\n                  reject(getInfoRequest.error);\n            };\n            // Proceed with deleting model data regardless of whether deletion\n            // of info data succeeds or not.\n            deleteInfoRequest.onsuccess = deleteModelData;\n            deleteInfoRequest.onerror = error => {\n              deleteModelData();\n              db.close();\n              return reject(getInfoRequest.error);\n            };\n          }\n        };\n        getInfoRequest.onerror = error => {\n          db.close();\n          return reject(getInfoRequest.error);\n        };\n\n        infoTx.oncomplete = () => {\n          if (modelTx == null) {\n            db.close();\n          } else {\n            modelTx.oncomplete = () => db.close();\n          }\n        };\n      };\n      openRequest.onerror = error => reject(openRequest.error);\n    });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}