{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { zeros } from '../utils/zeros_impl';\nimport { cast } from './Cast';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function sum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  assertNotComplex(x, 'sum');\n  let $x;\n\n  if (x.dtype === 'bool') {\n    $x = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'int32'\n      }\n    });\n  } else {\n    $x = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n  let reductionAxes = axes;\n  let permutedX = $x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x: $x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values;\n  const aVals = backend.data.get(permutedX.dataId).values;\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\nexport const sumConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum\n};","map":{"version":3,"mappings":"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","names":["backend_util","Sum","util","assertNotComplex","zeros","cast","identity","reshape","transpose","sum","args","inputs","backend","attrs","x","axis","keepDims","$x","dtype","xRank","shape","length","axes","parseAxisParam","permutation","getAxesPermutation","reductionAxes","permutedX","perm","getInnerMostAxes","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","resultDtype","upcastType","result","reduceSize","sizeFromShape","vals","data","get","dataId","values","aVals","i","offset","j","newShape","expandShapeToKeepDim","oldResult","disposeIntermediateTensorInfo","sumConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Sum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Sum, SumAttrs, SumInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {zeros} from '../utils/zeros_impl';\nimport {cast} from './Cast';\nimport {identity} from './Identity';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function sum(\n    args: {inputs: SumInputs, backend: MathBackendCPU, attrs: SumAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'sum');\n\n  let $x;\n  if (x.dtype === 'bool') {\n    $x = cast({inputs: {x}, backend, attrs: {dtype: 'int32'}});\n  } else {\n    $x = identity({inputs: {x}, backend});\n  }\n\n  const xRank = $x.shape.length;\n  const axes = util.parseAxisParam(axis, $x.shape);\n  const permutation = backend_util.getAxesPermutation(axes, xRank);\n\n  let reductionAxes = axes;\n  let permutedX = $x;\n  if (permutation != null) {\n    permutedX =\n        transpose({inputs: {x: $x}, backend, attrs: {perm: permutation}});\n    reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims(\n      'sum', reductionAxes, permutedX.shape.length);\n\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n  const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n  let result = zeros(backend, outShape, resultDtype);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = backend.data.get(result.dataId).values as TypedArray;\n\n  const aVals = backend.data.get(permutedX.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let sum = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      sum += aVals[offset + j];\n    }\n    vals[i] = sum;\n  }\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n    const oldResult = result;\n    result = reshape({inputs: {x: result}, backend, attrs: {shape: newShape}});\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  backend.disposeIntermediateTensorInfo($x);\n\n  if (permutation != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return result;\n}\n\nexport const sumConfig: KernelConfig = {\n  kernelName: Sum,\n  backendName: 'cpu',\n  kernelFunc: sum as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}