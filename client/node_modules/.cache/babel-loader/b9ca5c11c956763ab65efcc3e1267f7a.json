{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class SelectProgram {\n  constructor(cRank, shape, rank) {\n    this.variableNames = ['c', 'a', 'b'];\n    this.outputShape = shape;\n    let cCoords;\n    let abCoords;\n\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAOC,aAAP,CAAoB;AAKxBC,cAAYC,KAAZ,EAA2BC,KAA3B,EAA4CC,IAA5C,EAAwD;AAJxD,yBAAgB,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAhB;AAKE,SAAKC,WAAL,GAAmBF,KAAnB;AAEA,QAAIG,OAAJ;AACA,QAAIC,QAAJ;;AACA,QAAIH,IAAI,GAAG,CAAX,EAAc;AACZ,YAAMI,KAAK,CAAC,kBAAkBJ,IAAI,uBAAvB,CAAX;AACD;;AAED,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACdG,cAAQ,GAAG,OAAX;AACAD,aAAO,GAAG,OAAV;AACD,KAHD,MAGO;AACL,YAAMG,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,CAAtB;AACA,YAAMC,UAAU,GAAG,EAAnB;AACA,YAAMC,WAAW,GAAG,EAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACU,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,mBAAW,CAACG,IAAZ,CAAiB,GAAGL,aAAa,CAACG,CAAD,CAAG,EAApC;;AACA,YAAIA,CAAC,GAAGV,KAAR,EAAe;AACbQ,oBAAU,CAACI,IAAX,CAAgB,GAAGL,aAAa,CAACG,CAAD,CAAG,EAAnC;AACD;AACF;;AACDN,aAAO,GAAGI,UAAU,CAACK,IAAX,EAAV;AACAR,cAAQ,GAAGI,WAAW,CAACI,IAAZ,EAAX;AACD;;AAED,UAAMC,KAAK,GAAGjB,iBAAiB,CAACK,IAAD,CAA/B;AAEA,SAAKa,QAAL,GAAgB;;UAEVD,KAAK;4BACaV,OAAO;;2BAERC,QAAQ;;2BAERA,QAAQ;;;KAP/B;AAWD;;AA5CuB","names":["getCoordsDataType","SelectProgram","constructor","cRank","shape","rank","outputShape","cCoords","abCoords","Error","currentCoords","cCoordVars","abCoordVars","i","length","push","join","dtype","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/select_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class SelectProgram implements GPGPUProgram {\n  variableNames = ['c', 'a', 'b'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(cRank: number, shape: number[], rank: number) {\n    this.outputShape = shape;\n\n    let cCoords;\n    let abCoords;\n    if (rank > 4) {\n      throw Error(`Where for rank ${rank} is not yet supported`);\n    }\n\n    if (rank === 1) {\n      abCoords = `resRC`;\n      cCoords = `resRC`;\n    } else {\n      const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      const cCoordVars = [];\n      const abCoordVars = [];\n      for (let i = 0; i < shape.length; i++) {\n        abCoordVars.push(`${currentCoords[i]}`);\n        if (i < cRank) {\n          cCoordVars.push(`${currentCoords[i]}`);\n        }\n      }\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    const dtype = getCoordsDataType(rank);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        float cVal = getC(${cCoords});\n        if (cVal >= 1.0) {\n          setOutput(getA(${abCoords}));\n        } else {\n          setOutput(getB(${abCoords}));\n        }\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}