{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { assert } from '../util';\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\n\nexport function monitorPromisesProgress(promises, onProgress, startFraction, endFraction) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = promise => {\n    promise.then(value => {\n      const fraction = startFraction + ++resolvedPromise / promises.length * (endFraction - startFraction); // pass fraction as parameter to callback function.\n\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises) {\n    assert(promises != null && Array.isArray(promises) && promises.length > 0, () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction, endFraction) {\n    assert(startFraction >= 0 && startFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got startFraction ${startFraction}`);\n    assert(endFraction >= 0 && endFraction <= 1, () => `Progress fraction must be in range [0, 1], but ` + `got endFraction ${endFraction}`);\n    assert(endFraction >= startFraction, () => `startFraction must be no more than endFraction, but ` + `got startFraction ${startFraction} and endFraction ` + `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,SAArB;AAIA;;;;;;;;;AAQA,OAAM,SAAUC,uBAAV,CACFC,QADE,EACiCC,UADjC,EAEFC,aAFE,EAEsBC,WAFtB,EAE0C;AAC9CC,eAAa,CAACJ,QAAD,CAAb;AACAE,eAAa,GAAGA,aAAa,IAAI,IAAjB,GAAwB,CAAxB,GAA4BA,aAA5C;AACAC,aAAW,GAAGA,WAAW,IAAI,IAAf,GAAsB,CAAtB,GAA0BA,WAAxC;AACAE,eAAa,CAACH,aAAD,EAAgBC,WAAhB,CAAb;AACA,MAAIG,eAAe,GAAG,CAAtB;;AAEA,QAAMC,eAAe,GAAIC,OAAD,IAAyB;AAC/CA,WAAO,CAACC,IAAR,CAAaC,KAAK,IAAG;AACnB,YAAMC,QAAQ,GAAGT,aAAa,GAC1B,EAAEI,eAAF,GAAoBN,QAAQ,CAACY,MAA7B,IAAuCT,WAAW,GAAGD,aAArD,CADJ,CADmB,CAGnB;;AACAD,gBAAU,CAACU,QAAD,CAAV;AACA,aAAOD,KAAP;AACD,KAND;AAOA,WAAOF,OAAP;AACD,GATD;;AAWA,WAASJ,aAAT,CAAuBJ,QAAvB,EAAwD;AACtDF,UAAM,CACFE,QAAQ,IAAI,IAAZ,IAAoBa,KAAK,CAACC,OAAN,CAAcd,QAAd,CAApB,IAA+CA,QAAQ,CAACY,MAAT,GAAkB,CAD/D,EAEF,MAAM,qCAFJ,CAAN;AAGD;;AAED,WAASP,aAAT,CAAuBH,aAAvB,EAA8CC,WAA9C,EAAiE;AAC/DL,UAAM,CACFI,aAAa,IAAI,CAAjB,IAAsBA,aAAa,IAAI,CADrC,EAEF,MAAM,oDACF,qBAAqBA,aAAa,EAHpC,CAAN;AAIAJ,UAAM,CACFK,WAAW,IAAI,CAAf,IAAoBA,WAAW,IAAI,CADjC,EAEF,MAAM,oDACF,mBAAmBA,WAAW,EAHhC,CAAN;AAIAL,UAAM,CACFK,WAAW,IAAID,aADb,EAEF,MAAM,yDACF,qBAAqBA,aAAa,mBADhC,GAEF,GAAGC,WAAW,EAJhB,CAAN;AAKD;;AAED,SAAOY,OAAO,CAACC,GAAR,CAAYhB,QAAQ,CAACiB,GAAT,CAAaV,eAAb,CAAZ,CAAP;AACD","names":["assert","monitorPromisesProgress","promises","onProgress","startFraction","endFraction","checkPromises","checkFraction","resolvedPromise","registerMonitor","promise","then","value","fraction","length","Array","isArray","Promise","all","map"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/io/progress.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {assert} from '../util';\n\nimport {OnProgressCallback} from './types';\n\n/**\n * Monitor Promise.all progress, fire onProgress callback function.\n *\n * @param promises Promise list going to be monitored\n * @param onProgress Callback function. Fired when a promise resolved.\n * @param startFraction Optional fraction start. Default to 0.\n * @param endFraction Optional fraction end. Default to 1.\n */\nexport function monitorPromisesProgress(\n    promises: Array<Promise<{}|void>>, onProgress: OnProgressCallback,\n    startFraction?: number, endFraction?: number) {\n  checkPromises(promises);\n  startFraction = startFraction == null ? 0 : startFraction;\n  endFraction = endFraction == null ? 1 : endFraction;\n  checkFraction(startFraction, endFraction);\n  let resolvedPromise = 0;\n\n  const registerMonitor = (promise: Promise<{}>) => {\n    promise.then(value => {\n      const fraction = startFraction +\n          ++resolvedPromise / promises.length * (endFraction - startFraction);\n      // pass fraction as parameter to callback function.\n      onProgress(fraction);\n      return value;\n    });\n    return promise;\n  };\n\n  function checkPromises(promises: Array<Promise<{}|void>>): void {\n    assert(\n        promises != null && Array.isArray(promises) && promises.length > 0,\n        () => 'promises must be a none empty array');\n  }\n\n  function checkFraction(startFraction: number, endFraction: number): void {\n    assert(\n        startFraction >= 0 && startFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got startFraction ${startFraction}`);\n    assert(\n        endFraction >= 0 && endFraction <= 1,\n        () => `Progress fraction must be in range [0, 1], but ` +\n            `got endFraction ${endFraction}`);\n    assert(\n        endFraction >= startFraction,\n        () => `startFraction must be no more than endFraction, but ` +\n            `got startFraction ${startFraction} and endFraction ` +\n            `${endFraction}`);\n  }\n\n  return Promise.all(promises.map(registerMonitor));\n}\n"]},"metadata":{},"sourceType":"module"}