{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { Tensor, Variable } from './tensor';\nimport { convertToTensor, convertToTensorArray } from './tensor_util_env';\nimport * as util from './util';\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\nfunction grad(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n  return (x, dy) => {\n    // x can be of any dtype, thus null as the last argument.\n    const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n    const $dy = dy != null ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n    return ENGINE.tidy(() => {\n      const {\n        value,\n        grads\n      } = ENGINE.gradients(() => f($x), [$x], $dy);\n\n      if ($dy != null) {\n        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');\n      }\n\n      checkGrads(grads);\n      return grads[0];\n    });\n  };\n}\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction grads(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n  return (args, dy) => {\n    util.assert(Array.isArray(args), () => 'The args passed in grads(f)(args) must be an array ' + 'of `Tensor`s or `TensorLike`s'); // args can be of any dtype, thus null as the last argument.\n\n    const $args = convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n    const $dy = dy != null ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n    return ENGINE.tidy(() => {\n      const {\n        value,\n        grads\n      } = ENGINE.gradients(() => f(...$args), $args, $dy);\n\n      if ($dy != null) {\n        util.assertShapesMatch(value.shape, $dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n      }\n\n      checkGrads(grads);\n      return grads;\n    });\n  };\n}\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction valueAndGrad(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrad(f) must be a function');\n  return (x, dy) => {\n    util.assert(x instanceof Tensor, () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n    util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n    const {\n      grads,\n      value\n    } = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads);\n    return {\n      grad: grads[0],\n      value\n    };\n  };\n}\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction valueAndGrads(f) {\n  util.assert(util.isFunction(f), () => 'The f passed in valueAndGrads(f) must be a function');\n  return (args, dy) => {\n    util.assert(Array.isArray(args) && args.every(arg => arg instanceof Tensor), () => 'The args passed in valueAndGrads(f)(args) must be array of ' + 'tensors');\n    util.assert(dy == null || dy instanceof Tensor, () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n\n    if (dy != null) {\n      util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n    }\n\n    checkGrads(res.grads);\n    return res;\n  };\n}\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction variableGrads(f, varList) {\n  util.assert(util.isFunction(f), () => 'The f passed in variableGrads(f) must be a function');\n  util.assert(varList == null || Array.isArray(varList) && varList.every(v => v instanceof Variable), () => 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');\n  const specifiedVarList = varList != null;\n\n  if (!specifiedVarList) {\n    // Get all of the trainable variables.\n    varList = [];\n\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n\n  const specifiedNonTrainable = specifiedVarList ? varList.filter(variable => !variable.trainable) : null; // Prune non-trainable variables.\n\n  const originalVarCount = varList.length;\n  varList = varList.filter(variable => variable.trainable);\n  util.assert(varList.length > 0, () => `variableGrads() expects at least one of the input variables to ` + `be trainable, but none of the ${originalVarCount} variables is ` + `trainable.`);\n  const allowNoGradients = true;\n  const {\n    value,\n    grads\n  } = ENGINE.gradients(f, varList, null, allowNoGradients);\n  util.assert(grads.some(g => g != null), () => 'Cannot find a connection between any variable and the result of ' + 'the loss function y=f(x). Please make sure the operations that ' + 'use variables are inside the function f passed to minimize().');\n  util.assert(value.rank === 0, () => `The f passed in variableGrads(f) must return a scalar, but it ` + `returned a rank-${value.rank} tensor`);\n  const namedGrads = {};\n  varList.forEach((v, i) => {\n    if (grads[i] != null) {\n      namedGrads[v.name] = grads[i];\n    }\n  });\n\n  if (specifiedNonTrainable != null) {\n    // If varList is explicitly provided and contains non-trainable values,\n    // add them to the returned gradients with `null` values.\n    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n  }\n\n  return {\n    value,\n    grads: namedGrads\n  };\n}\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passsed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensor.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\n\n\nfunction customGrad(f) {\n  return ENGINE.customGrad(f);\n}\n\nfunction checkGrads(grads) {\n  const numNullGradients = grads.filter(g => g == null).length;\n\n  if (numNullGradients > 0) {\n    throw new Error(`Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\n\nexport { customGrad, variableGrads, valueAndGrad, valueAndGrads, grad, grads };","map":{"version":3,"mappings":"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","names":["ENGINE","Tensor","Variable","convertToTensor","convertToTensorArray","util","grad","f","assert","isFunction","x","dy","$x","$dy","tidy","value","grads","gradients","assertShapesMatch","shape","checkGrads","args","Array","isArray","$args","valueAndGrad","valueAndGrads","every","arg","res","variableGrads","varList","v","specifiedVarList","varName","registeredVariables","push","specifiedNonTrainable","filter","variable","trainable","originalVarCount","length","allowNoGradients","some","g","rank","namedGrads","forEach","i","name","customGrad","numNullGradients","Error"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {CustomGradientFunc, ENGINE} from './engine';\nimport {Scalar, Tensor, Variable} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {convertToTensor, convertToTensorArray} from './tensor_util_env';\nimport {TensorLike} from './types';\nimport * as util from './util';\n\n/**\n * Provided `f(x)`, returns another function `g(x, dy?)`, which gives the\n * gradient of `f(x)` with respect to `x`.\n *\n * If `dy` is provided, the gradient of `f(x).mul(dy).sum()` with respect to\n * `x` is computed instead. `f(x)` must take a single tensor `x` and return a\n * single tensor `y`. If `f()` takes multiple inputs, use `tf.grads` instead.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.grad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * g(x).print();\n * ```\n *\n * ```js\n * // f(x) = x ^ 3\n * const f = x => x.pow(tf.scalar(3, 'int32'));\n * // f'(x) = 3x ^ 2\n * const g = tf.grad(f);\n * // f''(x) = 6x\n * const gg = tf.grad(g);\n *\n * const x = tf.tensor1d([2, 3]);\n * gg(x).print();\n * ```\n *\n * @param f The function f(x), to compute gradient for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grad(f: (x: Tensor) => Tensor): (\n    x: TensorLike|Tensor, dy?: TensorLike|Tensor) => Tensor {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grad(f) must be a function');\n  return (x: TensorLike|Tensor, dy?: TensorLike|Tensor): Tensor => {\n    // x can be of any dtype, thus null as the last argument.\n    const $x = convertToTensor(x, 'x', 'tf.grad', 'string_or_numeric');\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grad') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f($x), [$x], $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grad(f)(x, dy) must match the shape ' +\n                'returned by f(x)');\n      }\n      checkGrads(grads);\n      return grads[0];\n    });\n  };\n}\n\n/**\n * Provided `f(x1, x2,...)`, returns another function `g([x1, x2,...], dy?)`,\n * which gives an array of gradients of `f()` with respect to each input\n * [`x1`,`x2`,...].\n *\n * If `dy` is passed when calling `g()`, the gradient of\n * `f(x1,...).mul(dy).sum()` with respect to each input is computed instead.\n * The provided `f` must take one or more tensors and return a single tensor\n * `y`. If `f()` takes a single input, we recommend using `tf.grad` instead.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df / da = b, df / db = a\n * const g = tf.grads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const [da, db] = g([a, b]);\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @param f The function `f(x1, x2,...)` to compute gradients for.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction grads(f: (...args: Tensor[]) => Tensor): (\n    args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike) => Tensor[] {\n  util.assert(\n      util.isFunction(f), () => 'The f passed in grads(f) must be a function');\n  return (args: Array<Tensor|TensorLike>, dy?: Tensor|TensorLike): Tensor[] => {\n    util.assert(\n        Array.isArray(args),\n        () => 'The args passed in grads(f)(args) must be an array ' +\n            'of `Tensor`s or `TensorLike`s');\n    // args can be of any dtype, thus null as the last argument.\n    const $args =\n        convertToTensorArray(args, 'args', 'tf.grads', 'string_or_numeric');\n    const $dy: Tensor =\n        (dy != null) ? convertToTensor(dy, 'dy', 'tf.grads') : null;\n    return ENGINE.tidy(() => {\n      const {value, grads} = ENGINE.gradients(() => f(...$args), $args, $dy);\n      if ($dy != null) {\n        util.assertShapesMatch(\n            value.shape, $dy.shape,\n            'The shape of dy passed in grads(f)([x1,...], dy) must ' +\n                'match the shape returned by f([x1,...])');\n      }\n      checkGrads(grads);\n      return grads;\n    });\n  };\n}\n\n/**\n * Like `tf.grad`, but also returns the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grad: The gradient of `f(x)` w.r.t `x` (result of `tf.grad`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(x) = x ^ 2\n * const f = x => x.square();\n * // f'(x) = 2x\n * const g = tf.valueAndGrad(f);\n *\n * const x = tf.tensor1d([2, 3]);\n * const {value, grad} = g(x);\n *\n * console.log('value');\n * value.print();\n * console.log('grad');\n * grad.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrad<I extends Tensor, O extends Tensor>(f: (x: I) => O): (\n    x: I, dy?: O) => {\n  value: O;\n  grad: I;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrad(f) must be a function');\n  return (x: I, dy?: O) => {\n    util.assert(\n        x instanceof Tensor,\n        () => 'The x passed in valueAndGrad(f)(x) must be a tensor');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n    const {grads, value} = ENGINE.gradients(() => f(x), [x], dy);\n    checkGrads(grads);\n    return {grad: grads[0] as I, value};\n  };\n}\n\n/**\n * Like `tf.grads`, but returns also the value of `f()`. Useful when `f()`\n * returns a metric you want to show.\n *\n * The result is a rich object with the following properties:\n * - grads: The gradients of `f()` w.r.t each input (result of `tf.grads`).\n * - value: The value returned by `f(x)`.\n *\n * ```js\n * // f(a, b) = a * b\n * const f = (a, b) => a.mul(b);\n * // df/da = b, df/db = a\n * const g = tf.valueAndGrads(f);\n *\n * const a = tf.tensor1d([2, 3]);\n * const b = tf.tensor1d([-2, -3]);\n * const {value, grads} = g([a, b]);\n *\n * const [da, db] = grads;\n *\n * console.log('value');\n * value.print();\n *\n * console.log('da');\n * da.print();\n * console.log('db');\n * db.print();\n * ```\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction valueAndGrads<O extends Tensor>(f: (...args: Tensor[]) => O): (\n    args: Tensor[], dy?: O) => {\n  grads: Tensor[];\n  value: O;\n} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in valueAndGrads(f) must be a function');\n  return (args: Tensor[], dy?: O) => {\n    util.assert(\n        Array.isArray(args) && args.every(arg => arg instanceof Tensor),\n        () => 'The args passed in valueAndGrads(f)(args) must be array of ' +\n            'tensors');\n    util.assert(\n        dy == null || dy instanceof Tensor,\n        () => 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n    const res = ENGINE.gradients(() => f(...args), args, dy);\n    if (dy != null) {\n      util.assertShapesMatch(\n          res.value.shape, dy.shape,\n          'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' +\n              'match the shape returned by f([x1,...])');\n    }\n    checkGrads(res.grads);\n    return res;\n  };\n}\n\n/**\n * Computes and returns the gradient of f(x) with respect to the list of\n * trainable variables provided by `varList`. If no list is provided, it\n * defaults to all trainable variables.\n *\n * ```js\n * const a = tf.variable(tf.tensor1d([3, 4]));\n * const b = tf.variable(tf.tensor1d([5, 6]));\n * const x = tf.tensor1d([1, 2]);\n *\n * // f(a, b) = a * x ^ 2 + b * x\n * const f = () => a.mul(x.square()).add(b.mul(x)).sum();\n * // df/da = x ^ 2, df/db = x\n * const {value, grads} = tf.variableGrads(f);\n *\n * Object.keys(grads).forEach(varName => grads[varName].print());\n * ```\n *\n * @param f The function to execute. f() should return a scalar.\n * @param varList The list of variables to compute the gradients with respect\n *     to. Defaults to all trainable variables.\n * @returns An object with the following keys and values:\n *   - `value`: The value of the function `f`.\n *   - `grads`: A map from the names of the variables to the gradients.\n *     If the `varList` argument is provided explicitly and contains a subset of\n *     non-trainable variables, this map in the return value will contain keys\n *     that map the names of the non-trainable variables to `null`.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction variableGrads(f: () => Scalar, varList?: Variable[]):\n    {value: Scalar, grads: NamedTensorMap} {\n  util.assert(\n      util.isFunction(f),\n      () => 'The f passed in variableGrads(f) must be a function');\n  util.assert(\n      varList == null ||\n          Array.isArray(varList) && varList.every(v => v instanceof Variable),\n      () =>\n          'The varList passed in variableGrads(f, varList) must be an array ' +\n          'of variables');\n\n  const specifiedVarList = varList != null;\n  if (!specifiedVarList) {\n    // Get all of the trainable variables.\n    varList = [];\n    for (const varName in ENGINE.registeredVariables) {\n      varList.push(ENGINE.registeredVariables[varName]);\n    }\n  }\n\n  const specifiedNonTrainable: Variable[] =\n      specifiedVarList ? varList.filter(variable => !variable.trainable) : null;\n\n  // Prune non-trainable variables.\n  const originalVarCount = varList.length;\n  varList = varList.filter(variable => variable.trainable);\n  util.assert(\n      varList.length > 0,\n      () => `variableGrads() expects at least one of the input variables to ` +\n          `be trainable, but none of the ${originalVarCount} variables is ` +\n          `trainable.`);\n\n  const allowNoGradients = true;\n  const {value, grads} = ENGINE.gradients(f, varList, null, allowNoGradients);\n\n  util.assert(\n      grads.some(g => g != null),\n      () => 'Cannot find a connection between any variable and the result of ' +\n          'the loss function y=f(x). Please make sure the operations that ' +\n          'use variables are inside the function f passed to minimize().');\n  util.assert(\n      value.rank === 0,\n      () => `The f passed in variableGrads(f) must return a scalar, but it ` +\n          `returned a rank-${value.rank} tensor`);\n\n  const namedGrads: NamedTensorMap = {};\n  varList.forEach((v, i) => {\n    if (grads[i] != null) {\n      namedGrads[v.name] = grads[i];\n    }\n  });\n  if (specifiedNonTrainable != null) {\n    // If varList is explicitly provided and contains non-trainable values,\n    // add them to the returned gradients with `null` values.\n    specifiedNonTrainable.forEach(v => namedGrads[v.name] = null);\n  }\n  return {value, grads: namedGrads};\n}\n\n/**\n * Overrides the gradient computation of a function `f`.\n *\n * Takes a function\n * `f(...inputs, save) => {value: Tensor, gradFunc: (dy, saved) => Tensor[]}`\n * and returns another function `g(...inputs)` which takes the same inputs as\n * `f`. When called, `g` returns `f().value`. In backward mode, custom gradients\n * with respect to each input of `f` are computed using `f().gradFunc`.\n *\n * The `save` function passsed to `f` should be used for saving tensors needed\n * in the gradient. And the `saved` passed to the `gradFunc` is a\n * `NamedTensorMap`, which contains those saved tensor.\n *\n * ```js\n * const customOp = tf.customGrad((x, save) => {\n *   // Save x to make sure it's available later for the gradient.\n *   save([x]);\n *   // Override gradient of our custom x ^ 2 op to be dy * abs(x);\n *   return {\n *     value: x.square(),\n *     // Note `saved.x` which points to the `x` we saved earlier.\n *     gradFunc: (dy, saved) => [dy.mul(saved[0].abs())]\n *   };\n * });\n *\n * const x = tf.tensor1d([-1, -2, 3]);\n * const dx = tf.grad(x => customOp(x));\n *\n * console.log(`f(x):`);\n * customOp(x).print();\n * console.log(`f'(x):`);\n * dx(x).print();\n * ```\n *\n * @param f The function to evaluate in forward mode, which should return\n *     `{value: Tensor, gradFunc: (dy, saved) => Tensor[]}`, where `gradFunc`\n *     returns the custom gradients of `f` with respect to its inputs.\n *\n * @doc {heading: 'Training', subheading: 'Gradients'}\n */\nfunction customGrad<T extends Tensor>(f: CustomGradientFunc<T>):\n    (...args: Tensor[]) => T {\n  return ENGINE.customGrad(f);\n}\n\nfunction checkGrads(grads: Tensor[]) {\n  const numNullGradients = grads.filter(g => g == null).length;\n  if (numNullGradients > 0) {\n    throw new Error(\n        `Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.`);\n  }\n}\n\nexport {\n  customGrad,\n  variableGrads,\n  valueAndGrad,\n  valueAndGrads,\n  grad,\n  grads,\n};\n"]},"metadata":{},"sourceType":"module"}