{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropInput, util } from '@tensorflow/tfjs-core';\nexport const dilation2DBackpropInputConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      backend,\n      attrs\n    } = _ref;\n    const {\n      x,\n      filter,\n      dy\n    } = inputs;\n    const {\n      strides,\n      pad,\n      dilations\n    } = attrs;\n    const cpuBackend = backend;\n    const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n    const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations);\n    util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropInput}, dy ` + `must have the same rank as output ${outShape.length}, but got ` + `${dy.rank}`);\n    const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values); // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n\n    const gradients = util.makeZerosNestedTypedArray(x.shape, x.dtype); // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = hBeg < 0 ? 0 : hBeg;\n            let wInMax = wBeg < 0 ? 0 : wBeg;\n\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n    return {\n      dataId,\n      shape: x.shape,\n      dtype: x.dtype\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAuCC,uBAAvC,EAAgGC,IAAhG,QAA2G,uBAA3G;AAKA,OAAO,MAAMC,6BAA6B,GAAiB;AACzDC,YAAU,EAAEH,uBAD6C;AAEzDI,aAAW,EAAE,KAF4C;AAGzDC,YAAU,EAAE,QAA6B;AAAA,QAA5B;AAACC,YAAD;AAASC,aAAT;AAAkBC;AAAlB,KAA4B;AACvC,UAAM;AAACC,OAAD;AAAIC,YAAJ;AAAYC;AAAZ,QACFL,MADJ;AAEA,UAAM;AAACM,aAAD;AAAUC,SAAV;AAAeC;AAAf,QAA4BN,KAAlC;AACA,UAAMO,UAAU,GAAGR,OAAnB;AAEA,UAAMS,EAAE,GACJf,IAAI,CAACgB,aAAL,CACIR,CAAC,CAACS,KADN,EACaH,UAAU,CAACI,IAAX,CAAgBC,GAAhB,CAAoBX,CAAC,CAACY,MAAtB,EAA8BC,MAD3C,CADJ;AAKA,UAAMC,OAAO,GAAGtB,IAAI,CAACgB,aAAL,CACIP,MAAM,CAACQ,KADX,EAEIH,UAAU,CAACI,IAAX,CAAgBC,GAAhB,CAAoBV,MAAM,CAACW,MAA3B,EAAmCC,MAFvC,CAAhB;AAKA,UAAM;AACJE,eADI;AAEJC,cAFI;AAGJC,aAHI;AAIJC,gBAJI;AAKJC,eALI;AAMJC,cANI;AAOJC,aAPI;AAQJC,kBARI;AASJC,iBATI;AAUJC,kBAVI;AAWJC,iBAXI;AAYJC,oBAZI;AAaJC,mBAbI;AAcJC;AAdI,QAgBFtC,YAAY,CAACuC,qBAAb,CACI7B,CAAC,CAACS,KADN,EAEIR,MAAM,CAACQ,KAFX,EAE8CN,OAF9C,EAEuDC,GAFvD,EAGI;AAAO;AAHX,MAG6BC,SAH7B,CAhBJ;AAqBAb,QAAI,CAACsC,MAAL,CACI5B,EAAE,CAAC6B,IAAH,KAAYH,QAAQ,CAACI,MADzB,EAEI,MAAM,YAAYzC,uBAAuB,OAAnC,GACF,qCAAqCqC,QAAQ,CAACI,MAAM,YADlD,GAEF,GAAG9B,EAAE,CAAC6B,IAAI,EAJlB;AAMA,UAAME,GAAG,GACLzC,IAAI,CAACgB,aAAL,CACIoB,QADJ,EACctB,UAAU,CAACI,IAAX,CAAgBC,GAAhB,CAAoBT,EAAE,CAACU,MAAvB,EAA+BC,MAD7C,CADJ,CA3CuC,CAgDvC;AACA;;AACA,UAAMqB,SAAS,GACX1C,IAAI,CAAC2C,yBAAL,CAA+BnC,CAAC,CAACS,KAAjC,EAAwCT,CAAC,CAACoC,KAA1C,CADJ,CAlDuC,CAqDvC;AACA;AACA;AACA;AACA;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtB,SAApB,EAA+B,EAAEsB,CAAjC,EAAoC;AAClC,WAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGnB,SAA1B,EAAqC,EAAEmB,IAAvC,EAA6C;AAC3C,cAAMC,IAAI,GAAGD,IAAI,GAAGhB,YAAP,GAAsBD,OAAO,CAACmB,GAA3C;;AACA,aAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGrB,QAA1B,EAAoC,EAAEqB,IAAtC,EAA4C;AAC1C,gBAAMC,IAAI,GAAGD,IAAI,GAAGlB,WAAP,GAAqBF,OAAO,CAACsB,IAA1C;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,UAApB,EAAgC,EAAE0B,CAAlC,EAAqC;AACnC,gBAAIC,MAAM,GAAGC,MAAM,CAACC,gBAApB;AACA,gBAAIC,MAAM,GAAIT,IAAI,GAAG,CAAR,GAAa,CAAb,GAAiBA,IAA9B;AACA,gBAAIU,MAAM,GAAIP,IAAI,GAAG,CAAR,GAAa,CAAb,GAAiBA,IAA9B;;AACA,iBAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1B,YAApB,EAAkC,EAAE0B,CAApC,EAAuC;AACrC,oBAAMC,GAAG,GAAGZ,IAAI,GAAGW,CAAC,GAAGxB,cAAvB;;AACA,kBAAIyB,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAGnC,QAAtB,EAAgC;AAC9B,qBAAK,IAAIoC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG3B,WAApB,EAAiC,EAAE2B,CAAnC,EAAsC;AACpC,wBAAMC,GAAG,GAAGX,IAAI,GAAGU,CAAC,GAAGzB,aAAvB;;AACA,sBAAI0B,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAGpC,OAAtB,EAA+B;AAC7B,0BAAMqC,GAAG,GAAG/C,EAAE,CAAC8B,CAAD,CAAF,CAAMc,GAAN,EAAWE,GAAX,EAAgBT,CAAhB,IAAqB9B,OAAO,CAACoC,CAAD,CAAP,CAAWE,CAAX,EAAcR,CAAd,CAAjC;;AACA,wBAAIU,GAAG,GAAGT,MAAV,EAAkB;AAChBA,4BAAM,GAAGS,GAAT;AACAN,4BAAM,GAAGG,GAAT;AACAF,4BAAM,GAAGI,GAAT;AACD;AACF;AACF;AACF;AACF;;AACDnB,qBAAS,CAACG,CAAD,CAAT,CAAaW,MAAb,EAAqBC,MAArB,EAA6BL,CAA7B,KAAmCX,GAAG,CAACI,CAAD,CAAH,CAAOC,IAAP,EAAaG,IAAb,EAAmBG,CAAnB,CAAnC;AACD;AACF;AACF;AACF;;AAED,UAAMhC,MAAM,GAAGN,UAAU,CAACiD,KAAX,CACX/D,IAAI,CAACgE,YAAL,CAAkBtB,SAAlB,EAA6BlC,CAAC,CAACoC,KAA/B,CADW,EAC4BpC,CAAC,CAACS,KAD9B,EACqCT,CAAC,CAACoC,KADvC,CAAf;AAGA,WAAO;AAACxB,YAAD;AAASH,WAAK,EAAET,CAAC,CAACS,KAAlB;AAAyB2B,WAAK,EAAEpC,CAAC,CAACoC;AAAlC,KAAP;AACD;AAhGwD,CAApD","names":["backend_util","Dilation2DBackpropInput","util","dilation2DBackpropInputConfig","kernelName","backendName","kernelFunc","inputs","backend","attrs","x","filter","dy","strides","pad","dilations","cpuBackend","$x","toNestedArray","shape","data","get","dataId","values","$filter","batchSize","inHeight","inWidth","inChannels","outHeight","outWidth","padInfo","strideHeight","strideWidth","filterHeight","filterWidth","dilationHeight","dilationWidth","outShape","computeDilation2DInfo","assert","rank","length","$dy","gradients","makeZerosNestedTypedArray","dtype","b","hOut","hBeg","top","wOut","wBeg","left","d","curVal","Number","MIN_SAFE_INTEGER","hInMax","wInMax","h","hIn","w","wIn","val","write","toTypedArray"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Dilation2DBackpropInput.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2DAttrs, Dilation2DBackpropInput, Tensor3D, Tensor4D, TypedArray, util} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DBackpropInputConfig: KernelConfig = {\n  kernelName: Dilation2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter, dy} =\n        inputs as {x: Tensor4D, filter: Tensor3D, dy: Tensor4D};\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const $x =\n        util.toNestedArray(\n            x.shape, cpuBackend.data.get(x.dataId).values as TypedArray) as\n        number[][][][];\n\n    const $filter = util.toNestedArray(\n                        filter.shape,\n                        cpuBackend.data.get(filter.dataId).values as\n                            TypedArray) as number[][][];\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    util.assert(\n        dy.rank === outShape.length,\n        () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n\n    const $dy =\n        util.toNestedArray(\n            outShape, cpuBackend.data.get(dy.dataId).values as TypedArray) as\n        number[][][][];\n\n    // The computed gradients has the same dimensions as the input:\n    // [batch, inputHeight, inputCols, inChannel]\n    const gradients =\n        util.makeZerosNestedTypedArray(x.shape, x.dtype) as number[][][][];\n\n    // In the case of multiple argmax branches, we only back-propagate along the\n    // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n    // similarly to the max-pooling backward routines.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            let hInMax = (hBeg < 0) ? 0 : hBeg;\n            let wInMax = (wBeg < 0) ? 0 : wBeg;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                    if (val > curVal) {\n                      curVal = val;\n                      hInMax = hIn;\n                      wInMax = wIn;\n                    }\n                  }\n                }\n              }\n            }\n            gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}