{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Equal':\n      {\n        return [tfOps.equal(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'NotEqual':\n      {\n        return [tfOps.notEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Greater':\n      {\n        return [tfOps.greater(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'GreaterEqual':\n      {\n        return [tfOps.greaterEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Less':\n      {\n        return [tfOps.less(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LessEqual':\n      {\n        return [tfOps.lessEqual(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LogicalAnd':\n      {\n        return [tfOps.logicalAnd(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'LogicalNot':\n      {\n        return [tfOps.logicalNot(getParamValue('a', node, tensorMap, context))];\n      }\n\n    case 'LogicalOr':\n      {\n        return [tfOps.logicalOr(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    case 'Select':\n    case 'SelectV2':\n      {\n        return [tfOps.where(getParamValue('condition', node, tensorMap, context), getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'logical';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","equal","notEqual","greater","greaterEqual","less","lessEqual","logicalAnd","logicalNot","logicalOr","where","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/logical_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Equal': {\n          return [tfOps.equal(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'NotEqual': {\n          return [tfOps.notEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Greater': {\n          return [tfOps.greater(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'GreaterEqual': {\n          return [tfOps.greaterEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Less': {\n          return [tfOps.less(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LessEqual': {\n          return [tfOps.lessEqual(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalAnd': {\n          return [tfOps.logicalAnd(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalNot': {\n          return [tfOps.logicalNot(\n              getParamValue('a', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogicalOr': {\n          return [tfOps.logicalOr(\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        case 'Select':\n        case 'SelectV2': {\n          return [tfOps.where(\n              getParamValue('condition', node, tensorMap, context) as Tensor,\n              getParamValue('a', node, tensorMap, context) as Tensor,\n              getParamValue('b', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'logical';\n"]},"metadata":{},"sourceType":"module"}