{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nexport function real(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    input\n  } = inputs;\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values; // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\nexport const realConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,IAAlC,QAAqE,uBAArE;AAIA,OAAM,SAAUC,IAAV,CAAeC,IAAf,EAAkE;AAEtE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG;AAAD,MAAUF,MAAhB;AAEA,QAAMF,IAAI,GAAGG,OAAO,CAACE,IAAR,CAAaC,GAAb,CAAiBF,KAAK,CAACG,MAAvB,EAA+BC,kBAA/B,CAAkDR,IAA/D;AACA,QAAMS,OAAO,GAAGN,OAAO,CAACE,IAAR,CAAaC,GAAb,CAAiBN,IAAI,CAACO,MAAtB,EAA8BG,MAA9C,CANsE,CAQtE;AACA;AACA;;AACA,SAAOP,OAAO,CAACQ,cAAR,CAAuBX,IAAI,CAACY,KAA5B,EAAmCZ,IAAI,CAACa,KAAxC,EAA+CJ,OAA/C,CAAP;AACD;AAED,OAAO,MAAMK,UAAU,GAAiB;AACtCC,YAAU,EAAEhB,IAD0B;AAEtCiB,aAAW,EAAE,KAFyB;AAGtCC,YAAU,EAAEjB;AAH0B,CAAjC","names":["Real","real","args","inputs","backend","input","data","get","dataId","complexTensorInfos","realVal","values","makeTensorInfo","shape","dtype","realConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Real.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Real, RealInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function real(args: {inputs: RealInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {input} = inputs;\n\n  const real = backend.data.get(input.dataId).complexTensorInfos.real;\n  const realVal = backend.data.get(real.dataId).values;\n\n  // When complex tensor is disposed, its underlying parts will be disposed too.\n  // Make new tensor out of the real value of the complex. This makes sure the\n  // value is still accessible even if complex tensor is disposed.\n  return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\n\nexport const realConfig: KernelConfig = {\n  kernelName: Real,\n  backendName: 'cpu',\n  kernelFunc: real as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}