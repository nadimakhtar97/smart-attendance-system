{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { makeOnesTypedArray, sizeFromShape } from '../util';\nimport { complex } from './complex';\nimport { zeros } from './zeros';\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nexport function ones(shape) {\n  let dtype = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'float32';\n\n  if (dtype === 'complex64') {\n    const real = ones(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n\n  const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AAGA,SAAQC,kBAAR,EAA4BC,aAA5B,QAAgD,SAAhD;AAEA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,KAAR,QAAoB,SAApB;AAEA;;;;;;;;;;;;;;AAaA,OAAM,SAAUC,IAAV,CACFC,KADE,EAC6C;AAAA,MAA3BC,KAA2B,uEAAT,SAAS;;AACjD,MAAIA,KAAK,KAAK,WAAd,EAA2B;AACzB,UAAMC,IAAI,GAAGH,IAAI,CAACC,KAAD,EAAQ,SAAR,CAAjB;AACA,UAAMG,IAAI,GAAGL,KAAK,CAACE,KAAD,EAAQ,SAAR,CAAlB;AACA,WAAOH,OAAO,CAACK,IAAD,EAAOC,IAAP,CAAd;AACD;;AACD,QAAMC,MAAM,GAAGT,kBAAkB,CAACC,aAAa,CAACI,KAAD,CAAd,EAAuBC,KAAvB,CAAjC;AACA,SAAOP,MAAM,CAACW,UAAP,CAAkBD,MAAlB,EAA0BJ,KAA1B,EAAiCC,KAAjC,CAAP;AACD","names":["ENGINE","makeOnesTypedArray","sizeFromShape","complex","zeros","ones","shape","dtype","real","imag","values","makeTensor"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/ones.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {makeOnesTypedArray, sizeFromShape} from '../util';\n\nimport {complex} from './complex';\nimport {zeros} from './zeros';\n\n/**\n * Creates a `tf.Tensor` with all elements set to 1.\n *\n * ```js\n * tf.ones([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param dtype The type of an element in the resulting tensor. Defaults to\n *     'float'.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function ones<R extends Rank>(\n    shape: ShapeMap[R], dtype: DataType = 'float32'): Tensor<R> {\n  if (dtype === 'complex64') {\n    const real = ones(shape, 'float32');\n    const imag = zeros(shape, 'float32');\n    return complex(real, imag);\n  }\n  const values = makeOnesTypedArray(sizeFromShape(shape), dtype);\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n"]},"metadata":{},"sourceType":"module"}