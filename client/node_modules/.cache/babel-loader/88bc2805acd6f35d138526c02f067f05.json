{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { BatchMatMul } from '../kernel_names';\nimport { makeTypesMatch } from '../tensor_util';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction matMul_(a, b) {\n  let transposeA = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let transposeB = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let $a = convertToTensor(a, 'a', 'matMul');\n  let $b = convertToTensor(b, 'b', 'matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n  const inputs = {\n    a: $a,\n    b: $b\n  };\n  const attrs = {\n    transposeA,\n    transposeB\n  };\n  return ENGINE.runKernel(BatchMatMul, inputs, attrs);\n}\n\nexport const matMul = op({\n  matMul_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,WAAR,QAA+D,iBAA/D;AAIA,SAAQC,cAAR,QAA6B,gBAA7B;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AAGA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;AAgBA,SAASC,OAAT,CACIC,CADJ,EAC0BC,CAD1B,EAEsB;AAAA,MAD0BC,UAC1B,uEADuC,KACvC;AAAA,MAAlBC,UAAkB,uEAAL,KAAK;AACpB,MAAIC,EAAE,GAAGP,eAAe,CAACG,CAAD,EAAI,GAAJ,EAAS,QAAT,CAAxB;AACA,MAAIK,EAAE,GAAGR,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,QAAT,CAAxB;AACA,GAACG,EAAD,EAAKC,EAAL,IAAWT,cAAc,CAACQ,EAAD,EAAKC,EAAL,CAAzB;AAEA,QAAMC,MAAM,GAAsB;AAACN,KAAC,EAAEI,EAAJ;AAAQH,KAAC,EAAEI;AAAX,GAAlC;AACA,QAAME,KAAK,GAAqB;AAACL,cAAD;AAAaC;AAAb,GAAhC;AAEA,SAAOT,MAAM,CAACc,SAAP,CACHb,WADG,EACUW,MADV,EAC0CC,KAD1C,CAAP;AAED;;AAED,OAAO,MAAME,MAAM,GAAGX,EAAE,CAAC;AAACC;AAAD,CAAD,CAAjB","names":["ENGINE","BatchMatMul","makeTypesMatch","convertToTensor","op","matMul_","a","b","transposeA","transposeB","$a","$b","inputs","attrs","runKernel","matMul"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/mat_mul.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {BatchMatMul, BatchMatMulAttrs, BatchMatMulInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {makeTypesMatch} from '../tensor_util';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Computes the dot product of two matrices, A * B. These must be matrices.\n *\n * ```js\n * const a = tf.tensor2d([1, 2], [1, 2]);\n * const b = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n *\n * a.matMul(b).print();  // or tf.matMul(a, b)\n * ```\n * @param a First matrix in dot product operation.\n * @param b Second matrix in dot product operation.\n * @param transposeA If true, `a` is transposed before multiplication.\n * @param transposeB If true, `b` is transposed before multiplication.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction matMul_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike, transposeA = false,\n    transposeB = false): T {\n  let $a = convertToTensor(a, 'a', 'matMul');\n  let $b = convertToTensor(b, 'b', 'matMul');\n  [$a, $b] = makeTypesMatch($a, $b);\n\n  const inputs: BatchMatMulInputs = {a: $a, b: $b};\n  const attrs: BatchMatMulAttrs = {transposeA, transposeB};\n\n  return ENGINE.runKernel(\n      BatchMatMul, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const matMul = op({matMul_});\n"]},"metadata":{},"sourceType":"module"}