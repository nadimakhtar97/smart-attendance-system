{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { ValueError } from '../errors';\nimport { pyListRepeat } from './generic_utils';\nimport { isInteger, max } from './math_utils';\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\n\nexport function normalizeArray(value, n, name) {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(`The ${name} argument must be an integer or tuple of ${n} integers.` + ` Received: ${value.length} elements.`);\n    }\n\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n\n      if (!isInteger(singleValue)) {\n        throw new ValueError(`The ${name} argument must be an integer or tuple of ${n}` + ` integers. Received: ${JSON.stringify(value)} including a` + ` non-integer number ${singleValue}`);\n      }\n    }\n\n    return value;\n  }\n}\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\n\nexport function convOutputLength(inputLength, filterSize, padding, stride) {\n  let dilation = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;\n\n  if (inputLength == null) {\n    return inputLength;\n  }\n\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength;\n\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {\n    // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n\n  return Math.floor((outputLength + stride - 1) / stride);\n}\nexport function deconvLength(dimSize, strideSize, kernelSize, padding) {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n\n  return dimSize;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;AAUA,SAAQA,UAAR,QAAyB,WAAzB;AAGA,SAAQC,YAAR,QAA2B,iBAA3B;AACA,SAAQC,SAAR,EAAmBC,GAAnB,QAA6B,cAA7B;AAEA;;;;;;;;AAOA,OAAM,SAAUC,cAAV,CACFC,KADE,EACsBC,CADtB,EACiCC,IADjC,EAC6C;AACjD,MAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7B,WAAOJ,YAAY,CAACI,KAAD,EAAQC,CAAR,CAAnB;AACD,GAFD,MAEO;AACL,QAAID,KAAK,CAACG,MAAN,KAAiBF,CAArB,EAAwB;AACtB,YAAM,IAAIN,UAAJ,CACF,OAAOO,IAAI,4CAA4CD,CAAC,YAAxD,GACA,cAAcD,KAAK,CAACG,MAAM,YAFxB,CAAN;AAGD;;AACD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAApB,EAAuB,EAAEG,CAAzB,EAA4B;AAC1B,YAAMC,WAAW,GAAGL,KAAK,CAACI,CAAD,CAAzB;;AACA,UAAI,CAACP,SAAS,CAACQ,WAAD,CAAd,EAA6B;AAC3B,cAAM,IAAIV,UAAJ,CACF,OAAOO,IAAI,4CAA4CD,CAAC,EAAxD,GACA,wBAAwBK,IAAI,CAACC,SAAL,CAAeP,KAAf,CAAqB,cAD7C,GAEA,uBAAuBK,WAAW,EAHhC,CAAN;AAID;AACF;;AACD,WAAOL,KAAP;AACD;AACF;AAED;;;;;;;;;AAQA,OAAM,SAAUQ,gBAAV,CACFC,WADE,EACmBC,UADnB,EACuCC,OADvC,EAEFC,MAFE,EAE0B;AAAA,MAAZC,QAAY,uEAAD,CAAC;;AAC9B,MAAIJ,WAAW,IAAI,IAAnB,EAAyB;AACvB,WAAOA,WAAP;AACD;;AACD,QAAMK,iBAAiB,GAAGJ,UAAU,GAAG,CAACA,UAAU,GAAG,CAAd,KAAoBG,QAAQ,GAAG,CAA/B,CAAvC;AACA,MAAIE,YAAJ;;AACA,MAAIJ,OAAO,KAAK,MAAhB,EAAwB;AACtBI,gBAAY,GAAGN,WAAf;AACD,GAFD,MAEO;AAAG;AACRM,gBAAY,GAAGN,WAAW,GAAGK,iBAAd,GAAkC,CAAjD;AACD;;AACD,SAAOE,IAAI,CAACC,KAAL,CAAW,CAACF,YAAY,GAAGH,MAAf,GAAwB,CAAzB,IAA8BA,MAAzC,CAAP;AACD;AAED,OAAM,SAAUM,YAAV,CACFC,OADE,EACeC,UADf,EACmCC,UADnC,EAEFV,OAFE,EAEkB;AACtB,MAAIQ,OAAO,IAAI,IAAf,EAAqB;AACnB,WAAO,IAAP;AACD;;AAED,MAAIR,OAAO,KAAK,OAAhB,EAAyB;AACvBQ,WAAO,GAAGA,OAAO,GAAGC,UAAV,GAAuBtB,GAAG,CAAC,CAACuB,UAAU,GAAGD,UAAd,EAA0B,CAA1B,CAAD,CAApC;AACD,GAFD,MAEO,IAAIT,OAAO,KAAK,MAAhB,EAAwB;AAC7BQ,WAAO,GAAGA,OAAO,GAAGC,UAApB;AACD,GAFM,MAEA;AACL,UAAM,IAAIzB,UAAJ,CAAe,2BAA2BgB,OAAO,GAAjD,CAAN;AACD;;AACD,SAAOQ,OAAP;AACD","names":["ValueError","pyListRepeat","isInteger","max","normalizeArray","value","n","name","length","i","singleValue","JSON","stringify","convOutputLength","inputLength","filterSize","padding","stride","dilation","dilatedFilterSize","outputLength","Math","floor","deconvLength","dimSize","strideSize","kernelSize"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/utils/conv_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {ValueError} from '../errors';\nimport {PaddingMode} from '../keras_format/common';\n\nimport {pyListRepeat} from './generic_utils';\nimport {isInteger, max} from './math_utils';\n\n/**\n * Transforms a single number of array of numbers into an array of numbers.\n * @param value\n * @param n: The size of the tuple to be returned.\n * @param name: Name of the parameter, used for generating error messages.\n * @returns An array of numbers.\n */\nexport function normalizeArray(\n    value: number|number[], n: number, name: string): number[] {\n  if (typeof value === 'number') {\n    return pyListRepeat(value, n);\n  } else {\n    if (value.length !== n) {\n      throw new ValueError(\n          `The ${name} argument must be an integer or tuple of ${n} integers.` +\n          ` Received: ${value.length} elements.`);\n    }\n    for (let i = 0; i < n; ++i) {\n      const singleValue = value[i];\n      if (!isInteger(singleValue)) {\n        throw new ValueError(\n            `The ${name} argument must be an integer or tuple of ${n}` +\n            ` integers. Received: ${JSON.stringify(value)} including a` +\n            ` non-integer number ${singleValue}`);\n      }\n    }\n    return value;\n  }\n}\n\n/**\n * Determines output length of a convolution given input length.\n * @param inputLength\n * @param filterSize\n * @param padding\n * @param stride\n * @param dilation: dilation rate.\n */\nexport function convOutputLength(\n    inputLength: number, filterSize: number, padding: PaddingMode,\n    stride: number, dilation = 1): number {\n  if (inputLength == null) {\n    return inputLength;\n  }\n  const dilatedFilterSize = filterSize + (filterSize - 1) * (dilation - 1);\n  let outputLength: number;\n  if (padding === 'same') {\n    outputLength = inputLength;\n  } else {  // VALID\n    outputLength = inputLength - dilatedFilterSize + 1;\n  }\n  return Math.floor((outputLength + stride - 1) / stride);\n}\n\nexport function deconvLength(\n    dimSize: number, strideSize: number, kernelSize: number,\n    padding: PaddingMode): number {\n  if (dimSize == null) {\n    return null;\n  }\n\n  if (padding === 'valid') {\n    dimSize = dimSize * strideSize + max([kernelSize - strideSize, 0]);\n  } else if (padding === 'same') {\n    dimSize = dimSize * strideSize;\n  } else {\n    throw new ValueError(`Unsupport padding mode: ${padding}.`);\n  }\n  return dimSize;\n}\n"]},"metadata":{},"sourceType":"module"}