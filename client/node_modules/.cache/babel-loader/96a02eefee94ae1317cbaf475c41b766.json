{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nexport function assertParamsConsistent(shapes, axis) {\n  const rank = shapes[0].length;\n  shapes.forEach((shape, i) => {\n    util.assert(shape.length === rank, () => `Error in concat${rank}D: rank of tensors[${i}] must be the same ` + `as the rank of the rest (${rank})`);\n  });\n  util.assert(axis >= 0 && axis < rank, () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n  const firstShape = shapes[0];\n  shapes.forEach((shape, i) => {\n    for (let r = 0; r < rank; r++) {\n      util.assert(r === axis || shape[r] === firstShape[r], () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` + `does not match the shape of the rest (${firstShape}) ` + `along the non-concatenated axis ${i}.`);\n    }\n  });\n}\nexport function computeOutShape(shapes, axis) {\n  const outputShape = shapes[0].slice();\n\n  for (let i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n\n  return outputShape;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,OAAO,KAAKA,IAAZ,MAAsB,SAAtB;AAEA,OAAM,SAAUC,sBAAV,CAAiCC,MAAjC,EAAqDC,IAArD,EAAiE;AACrE,QAAMC,IAAI,GAAGF,MAAM,CAAC,CAAD,CAAN,CAAUG,MAAvB;AACAH,QAAM,CAACI,OAAP,CAAe,CAACC,KAAD,EAAQC,CAAR,KAAa;AAC1BR,QAAI,CAACS,MAAL,CACIF,KAAK,CAACF,MAAN,KAAiBD,IADrB,EAEI,MACI,kBAAkBA,IAAI,sBAAsBI,CAAC,qBAA7C,GACA,4BAA4BJ,IAAI,GAJxC;AAKD,GAND;AAQAJ,MAAI,CAACS,MAAL,CACIN,IAAI,IAAI,CAAR,IAAaA,IAAI,GAAGC,IADxB,EAEI,MAAM,kBAAkBA,IAAI,iCAAiCA,IAAI,GAAG,CAAC,GAFzE;AAIA,QAAMM,UAAU,GAAGR,MAAM,CAAC,CAAD,CAAzB;AACAA,QAAM,CAACI,OAAP,CAAe,CAACC,KAAD,EAAQC,CAAR,KAAa;AAC1B,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,IAApB,EAA0BO,CAAC,EAA3B,EAA+B;AAC7BX,UAAI,CAACS,MAAL,CACKE,CAAC,KAAKR,IAAP,IAAiBI,KAAK,CAACI,CAAD,CAAL,KAAaD,UAAU,CAACC,CAAD,CAD5C,EAEI,MAAM,kBAAkBP,IAAI,uBAAuBI,CAAC,MAAMD,KAAK,IAAzD,GACF,yCAAyCG,UAAU,IADjD,GAEF,mCAAmCF,CAAC,GAJ5C;AAKD;AACF,GARD;AASD;AAED,OAAM,SAAUI,eAAV,CAA0BV,MAA1B,EAA8CC,IAA9C,EAA0D;AAC9D,QAAMU,WAAW,GAAGX,MAAM,CAAC,CAAD,CAAN,CAAUY,KAAV,EAApB;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,MAAM,CAACG,MAA3B,EAAmCG,CAAC,EAApC,EAAwC;AACtCK,eAAW,CAACV,IAAD,CAAX,IAAqBD,MAAM,CAACM,CAAD,CAAN,CAAUL,IAAV,CAArB;AACD;;AACD,SAAOU,WAAP;AACD","names":["util","assertParamsConsistent","shapes","axis","rank","length","forEach","shape","i","assert","firstShape","r","computeOutShape","outputShape","slice"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/concat_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as util from '../util';\n\nexport function assertParamsConsistent(shapes: number[][], axis: number) {\n  const rank = shapes[0].length;\n  shapes.forEach((shape, i) => {\n    util.assert(\n        shape.length === rank,\n        () =>\n            `Error in concat${rank}D: rank of tensors[${i}] must be the same ` +\n            `as the rank of the rest (${rank})`);\n  });\n\n  util.assert(\n      axis >= 0 && axis < rank,\n      () => `Error in concat${rank}D: axis must be between 0 and ${rank - 1}.`);\n\n  const firstShape = shapes[0];\n  shapes.forEach((shape, i) => {\n    for (let r = 0; r < rank; r++) {\n      util.assert(\n          (r === axis) || (shape[r] === firstShape[r]),\n          () => `Error in concat${rank}D: Shape of tensors[${i}] (${shape}) ` +\n              `does not match the shape of the rest (${firstShape}) ` +\n              `along the non-concatenated axis ${i}.`);\n    }\n  });\n}\n\nexport function computeOutShape(shapes: number[][], axis: number): number[] {\n  const outputShape = shapes[0].slice();\n  for (let i = 1; i < shapes.length; i++) {\n    outputShape[axis] += shapes[i][axis];\n  }\n  return outputShape;\n}\n"]},"metadata":{},"sourceType":"module"}