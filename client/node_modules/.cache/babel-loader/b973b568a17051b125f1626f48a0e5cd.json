{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    paddings,\n    constantValue\n  } = attrs;\n  assertNotComplex(x, 'pad');\n  const outShape = paddings.map((p, i) => p[0]\n  /* beforePad */\n  + x.shape[i] + p[1]\n  /* afterPad */\n  );\n  const start = paddings.map(p => p[0]);\n  const xVals = backend.data.get(x.dataId).values;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n  return {\n    dataId: outId,\n    shape: outShape,\n    dtype: x.dtype\n  };\n}\nexport const padV2Config = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAmDA,KAAnD,EAA2GC,IAA3G,QAAsH,uBAAtH;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAUC,KAAV,CACFC,IADE,EACqE;AAEzE,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,YAAD;AAAWC;AAAX,MAA4BH,KAAlC;AAEAL,kBAAgB,CAACM,CAAD,EAAI,KAAJ,CAAhB;AAEA,QAAMG,QAAQ,GAAGF,QAAQ,CAACG,GAAT,CACb,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD;AAAI;AAAL,IAAuBL,CAAC,CAACO,KAAF,CAAQD,CAAR,CAAvB,GAAoCD,CAAC,CAAC,CAAD;AAAI;AADtC,GAAjB;AAGA,QAAMG,KAAK,GAAGP,QAAQ,CAACG,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAnB,CAAd;AAEA,QAAMI,KAAK,GAAGX,OAAO,CAACY,IAAR,CAAaC,GAAb,CAAiBX,CAAC,CAACY,MAAnB,EAA2BC,MAAzC;AACA,QAAMC,KAAK,GAAGrB,IAAI,CAACsB,aAAL,CAAmBf,CAAC,CAACO,KAArB,CAAd;AACA,QAAMS,KAAK,GAAGhB,CAAC,CAACO,KAAF,CAAQU,MAAtB;AACA,QAAMC,QAAQ,GAAGzB,IAAI,CAAC0B,cAAL,CAAoBnB,CAAC,CAACO,KAAtB,CAAjB;AAEA,QAAMa,UAAU,GAAG3B,IAAI,CAACsB,aAAL,CAAmBZ,QAAnB,CAAnB;AACA,QAAMkB,UAAU,GAAGlB,QAAQ,CAACc,MAA5B;AACA,QAAMK,aAAa,GAAG7B,IAAI,CAAC0B,cAAL,CAAoBhB,QAApB,CAAtB;AACA,QAAMoB,OAAO,GACT9B,IAAI,CAAC+B,sBAAL,CAA4BxB,CAAC,CAACyB,KAA9B,EAAwDL,UAAxD,CADJ;;AAGA,MAAIlB,aAAa,KAAK,CAAtB,EAAyB;AACvBqB,WAAO,CAACG,IAAR,CAAaxB,aAAb;AACD;;AAED,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAApB,EAA2BR,CAAC,EAA5B,EAAgC;AAC9B,UAAMqB,MAAM,GAAGlC,IAAI,CAACmC,UAAL,CAAgBtB,CAAhB,EAAmBU,KAAnB,EAA0BE,QAA1B,CAAf;AACA,UAAMW,SAAS,GAAGF,MAAM,CAACvB,GAAP,CAAW,CAAC0B,CAAD,EAAIxB,CAAJ,KAAUwB,CAAC,GAAGtB,KAAK,CAACF,CAAD,CAA9B,CAAlB;AACA,UAAMyB,QAAQ,GAAGtC,IAAI,CAACuC,UAAL,CAAgBH,SAAhB,EAA2BR,UAA3B,EAAuCC,aAAvC,CAAjB;AAEAC,WAAO,CAACQ,QAAD,CAAP,GAAoBtB,KAAK,CAACH,CAAD,CAAzB;AACD;;AAED,QAAM2B,KAAK,GAAGnC,OAAO,CAACoC,KAAR,CAAcX,OAAd,EAAuBpB,QAAvB,EAAiCH,CAAC,CAACyB,KAAnC,CAAd;AAEA,SAAO;AAACb,UAAM,EAAEqB,KAAT;AAAgB1B,SAAK,EAAEJ,QAAvB;AAAiCsB,SAAK,EAAEzB,CAAC,CAACyB;AAA1C,GAAP;AACD;AAED,OAAO,MAAMU,WAAW,GAAiB;AACvCC,YAAU,EAAE5C,KAD2B;AAEvC6C,aAAW,EAAE,KAF0B;AAGvCC,YAAU,EAAE3C;AAH2B,CAAlC","names":["PadV2","util","assertNotComplex","padV2","args","inputs","backend","attrs","x","paddings","constantValue","outShape","map","p","i","shape","start","xVals","data","get","dataId","values","xSize","sizeFromShape","xRank","length","xStrides","computeStrides","resultSize","resultRank","resultStrides","resVals","getTypedArrayFromDType","dtype","fill","coords","indexToLoc","outCoords","c","outIndex","locToIndex","outId","write","padV2Config","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/PadV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, PadV2, PadV2Attrs, PadV2Inputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function padV2(\n    args: {inputs: PadV2Inputs, backend: MathBackendCPU, attrs: PadV2Attrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {paddings, constantValue} = attrs;\n\n  assertNotComplex(x, 'pad');\n\n  const outShape = paddings.map(\n      (p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n\n  const start = paddings.map(p => p[0]);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xSize = util.sizeFromShape(x.shape);\n  const xRank = x.shape.length;\n  const xStrides = util.computeStrides(x.shape);\n\n  const resultSize = util.sizeFromShape(outShape);\n  const resultRank = outShape.length;\n  const resultStrides = util.computeStrides(outShape);\n  const resVals =\n      util.getTypedArrayFromDType(x.dtype as NumericDataType, resultSize);\n\n  if (constantValue !== 0) {\n    resVals.fill(constantValue);\n  }\n\n  for (let i = 0; i < xSize; i++) {\n    const coords = util.indexToLoc(i, xRank, xStrides);\n    const outCoords = coords.map((c, i) => c + start[i]);\n    const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n\n    resVals[outIndex] = xVals[i];\n  }\n\n  const outId = backend.write(resVals, outShape, x.dtype);\n\n  return {dataId: outId, shape: outShape, dtype: x.dtype};\n}\n\nexport const padV2Config: KernelConfig = {\n  kernelName: PadV2,\n  backendName: 'cpu',\n  kernelFunc: padV2 as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}