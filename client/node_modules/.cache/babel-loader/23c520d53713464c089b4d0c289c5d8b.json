{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tile } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { slice } from '../ops/slice';\nimport { zerosLike } from '../ops/zeros_like';\nexport const tileGradConfig = {\n  kernelName: Tile,\n  inputsToSave: ['x'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x] = saved;\n    const {\n      reps\n    } = attrs;\n\n    const derX = () => {\n      let xGrad = zerosLike(x); // TODO(cais): Maybe reduce memory footprint by avoiding repeated\n      // slicing.\n\n      if (x.rank === 1) {\n        for (let i = 0; i < reps[0]; ++i) {\n          xGrad = add(xGrad, slice(dy, [i * x.shape[0]], [x.shape[0]]));\n        }\n      } else if (x.rank === 2) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1]], [x.shape[0], x.shape[1]]));\n          }\n        }\n      } else if (x.rank === 3) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]], [x.shape[0], x.shape[1], x.shape[2]]));\n            }\n          }\n        }\n      } else if (x.rank === 4) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              for (let l = 0; l < reps[3]; ++l) {\n                xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2], l * x.shape[3]], [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n              }\n            }\n          }\n        }\n      } else {\n        throw new Error(`Gradient for tile operation is not implemented for rank-` + `${x.rank} tensors yet.`);\n      }\n\n      return xGrad;\n    };\n\n    return {\n      x: derX\n    };\n  }\n};","map":{"version":3,"mappings":"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","names":["Tile","add","slice","zerosLike","tileGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x","reps","derX","xGrad","rank","i","shape","j","k","l","Error"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/Tile_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tile, TileAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {slice} from '../ops/slice';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor} from '../tensor';\n\nexport const tileGradConfig: GradConfig = {\n  kernelName: Tile,\n  inputsToSave: ['x'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x] = saved;\n    const {reps} = attrs as unknown as TileAttrs;\n\n    const derX = () => {\n      let xGrad = zerosLike(x);\n      // TODO(cais): Maybe reduce memory footprint by avoiding repeated\n      // slicing.\n      if (x.rank === 1) {\n        for (let i = 0; i < reps[0]; ++i) {\n          xGrad = add(xGrad, slice(dy, [i * x.shape[0]], [x.shape[0]]));\n        }\n      } else if (x.rank === 2) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            xGrad = add(xGrad, slice(dy, [i * x.shape[0], j * x.shape[1]], [\n                          x.shape[0], x.shape[1]\n                        ]));\n          }\n        }\n      } else if (x.rank === 3) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              xGrad =\n                  add(xGrad,\n                      slice(\n                          dy, [i * x.shape[0], j * x.shape[1], k * x.shape[2]],\n                          [x.shape[0], x.shape[1], x.shape[2]]));\n            }\n          }\n        }\n      } else if (x.rank === 4) {\n        for (let i = 0; i < reps[0]; ++i) {\n          for (let j = 0; j < reps[1]; ++j) {\n            for (let k = 0; k < reps[2]; ++k) {\n              for (let l = 0; l < reps[3]; ++l) {\n                xGrad =\n                    add(xGrad,\n                        slice(\n                            dy,\n                            [\n                              i * x.shape[0], j * x.shape[1], k * x.shape[2],\n                              l * x.shape[3]\n                            ],\n                            [x.shape[0], x.shape[1], x.shape[2], x.shape[3]]));\n              }\n            }\n          }\n        }\n      } else {\n        throw new Error(\n            `Gradient for tile operation is not implemented for rank-` +\n            `${x.rank} tensors yet.`);\n      }\n      return xGrad;\n    };\n    return {x: derX};\n  },\n};\n"]},"metadata":{},"sourceType":"module"}