{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Fill':\n      {\n        const shape = getParamValue('shape', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const value = getParamValue('value', node, tensorMap, context);\n        return [tfOps.fill(shape, value, dtype)];\n      }\n\n    case 'LinSpace':\n      {\n        const start = getParamValue('start', node, tensorMap, context);\n        const stop = getParamValue('stop', node, tensorMap, context);\n        const num = getParamValue('num', node, tensorMap, context);\n        return [tfOps.linspace(start, stop, num)];\n      }\n\n    case 'Multinomial':\n      {\n        const logits = getParamValue('logits', node, tensorMap, context);\n        const numSamples = getParamValue('numSamples', node, tensorMap, context);\n        const seed = getParamValue('seed', node, tensorMap, context);\n        return [tfOps.multinomial(logits, numSamples, seed)];\n      }\n\n    case 'OneHot':\n      {\n        const indices = getParamValue('indices', node, tensorMap, context);\n        const depth = getParamValue('depth', node, tensorMap, context);\n        const onValue = getParamValue('onValue', node, tensorMap, context);\n        const offValue = getParamValue('offValue', node, tensorMap, context);\n        return [tfOps.oneHot(indices, depth, onValue, offValue)];\n      }\n\n    case 'Ones':\n      {\n        return [tfOps.ones(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'OnesLike':\n      {\n        return [tfOps.onesLike(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'RandomUniform':\n      {\n        return [tfOps.randomUniform( // tslint:disable-next-line:no-any\n        getParamValue('shape', node, tensorMap, context), getParamValue('minval', node, tensorMap, context), getParamValue('maxval', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'Range':\n      {\n        const start = getParamValue('start', node, tensorMap, context);\n        const stop = getParamValue('stop', node, tensorMap, context);\n        const step = getParamValue('step', node, tensorMap, context);\n        return [tfOps.range(start, stop, step, getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'TruncatedNormal':\n      {\n        const shape = getParamValue('shape', node, tensorMap, context);\n        const mean = getParamValue('mean', node, tensorMap, context);\n        const stdDev = getParamValue('stdDev', node, tensorMap, context);\n        const seed = getParamValue('seed', node, tensorMap, context);\n        return [tfOps.truncatedNormal(shape, mean, stdDev, getParamValue('dtype', node, tensorMap, context), seed)];\n      }\n\n    case 'Zeros':\n      {\n        return [tfOps.zeros(getParamValue('shape', node, tensorMap, context), getParamValue('dtype', node, tensorMap, context))];\n      }\n\n    case 'ZerosLike':\n      {\n        return [tfOps.zerosLike(getParamValue('x', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'creation';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","shape","dtype","value","fill","start","stop","num","linspace","logits","numSamples","seed","multinomial","indices","depth","onValue","offValue","oneHot","ones","onesLike","randomUniform","step","range","mean","stdDev","truncatedNormal","zeros","zerosLike","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/creation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor, Tensor1D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Fill': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const dtype =\n              getParamValue('dtype', node, tensorMap, context) as DataType;\n          const value =\n              getParamValue('value', node, tensorMap, context) as number;\n          return [tfOps.fill(shape, value, dtype)];\n        }\n        case 'LinSpace': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const num = getParamValue('num', node, tensorMap, context) as number;\n          return [tfOps.linspace(start, stop, num)];\n        }\n        case 'Multinomial': {\n          const logits =\n              getParamValue('logits', node, tensorMap, context) as Tensor1D;\n          const numSamples =\n              getParamValue('numSamples', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.multinomial(logits, numSamples, seed)];\n        }\n        case 'OneHot': {\n          const indices =\n              getParamValue('indices', node, tensorMap, context) as Tensor1D;\n          const depth =\n              getParamValue('depth', node, tensorMap, context) as number;\n          const onValue =\n              getParamValue('onValue', node, tensorMap, context) as number;\n          const offValue =\n              getParamValue('offValue', node, tensorMap, context) as number;\n          return [tfOps.oneHot(indices, depth, onValue, offValue)];\n        }\n        case 'Ones': {\n          return [tfOps.ones(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'OnesLike': {\n          return [tfOps.onesLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'RandomUniform': {\n          return [tfOps.randomUniform(\n              // tslint:disable-next-line:no-any\n              getParamValue('shape', node, tensorMap, context) as any,\n              getParamValue('minval', node, tensorMap, context) as number,\n              getParamValue('maxval', node, tensorMap, context) as number,\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'Range': {\n          const start =\n              getParamValue('start', node, tensorMap, context) as number;\n          const stop =\n              getParamValue('stop', node, tensorMap, context) as number;\n          const step =\n              getParamValue('step', node, tensorMap, context) as number;\n          return [tfOps.range(\n              start, stop, step,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32')];\n        }\n        case 'TruncatedNormal': {\n          const shape =\n              getParamValue('shape', node, tensorMap, context) as number[];\n          const mean =\n              getParamValue('mean', node, tensorMap, context) as number;\n          const stdDev =\n              getParamValue('stdDev', node, tensorMap, context) as number;\n          const seed =\n              getParamValue('seed', node, tensorMap, context) as number;\n          return [tfOps.truncatedNormal(\n              shape, mean, stdDev,\n              getParamValue('dtype', node, tensorMap, context) as 'float32' |\n                  'int32',\n              seed)];\n        }\n        case 'Zeros': {\n          return [tfOps.zeros(\n              getParamValue('shape', node, tensorMap, context) as number[],\n              getParamValue('dtype', node, tensorMap, context) as DataType)];\n        }\n        case 'ZerosLike': {\n          return [tfOps.zerosLike(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'creation';\n"]},"metadata":{},"sourceType":"module"}