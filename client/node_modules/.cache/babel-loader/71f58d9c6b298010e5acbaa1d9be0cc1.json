{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport const squareConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      backend\n    } = _ref;\n    const {\n      x\n    } = inputs;\n    const cpuBackend = backend;\n    assertNotComplex(x, 'square');\n    const values = cpuBackend.data.get(x.dataId).values;\n    const newValues = new Float32Array(values.length);\n\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {\n      dataId,\n      shape: x.shape,\n      dtype: x.dtype\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAmC,uBAAnC;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAO,MAAMC,YAAY,GAAiB;AACxCC,YAAU,EAAEH,MAD4B;AAExCI,aAAW,EAAE,KAF2B;AAGxCC,YAAU,EAAE,QAAsB;AAAA,QAArB;AAACC,YAAD;AAASC;AAAT,KAAqB;AAChC,UAAM;AAACC;AAAD,QAAMF,MAAZ;AACA,UAAMG,UAAU,GAAGF,OAAnB;AACAN,oBAAgB,CAACO,CAAD,EAAI,QAAJ,CAAhB;AAEA,UAAME,MAAM,GAAGD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBJ,CAAC,CAACK,MAAtB,EAA8BH,MAA7C;AACA,UAAMI,SAAS,GAAG,IAAIC,YAAJ,CAAiBL,MAAM,CAACM,MAAxB,CAAlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,MAAM,CAACM,MAA3B,EAAmC,EAAEC,CAArC,EAAwC;AACtC,YAAMC,KAAK,GAAGR,MAAM,CAACO,CAAD,CAApB;AACAH,eAAS,CAACG,CAAD,CAAT,GAAeC,KAAK,GAAGA,KAAvB;AACD;;AACD,UAAML,MAAM,GAAGJ,UAAU,CAACU,KAAX,CAAiBL,SAAjB,EAA4BN,CAAC,CAACY,KAA9B,EAAqCZ,CAAC,CAACa,KAAvC,CAAf;AACA,WAAO;AAACR,YAAD;AAASO,WAAK,EAAEZ,CAAC,CAACY,KAAlB;AAAyBC,WAAK,EAAEb,CAAC,CAACa;AAAlC,KAAP;AACD;AAhBuC,CAAnC","names":["Square","assertNotComplex","squareConfig","kernelName","backendName","kernelFunc","inputs","backend","x","cpuBackend","values","data","get","dataId","newValues","Float32Array","length","i","value","write","shape","dtype"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Square.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Square, SquareInputs} from '@tensorflow/tfjs-core';\nimport {KernelConfig} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport const squareConfig: KernelConfig = {\n  kernelName: Square,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend}) => {\n    const {x} = inputs as SquareInputs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'square');\n\n    const values = cpuBackend.data.get(x.dataId).values as Float32Array;\n    const newValues = new Float32Array(values.length);\n    for (let i = 0; i < values.length; ++i) {\n      const value = values[i];\n      newValues[i] = value * value;\n    }\n    const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n    return {dataId, shape: x.shape, dtype: x.dtype};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}