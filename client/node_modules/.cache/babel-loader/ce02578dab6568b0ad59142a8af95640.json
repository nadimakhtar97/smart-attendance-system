{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { spaceToBatchND } from '../../ops/space_to_batch_nd';\nimport { getGlobalTensorClass } from '../../tensor';\n\ngetGlobalTensorClass().prototype.spaceToBatchND = function (blockShape, paddings) {\n  this.throwIfDisposed();\n  return spaceToBatchND(this, blockShape, paddings);\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,cAAR,QAA6B,6BAA7B;AACA,SAAQC,oBAAR,QAA2C,cAA3C;;AAUAA,oBAAoB,GAAGC,SAAvB,CAAiCF,cAAjC,GAAkD,UAC9CG,UAD8C,EACxBC,QADwB,EACJ;AAC5C,OAAKC,eAAL;AACA,SAAOL,cAAc,CAAC,IAAD,EAAOG,UAAP,EAAmBC,QAAnB,CAArB;AACD,CAJD","names":["spaceToBatchND","getGlobalTensorClass","prototype","blockShape","paddings","throwIfDisposed"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/public/chained_ops/space_to_batch_nd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {spaceToBatchND} from '../../ops/space_to_batch_nd';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    spaceToBatchND<R extends Rank>(blockShape: number[], paddings: number[][]):\n        Tensor<R>;\n  }\n}\n\ngetGlobalTensorClass().prototype.spaceToBatchND = function<R extends Rank>(\n    blockShape: number[], paddings: number[][]): Tensor<R> {\n  this.throwIfDisposed();\n  return spaceToBatchND(this, blockShape, paddings);\n};\n"]},"metadata":{},"sourceType":"module"}