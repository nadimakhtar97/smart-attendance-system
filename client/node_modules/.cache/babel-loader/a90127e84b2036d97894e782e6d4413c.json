{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Optimizers.\n */\nimport { train } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { ValueError } from './errors'; // Add (de)serialize()\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\n\nexport function getOptimizer(identifier) {\n  const optimizerMap = {\n    'Adagrad': () => train.adagrad(0.01),\n    'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n    'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n    'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n    'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n    'SGD': () => train.sgd(0.01)\n  };\n  optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n  optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n  optimizerMap['adam'] = optimizerMap['Adam'];\n  optimizerMap['adamax'] = optimizerMap['Adamax'];\n  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n  optimizerMap['sgd'] = optimizerMap['SGD'];\n\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n\n  throw new ValueError(`Unknown Optimizer ${identifier}`);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAUA;;;AAIA,SAAmBA,KAAnB,QAA+B,uBAA/B;AAEA,SAAQC,OAAR,QAAsB,kBAAtB;AAEA,SAAQC,UAAR,QAAyB,UAAzB,C,CAEA;AAEA;AACA;;AACA,OAAM,SAAUC,YAAV,CAAuBC,UAAvB,EAAyC;AAC7C,QAAMC,YAAY,GAA+C;AAC/D,eAAW,MAAML,KAAK,CAACM,OAAN,CAAc,IAAd,CAD8C;AAE/D,gBAAY,MAAMN,KAAK,CAACO,QAAN,CAAe,CAAf,EAAkB,IAAlB,EAAwBN,OAAO,EAA/B,CAF6C;AAG/D,YAAQ,MAAMD,KAAK,CAACQ,IAAN,CAAW,KAAX,EAAkB,GAAlB,EAAuB,KAAvB,EAA8BP,OAAO,EAArC,CAHiD;AAI/D,cAAU,MAAMD,KAAK,CAACS,MAAN,CAAa,KAAb,EAAoB,GAApB,EAAyB,KAAzB,EAAgCR,OAAO,EAAvC,EAA2C,CAA3C,CAJ+C;AAK/D,eAAW,MAAMD,KAAK,CAACU,OAAN,CAAc,KAAd,EAAqB,GAArB,EAA0B,CAA1B,EAA6BT,OAAO,EAApC,CAL8C;AAM/D,WAAO,MAAMD,KAAK,CAACW,GAAN,CAAU,IAAV;AANkD,GAAjE;AAQAN,cAAY,CAAC,SAAD,CAAZ,GAA0BA,YAAY,CAAC,SAAD,CAAtC;AACAA,cAAY,CAAC,UAAD,CAAZ,GAA2BA,YAAY,CAAC,UAAD,CAAvC;AACAA,cAAY,CAAC,MAAD,CAAZ,GAAuBA,YAAY,CAAC,MAAD,CAAnC;AACAA,cAAY,CAAC,QAAD,CAAZ,GAAyBA,YAAY,CAAC,QAAD,CAArC;AACAA,cAAY,CAAC,SAAD,CAAZ,GAA0BA,YAAY,CAAC,SAAD,CAAtC;AACAA,cAAY,CAAC,KAAD,CAAZ,GAAsBA,YAAY,CAAC,KAAD,CAAlC;;AAEA,MAAID,UAAU,IAAIC,YAAlB,EAAgC;AAC9B,WAAOA,YAAY,CAACD,UAAD,CAAZ,EAAP;AACD;;AACD,QAAM,IAAIF,UAAJ,CAAe,qBAAqBE,UAAU,EAA9C,CAAN;AACD","names":["train","epsilon","ValueError","getOptimizer","identifier","optimizerMap","adagrad","adadelta","adam","adamax","rmsprop","sgd"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/optimizers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Optimizers.\n */\n\nimport {Optimizer, train} from '@tensorflow/tfjs-core';\n\nimport {epsilon} from './backend/common';\n\nimport {ValueError} from './errors';\n\n// Add (de)serialize()\n\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function getOptimizer(identifier: string): Optimizer {\n  const optimizerMap: {[optimizerName: string]: () => Optimizer} = {\n    'Adagrad': () => train.adagrad(0.01),\n    'Adadelta': () => train.adadelta(1, 0.95, epsilon()),\n    'Adam': () => train.adam(0.001, 0.9, 0.999, epsilon()),\n    'Adamax': () => train.adamax(0.002, 0.9, 0.999, epsilon(), 0),\n    'RMSProp': () => train.rmsprop(0.001, 0.9, 0, epsilon()),\n    'SGD': () => train.sgd(0.01)\n  };\n  optimizerMap['adagrad'] = optimizerMap['Adagrad'];\n  optimizerMap['adadelta'] = optimizerMap['Adadelta'];\n  optimizerMap['adam'] = optimizerMap['Adam'];\n  optimizerMap['adamax'] = optimizerMap['Adamax'];\n  optimizerMap['rmsprop'] = optimizerMap['RMSProp'];\n  optimizerMap['sgd'] = optimizerMap['SGD'];\n\n  if (identifier in optimizerMap) {\n    return optimizerMap[identifier]();\n  }\n  throw new ValueError(`Unknown Optimizer ${identifier}`);\n}\n"]},"metadata":{},"sourceType":"module"}