{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Min, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function min(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  assertNotComplex(x, 'min');\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n  const aVals = backend.data.get($x.dataId).values;\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n\n      if (Number.isNaN(value) || value < min) {\n        // comparison with NaN always return false\n        min = value;\n      }\n    }\n\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult = reshape({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        shape: expandedShape\n      }\n    });\n    backend.disposeIntermediateTensorInfo(result);\n    return reshapedResult;\n  }\n\n  return result;\n}\nexport const minConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min\n};","map":{"version":3,"mappings":"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","names":["backend_util","Min","util","assertNotComplex","reshape","transpose","min","args","inputs","backend","attrs","x","axis","keepDims","origAxes","parseAxisParam","shape","axes","permutedAxes","getAxesPermutation","length","$x","perm","getInnerMostAxes","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","reduceSize","sizeFromShape","vals","makeZerosTypedArray","dtype","aVals","data","get","dataId","values","i","offset","j","value","Number","isNaN","disposeIntermediateTensorInfo","result","makeTensorInfo","expandedShape","expandShapeToKeepDim","reshapedResult","minConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Min.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, Min, MinAttrs, MinInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function min(\n    args: {inputs: MinInputs, backend: MathBackendCPU, attrs: MinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  assertNotComplex(x, 'min');\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (Number.isNaN(value) ||\n          value < min) {  // comparison with NaN always return false\n        min = value;\n      }\n    }\n    vals[i] = min;\n  }\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo($x);\n  }\n\n  const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n\n  if (keepDims) {\n    const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    const reshapedResult =\n        reshape({inputs: {x: result}, backend, attrs: {shape: expandedShape}});\n\n    backend.disposeIntermediateTensorInfo(result);\n\n    return reshapedResult;\n  }\n\n  return result;\n}\n\nexport const minConfig: KernelConfig = {\n  kernelName: Min,\n  backendName: 'cpu',\n  kernelFunc: min as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}