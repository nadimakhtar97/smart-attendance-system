{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n  util.assert(0 <= iouThreshold && iouThreshold <= 1, () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(boxes.rank === 2, () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(boxes.shape[1] === 4, () => `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(scores.shape[0] === numBoxes, () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` + `but was ${scores.shape[0]}`);\n  util.assert(0 <= softNmsSigma && softNmsSigma <= 1, () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport { nonMaxSuppSanityCheck };","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,OAAO,KAAKA,IAAZ,MAAsB,SAAtB;;AAEA,SAASC,qBAAT,CACIC,KADJ,EACqBC,MADrB,EACuCC,aADvC,EAEIC,YAFJ,EAE0BC,cAF1B,EAEkDC,YAFlD,EAEuE;AAMrE,MAAIF,YAAY,IAAI,IAApB,EAA0B;AACxBA,gBAAY,GAAG,GAAf;AACD;;AACD,MAAIC,cAAc,IAAI,IAAtB,EAA4B;AAC1BA,kBAAc,GAAGE,MAAM,CAACC,iBAAxB;AACD;;AACD,MAAIF,YAAY,IAAI,IAApB,EAA0B;AACxBA,gBAAY,GAAG,GAAf;AACD;;AAED,QAAMG,QAAQ,GAAGR,KAAK,CAACS,KAAN,CAAY,CAAZ,CAAjB;AACAP,eAAa,GAAGQ,IAAI,CAACC,GAAL,CAAST,aAAT,EAAwBM,QAAxB,CAAhB;AAEAV,MAAI,CAACc,MAAL,CACI,KAAKT,YAAL,IAAqBA,YAAY,IAAI,CADzC,EAEI,MAAM,4CAA4CA,YAAY,GAFlE;AAGAL,MAAI,CAACc,MAAL,CACIZ,KAAK,CAACa,IAAN,KAAe,CADnB,EAEI,MAAM,+CAA+Cb,KAAK,CAACa,IAAI,GAFnE;AAGAf,MAAI,CAACc,MAAL,CACIZ,KAAK,CAACS,KAAN,CAAY,CAAZ,MAAmB,CADvB,EAEI,MACI,oDAAoDT,KAAK,CAACS,KAAN,CAAY,CAAZ,CAAc,EAH1E;AAIAX,MAAI,CAACc,MAAL,CAAYX,MAAM,CAACY,IAAP,KAAgB,CAA5B,EAA+B,MAAM,4BAArC;AACAf,MAAI,CAACc,MAAL,CACIX,MAAM,CAACQ,KAAP,CAAa,CAAb,MAAoBD,QADxB,EAEI,MAAM,sDAAsDA,QAAQ,IAA9D,GACF,WAAWP,MAAM,CAACQ,KAAP,CAAa,CAAb,CAAe,EAHlC;AAIAX,MAAI,CAACc,MAAL,CACI,KAAKP,YAAL,IAAqBA,YAAY,IAAI,CADzC,EAEI,MAAM,4CAA4CA,YAAY,GAFlE;AAGA,SAAO;AAACH,iBAAD;AAAgBC,gBAAhB;AAA8BC,kBAA9B;AAA8CC;AAA9C,GAAP;AACD;;AAED,SAAQN,qBAAR","names":["util","nonMaxSuppSanityCheck","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","Number","NEGATIVE_INFINITY","numBoxes","shape","Math","min","assert","rank"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/nonmax_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport * as util from '../util';\n\nfunction nonMaxSuppSanityCheck(\n    boxes: Tensor2D, scores: Tensor1D, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma?: number): {\n  maxOutputSize: number,\n  iouThreshold: number,\n  scoreThreshold: number,\n  softNmsSigma: number\n} {\n  if (iouThreshold == null) {\n    iouThreshold = 0.5;\n  }\n  if (scoreThreshold == null) {\n    scoreThreshold = Number.NEGATIVE_INFINITY;\n  }\n  if (softNmsSigma == null) {\n    softNmsSigma = 0.0;\n  }\n\n  const numBoxes = boxes.shape[0];\n  maxOutputSize = Math.min(maxOutputSize, numBoxes);\n\n  util.assert(\n      0 <= iouThreshold && iouThreshold <= 1,\n      () => `iouThreshold must be in [0, 1], but was '${iouThreshold}'`);\n  util.assert(\n      boxes.rank === 2,\n      () => `boxes must be a 2D tensor, but was of rank '${boxes.rank}'`);\n  util.assert(\n      boxes.shape[1] === 4,\n      () =>\n          `boxes must have 4 columns, but 2nd dimension was ${boxes.shape[1]}`);\n  util.assert(scores.rank === 1, () => 'scores must be a 1D tensor');\n  util.assert(\n      scores.shape[0] === numBoxes,\n      () => `scores has incompatible shape with boxes. Expected ${numBoxes}, ` +\n          `but was ${scores.shape[0]}`);\n  util.assert(\n      0 <= softNmsSigma && softNmsSigma <= 1,\n      () => `softNmsSigma must be in [0, 1], but was '${softNmsSigma}'`);\n  return {maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma};\n}\n\nexport {nonMaxSuppSanityCheck};\n"]},"metadata":{},"sourceType":"module"}