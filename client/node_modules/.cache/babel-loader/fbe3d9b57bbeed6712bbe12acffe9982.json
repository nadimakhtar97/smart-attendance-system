{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array) {\n  let counter = array.length;\n  let index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element with it\n\n    swap(array, counter, index);\n  }\n}\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function shuffleCombo( // tslint:disable-next-line:no-any\narray, // tslint:disable-next-line:no-any\narray2) {\n  if (array.length !== array2.length) {\n    throw new Error(`Array sizes must match to be shuffled together ` + `First array length was ${array.length}` + `Second array length was ${array2.length}`);\n  }\n\n  let counter = array.length;\n  let index = 0; // While there are elements in the array\n\n  while (counter > 0) {\n    // Pick a random index\n    index = Math.random() * counter | 0; // Decrease counter by 1\n\n    counter--; // And swap the last element of each array with it\n\n    swap(array, counter, index);\n    swap(array2, counter, index);\n  }\n}\n/** Clamps a value to a specified range. */\n\nexport function clamp(min, x, max) {\n  return Math.max(min, Math.min(x, max));\n}\nexport function nearestLargerEven(val) {\n  return val % 2 === 0 ? val : val + 1;\n}\nexport function swap(object, left, right) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\nexport function sum(arr) {\n  let sum = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n\n  return sum;\n}\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\n\nexport function randUniform(a, b) {\n  const r = Math.random();\n  return b * r + (1 - r) * a;\n}\n/** Returns the squared Euclidean distance between two vectors. */\n\nexport function distSquared(a, b) {\n  let result = 0;\n\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n\n  return result;\n}\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function assert(expr, msg) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\nexport function assertShapesMatch(shapeA, shapeB) {\n  let errorMessagePrefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  assert(arraysEqual(shapeA, shapeB), () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\nexport function assertNonNull(a) {\n  assert(a != null, () => `The input to the tensor constructor must be a non-null value.`);\n} // NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function flatten(arr) {\n  let result = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let skipTypedArray = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (result == null) {\n    result = [];\n  }\n\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr);\n  }\n\n  return result;\n}\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function sizeFromShape(shape) {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n\n  let size = shape[0];\n\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n\n  return size;\n}\nexport function isScalarShape(shape) {\n  return shape.length === 0;\n}\nexport function arraysEqual(n1, n2) {\n  if (n1 === n2) {\n    return true;\n  }\n\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function isInt(a) {\n  return a % 1 === 0;\n}\nexport function tanh(x) {\n  // tslint:disable-next-line:no-any\n  if (Math.tanh != null) {\n    // tslint:disable-next-line:no-any\n    return Math.tanh(x);\n  }\n\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\nexport function sizeToSquarishShape(size) {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n\nexport function createShuffledIndices(n) {\n  const shuffledIndices = new Uint32Array(n);\n\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\nexport function rightPad(a, size) {\n  if (size <= a.length) {\n    return a;\n  }\n\n  return a + ' '.repeat(size - a.length);\n}\nexport function repeatedTry(checkFn) {\n  let delayFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : counter => 0;\n  let maxCounter = arguments.length > 2 ? arguments[2] : undefined;\n  return new Promise((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\n\nexport function inferFromImplicitShape(shape, size) {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(`Shapes can only have 1 implicit size. ` + `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(`Cannot infer the missing size in [${shape}] when ` + `there are 0 elements`);\n  }\n\n  if (size % shapeProd !== 0) {\n    throw Error(`The implicit shape can't be a fractional number. ` + `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\nexport function parseAxisParam(axis, shape) {\n  const rank = shape.length; // Normalize input\n\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis); // Check for valid range\n\n  assert(axis.every(ax => ax >= -rank && ax < rank), () => `All values in axis param must be in range [-${rank}, ${rank}) but ` + `got axis ${axis}`); // Check for only integers\n\n  assert(axis.every(ax => isInt(ax)), () => `All values in axis param must be integers but ` + `got axis ${axis}`); // Handle negative axis.\n\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n/** Reduces the shape by removing all dimensions of shape 1. */\n\nexport function squeezeShape(shape, axis) {\n  const newShape = [];\n  const keptDims = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = axis == null || isEmptyArray ? null : parseAxisParam(axis, shape).sort();\n  let j = 0;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(`Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n\n  return {\n    newShape,\n    keptDims\n  };\n}\nexport function getTypedArrayFromDType(dtype, size) {\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  return values;\n}\nexport function getArrayFromDType(dtype, size) {\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  return values;\n}\nexport function checkConversionForErrors(vals, dtype) {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n/** Returns true if the dtype is valid. */\n\nexport function isValidDtype(dtype) {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' || dtype === 'int32' || dtype === 'string';\n}\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\n\nexport function hasEncodingLoss(oldType, newType) {\n  if (newType === 'complex64') {\n    return false;\n  }\n\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n\n  return true;\n}\nexport function isTypedArray(a) {\n  return a instanceof Float32Array || a instanceof Int32Array || a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\nexport function bytesPerElement(dtype) {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\n\nexport function bytesFromStringArray(arr) {\n  if (arr == null) {\n    return 0;\n  }\n\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n/** Returns true if the value is a string. */\n\nexport function isString(value) {\n  return typeof value === 'string' || value instanceof String;\n}\nexport function isBoolean(value) {\n  return typeof value === 'boolean';\n}\nexport function isNumber(value) {\n  return typeof value === 'number';\n}\nexport function inferDtype(values) {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array || values instanceof Uint8Array || values instanceof Uint8ClampedArray) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n\n  return 'float32';\n}\nexport function isFunction(f) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\nexport function nearestDivisor(size, start) {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n\n  return size;\n}\nexport function computeStrides(shape) {\n  const rank = shape.length;\n\n  if (rank < 2) {\n    return [];\n  } // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n\n\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n\n  return strides;\n}\n\nfunction createNestedArray(offset, shape, a) {\n  let isComplex = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const ret = new Array();\n\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n\n  return ret;\n} // Provide a nested array of TypedArray in given shape.\n\n\nexport function toNestedArray(shape, a) {\n  let isComplex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${isComplex ? ' for a complex tensor' : ''}.`);\n  }\n\n  return createNestedArray(0, shape, a, isComplex);\n}\nexport function makeOnesTypedArray(size, dtype) {\n  const array = makeZerosTypedArray(size, dtype);\n\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n\n  return array;\n}\nexport function makeZerosTypedArray(size, dtype) {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size);\n  } else if (dtype === 'int32') {\n    return new Int32Array(size);\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\n\nexport function makeZerosNestedTypedArray(shape, dtype) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\nexport function assertNonNegativeIntegerDimensions(shape) {\n  shape.forEach(dimSize => {\n    assert(Number.isInteger(dimSize) && dimSize >= 0, () => `Tensor must have a shape comprised of positive integers but got ` + `shape [${shape}].`);\n  });\n}\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\n\nexport function locToIndex(locs, rank, strides) {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n\n  let index = locs[locs.length - 1];\n\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n\n  return index;\n}\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\n\nexport function indexToLoc(index, rank, strides) {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n\n  const locs = new Array(rank);\n\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n\n  locs[locs.length - 1] = index;\n  return locs;\n}\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\n\nexport function isPromise(object) {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n  //  the async calls, so it is possible the obj (patched) is comparing to a\n  //  pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}","map":{"version":3,"mappings":"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","names":["shuffle","array","counter","length","index","Math","random","swap","shuffleCombo","array2","Error","clamp","min","x","max","nearestLargerEven","val","object","left","right","temp","sum","arr","i","randUniform","a","b","r","distSquared","result","diff","Number","assert","expr","msg","assertShapesMatch","shapeA","shapeB","errorMessagePrefix","arraysEqual","assertNonNull","flatten","skipTypedArray","Array","isArray","isTypedArray","push","sizeFromShape","shape","size","isScalarShape","n1","n2","isInt","tanh","Infinity","e2x","exp","sizeToSquarishShape","width","ceil","sqrt","createShuffledIndices","n","shuffledIndices","Uint32Array","rightPad","repeat","repeatedTry","checkFn","delayFn","maxCounter","Promise","resolve","reject","tryCount","tryFn","nextBackoff","setTimeout","inferFromImplicitShape","shapeProd","implicitIdx","newShape","slice","parseAxisParam","axis","rank","map","s","concat","every","ax","squeezeShape","keptDims","isEmptyArray","axes","sort","j","getTypedArrayFromDType","dtype","values","Float32Array","Int32Array","Uint8Array","getArrayFromDType","checkConversionForErrors","vals","num","isNaN","isFinite","isValidDtype","hasEncodingLoss","oldType","newType","Uint8ClampedArray","bytesPerElement","bytesFromStringArray","bytes","forEach","isString","value","String","isBoolean","isNumber","inferDtype","isFunction","f","constructor","call","apply","nearestDivisor","start","computeStrides","strides","createNestedArray","offset","isComplex","ret","d","rest","len","reduce","acc","c","toNestedArray","makeOnesTypedArray","makeZerosTypedArray","makeZerosNestedTypedArray","prev","curr","assertNonNegativeIntegerDimensions","dimSize","isInteger","locToIndex","locs","indexToLoc","floor","isPromise","then"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/util_base.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataTypeMap, FlatVector, NumericDataType, RecursiveArray, TensorLike, TypedArray} from './types';\n\n/**\n * Shuffles the array in-place using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1, 2, 3, 4, 5];\n * tf.util.shuffle(a);\n * console.log(a);\n * ```\n *\n * @param array The array to shuffle in-place.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\n// tslint:disable-next-line:no-any\nexport function shuffle(array: any[]|Uint32Array|Int32Array|\n                        Float32Array): void {\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element with it\n    swap(array, counter, index);\n  }\n}\n\n/**\n * Shuffles two arrays in-place the same way using Fisher-Yates algorithm.\n *\n * ```js\n * const a = [1,2,3,4,5];\n * const b = [11,22,33,44,55];\n * tf.util.shuffleCombo(a, b);\n * console.log(a, b);\n * ```\n *\n * @param array The first array to shuffle in-place.\n * @param array2 The second array to shuffle in-place with the same permutation\n *     as the first array.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function shuffleCombo(\n    // tslint:disable-next-line:no-any\n    array: any[]|Uint32Array|Int32Array|Float32Array,\n    // tslint:disable-next-line:no-any\n    array2: any[]|Uint32Array|Int32Array|Float32Array): void {\n  if (array.length !== array2.length) {\n    throw new Error(\n        `Array sizes must match to be shuffled together ` +\n        `First array length was ${array.length}` +\n        `Second array length was ${array2.length}`);\n  }\n  let counter = array.length;\n  let index = 0;\n  // While there are elements in the array\n  while (counter > 0) {\n    // Pick a random index\n    index = (Math.random() * counter) | 0;\n    // Decrease counter by 1\n    counter--;\n    // And swap the last element of each array with it\n    swap(array, counter, index);\n    swap(array2, counter, index);\n  }\n}\n\n/** Clamps a value to a specified range. */\nexport function clamp(min: number, x: number, max: number): number {\n  return Math.max(min, Math.min(x, max));\n}\n\nexport function nearestLargerEven(val: number): number {\n  return val % 2 === 0 ? val : val + 1;\n}\n\nexport function swap<T>(\n    object: {[index: number]: T}, left: number, right: number) {\n  const temp = object[left];\n  object[left] = object[right];\n  object[right] = temp;\n}\n\nexport function sum(arr: number[]): number {\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i];\n  }\n  return sum;\n}\n\n/**\n * Returns a sample from a uniform [a, b) distribution.\n *\n * @param a The minimum support (inclusive).\n * @param b The maximum support (exclusive).\n * @return A pseudorandom number on the half-open interval [a,b).\n */\nexport function randUniform(a: number, b: number) {\n  const r = Math.random();\n  return (b * r) + (1 - r) * a;\n}\n\n/** Returns the squared Euclidean distance between two vectors. */\nexport function distSquared(a: FlatVector, b: FlatVector): number {\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    const diff = Number(a[i]) - Number(b[i]);\n    result += diff * diff;\n  }\n  return result;\n}\n\n/**\n * Asserts that the expression is true. Otherwise throws an error with the\n * provided message.\n *\n * ```js\n * const x = 2;\n * tf.util.assert(x === 2, 'x is not 2');\n * ```\n *\n * @param expr The expression to assert (as a boolean).\n * @param msg A function that returns the message to report when throwing an\n *     error. We use a function for performance reasons.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function assert(expr: boolean, msg: () => string) {\n  if (!expr) {\n    throw new Error(typeof msg === 'string' ? msg : msg());\n  }\n}\n\nexport function assertShapesMatch(\n    shapeA: number[], shapeB: number[], errorMessagePrefix = ''): void {\n  assert(\n      arraysEqual(shapeA, shapeB),\n      () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n}\n\nexport function assertNonNull(a: TensorLike): void {\n  assert(\n      a != null,\n      () => `The input to the tensor constructor must be a non-null value.`);\n}\n\n// NOTE: We explicitly type out what T extends instead of any so that\n// util.flatten on a nested array of number doesn't try to infer T as a\n// number[][], causing us to explicitly type util.flatten<number>().\n/**\n *  Flattens an arbitrarily nested array.\n *\n * ```js\n * const a = [[1, 2], [3, 4], [5, [6, [7]]]];\n * const flat = tf.util.flatten(a);\n * console.log(flat);\n * ```\n *\n *  @param arr The nested array to flatten.\n *  @param result The destination array which holds the elements.\n *  @param skipTypedArray If true, avoids flattening the typed arrays. Defaults\n *      to false.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function\nflatten<T extends number|boolean|string|Promise<number>|TypedArray>(\n    arr: T|RecursiveArray<T>, result: T[] = [], skipTypedArray = false): T[] {\n  if (result == null) {\n    result = [];\n  }\n  if (Array.isArray(arr) || isTypedArray(arr) && !skipTypedArray) {\n    for (let i = 0; i < arr.length; ++i) {\n      flatten(arr[i], result, skipTypedArray);\n    }\n  } else {\n    result.push(arr as T);\n  }\n  return result;\n}\n\n/**\n * Returns the size (number of elements) of the tensor given its shape.\n *\n * ```js\n * const shape = [3, 4, 2];\n * const size = tf.util.sizeFromShape(shape);\n * console.log(size);\n * ```\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function sizeFromShape(shape: number[]): number {\n  if (shape.length === 0) {\n    // Scalar.\n    return 1;\n  }\n  let size = shape[0];\n  for (let i = 1; i < shape.length; i++) {\n    size *= shape[i];\n  }\n  return size;\n}\n\nexport function isScalarShape(shape: number[]): boolean {\n  return shape.length === 0;\n}\n\nexport function arraysEqual(n1: FlatVector, n2: FlatVector) {\n  if (n1 === n2) {\n    return true;\n  }\n  if (n1 == null || n2 == null) {\n    return false;\n  }\n\n  if (n1.length !== n2.length) {\n    return false;\n  }\n  for (let i = 0; i < n1.length; i++) {\n    if (n1[i] !== n2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function isInt(a: number): boolean {\n  return a % 1 === 0;\n}\n\nexport function tanh(x: number): number {\n  // tslint:disable-next-line:no-any\n  if ((Math as any).tanh != null) {\n    // tslint:disable-next-line:no-any\n    return (Math as any).tanh(x);\n  }\n  if (x === Infinity) {\n    return 1;\n  } else if (x === -Infinity) {\n    return -1;\n  } else {\n    const e2x = Math.exp(2 * x);\n    return (e2x - 1) / (e2x + 1);\n  }\n}\n\nexport function sizeToSquarishShape(size: number): [number, number] {\n  const width = Math.ceil(Math.sqrt(size));\n  return [width, Math.ceil(size / width)];\n}\n\n/**\n * Creates a new array with randomized indicies to a given quantity.\n *\n * ```js\n * const randomTen = tf.util.createShuffledIndices(10);\n * console.log(randomTen);\n * ```\n *\n * @param number Quantity of how many shuffled indicies to create.\n *\n * @doc {heading: 'Util', namespace: 'util'}\n */\nexport function createShuffledIndices(n: number): Uint32Array {\n  const shuffledIndices = new Uint32Array(n);\n  for (let i = 0; i < n; ++i) {\n    shuffledIndices[i] = i;\n  }\n  shuffle(shuffledIndices);\n  return shuffledIndices;\n}\n\nexport function rightPad(a: string, size: number): string {\n  if (size <= a.length) {\n    return a;\n  }\n  return a + ' '.repeat(size - a.length);\n}\n\nexport function repeatedTry(\n    checkFn: () => boolean, delayFn = (counter: number) => 0,\n    maxCounter?: number): Promise<void> {\n  return new Promise<void>((resolve, reject) => {\n    let tryCount = 0;\n\n    const tryFn = () => {\n      if (checkFn()) {\n        resolve();\n        return;\n      }\n\n      tryCount++;\n\n      const nextBackoff = delayFn(tryCount);\n\n      if (maxCounter != null && tryCount >= maxCounter) {\n        reject();\n        return;\n      }\n      setTimeout(tryFn, nextBackoff);\n    };\n\n    tryFn();\n  });\n}\n\n/**\n * Given the full size of the array and a shape that may contain -1 as the\n * implicit dimension, returns the inferred shape where -1 is replaced.\n * E.g. For shape=[2, -1, 3] and size=24, it will return [2, 4, 3].\n *\n * @param shape The shape, which may contain -1 in some dimension.\n * @param size The full size (number of elements) of the array.\n * @return The inferred shape where -1 is replaced with the inferred size.\n */\nexport function inferFromImplicitShape(\n    shape: number[], size: number): number[] {\n  let shapeProd = 1;\n  let implicitIdx = -1;\n\n  for (let i = 0; i < shape.length; ++i) {\n    if (shape[i] >= 0) {\n      shapeProd *= shape[i];\n    } else if (shape[i] === -1) {\n      if (implicitIdx !== -1) {\n        throw Error(\n            `Shapes can only have 1 implicit size. ` +\n            `Found -1 at dim ${implicitIdx} and dim ${i}`);\n      }\n      implicitIdx = i;\n    } else if (shape[i] < 0) {\n      throw Error(`Shapes can not be < 0. Found ${shape[i]} at dim ${i}`);\n    }\n  }\n\n  if (implicitIdx === -1) {\n    if (size > 0 && size !== shapeProd) {\n      throw Error(`Size(${size}) must match the product of shape ${shape}`);\n    }\n    return shape;\n  }\n\n  if (shapeProd === 0) {\n    throw Error(\n        `Cannot infer the missing size in [${shape}] when ` +\n        `there are 0 elements`);\n  }\n  if (size % shapeProd !== 0) {\n    throw Error(\n        `The implicit shape can't be a fractional number. ` +\n        `Got ${size} / ${shapeProd}`);\n  }\n\n  const newShape = shape.slice();\n  newShape[implicitIdx] = size / shapeProd;\n  return newShape;\n}\n\nexport function parseAxisParam(\n    axis: number|number[], shape: number[]): number[] {\n  const rank = shape.length;\n\n  // Normalize input\n  axis = axis == null ? shape.map((s, i) => i) : [].concat(axis);\n\n  // Check for valid range\n  assert(\n      axis.every(ax => ax >= -rank && ax < rank),\n      () =>\n          `All values in axis param must be in range [-${rank}, ${rank}) but ` +\n          `got axis ${axis}`);\n\n  // Check for only integers\n  assert(\n      axis.every(ax => isInt(ax)),\n      () => `All values in axis param must be integers but ` +\n          `got axis ${axis}`);\n\n  // Handle negative axis.\n  return axis.map(a => a < 0 ? rank + a : a);\n}\n\n/** Reduces the shape by removing all dimensions of shape 1. */\nexport function squeezeShape(shape: number[], axis?: number[]):\n    {newShape: number[], keptDims: number[]} {\n  const newShape: number[] = [];\n  const keptDims: number[] = [];\n  const isEmptyArray = axis != null && Array.isArray(axis) && axis.length === 0;\n  const axes = (axis == null || isEmptyArray) ?\n      null :\n      parseAxisParam(axis, shape).sort();\n  let j = 0;\n  for (let i = 0; i < shape.length; ++i) {\n    if (axes != null) {\n      if (axes[j] === i && shape[i] !== 1) {\n        throw new Error(\n            `Can't squeeze axis ${i} since its dim '${shape[i]}' is not 1`);\n      }\n      if ((axes[j] == null || axes[j] > i) && shape[i] === 1) {\n        newShape.push(shape[i]);\n        keptDims.push(i);\n      }\n      if (axes[j] <= i) {\n        j++;\n      }\n    }\n    if (shape[i] !== 1) {\n      newShape.push(shape[i]);\n      keptDims.push(i);\n    }\n  }\n  return {newShape, keptDims};\n}\n\nexport function getTypedArrayFromDType<D extends NumericDataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function getArrayFromDType<D extends DataType>(\n    dtype: D, size: number): DataTypeMap[D] {\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else if (dtype === 'string') {\n    values = new Array<'string'>(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  return values as DataTypeMap[D];\n}\n\nexport function checkConversionForErrors<D extends DataType>(\n    vals: DataTypeMap[D]|number[], dtype: D): void {\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      throw Error(`A tensor of type ${dtype} being uploaded contains ${num}.`);\n    }\n  }\n}\n\n/** Returns true if the dtype is valid. */\nexport function isValidDtype(dtype: DataType): boolean {\n  return dtype === 'bool' || dtype === 'complex64' || dtype === 'float32' ||\n      dtype === 'int32' || dtype === 'string';\n}\n\n/**\n * Returns true if the new type can't encode the old type without loss of\n * precision.\n */\nexport function hasEncodingLoss(oldType: DataType, newType: DataType): boolean {\n  if (newType === 'complex64') {\n    return false;\n  }\n  if (newType === 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'int32' && oldType !== 'float32' && oldType !== 'complex64') {\n    return false;\n  }\n  if (newType === 'bool' && oldType === 'bool') {\n    return false;\n  }\n  return true;\n}\n\nexport function isTypedArray(a: {}):\n  a is Float32Array|Int32Array|Uint8Array|Uint8ClampedArray {\n  return a instanceof Float32Array || a instanceof Int32Array ||\n      a instanceof Uint8Array || a instanceof Uint8ClampedArray;\n}\n\nexport function bytesPerElement(dtype: DataType): number {\n  if (dtype === 'float32' || dtype === 'int32') {\n    return 4;\n  } else if (dtype === 'complex64') {\n    return 8;\n  } else if (dtype === 'bool') {\n    return 1;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n\n/**\n * Returns the approximate number of bytes allocated in the string array - 2\n * bytes per character. Computing the exact bytes for a native string in JS is\n * not possible since it depends on the encoding of the html page that serves\n * the website.\n */\nexport function bytesFromStringArray(arr: Uint8Array[]): number {\n  if (arr == null) {\n    return 0;\n  }\n  let bytes = 0;\n  arr.forEach(x => bytes += x.length);\n  return bytes;\n}\n\n/** Returns true if the value is a string. */\nexport function isString(value: {}): value is string {\n  return typeof value === 'string' || value instanceof String;\n}\n\nexport function isBoolean(value: {}): boolean {\n  return typeof value === 'boolean';\n}\n\nexport function isNumber(value: {}): boolean {\n  return typeof value === 'number';\n}\n\nexport function inferDtype(values: TensorLike): DataType {\n  if (Array.isArray(values)) {\n    return inferDtype(values[0]);\n  }\n  if (values instanceof Float32Array) {\n    return 'float32';\n  } else if (values instanceof Int32Array\n             || values instanceof Uint8Array\n             || values instanceof Uint8ClampedArray) {\n    return 'int32';\n  } else if (isNumber(values)) {\n    return 'float32';\n  } else if (isString(values)) {\n    return 'string';\n  } else if (isBoolean(values)) {\n    return 'bool';\n  }\n  return 'float32';\n}\n\nexport function isFunction(f: Function) {\n  return !!(f && f.constructor && f.call && f.apply);\n}\n\nexport function nearestDivisor(size: number, start: number): number {\n  for (let i = start; i < size; ++i) {\n    if (size % i === 0) {\n      return i;\n    }\n  }\n  return size;\n}\n\nexport function computeStrides(shape: number[]): number[] {\n  const rank = shape.length;\n  if (rank < 2) {\n    return [];\n  }\n\n  // Last dimension has implicit stride of 1, thus having D-1 (instead of D)\n  // strides.\n  const strides = new Array(rank - 1);\n  strides[rank - 2] = shape[rank - 1];\n  for (let i = rank - 3; i >= 0; --i) {\n    strides[i] = strides[i + 1] * shape[i + 1];\n  }\n  return strides;\n}\n\nfunction createNestedArray(\n    offset: number, shape: number[], a: TypedArray, isComplex = false) {\n  const ret = new Array();\n  if (shape.length === 1) {\n    const d = shape[0] * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = a[offset + i];\n    }\n  } else {\n    const d = shape[0];\n    const rest = shape.slice(1);\n    const len = rest.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n    for (let i = 0; i < d; i++) {\n      ret[i] = createNestedArray(offset + i * len, rest, a, isComplex);\n    }\n  }\n  return ret;\n}\n\n// Provide a nested array of TypedArray in given shape.\nexport function toNestedArray(\n    shape: number[], a: TypedArray, isComplex = false) {\n  if (shape.length === 0) {\n    // Scalar type should return a single number.\n    return a[0];\n  }\n  const size = shape.reduce((acc, c) => acc * c) * (isComplex ? 2 : 1);\n  if (size === 0) {\n    // A tensor with shape zero should be turned into empty list.\n    return [];\n  }\n  if (size !== a.length) {\n    throw new Error(`[${shape}] does not match the input size ${a.length}${\n        isComplex ? ' for a complex tensor' : ''}.`);\n  }\n\n  return createNestedArray(0, shape, a, isComplex);\n}\n\nexport function makeOnesTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  const array = makeZerosTypedArray(size, dtype);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = 1;\n  }\n  return array;\n}\n\nexport function makeZerosTypedArray<D extends DataType>(\n    size: number, dtype: D): DataTypeMap[D] {\n  if (dtype == null || dtype === 'float32' || dtype === 'complex64') {\n    return new Float32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'int32') {\n    return new Int32Array(size) as DataTypeMap[D];\n  } else if (dtype === 'bool') {\n    return new Uint8Array(size) as DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\n/**\n * Make nested `TypedArray` filled with zeros.\n * @param shape The shape information for the nested array.\n * @param dtype dtype of the array element.\n */\nexport function makeZerosNestedTypedArray<D extends DataType>(\n    shape: number[], dtype: D) {\n  const size = shape.reduce((prev, curr) => prev * curr, 1);\n  if (dtype == null || dtype === 'float32') {\n    return toNestedArray(shape, new Float32Array(size));\n  } else if (dtype === 'int32') {\n    return toNestedArray(shape, new Int32Array(size));\n  } else if (dtype === 'bool') {\n    return toNestedArray(shape, new Uint8Array(size));\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n}\n\nexport function assertNonNegativeIntegerDimensions(shape: number[]) {\n  shape.forEach(dimSize => {\n    assert(\n        Number.isInteger(dimSize) && dimSize >= 0,\n        () =>\n            `Tensor must have a shape comprised of positive integers but got ` +\n            `shape [${shape}].`);\n  });\n}\n\n/**\n * Computes flat index for a given location (multidimentionsal index) in a\n * Tensor/multidimensional array.\n *\n * @param locs Location in the tensor.\n * @param rank Rank of the tensor.\n * @param strides Tensor strides.\n */\nexport function locToIndex(\n    locs: number[], rank: number, strides: number[]): number {\n  if (rank === 0) {\n    return 0;\n  } else if (rank === 1) {\n    return locs[0];\n  }\n  let index = locs[locs.length - 1];\n  for (let i = 0; i < locs.length - 1; ++i) {\n    index += strides[i] * locs[i];\n  }\n  return index;\n}\n\n/**\n * Computes the location (multidimensional index) in a tensor/multidimentional\n * array for a given flat index.\n *\n * @param index Index in flat array.\n * @param rank Rank of tensor.\n * @param strides Strides of tensor.\n */\nexport function indexToLoc(\n    index: number, rank: number, strides: number[]): number[] {\n  if (rank === 0) {\n    return [];\n  } else if (rank === 1) {\n    return [index];\n  }\n  const locs: number[] = new Array(rank);\n  for (let i = 0; i < locs.length - 1; ++i) {\n    locs[i] = Math.floor(index / strides[i]);\n    index -= locs[i] * strides[i];\n  }\n  locs[locs.length - 1] = index;\n  return locs;\n}\n\n/**\n * This method asserts whether an object is a Promise instance.\n * @param object\n */\n// tslint:disable-next-line: no-any\nexport function isPromise(object: any): object is Promise<unknown> {\n  //  We chose to not use 'obj instanceOf Promise' for two reasons:\n  //  1. It only reliably works for es6 Promise, not other Promise\n  //  implementations.\n  //  2. It doesn't work with framework that uses zone.js. zone.js monkey patch\n  //  the async calls, so it is possible the obj (patched) is comparing to a\n  //  pre-patched Promise.\n  return object && object.then && typeof object.then === 'function';\n}\n"]},"metadata":{},"sourceType":"module"}