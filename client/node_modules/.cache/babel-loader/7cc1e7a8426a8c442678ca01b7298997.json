{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { variableGrads } from '@tensorflow/tfjs-core';\nimport { getNextUniqueTensorId } from './backend/state';\nimport { getScopedTensorName, getUniqueTensorName } from './common';\nimport { NotImplementedError } from './errors';\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n/**\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\n * dtype and shape, but its value is mutable.  The value is itself represented\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\n * the `write()` method.\n */\n\nexport class LayerVariable {\n  /**\n   * Construct Variable from a `tf.Tensor`.\n   *\n   * If not explicitly named, the Variable will be given a name with the\n   * prefix 'Variable'. Variable names are unique. In the case of name\n   * collision, suffixies '_<num>' will be added to the name.\n   *\n   * @param val Initial value of the Variable.\n   * @param name Name of the variable. If `null` or `undefined` is provided, it\n   *   will default a name with the prefix 'Variable'.\n   * @param constraint Optional, projection function to be applied to the\n   * variable after optimize updates\n   * @throws ValueError if `name` is `null` or `undefined`.\n   */\n  constructor(val) {\n    let dtype = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'float32';\n    let name = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_VARIABLE_NAME_PREFIX;\n    let trainable = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    let constraint = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n    this.dtype = dtype == null ? 'float32' : dtype;\n    this.shape = val.shape;\n    this.id = getNextUniqueTensorId();\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = getScopedTensorName(name);\n    this.name = getUniqueTensorName(this.originalName);\n    this.trainable_ = trainable;\n    this.constraint = constraint;\n    this.val = tfc.variable(val, this.trainable_, this.name, this.dtype);\n  }\n  /**\n   * Get a snapshot of the Variable's value.\n   *\n   * The returned value is a snapshot of the Variable's value at the time of\n   * the invocation. Future mutations in the value of the tensor will only\n   * be reflected by future calls to this method.\n   */\n\n\n  read() {\n    this.assertNotDisposed();\n    return this.val;\n  }\n  /**\n   * Update the value of the Variable.\n   *\n   * @param newVal: The new value to update to. Must be consistent with the\n   *   dtype and shape of the Variable.\n   * @return This Variable.\n   */\n\n\n  write(newVal) {\n    // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n    this.assertNotDisposed();\n    checkShapesMatch(this.val, newVal); // Skip updating if this is the exact same tensor.\n\n    if (this.val.id !== newVal.id) {\n      this.val.assign(newVal);\n\n      if (this.constraint != null) {\n        this.val.assign(this.constraint.apply(this.val));\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Dispose this LayersVariable instance from memory.\n   */\n\n\n  dispose() {\n    this.assertNotDisposed();\n    this.val.dispose();\n  }\n\n  assertNotDisposed() {\n    if (this.val.isDisposed) {\n      throw new Error(`LayersVariable ${this.name} is already disposed.`);\n    }\n  }\n\n  get trainable() {\n    return this.trainable_;\n  }\n\n  set trainable(trainable) {\n    this.trainable_ = trainable;\n    this.val.trainable = trainable;\n  }\n\n}\n\nfunction checkShapesMatch(x, y) {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' + JSON.stringify(y.shape));\n  }\n}\n/**\n * Create a Variable.\n * @param x The initial value of the `Variable`.\n * @param dtype optional, the type of the variable.\n * @param name optional, the name of the variable, default provided by\n * Variable.\n * @param constraint optional, a constraint to be applied after every update.\n * @return The newly instantiated `Variable`.\n */\n\n\nexport function variable(x, dtype, name, constraint) {\n  return new LayerVariable(x, dtype, name, true, constraint);\n}\n/**\n * Instantiates an all-zeros Variable and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-zero Variable.\n */\n\nexport function zerosVariable(shape, dtype, name) {\n  // TODO(cais): Implement logic for dtype.\n  return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n/**\n * Instantiates an all-zeros tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\n\nexport function zerosLike(x, dtype, name) {\n  return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n/**\n * Instantiates an all-ones tensor and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-ones Variable.\n */\n\nexport function onesVariable(shape, dtype, name) {\n  // TODO(cais): Implement logic for dtype.\n  const allocated = tfc.ones(shape);\n  return new LayerVariable(allocated, dtype, name);\n}\n/**\n * Instantiates an all-ones tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\n\nexport function onesLike(x, dtype, name) {\n  const allocated = tfc.onesLike(x);\n  return new LayerVariable(allocated, dtype, name);\n}\n/**\n * Instantiate an identity matrix and returns it, as a Variable\n *\n * @param size Number of rows/columns.\n * @param dtype Data type of returned Variable.\n * @param name Name of returned Variable.\n * @return A Variable, an identity matrix.\n */\n\nexport function eyeVariable(size, dtype, name) {\n  return new LayerVariable(tfc.eye(size), dtype, name);\n}\n/**\n * Get a Variable with uniform distribution of values.\n * @param shape Shape of the tensor.\n * @param minval Lower bound of the uniform distribution.\n * @param maxval Upper bound of the uniform distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The uniform-random Variable.\n */\n\nexport function randomUniformVariable(shape, minval, maxval, dtype, seed) {\n  let name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'randomUniform';\n  return new LayerVariable(tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n/**\n * Get a Variable with truncated-normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\n\nexport function truncatedNormalVariable(shape) {\n  let mean = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n  let stddev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n  let dtype = arguments.length > 3 ? arguments[3] : undefined;\n  let seed = arguments.length > 4 ? arguments[4] : undefined;\n  let name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'truncatedNormal';\n  // TODO(cais): Implement logic for dtype and seed once they are supported\n  // by deeplearn.js.\n  dtype = dtype || 'float32';\n\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n  }\n\n  return new LayerVariable(tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Get a Variable with normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\n\nexport function randomNormalVariable(shape) {\n  let mean = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.0;\n  let stddev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1.0;\n  let dtype = arguments.length > 3 ? arguments[3] : undefined;\n  let seed = arguments.length > 4 ? arguments[4] : undefined;\n  let name = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 'randomNormal';\n  dtype = dtype || 'float32';\n\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(`randomNormalVariable does not support dType ${dtype}.`);\n  }\n\n  return new LayerVariable(tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Update the value of a Variable.\n * @param x The Variable to be updated.\n * @param xNew The new value to update to.\n * @return The Variable updated.\n */\n\nexport function update(x, xNew) {\n  return x.write(xNew);\n}\n/**\n * Update the value of a Variable by adding an increment.\n * @param x The Variable to be updated.\n * @param increment The incrment to add to `x`.\n * @return The Variable updated.\n */\n\nexport function updateAdd(x, increment) {\n  return x.write(tfc.add(x.read(), increment));\n}\n/**\n * Update the value of a Variable by subtracting a decrement.\n * @param x The Variable to be updated.\n * @param decrement The decrement to subtract from `x`.\n * @return The Variable updated.\n */\n\nexport function updateSub(x, decrement) {\n  return x.write(tfc.sub(x.read(), decrement));\n}\n/**\n * Get the values of an array of Variables.\n *\n * @param tensors An `Array` of `Variable`s to get the values of.\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\n */\n\nexport function batchGetValue(xs) {\n  return xs.map(x => x.read());\n}\n/**\n * Update the value of multiple Variables at once.\n *\n * @param variablesAndValues An `Array`, each element is of type\n *   [Variable, Tensor]. The first item is the\n *   `Variable` of which the value is to be updated. The second item\n *   carries the new value.\n */\n\nexport function batchSetValue(variablesAndValues) {\n  variablesAndValues.forEach(variableAndValue => {\n    const variable = variableAndValue[0];\n    variable.write(variableAndValue[1]);\n  });\n}\n/**\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\n * @param lossFn A function which returns a Scalar to be used as the function\n *   value (i.e., numerator) for differentiation.\n * @param variables List of variables to be used as the independent variables\n *   (i.e., denominator) for differentiation.\n * @returns An Array of gradients tensors.\n */\n\nexport function gradients(lossFn, variables) {\n  // TODO(cais): The return type signature can be simplified if deeplearn makes\n  //   the corresponding type public.\n  const variableList = variables.map(variable => variable.read());\n  const valudAndGrads = variableGrads(lossFn, variableList);\n  return variables.map(variable => valudAndGrads.grads[variable.name]);\n}","map":{"version":3,"mappings":"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","names":["tfc","variableGrads","getNextUniqueTensorId","getScopedTensorName","getUniqueTensorName","NotImplementedError","DEFAULT_VARIABLE_NAME_PREFIX","LayerVariable","constructor","val","dtype","name","trainable","constraint","shape","id","originalName","trainable_","variable","read","assertNotDisposed","write","newVal","checkShapesMatch","assign","apply","dispose","isDisposed","Error","x","y","toString","JSON","stringify","zerosVariable","zeros","zerosLike","onesVariable","allocated","ones","onesLike","eyeVariable","size","eye","randomUniformVariable","minval","maxval","seed","randomUniform","truncatedNormalVariable","mean","stddev","truncatedNormal","randomNormalVariable","randomNormal","update","xNew","updateAdd","increment","add","updateSub","decrement","sub","batchGetValue","xs","map","batchSetValue","variablesAndValues","forEach","variableAndValue","gradients","lossFn","variables","variableList","valudAndGrads","grads"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/variables.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {DataType, Tensor, variableGrads} from '@tensorflow/tfjs-core';\n\nimport {getNextUniqueTensorId} from './backend/state';\nimport {getScopedTensorName, getUniqueTensorName} from './common';\nimport {Constraint} from './constraints';\nimport {NotImplementedError} from './errors';\nimport {Shape} from './keras_format/common';\nimport {HasShape} from './types';\n\nconst DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n\n/**\n * A `tf.layers.LayerVariable` is similar to a `tf.Tensor` in that it has a\n * dtype and shape, but its value is mutable.  The value is itself represented\n * as a`tf.Tensor`, and can be read with the `read()` method and updated with\n * the `write()` method.\n */\nexport class LayerVariable {\n  readonly dtype: DataType;\n  readonly shape: Shape;\n\n  readonly id: number;\n  // The fully scoped name of this Variable, including a unique suffix if needed\n  readonly name: string;\n  // The originally requested fully scoped name of this Variable, not including\n  // any unique suffix.  This may be needed when restoring weights because this\n  // original name is used as a key.\n  readonly originalName: string;\n  private trainable_: boolean;\n\n  protected readonly val: tfc.Variable;\n  readonly constraint: Constraint;\n  /**\n   * Construct Variable from a `tf.Tensor`.\n   *\n   * If not explicitly named, the Variable will be given a name with the\n   * prefix 'Variable'. Variable names are unique. In the case of name\n   * collision, suffixies '_<num>' will be added to the name.\n   *\n   * @param val Initial value of the Variable.\n   * @param name Name of the variable. If `null` or `undefined` is provided, it\n   *   will default a name with the prefix 'Variable'.\n   * @param constraint Optional, projection function to be applied to the\n   * variable after optimize updates\n   * @throws ValueError if `name` is `null` or `undefined`.\n   */\n  constructor(\n      val: Tensor, dtype: DataType = 'float32',\n      name = DEFAULT_VARIABLE_NAME_PREFIX, trainable = true,\n      constraint: Constraint = null) {\n    this.dtype = dtype == null ? 'float32' : dtype;\n    this.shape = val.shape;\n    this.id = getNextUniqueTensorId();\n\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = getScopedTensorName(name);\n    this.name = getUniqueTensorName(this.originalName);\n\n    this.trainable_ = trainable;\n    this.constraint = constraint;\n\n    this.val = tfc.variable(val, this.trainable_, this.name, this.dtype);\n  }\n\n  /**\n   * Get a snapshot of the Variable's value.\n   *\n   * The returned value is a snapshot of the Variable's value at the time of\n   * the invocation. Future mutations in the value of the tensor will only\n   * be reflected by future calls to this method.\n   */\n  read(): Tensor {\n    this.assertNotDisposed();\n    return this.val;\n  }\n\n  /**\n   * Update the value of the Variable.\n   *\n   * @param newVal: The new value to update to. Must be consistent with the\n   *   dtype and shape of the Variable.\n   * @return This Variable.\n   */\n  write(newVal: Tensor) {\n    // TODO(cais): Once  TF.js Core supports Tensor.dtype, check dtype match.\n    this.assertNotDisposed();\n    checkShapesMatch(this.val, newVal);\n    // Skip updating if this is the exact same tensor.\n    if (this.val.id !== newVal.id) {\n      this.val.assign(newVal);\n      if (this.constraint != null) {\n        this.val.assign(this.constraint.apply(this.val));\n      }\n    }\n    return this;\n  }\n\n  /**\n   * Dispose this LayersVariable instance from memory.\n   */\n  dispose(): void {\n    this.assertNotDisposed();\n    this.val.dispose();\n  }\n\n  protected assertNotDisposed(): void {\n    if (this.val.isDisposed) {\n      throw new Error(`LayersVariable ${this.name} is already disposed.`);\n    }\n  }\n\n  get trainable(): boolean {\n    return this.trainable_;\n  }\n\n  set trainable(trainable: boolean) {\n    this.trainable_ = trainable;\n    this.val.trainable = trainable;\n  }\n}\n\nfunction checkShapesMatch(x: HasShape, y: HasShape): void {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error(\n        'Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' +\n        JSON.stringify(y.shape));\n  }\n}\n\n/**\n * Create a Variable.\n * @param x The initial value of the `Variable`.\n * @param dtype optional, the type of the variable.\n * @param name optional, the name of the variable, default provided by\n * Variable.\n * @param constraint optional, a constraint to be applied after every update.\n * @return The newly instantiated `Variable`.\n */\nexport function variable(\n    x: Tensor, dtype?: DataType, name?: string,\n    constraint?: Constraint): LayerVariable {\n  return new LayerVariable(x, dtype, name, true, constraint);\n}\n\n/**\n * Instantiates an all-zeros Variable and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-zero Variable.\n */\nexport function zerosVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  return new LayerVariable(tfc.zeros(shape), dtype, name);\n}\n\n/**\n * Instantiates an all-zeros tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function zerosLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.zerosLike(x), dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor and returns it.\n *\n * @param shape Shape of the tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return An all-ones Variable.\n */\nexport function onesVariable(\n    shape: Shape, dtype?: DataType, name?: string): LayerVariable {\n  // TODO(cais): Implement logic for dtype.\n  const allocated = tfc.ones(shape);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiates an all-ones tensor of the same shape as another tensor.\n *\n * @param x The other tensor.\n * @param dtype DType of the tensor.\n * @param name Name of the tensor.\n * @return A newly instantiated Variable.\n */\nexport function onesLike(\n    x: Tensor, dtype?: DataType, name?: string): LayerVariable {\n  const allocated = tfc.onesLike(x);\n  return new LayerVariable(allocated, dtype, name);\n}\n\n/**\n * Instantiate an identity matrix and returns it, as a Variable\n *\n * @param size Number of rows/columns.\n * @param dtype Data type of returned Variable.\n * @param name Name of returned Variable.\n * @return A Variable, an identity matrix.\n */\nexport function eyeVariable(\n    size: number, dtype?: DataType, name?: string): LayerVariable {\n  return new LayerVariable(tfc.eye(size), dtype, name);\n}\n\n/**\n * Get a Variable with uniform distribution of values.\n * @param shape Shape of the tensor.\n * @param minval Lower bound of the uniform distribution.\n * @param maxval Upper bound of the uniform distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The uniform-random Variable.\n */\nexport function randomUniformVariable(\n    shape: Shape, minval: number, maxval: number, dtype?: DataType,\n    seed?: number, name = 'randomUniform'): LayerVariable {\n  return new LayerVariable(\n      tfc.randomUniform(shape, minval, maxval, dtype), dtype, name);\n}\n\n/**\n * Get a Variable with truncated-normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function truncatedNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'truncatedNormal'): LayerVariable {\n  // TODO(cais): Implement logic for dtype and seed once they are supported\n  // by deeplearn.js.\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormal does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.truncatedNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n/**\n * Get a Variable with normal distribution of values.\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @param name Optional name.\n * @return The truncated-normal-random Variable.\n */\nexport function randomNormalVariable(\n    shape: Shape, mean = 0.0, stddev = 1.0, dtype?: DataType, seed?: number,\n    name = 'randomNormal'): LayerVariable {\n  dtype = dtype || 'float32';\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new NotImplementedError(\n        `randomNormalVariable does not support dType ${dtype}.`);\n  }\n  return new LayerVariable(\n      tfc.randomNormal(shape, mean, stddev, dtype, seed), dtype, name);\n}\n\n/**\n * Update the value of a Variable.\n * @param x The Variable to be updated.\n * @param xNew The new value to update to.\n * @return The Variable updated.\n */\nexport function update(x: LayerVariable, xNew: Tensor): LayerVariable {\n  return x.write(xNew);\n}\n\n/**\n * Update the value of a Variable by adding an increment.\n * @param x The Variable to be updated.\n * @param increment The incrment to add to `x`.\n * @return The Variable updated.\n */\nexport function updateAdd(x: LayerVariable, increment: Tensor): LayerVariable {\n  return x.write(tfc.add(x.read(), increment));\n}\n\n/**\n * Update the value of a Variable by subtracting a decrement.\n * @param x The Variable to be updated.\n * @param decrement The decrement to subtract from `x`.\n * @return The Variable updated.\n */\nexport function updateSub(x: LayerVariable, decrement: Tensor): LayerVariable {\n  return x.write(tfc.sub(x.read(), decrement));\n}\n\n/**\n * Get the values of an array of Variables.\n *\n * @param tensors An `Array` of `Variable`s to get the values of.\n * @return The values of the inputs, as an `Array` of`tf.Tensor`s.\n */\nexport function batchGetValue(xs: LayerVariable[]): Tensor[] {\n  return xs.map(x => x.read());\n}\n\n/**\n * Update the value of multiple Variables at once.\n *\n * @param variablesAndValues An `Array`, each element is of type\n *   [Variable, Tensor]. The first item is the\n *   `Variable` of which the value is to be updated. The second item\n *   carries the new value.\n */\nexport function batchSetValue(\n    variablesAndValues: Array<[LayerVariable, Tensor]>): void {\n  variablesAndValues.forEach(variableAndValue => {\n    const variable: LayerVariable = variableAndValue[0];\n    variable.write(variableAndValue[1]);\n  });\n}\n\n/**\n * Returns the gradients of `variables` w.r.t. the return value of `lossFn`.\n * @param lossFn A function which returns a Scalar to be used as the function\n *   value (i.e., numerator) for differentiation.\n * @param variables List of variables to be used as the independent variables\n *   (i.e., denominator) for differentiation.\n * @returns An Array of gradients tensors.\n */\nexport function gradients(\n    lossFn: () => tfc.Scalar, variables: LayerVariable[]): Tensor[] {\n  // TODO(cais): The return type signature can be simplified if deeplearn makes\n  //   the corresponding type public.\n  const variableList =\n      variables.map(variable => variable.read() as tfc.Variable);\n  const valudAndGrads = variableGrads(lossFn, variableList);\n  return variables.map(variable => valudAndGrads.grads[variable.name]);\n}\n"]},"metadata":{},"sourceType":"module"}