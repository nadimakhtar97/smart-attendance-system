{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPool3dPositions } from '../utils/pool_utils';\nexport function maxPool3DGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n  const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n\n            for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth || Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n\n              for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n\n                if (dyRow < 0 || dyRow >= convInfo.outHeight || Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n\n                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth || Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterWidth + wCol;\n                  const mask = maxPos === curPos ? 1 : 0;\n\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPool3DGradConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,MAAtB,EAAwDC,aAAxD,QAAiI,uBAAjI;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,kBAAR,QAAiC,qBAAjC;AAEA,OAAM,SAAUC,aAAV,CAAwBC,IAAxB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,MAAD;AAAKC;AAAL,MAAcJ,MAApB;AACA,QAAM;AAACK,cAAD;AAAaC,WAAb;AAAsBC,OAAtB;AAA2BC;AAA3B,MAA8CN,KAApD;AAEAN,kBAAgB,CAAC,CAACO,EAAD,EAAKC,KAAL,CAAD,EAAc,eAAd,CAAhB;AAEA,QAAMK,QAAQ,GAAGhB,YAAY,CAACiB,iBAAb,CACbN,KAAK,CAACO,KADO,EAC4CN,UAD5C,EAEbC,OAFa,EAEJ;AAAE;AAFE,IAEeC,GAFf,EAEoBC,eAFpB,CAAjB;AAIA,QAAMI,QAAQ,GAAGX,OAAO,CAACY,UAAR,CAAmBT,KAAnB,CAAjB;AACA,QAAMU,SAAS,GAAGjB,kBAAkB,CAACe,QAAD,EAAWH,QAAX,CAApC;AACA,QAAMM,WAAW,GAAGN,QAAQ,CAACM,WAA7B;AACA,QAAMC,YAAY,GAAGP,QAAQ,CAACO,YAA9B;AACA,QAAMC,WAAW,GAAGR,QAAQ,CAACQ,WAA7B;AACA,QAAMC,aAAa,GAAGT,QAAQ,CAACS,aAA/B;AACA,QAAMC,cAAc,GAAGV,QAAQ,CAACU,cAAhC;AACA,QAAMC,aAAa,GAAGX,QAAQ,CAACW,aAA/B;AACA,QAAMC,oBAAoB,GAAGZ,QAAQ,CAACY,oBAAtC;AACA,QAAMC,qBAAqB,GAAGb,QAAQ,CAACa,qBAAvC;AACA,QAAMC,oBAAoB,GAAGd,QAAQ,CAACc,oBAAtC;AACA,QAAMC,QAAQ,GAAGH,oBAAoB,GAAG,CAAvB,GAA2BZ,QAAQ,CAACgB,OAAT,CAAiBC,KAA7D;AACA,QAAMC,OAAO,GAAGJ,oBAAoB,GAAG,CAAvB,GAA2Bd,QAAQ,CAACgB,OAAT,CAAiBG,IAA5D;AACA,QAAMC,MAAM,GAAGP,qBAAqB,GAAG,CAAxB,GAA4Bb,QAAQ,CAACgB,OAAT,CAAiBK,GAA5D;AACA,QAAMC,EAAE,GAAGrC,MAAM,CAACU,KAAK,CAACO,KAAP,EAAc,SAAd,CAAjB;AAEA,QAAMqB,KAAK,GAAG/B,OAAO,CAACY,UAAR,CAAmBV,EAAnB,CAAd;;AAEA,OAAK,IAAI8B,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGxB,QAAQ,CAACyB,SAArC,EAAgD,EAAED,KAAlD,EAAyD;AACvD,SAAK,IAAIE,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAG1B,QAAQ,CAAC2B,UAAzC,EAAqD,EAAED,OAAvD,EAAgE;AAC9D,WAAK,IAAIE,OAAO,GAAG,CAAnB,EAAsBA,OAAO,GAAG5B,QAAQ,CAAC6B,OAAzC,EAAkD,EAAED,OAApD,EAA6D;AAC3D,aAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAG9B,QAAQ,CAAC+B,QAArC,EAA+C,EAAED,KAAjD,EAAwD;AACtD,eAAK,IAAIE,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGhC,QAAQ,CAACiC,OAArC,EAA8C,EAAED,KAAhD,EAAuD;AACrD;AACA,kBAAME,aAAa,GAAGN,OAAO,GAAGb,QAAhC;AACA,kBAAMoB,WAAW,GAAGL,KAAK,GAAGV,MAA5B;AACA,kBAAMgB,WAAW,GAAGJ,KAAK,GAAGd,OAA5B;AACA,gBAAImB,OAAO,GAAG,CAAd;;AACA,iBAAK,IAAIC,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAG1B,oBAA9B,EACK0B,MAAM,IAAI7B,aADf,EAC8B;AAC5B,oBAAM8B,OAAO,GAAG,CAACL,aAAa,GAAGI,MAAjB,IAA2BhC,WAA3C;;AACA,kBAAIiC,OAAO,GAAG,CAAV,IAAeA,OAAO,IAAIvC,QAAQ,CAACwC,QAAnC,IACAC,IAAI,CAACC,KAAL,CAAWH,OAAX,MAAwBA,OAD5B,EACqC;AACnC;AACD;;AACD,mBAAK,IAAII,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAG9B,qBAA1B,EACK8B,IAAI,IAAIjC,cADb,EAC6B;AAC3B,sBAAMkC,KAAK,GAAG,CAACT,WAAW,GAAGQ,IAAf,IAAuBpC,YAArC;;AACA,oBAAIqC,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI5C,QAAQ,CAAC6C,SAA/B,IACAJ,IAAI,CAACC,KAAL,CAAWE,KAAX,MAAsBA,KAD1B,EACiC;AAC/B;AACD;;AACD,qBAAK,IAAIE,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGhC,oBAA1B,EACKgC,IAAI,IAAInC,aADb,EAC4B;AAC1B,wBAAMoC,KAAK,GAAG,CAACX,WAAW,GAAGU,IAAf,IAAuBtC,WAArC;;AACA,sBAAIuC,KAAK,GAAG,CAAR,IAAaA,KAAK,IAAI/C,QAAQ,CAACgD,QAA/B,IACAP,IAAI,CAACC,KAAL,CAAWK,KAAX,MAAsBA,KAD1B,EACiC;AAC/B;AACD;;AAED,wBAAME,MAAM,GAAGrC,oBAAoB,GAAGC,qBAAvB,GACPC,oBADO,GAEX,CAFW,GAGVT,SAAS,CAAC6C,GAAV,CAAc1B,KAAd,EAAqBe,OAArB,EAA8BK,KAA9B,EAAqCG,KAArC,EAA4CrB,OAA5C,CAHL;AAKA,wBAAMyB,MAAM,GACRb,MAAM,GAAGzB,qBAAT,GAAiCC,oBAAjC,GACA6B,IAAI,GAAG7B,oBADP,GAC8BgC,IAFlC;AAIA,wBAAMM,IAAI,GAAGH,MAAM,KAAKE,MAAX,GAAoB,CAApB,GAAwB,CAArC;;AACA,sBAAIC,IAAI,KAAK,CAAb,EAAgB;AACd;AACD;;AAED,wBAAMC,KAAK,GACP9B,KAAK,CAAC2B,GAAN,CAAU1B,KAAV,EAAiBe,OAAjB,EAA0BK,KAA1B,EAAiCG,KAAjC,EAAwCrB,OAAxC,CADJ;AAEAW,yBAAO,IAAIgB,KAAK,GAAGD,IAAnB;AACD;AACF;AACF;;AACD9B,cAAE,CAACgC,GAAH,CAAOjB,OAAP,EAAgBb,KAAhB,EAAuBI,OAAvB,EAAgCE,KAAhC,EAAuCE,KAAvC,EAA8CN,OAA9C;AACD;AACF;AACF;AACF;AACF;;AAED,SAAOlC,OAAO,CAAC+D,cAAR,CAAuBjC,EAAE,CAACpB,KAA1B,EAAiCoB,EAAE,CAACkC,KAApC,EAA2ClC,EAAE,CAACmC,MAA9C,CAAP;AACD;AAED,OAAO,MAAMC,mBAAmB,GAAiB;AAC/CC,YAAU,EAAEzE,aADmC;AAE/C0E,aAAW,EAAE,KAFkC;AAG/CC,YAAU,EAAExE;AAHmC,CAA1C","names":["backend_util","buffer","MaxPool3DGrad","assertNotComplex","maxPool3dPositions","maxPool3DGrad","args","inputs","backend","attrs","dy","input","filterSize","strides","pad","dimRoundingMode","convInfo","computePool3DInfo","shape","inputBuf","bufferSync","maxPosBuf","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","padFront","padInfo","front","padLeft","left","padTop","top","dx","dyBuf","batch","batchSize","channel","inChannels","dxDepth","inDepth","dxRow","inHeight","dxCol","inWidth","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","outDepth","Math","floor","wRow","dyRow","outHeight","wCol","dyCol","outWidth","maxPos","get","curPos","mask","pixel","set","makeTensorInfo","dtype","values","maxPool3DGradConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/MaxPool3DGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPool3DGrad, MaxPool3DGradAttrs, MaxPool3DGradInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPool3dPositions} from '../utils/pool_utils';\n\nexport function maxPool3DGrad(args: {\n  inputs: MaxPool3DGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPool3DGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, input], 'maxPool3DGrad');\n\n  const convInfo = backend_util.computePool3DInfo(\n      input.shape as [number, number, number, number, number], filterSize,\n      strides, 1 /* dilations */, pad, dimRoundingMode);\n\n  const inputBuf = backend.bufferSync(input);\n  const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(input.shape, 'float32');\n\n  const dyBuf = backend.bufferSync(dy);\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n        for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n          for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n            // Shader code begins\n            const dyDepthCorner = dxDepth - padFront;\n            const dyRowCorner = dxRow - padTop;\n            const dyColCorner = dxCol - padLeft;\n            let dotProd = 0;\n            for (let wDepth = 0; wDepth < effectiveFilterDepth;\n                 wDepth += dilationDepth) {\n              const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n              if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                  Math.floor(dyDepth) !== dyDepth) {\n                continue;\n              }\n              for (let wRow = 0; wRow < effectiveFilterHeight;\n                   wRow += dilationHeight) {\n                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                    Math.floor(dyRow) !== dyRow) {\n                  continue;\n                }\n                for (let wCol = 0; wCol < effectiveFilterWidth;\n                     wCol += dilationWidth) {\n                  const dyCol = (dyColCorner + wCol) / strideWidth;\n                  if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                      Math.floor(dyCol) !== dyCol) {\n                    continue;\n                  }\n\n                  const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                          effectiveFilterWidth -\n                      1 -\n                      (maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel) as\n                       number);\n                  const curPos =\n                      wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                      wRow * effectiveFilterWidth + wCol;\n\n                  const mask = maxPos === curPos ? 1 : 0;\n                  if (mask === 0) {\n                    continue;\n                  }\n\n                  const pixel =\n                      dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                  dotProd += pixel * mask;\n                }\n              }\n            }\n            dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPool3DGradConfig: KernelConfig = {\n  kernelName: MaxPool3DGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPool3DGrad as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}