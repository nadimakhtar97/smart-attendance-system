{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNativeBackpropFilter } from '../kernel_names';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n\nfunction depthwiseConv2dNativeBackpropFilter_(x, dy, filterShape, strides, pad) {\n  let dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  let dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  let x4D = x;\n\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n\n  let dy4D = dy;\n\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  const inputs = {\n    x: x4D,\n    dy: dy4D\n  };\n  const attrs = {\n    strides,\n    pad,\n    dimRoundingMode,\n    dilations,\n    filterShape\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  return ENGINE.runKernel(DepthwiseConv2dNativeBackpropFilter, inputs, attrs);\n}\n\nexport const depthwiseConv2dNativeBackpropFilter = op({\n  depthwiseConv2dNativeBackpropFilter_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,mCAAR,QAAuI,iBAAvI;AAMA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;;AAEA,SAASC,oCAAT,CACIC,CADJ,EACUC,EADV,EACiBC,WADjB,EAEIC,OAFJ,EAGIC,GAHJ,EAK4C;AAAA,MADxCC,SACwC,uEADH,CAAC,CAAD,EAAI,CAAJ,CACG;AAAA,MAAxCC,eAAwC;AAC1C,MAAIC,GAAG,GAAGP,CAAV;;AACA,MAAIA,CAAC,CAACQ,IAAF,KAAW,CAAf,EAAkB;AAChBD,OAAG,GAAGT,OAAO,CAACE,CAAD,EAAI,CAAC,CAAD,EAAIA,CAAC,CAACS,KAAF,CAAQ,CAAR,CAAJ,EAAgBT,CAAC,CAACS,KAAF,CAAQ,CAAR,CAAhB,EAA4BT,CAAC,CAACS,KAAF,CAAQ,CAAR,CAA5B,CAAJ,CAAb;AACD;;AACD,MAAIC,IAAI,GAAGT,EAAX;;AACA,MAAIS,IAAI,CAACF,IAAL,KAAc,CAAlB,EAAqB;AACnBE,QAAI,GAAGZ,OAAO,CAACG,EAAD,EAAK,CAAC,CAAD,EAAIA,EAAE,CAACQ,KAAH,CAAS,CAAT,CAAJ,EAAiBR,EAAE,CAACQ,KAAH,CAAS,CAAT,CAAjB,EAA8BR,EAAE,CAACQ,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAd;AACD;;AAED,QAAME,MAAM,GAA8C;AAACX,KAAC,EAAEO,GAAJ;AAASN,MAAE,EAAES;AAAb,GAA1D;AACA,QAAME,KAAK,GACP;AAACT,WAAD;AAAUC,OAAV;AAAeE,mBAAf;AAAgCD,aAAhC;AAA2CH;AAA3C,GADJ,CAX0C,CAc1C;;AACA,SAAOP,MAAM,CAACkB,SAAP,CACIjB,mCADJ,EAEIe,MAFJ,EAEoCC,KAFpC,CAAP;AAID;;AAED,OAAO,MAAME,mCAAmC,GAC5CjB,EAAE,CAAC;AAACE;AAAD,CAAD,CADC","names":["ENGINE","DepthwiseConv2dNativeBackpropFilter","op","reshape","depthwiseConv2dNativeBackpropFilter_","x","dy","filterShape","strides","pad","dilations","dimRoundingMode","x4D","rank","shape","dy4D","inputs","attrs","runKernel","depthwiseConv2dNativeBackpropFilter"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/depthwise_conv2d_native_backprop_filter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\n\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\nfunction depthwiseConv2dNativeBackpropFilter_<T extends Tensor3D|Tensor4D>(\n    x: T, dy: T, filterShape: [number, number, number, number],\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding,\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): Tensor4D {\n  let x4D = x as Tensor4D;\n  if (x.rank === 3) {\n    x4D = reshape(x, [1, x.shape[0], x.shape[1], x.shape[2]]);\n  }\n  let dy4D = dy as Tensor4D;\n  if (dy4D.rank === 3) {\n    dy4D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2]]);\n  }\n\n  const inputs: DepthwiseConv2dNativeBackpropFilterInputs = {x: x4D, dy: dy4D};\n  const attrs: DepthwiseConv2dNativeBackpropFilterAttrs =\n      {strides, pad, dimRoundingMode, dilations, filterShape};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  return ENGINE.runKernel(\n             DepthwiseConv2dNativeBackpropFilter,\n             inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap) as\n      Tensor4D;\n}\n\nexport const depthwiseConv2dNativeBackpropFilter =\n    op({depthwiseConv2dNativeBackpropFilter_});\n"]},"metadata":{},"sourceType":"module"}