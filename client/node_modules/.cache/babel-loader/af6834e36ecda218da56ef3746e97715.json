{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\n\nfunction nmsParams(node, tensorMap, context) {\n  const boxes = getParamValue('boxes', node, tensorMap, context);\n  const scores = getParamValue('scores', node, tensorMap, context);\n  const maxOutputSize = getParamValue('maxOutputSize', node, tensorMap, context);\n  const iouThreshold = getParamValue('iouThreshold', node, tensorMap, context);\n  const scoreThreshold = getParamValue('scoreThreshold', node, tensorMap, context);\n  const softNmsSigma = getParamValue('softNmsSigma', node, tensorMap, context);\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold,\n          softNmsSigma\n        } = nmsParams(node, tensorMap, context);\n        const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma);\n        return [result.selectedIndices, result.selectedScores];\n      }\n\n    case 'NonMaxSuppressionV4':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        const padToMaxOutputSize = getParamValue('padToMaxOutputSize', node, tensorMap, context);\n        const result = await tfOps.image.nonMaxSuppressionPaddedAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n        return [result.selectedIndices, result.validOutputs];\n      }\n\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2':\n      {\n        const {\n          boxes,\n          scores,\n          maxOutputSize,\n          iouThreshold,\n          scoreThreshold\n        } = nmsParams(node, tensorMap, context);\n        return [await tfOps.image.nonMaxSuppressionAsync(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold)];\n      }\n\n    case 'Where':\n      {\n        const condition = tfOps.cast(getParamValue('condition', node, tensorMap, context), 'bool');\n        const result = [await tfOps.whereAsync(condition)];\n        condition.dispose();\n        return result;\n      }\n\n    case 'ListDiff':\n      {\n        return tfOps.setdiff1dAsync(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context));\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'dynamic';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","nmsParams","node","tensorMap","context","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","softNmsSigma","executeOp","op","result","image","nonMaxSuppressionWithScoreAsync","selectedIndices","selectedScores","padToMaxOutputSize","nonMaxSuppressionPaddedAsync","validOutputs","nonMaxSuppressionAsync","condition","cast","whereAsync","dispose","setdiff1dAsync","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/dynamic_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nfunction nmsParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const boxes = getParamValue('boxes', node, tensorMap, context) as Tensor;\n  const scores = getParamValue('scores', node, tensorMap, context) as Tensor;\n  const maxOutputSize =\n      getParamValue('maxOutputSize', node, tensorMap, context) as number;\n  const iouThreshold =\n      getParamValue('iouThreshold', node, tensorMap, context) as number;\n  const scoreThreshold =\n      getParamValue('scoreThreshold', node, tensorMap, context) as number;\n  const softNmsSigma =\n      getParamValue('softNmsSigma', node, tensorMap, context) as number;\n\n  return {\n    boxes,\n    scores,\n    maxOutputSize,\n    iouThreshold,\n    scoreThreshold,\n    softNmsSigma\n  };\n}\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'NonMaxSuppressionV5': {\n      const {\n        boxes,\n        scores,\n        maxOutputSize,\n        iouThreshold,\n        scoreThreshold,\n        softNmsSigma\n      } = nmsParams(node, tensorMap, context);\n\n      const result = await tfOps.image.nonMaxSuppressionWithScoreAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, softNmsSigma);\n\n      return [result.selectedIndices, result.selectedScores];\n    }\n    case 'NonMaxSuppressionV4': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      const padToMaxOutputSize =\n          getParamValue('padToMaxOutputSize', node, tensorMap, context) as\n          boolean;\n\n      const result = await tfOps.image.nonMaxSuppressionPaddedAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold, padToMaxOutputSize);\n\n      return [result.selectedIndices, result.validOutputs];\n    }\n    case 'NonMaxSuppressionV3':\n    case 'NonMaxSuppressionV2': {\n      const {boxes, scores, maxOutputSize, iouThreshold, scoreThreshold} =\n          nmsParams(node, tensorMap, context);\n\n      return [await tfOps.image.nonMaxSuppressionAsync(\n          boxes as Tensor2D, scores as Tensor1D, maxOutputSize, iouThreshold,\n          scoreThreshold)];\n    }\n    case 'Where': {\n      const condition = tfOps.cast(\n          (getParamValue('condition', node, tensorMap, context) as Tensor),\n          'bool');\n      const result = [await tfOps.whereAsync(condition)];\n      condition.dispose();\n      return result;\n    }\n    case 'ListDiff': {\n      return tfOps.setdiff1dAsync(\n          getParamValue('x', node, tensorMap, context) as Tensor,\n          getParamValue('y', node, tensorMap, context) as Tensor);\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'dynamic';\n"]},"metadata":{},"sourceType":"module"}