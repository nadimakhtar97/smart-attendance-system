{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, env } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function conv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  let out;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend\n    });\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,MAAtB,EAAyDC,GAAzD,QAAyG,uBAAzG;AAGA,SAAQC,aAAR,QAA4B,aAA5B;AACA,SAAQC,cAAR,EAAwBC,gBAAxB,QAA+C,eAA/C;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAUC,MAAV,CACFC,IADE,EAEuE;AAC3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC;AAAJ,MAAcJ,MAApB;AACA,QAAM;AAACK,WAAD;AAAUC,OAAV;AAAeC,cAAf;AAA2BC,aAA3B;AAAsCC;AAAtC,MAAyDP,KAA/D;AAEA,QAAMQ,WAAW,GAAGnB,YAAY,CAACoB,uBAAb,CAAqCJ,UAArC,CAApB;AACA,QAAMK,QAAQ,GAAGrB,YAAY,CAACsB,iBAAb,CACbV,CAAC,CAACW,KADW,EAEbV,MAAM,CAACU,KAFM,EAEqCT,OAFrC,EAE8CG,SAF9C,EAEyDF,GAFzD,EAGbG,eAHa,EAGI;AAAM;AAHV,IAG2BC,WAH3B,CAAjB;AAIA,MAAIK,GAAJ;;AAEA,MAAIH,QAAQ,CAACI,YAAT,KAA0B,CAA1B,IAA+BJ,QAAQ,CAACK,WAAT,KAAyB,CAAxD,IACAL,QAAQ,CAACM,cAAT,KAA4B,CAD5B,IACiCN,QAAQ,CAACO,aAAT,KAA2B,CAD5D,IAEAP,QAAQ,CAACQ,YAAT,KAA0B,CAF1B,IAE+BR,QAAQ,CAACS,WAAT,KAAyB,CAFxD,KAGCT,QAAQ,CAACU,OAAT,CAAiBC,IAAjB,KAA0B,MAA1B,IAAoCX,QAAQ,CAACU,OAAT,CAAiBC,IAAjB,KAA0B,OAH/D,CAAJ,EAG6E;AAC3ER,OAAG,GAAGpB,cAAc,CAAC;AAACQ,OAAD;AAAIC,YAAJ;AAAYQ,cAAZ;AAAsBX;AAAtB,KAAD,CAApB;AACD,GALD,MAKO,IAAIR,GAAG,GAAG+B,OAAN,CAAc,mBAAd,KAAsCrB,CAAC,CAACW,KAAF,CAAQ,CAAR,MAAe,CAAzD,EAA4D;AACjEC,OAAG,GAAGnB,gBAAgB,CAAC;AAACO,OAAD;AAAIC,YAAJ;AAAYQ,cAAZ;AAAsBX;AAAtB,KAAD,CAAtB;AACD,GAFM,MAEA;AACL,UAAMwB,OAAO,GAAG,IAAI/B,aAAJ,CAAkBkB,QAAlB,CAAhB;AACAG,OAAG,GAAGd,OAAO,CAACyB,eAAR,CAAwBD,OAAxB,EAAiC,CAACtB,CAAD,EAAIC,MAAJ,CAAjC,EAA8C,SAA9C,CAAN;AACD;;AAED,QAAMuB,WAAW,GACb9B,OAAO,CAAC;AAACG,UAAM,EAAE;AAACG,OAAC,EAAEY;AAAJ,KAAT;AAAmBd,WAAnB;AAA4BC,SAAK,EAAE;AAACY,WAAK,EAAEF,QAAQ,CAACgB;AAAjB;AAAnC,GAAD,CADX;AAEA3B,SAAO,CAAC4B,6BAAR,CAAsCd,GAAtC;AAEA,SAAOY,WAAP;AACD;AAED,OAAO,MAAMG,YAAY,GAAiB;AACxCC,YAAU,EAAEvC,MAD4B;AAExCwC,aAAW,EAAE,OAF2B;AAGxCC,YAAU,EAAEnC;AAH4B,CAAnC","names":["backend_util","Conv2D","env","Conv2DProgram","conv2dByMatMul","conv2dWithIm2Row","reshape","conv2d","args","inputs","backend","attrs","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","out","filterHeight","filterWidth","dilationHeight","dilationWidth","strideHeight","strideWidth","padInfo","type","getBool","program","runWebGLProgram","outReshaped","outShape","disposeIntermediateTensorInfo","conv2DConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Conv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function conv2d(\n    args:\n        {inputs: Conv2DInputs, attrs: Conv2DAttrs, backend: MathBackendWebGL}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({x, filter, convInfo, backend});\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({x, filter, convInfo, backend});\n  } else {\n    const program = new Conv2DProgram(convInfo);\n    out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'webgl',\n  kernelFunc: conv2d as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}