{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ArgMinMaxProgram {\n  constructor(reduceInfo, op, firstPass) {\n    this.variableNames = ['A'];\n    const {\n      windowSize,\n      batchSize,\n      outSize\n    } = reduceInfo;\n\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n\n    this.outputShape = [batchSize, outSize];\n    const compOp = op === 'max' ? '>' : '<';\n    const indexSnippet = firstPass ? 'inOffset + i;' : 'round(getBestIndicesA(batch, inOffset + i));';\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,OAAM,MAAOA,gBAAP,CAAuB;AAK3BC,cACIC,UADJ,EACyCC,EADzC,EAEIC,SAFJ,EAEsB;AANtB,yBAAgB,CAAC,GAAD,CAAhB;AAOE,UAAM;AAACC,gBAAD;AAAaC,eAAb;AAAwBC;AAAxB,QAAmCL,UAAzC;;AACA,QAAI,CAACE,SAAL,EAAgB;AACd,WAAKI,aAAL,CAAmBC,IAAnB,CAAwB,cAAxB;AACD;;AACD,SAAKC,WAAL,GAAmB,CAACJ,SAAD,EAAYC,OAAZ,CAAnB;AACA,UAAMI,MAAM,GAAIR,EAAE,KAAK,KAAR,GAAiB,GAAjB,GAAuB,GAAtC;AACA,UAAMS,YAAY,GAAGR,SAAS,GAC1B,eAD0B,GAE1B,8CAFJ;AAIA,SAAKS,QAAL,GAAgB;;;;;kCAKcR,UAAU;;;;;8BAKdA,UAAU;wBAChBO,YAAY;;0BAEVD,MAAM;;;;;;;KAb5B;AAqBD;;AAvC0B","names":["ArgMinMaxProgram","constructor","reduceInfo","op","firstPass","windowSize","batchSize","outSize","variableNames","push","outputShape","compOp","indexSnippet","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/argminmax_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ArgMinMaxProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      reduceInfo: backend_util.ReduceInfo, op: 'max'|'min',\n      firstPass: boolean) {\n    const {windowSize, batchSize, outSize} = reduceInfo;\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    this.outputShape = [batchSize, outSize];\n    const compOp = (op === 'max') ? '>' : '<';\n    const indexSnippet = firstPass ?\n        'inOffset + i;' :\n        'round(getBestIndicesA(batch, inOffset + i));';\n\n    this.userCode = `\n      void main() {\n        ivec2 coords = getOutputCoords();\n        int batch = coords[0];\n        int outIdx = coords[1];\n        int inOffset = outIdx * ${windowSize};\n\n        int bestIndex = inOffset;\n        float bestValue = getA(batch, bestIndex);\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          int inIdx = ${indexSnippet};\n          float candidate = getA(batch, inIdx);\n          if (candidate ${compOp} bestValue) {\n            bestValue = candidate;\n            bestIndex = inIdx;\n          }\n        }\n        setOutput(float(bestIndex));\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}