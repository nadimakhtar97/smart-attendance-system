{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(inShape, outShape) {\n  const inRank = inShape.length;\n  const dims = [];\n\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n\n  return dims;\n}\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\n\nexport function getReductionAxes(inShape, outShape) {\n  const result = [];\n\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n\n    if (inDim == null || inDim === 1 && outDim > 1) {\n      result.unshift(outAxis);\n    }\n  }\n\n  return result;\n}\nexport function assertAndGetBroadcastShape(shapeA, shapeB) {\n  const result = [];\n  const l = Math.max(shapeA.length, shapeB.length);\n\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n\n    if (a == null) {\n      a = 1;\n    }\n\n    let b = shapeB[shapeB.length - i - 1];\n\n    if (b == null) {\n      b = 1;\n    }\n\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` + `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;AASA,OAAM,SAAUA,gBAAV,CACFC,OADE,EACiBC,QADjB,EACmC;AACvC,QAAMC,MAAM,GAAGF,OAAO,CAACG,MAAvB;AACA,QAAMC,IAAI,GAAa,EAAvB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAApB,EAA4BG,CAAC,EAA7B,EAAiC;AAC/B,UAAMC,GAAG,GAAGJ,MAAM,GAAG,CAAT,GAAaG,CAAzB;AACA,UAAME,CAAC,GAAGP,OAAO,CAACM,GAAD,CAAP,IAAgB,CAA1B;AACA,UAAME,CAAC,GAAGP,QAAQ,CAACA,QAAQ,CAACE,MAAT,GAAkB,CAAlB,GAAsBE,CAAvB,CAAR,IAAqC,CAA/C;;AACA,QAAIG,CAAC,GAAG,CAAJ,IAASD,CAAC,KAAK,CAAnB,EAAsB;AACpBH,UAAI,CAACK,OAAL,CAAaH,GAAb;AACD;AACF;;AACD,SAAOF,IAAP;AACD;AAED;;;;;AAIA,OAAM,SAAUM,gBAAV,CACFV,OADE,EACiBC,QADjB,EACmC;AACvC,QAAMU,MAAM,GAAa,EAAzB;;AACA,OAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAAQ,CAACE,MAA7B,EAAqCE,CAAC,EAAtC,EAA0C;AACxC,UAAMO,KAAK,GAAGZ,OAAO,CAACA,OAAO,CAACG,MAAR,GAAiBE,CAAjB,GAAqB,CAAtB,CAArB;AACA,UAAMQ,OAAO,GAAGZ,QAAQ,CAACE,MAAT,GAAkBE,CAAlB,GAAsB,CAAtC;AACA,UAAMS,MAAM,GAAGb,QAAQ,CAACY,OAAD,CAAvB;;AACA,QAAID,KAAK,IAAI,IAAT,IAAkBA,KAAK,KAAK,CAAV,IAAeE,MAAM,GAAG,CAA9C,EAAkD;AAChDH,YAAM,CAACF,OAAP,CAAeI,OAAf;AACD;AACF;;AACD,SAAOF,MAAP;AACD;AAED,OAAM,SAAUI,0BAAV,CACFC,MADE,EACgBC,MADhB,EACgC;AACpC,QAAMN,MAAM,GAAa,EAAzB;AACA,QAAMO,CAAC,GAAGC,IAAI,CAACC,GAAL,CAASJ,MAAM,CAACb,MAAhB,EAAwBc,MAAM,CAACd,MAA/B,CAAV;;AAEA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGa,CAApB,EAAuBb,CAAC,EAAxB,EAA4B;AAC1B,QAAIE,CAAC,GAAGS,MAAM,CAACA,MAAM,CAACb,MAAP,GAAgBE,CAAhB,GAAoB,CAArB,CAAd;;AACA,QAAIE,CAAC,IAAI,IAAT,EAAe;AACbA,OAAC,GAAG,CAAJ;AACD;;AACD,QAAIC,CAAC,GAAGS,MAAM,CAACA,MAAM,CAACd,MAAP,GAAgBE,CAAhB,GAAoB,CAArB,CAAd;;AACA,QAAIG,CAAC,IAAI,IAAT,EAAe;AACbA,OAAC,GAAG,CAAJ;AACD;;AACD,QAAID,CAAC,KAAK,CAAV,EAAa;AACXI,YAAM,CAACF,OAAP,CAAeD,CAAf;AACD,KAFD,MAEO,IAAIA,CAAC,KAAK,CAAV,EAAa;AAClBG,YAAM,CAACF,OAAP,CAAeF,CAAf;AACD,KAFM,MAEA,IAAIA,CAAC,KAAKC,CAAV,EAAa;AAClB,YAAMa,MAAM,GAAG,0DACX,GAAGL,MAAM,QAAQC,MAAM,GAD3B;AAEA,YAAMK,KAAK,CAACD,MAAD,CAAX;AACD,KAJM,MAIA;AACLV,YAAM,CAACF,OAAP,CAAeF,CAAf;AACD;AACF;;AACD,SAAOI,MAAP;AACD","names":["getBroadcastDims","inShape","outShape","inRank","length","dims","i","dim","a","b","unshift","getReductionAxes","result","inDim","outAxis","outDim","assertAndGetBroadcastShape","shapeA","shapeB","l","Math","max","errMsg","Error"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/broadcast_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Returns the dimensions in the input shape that are broadcasted to\n * produce the provided output shape.\n *\n * The returned dimensions are 0-indexed and sorted. An example:\n * inShape = [4, 1, 3]\n * outShape = [5, 4, 3, 3]\n * result = [1]. Dimension 1 (2nd dimension of input) gets broadcasted 1 => 3.\n */\nexport function getBroadcastDims(\n    inShape: number[], outShape: number[]): number[] {\n  const inRank = inShape.length;\n  const dims: number[] = [];\n  for (let i = 0; i < inRank; i++) {\n    const dim = inRank - 1 - i;\n    const a = inShape[dim] || 1;\n    const b = outShape[outShape.length - 1 - i] || 1;\n    if (b > 1 && a === 1) {\n      dims.unshift(dim);\n    }\n  }\n  return dims;\n}\n\n/**\n * Returns the axes in the output space that should be reduced to produce\n * the input space.\n */\nexport function getReductionAxes(\n    inShape: number[], outShape: number[]): number[] {\n  const result: number[] = [];\n  for (let i = 0; i < outShape.length; i++) {\n    const inDim = inShape[inShape.length - i - 1];\n    const outAxis = outShape.length - i - 1;\n    const outDim = outShape[outAxis];\n    if (inDim == null || (inDim === 1 && outDim > 1)) {\n      result.unshift(outAxis);\n    }\n  }\n  return result;\n}\n\nexport function assertAndGetBroadcastShape(\n    shapeA: number[], shapeB: number[]): number[] {\n  const result: number[] = [];\n  const l = Math.max(shapeA.length, shapeB.length);\n\n  for (let i = 0; i < l; i++) {\n    let a = shapeA[shapeA.length - i - 1];\n    if (a == null) {\n      a = 1;\n    }\n    let b = shapeB[shapeB.length - i - 1];\n    if (b == null) {\n      b = 1;\n    }\n    if (a === 1) {\n      result.unshift(b);\n    } else if (b === 1) {\n      result.unshift(a);\n    } else if (a !== b) {\n      const errMsg = `Operands could not be broadcast together with shapes ` +\n          `${shapeA} and ${shapeB}.`;\n      throw Error(errMsg);\n    } else {\n      result.unshift(a);\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}