{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, AttributeError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's RuntimeError.\n */\n\nexport class RuntimeError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, RuntimeError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's ValueError.\n */\n\nexport class ValueError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, ValueError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's NotImplementedError.\n */\n\nexport class NotImplementedError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, NotImplementedError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's AssertionError.\n */\n\nexport class AssertionError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, AssertionError.prototype);\n  }\n\n}\n/**\n * Equivalent of Python's IndexError.\n */\n\nexport class IndexError extends Error {\n  constructor(message) {\n    super(message); // Set the prototype explicitly.\n\n    Object.setPrototypeOf(this, IndexError.prototype);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAUA;;;;;;;;AAQA;;AAEA;;;AAGA,OAAM,MAAOA,cAAP,SAA8BC,KAA9B,CAAmC;AACvCC,cAAYC,OAAZ,EAA4B;AAC1B,UAAMA,OAAN,EAD0B,CAE1B;;AACAC,UAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BL,cAAc,CAACM,SAA3C;AACD;;AALsC;AAQzC;;;;AAGA,OAAM,MAAOC,YAAP,SAA4BN,KAA5B,CAAiC;AACrCC,cAAYC,OAAZ,EAA4B;AAC1B,UAAMA,OAAN,EAD0B,CAE1B;;AACAC,UAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BE,YAAY,CAACD,SAAzC;AACD;;AALoC;AAQvC;;;;AAGA,OAAM,MAAOE,UAAP,SAA0BP,KAA1B,CAA+B;AACnCC,cAAYC,OAAZ,EAA4B;AAC1B,UAAMA,OAAN,EAD0B,CAE1B;;AACAC,UAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BG,UAAU,CAACF,SAAvC;AACD;;AALkC;AAQrC;;;;AAGA,OAAM,MAAOG,mBAAP,SAAmCR,KAAnC,CAAwC;AAC5CC,cAAYC,OAAZ,EAA4B;AAC1B,UAAMA,OAAN,EAD0B,CAE1B;;AACAC,UAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BI,mBAAmB,CAACH,SAAhD;AACD;;AAL2C;AAQ9C;;;;AAGA,OAAM,MAAOI,cAAP,SAA8BT,KAA9B,CAAmC;AACvCC,cAAYC,OAAZ,EAA4B;AAC1B,UAAMA,OAAN,EAD0B,CAE1B;;AACAC,UAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BK,cAAc,CAACJ,SAA3C;AACD;;AALsC;AAQzC;;;;AAGA,OAAM,MAAOK,UAAP,SAA0BV,KAA1B,CAA+B;AACnCC,cAAYC,OAAZ,EAA4B;AAC1B,UAAMA,OAAN,EAD0B,CAE1B;;AACAC,UAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4BM,UAAU,CAACL,SAAvC;AACD;;AALkC","names":["AttributeError","Error","constructor","message","Object","setPrototypeOf","prototype","RuntimeError","ValueError","NotImplementedError","AssertionError","IndexError"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/errors.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Explicit error types.\n *\n * See the following link for more information about why the code includes\n * calls to setPrototypeOf:\n *\n * https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n */\n// tslint:enable\n\n/**\n * Equivalent of Python's AttributeError.\n */\nexport class AttributeError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AttributeError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's RuntimeError.\n */\nexport class RuntimeError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, RuntimeError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's ValueError.\n */\nexport class ValueError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, ValueError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's NotImplementedError.\n */\nexport class NotImplementedError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, NotImplementedError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's AssertionError.\n */\nexport class AssertionError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, AssertionError.prototype);\n  }\n}\n\n/**\n * Equivalent of Python's IndexError.\n */\nexport class IndexError extends Error {\n  constructor(message?: string) {\n    super(message);\n    // Set the prototype explicitly.\n    Object.setPrototypeOf(this, IndexError.prototype);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}