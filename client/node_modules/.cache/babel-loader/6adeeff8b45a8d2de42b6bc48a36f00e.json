{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial, util } from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from '../cpu_util';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  assertNotComplex(logits, 'multinomial');\n  const probabilities = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: -1\n    }\n  });\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values;\n  const resShape = [batchSize, numSamples];\n  const resVals = util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents; // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random(); // Assume last event happened by default.\n\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial\n};","map":{"version":3,"mappings":"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","names":["Multinomial","util","seedrandom","assertNotComplex","softmax","multinomial","args","inputs","backend","attrs","logits","numSamples","seed","normalized","probabilities","dim","batchSize","shape","numEvents","probVals","data","get","dataId","values","resShape","resVals","makeZerosTypedArray","sizeFromShape","b","offset","cdf","Float32Array","event","length","random","alea","toString","outOffset","sampleId","r","disposeIntermediateTensorInfo","makeTensorInfo","multinomialConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Multinomial.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendCPU,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  assertNotComplex(logits, 'multinomial');\n\n  const probabilities = normalized ?\n      logits :\n      softmax({inputs: {logits}, backend, attrs: {dim: -1}});\n\n  const batchSize = probabilities.shape[0];\n  const numEvents = probabilities.shape[1];\n  const probVals = backend.data.get(probabilities.dataId).values as TypedArray;\n  const resShape = [batchSize, numSamples];\n  const resVals =\n      util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n\n  for (let b = 0; b < batchSize; ++b) {\n    const offset = b * numEvents;\n    // The cdf won't include the last event. It will be implicit if no other\n    // event happened.\n    const cdf = new Float32Array(numEvents - 1);\n    cdf[0] = probVals[offset];\n    for (let event = 1; event < cdf.length; ++event) {\n      cdf[event] = cdf[event - 1] + probVals[offset + event];\n    }\n\n    const random = seedrandom.alea(seed.toString());\n    const outOffset = b * numSamples;\n    for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n      const r = random();\n\n      // Assume last event happened by default.\n      resVals[outOffset + sampleId] = cdf.length;\n\n      for (let event = 0; event < cdf.length; event++) {\n        if (r < cdf[event]) {\n          resVals[outOffset + sampleId] = event;\n          break;\n        }\n      }\n    }\n  }\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probabilities);\n  }\n\n  return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'cpu',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}