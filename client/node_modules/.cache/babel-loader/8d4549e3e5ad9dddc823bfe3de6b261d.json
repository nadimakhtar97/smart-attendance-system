{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { sizeFromShape } from '../util';\nimport { op } from './operation';\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction rand_(shape, randFunction, dtype) {\n  const size = sizeFromShape(shape);\n  let values = null;\n\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n\n  for (let i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n\n  return ENGINE.makeTensor(values, shape, dtype);\n}\n\nexport const rand = op({\n  rand_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AAGA,SAAQC,aAAR,QAA4B,SAA5B;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;AAWA,SAASC,KAAT,CACIC,KADJ,EACwBC,YADxB,EAEIC,KAFJ,EAEoB;AAClB,QAAMC,IAAI,GAAGN,aAAa,CAACG,KAAD,CAA1B;AACA,MAAII,MAAM,GAAG,IAAb;;AACA,MAAIF,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,SAA/B,EAA0C;AACxCE,UAAM,GAAG,IAAIC,YAAJ,CAAiBF,IAAjB,CAAT;AACD,GAFD,MAEO,IAAID,KAAK,KAAK,OAAd,EAAuB;AAC5BE,UAAM,GAAG,IAAIE,UAAJ,CAAeH,IAAf,CAAT;AACD,GAFM,MAEA,IAAID,KAAK,KAAK,MAAd,EAAsB;AAC3BE,UAAM,GAAG,IAAIG,UAAJ,CAAeJ,IAAf,CAAT;AACD,GAFM,MAEA;AACL,UAAM,IAAIK,KAAJ,CAAU,qBAAqBN,KAAK,EAApC,CAAN;AACD;;AACD,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAApB,EAA0BM,CAAC,EAA3B,EAA+B;AAC7BL,UAAM,CAACK,CAAD,CAAN,GAAYR,YAAY,EAAxB;AACD;;AACD,SAAOL,MAAM,CAACc,UAAP,CAAkBN,MAAlB,EAA0BJ,KAA1B,EAAiCE,KAAjC,CAAP;AACD;;AAED,OAAO,MAAMS,IAAI,GAAGb,EAAE,CAAC;AAACC;AAAD,CAAD,CAAf","names":["ENGINE","sizeFromShape","op","rand_","shape","randFunction","dtype","size","values","Float32Array","Int32Array","Uint8Array","Error","i","makeTensor","rand"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/rand.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {op} from './operation';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a random number generator\n * function defined by the user.\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param randFunction A random number generator function which is called\n * for each element in the output tensor.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction rand_<R extends Rank>(\n    shape: ShapeMap[R], randFunction: () => number,\n    dtype?: DataType): Tensor<R> {\n  const size = sizeFromShape(shape);\n  let values = null;\n  if (dtype == null || dtype === 'float32') {\n    values = new Float32Array(size);\n  } else if (dtype === 'int32') {\n    values = new Int32Array(size);\n  } else if (dtype === 'bool') {\n    values = new Uint8Array(size);\n  } else {\n    throw new Error(`Unknown data type ${dtype}`);\n  }\n  for (let i = 0; i < size; i++) {\n    values[i] = randFunction();\n  }\n  return ENGINE.makeTensor(values, shape, dtype) as Tensor<R>;\n}\n\nexport const rand = op({rand_});\n"]},"metadata":{},"sourceType":"module"}