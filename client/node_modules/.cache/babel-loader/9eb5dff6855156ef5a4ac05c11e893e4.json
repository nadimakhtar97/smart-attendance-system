{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      backend,\n      attrs\n    } = _ref;\n    const {\n      x,\n      filter\n    } = inputs;\n    const {\n      strides,\n      pad,\n      dilations\n    } = attrs;\n    const cpuBackend = backend;\n    const xVals = cpuBackend.data.get(x.dataId).values;\n    const xRank = x.shape.length;\n    const filterVals = cpuBackend.data.get(filter.dataId).values;\n    const filterRank = filter.shape.length;\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n    /* dataFormat */\n    , dilations);\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize); // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n\n            const outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n    return {\n      dataId,\n      shape: outShape,\n      dtype: x.dtype\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,UAAtB,EAA+FC,IAA/F,QAA0G,uBAA1G;AAIA,OAAO,MAAMC,gBAAgB,GAAiB;AAC5CC,YAAU,EAAEH,UADgC;AAE5CI,aAAW,EAAE,KAF+B;AAG5CC,YAAU,EAAE,QAA6B;AAAA,QAA5B;AAACC,YAAD;AAASC,aAAT;AAAkBC;AAAlB,KAA4B;AACvC,UAAM;AAACC,OAAD;AAAIC;AAAJ,QAAcJ,MAApB;AACA,UAAM;AAACK,aAAD;AAAUC,SAAV;AAAeC;AAAf,QAA4BL,KAAlC;AACA,UAAMM,UAAU,GAAGP,OAAnB;AAEA,UAAMQ,KAAK,GAAGD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBR,CAAC,CAACS,MAAtB,EAA8BC,MAA5C;AACA,UAAMC,KAAK,GAAGX,CAAC,CAACY,KAAF,CAAQC,MAAtB;AAEA,UAAMC,UAAU,GAAGT,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBP,MAAM,CAACQ,MAA3B,EAAmCC,MAAtD;AACA,UAAMK,UAAU,GAAGd,MAAM,CAACW,KAAP,CAAaC,MAAhC;AAEA,UAAM;AACJG,eADI;AAEJC,cAFI;AAGJC,aAHI;AAIJC,gBAJI;AAKJC,eALI;AAMJC,cANI;AAOJC,aAPI;AAQJC,kBARI;AASJC,iBATI;AAUJC,kBAVI;AAWJC,iBAXI;AAYJC,oBAZI;AAaJC,mBAbI;AAcJC;AAdI,QAgBFvC,YAAY,CAACwC,qBAAb,CACI9B,CAAC,CAACY,KADN,EAEIX,MAAM,CAACW,KAFX,EAE8CV,OAF9C,EAEuDC,GAFvD,EAGI;AAAO;AAHX,MAG6BC,SAH7B,CAhBJ;AAqBA,UAAM2B,OAAO,GAAGvC,IAAI,CAACwC,aAAL,CAAmBH,QAAnB,CAAhB;AACA,UAAMI,OAAO,GAAGJ,QAAQ,CAAChB,MAAzB;AACA,UAAMqB,UAAU,GAAG1C,IAAI,CAAC2C,iBAAL,CAAuBnC,CAAC,CAACoC,KAAzB,EAAgCL,OAAhC,CAAnB,CAlCuC,CAoCvC;AACA;AACA;AACA;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGrB,SAApB,EAA+B,EAAEqB,CAAjC,EAAoC;AAClC,WAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGlB,SAA1B,EAAqC,EAAEkB,IAAvC,EAA6C;AAC3C,cAAMC,IAAI,GAAGD,IAAI,GAAGf,YAAP,GAAsBD,OAAO,CAACkB,GAA3C;;AACA,aAAK,IAAIC,IAAI,GAAG,CAAhB,EAAmBA,IAAI,GAAGpB,QAA1B,EAAoC,EAAEoB,IAAtC,EAA4C;AAC1C,gBAAMC,IAAI,GAAGD,IAAI,GAAGjB,WAAP,GAAqBF,OAAO,CAACqB,IAA1C;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzB,UAApB,EAAgC,EAAEyB,CAAlC,EAAqC;AACnC,gBAAIC,MAAM,GAAGC,MAAM,CAACC,gBAApB;;AACA,iBAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGvB,YAApB,EAAkC,EAAEuB,CAApC,EAAuC;AACrC,oBAAMC,GAAG,GAAGV,IAAI,GAAGS,CAAC,GAAGrB,cAAvB;;AACA,kBAAIsB,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAGhC,QAAtB,EAAgC;AAC9B,qBAAK,IAAIiC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGxB,WAApB,EAAiC,EAAEwB,CAAnC,EAAsC;AACpC,wBAAMC,GAAG,GAAGT,IAAI,GAAGQ,CAAC,GAAGtB,aAAvB;;AACA,sBAAIuB,GAAG,IAAI,CAAP,IAAYA,GAAG,GAAGjC,OAAtB,EAA+B;AAC7B,0BAAMkC,MAAM,GAAG5D,IAAI,CAAC6D,UAAL,CACX,CAAChB,CAAD,EAAIY,GAAJ,EAASE,GAAT,EAAcP,CAAd,CADW,EACOjC,KADP,EACcnB,IAAI,CAAC8D,cAAL,CAAoBtD,CAAC,CAACY,KAAtB,CADd,CAAf;AAEA,0BAAM2C,WAAW,GAAG/D,IAAI,CAAC6D,UAAL,CAChB,CAACL,CAAD,EAAIE,CAAJ,EAAON,CAAP,CADgB,EACL7B,UADK,EAEhBvB,IAAI,CAAC8D,cAAL,CAAoBrD,MAAM,CAACW,KAA3B,CAFgB,CAApB;AAGA,0BAAM4C,GAAG,GAAGlD,KAAK,CAAC8C,MAAD,CAAL,GAAgBtC,UAAU,CAACyC,WAAD,CAAtC;;AACA,wBAAIC,GAAG,GAAGX,MAAV,EAAkB;AAChBA,4BAAM,GAAGW,GAAT;AACD;AACF;AACF;AACF;AACF;;AACD,kBAAMC,WAAW,GAAGjE,IAAI,CAAC6D,UAAL,CAChB,CAAChB,CAAD,EAAIC,IAAJ,EAAUG,IAAV,EAAgBG,CAAhB,CADgB,EACIX,OADJ,EACazC,IAAI,CAAC8D,cAAL,CAAoBzB,QAApB,CADb,CAApB;AAEAK,sBAAU,CAACuB,WAAD,CAAV,GAA0BZ,MAA1B;AACD;AACF;AACF;AACF;;AAED,UAAMpC,MAAM,GAAGJ,UAAU,CAACqD,KAAX,CACXlE,IAAI,CAACmE,YAAL,CAAkBzB,UAAlB,EAA8BlC,CAAC,CAACoC,KAAhC,CADW,EAC6BP,QAD7B,EACuC7B,CAAC,CAACoC,KADzC,CAAf;AAGA,WAAO;AAAC3B,YAAD;AAASG,WAAK,EAAEiB,QAAhB;AAA0BO,WAAK,EAAEpC,CAAC,CAACoC;AAAnC,KAAP;AACD;AAjF2C,CAAvC","names":["backend_util","Dilation2D","util","dilation2DConfig","kernelName","backendName","kernelFunc","inputs","backend","attrs","x","filter","strides","pad","dilations","cpuBackend","xVals","data","get","dataId","values","xRank","shape","length","filterVals","filterRank","batchSize","inHeight","inWidth","inChannels","outHeight","outWidth","padInfo","strideHeight","strideWidth","filterHeight","filterWidth","dilationHeight","dilationWidth","outShape","computeDilation2DInfo","outSize","sizeFromShape","outRank","outputVals","getArrayFromDType","dtype","b","hOut","hBeg","top","wOut","wBeg","left","d","curVal","Number","MIN_SAFE_INTEGER","h","hIn","w","wIn","xIndex","locToIndex","computeStrides","filterIndex","val","outputIndex","write","toTypedArray"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Dilation2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, backend, attrs}) => {\n    const {x, filter} = inputs as Dilation2DInputs;\n    const {strides, pad, dilations} = attrs as {} as Dilation2DAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n\n    const xVals = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xRank = x.shape.length;\n\n    const filterVals = cpuBackend.data.get(filter.dataId).values as TypedArray;\n    const filterRank = filter.shape.length;\n\n    const {\n      batchSize,\n      inHeight,\n      inWidth,\n      inChannels,\n      outHeight,\n      outWidth,\n      padInfo,\n      strideHeight,\n      strideWidth,\n      filterHeight,\n      filterWidth,\n      dilationHeight,\n      dilationWidth,\n      outShape\n    } =\n        backend_util.computeDilation2DInfo(\n            x.shape as [number, number, number, number],\n            filter.shape as [number, number, number], strides, pad,\n            'NHWC' /* dataFormat */, dilations);\n\n    const outSize = util.sizeFromShape(outShape);\n    const outRank = outShape.length;\n    const outputVals = util.getArrayFromDType(x.dtype, outSize);\n\n    // Upsampling the input by fill in `dilation size - 1` values between each\n    // input value.\n    // This implementation follows the TF c++ implementation:\n    // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n    for (let b = 0; b < batchSize; ++b) {\n      for (let hOut = 0; hOut < outHeight; ++hOut) {\n        const hBeg = hOut * strideHeight - padInfo.top;\n        for (let wOut = 0; wOut < outWidth; ++wOut) {\n          const wBeg = wOut * strideWidth - padInfo.left;\n          for (let d = 0; d < inChannels; ++d) {\n            let curVal = Number.MIN_SAFE_INTEGER;\n            for (let h = 0; h < filterHeight; ++h) {\n              const hIn = hBeg + h * dilationHeight;\n              if (hIn >= 0 && hIn < inHeight) {\n                for (let w = 0; w < filterWidth; ++w) {\n                  const wIn = wBeg + w * dilationWidth;\n                  if (wIn >= 0 && wIn < inWidth) {\n                    const xIndex = util.locToIndex(\n                        [b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                    const filterIndex = util.locToIndex(\n                        [h, w, d], filterRank,\n                        util.computeStrides(filter.shape));\n                    const val = xVals[xIndex] + filterVals[filterIndex];\n                    if (val > curVal) {\n                      curVal = val;\n                    }\n                  }\n                }\n              }\n            }\n            const outputIndex = util.locToIndex(\n                [b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n            outputVals[outputIndex] = curVal;\n          }\n        }\n      }\n    }\n\n    const dataId = cpuBackend.write(\n        util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n\n    return {dataId, shape: outShape, dtype: x.dtype};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}