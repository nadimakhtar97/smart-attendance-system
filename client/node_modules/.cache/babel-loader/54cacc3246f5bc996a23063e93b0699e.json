{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const xValues = backend.data.get(x.dataId).values;\n  const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n  let outputIdx = 0;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = h % blockSize;\n\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = w % blockSize;\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAA+GC,IAA/G,QAA0H,uBAA1H;AAIA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,aAAD;AAAYC;AAAZ,MAA0BH,KAAhC;AAEAL,MAAI,CAACS,MAAL,CACID,UAAU,KAAK,MADnB,EAEI,MAAM,+DACFA,UAAU,EAHlB;AAKA,QAAME,SAAS,GAAGJ,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAlB;AACA,QAAMC,WAAW,GAAGN,CAAC,CAACK,KAAF,CAAQ,CAAR,CAApB;AACA,QAAME,UAAU,GAAGP,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAnB;AACA,QAAMG,UAAU,GAAGR,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAnB;AAEA,QAAMI,YAAY,GAAGH,WAAW,GAAGL,SAAnC;AACA,QAAMS,WAAW,GAAGH,UAAU,GAAGN,SAAjC;AACA,QAAMU,WAAW,GAAGH,UAAU,IAAIP,SAAS,GAAGA,SAAhB,CAA9B;AAEA,QAAMW,OAAO,GAAGd,OAAO,CAACe,IAAR,CAAaC,GAAb,CAAiBd,CAAC,CAACe,MAAnB,EAA2BC,MAA3C;AACA,QAAMC,MAAM,GACR,IAAIC,YAAJ,CAAiBd,SAAS,GAAGK,YAAZ,GAA2BC,WAA3B,GAAyCC,WAA1D,CADJ;AAGA,MAAIQ,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,SAApB,EAA+B,EAAEgB,CAAjC,EAAoC;AAClC,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,YAApB,EAAkC,EAAEY,CAApC,EAAuC;AACrC,YAAMC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,CAAC,GAAGpB,SAAf,CAAZ;AACA,YAAMwB,OAAO,GAAIJ,CAAC,GAAGpB,SAArB;;AACA,WAAK,IAAIyB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,WAApB,EAAiC,EAAEgB,CAAnC,EAAsC;AACpC,cAAMC,GAAG,GAAGJ,IAAI,CAACC,KAAL,CAAWE,CAAC,GAAGzB,SAAf,CAAZ;AACA,cAAM2B,OAAO,GAAIF,CAAC,GAAGzB,SAArB;AACA,cAAM4B,OAAO,GAAG,CAACJ,OAAO,GAAGxB,SAAV,GAAsB2B,OAAvB,IAAkCjB,WAAlD;;AACA,aAAK,IAAImB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,WAApB,EAAiC,EAAEmB,CAAnC,EAAsC;AACpC,gBAAMC,GAAG,GAAGD,CAAC,GAAGD,OAAhB;AACA,gBAAMG,QAAQ,GACVD,GAAG,GAAGvB,UAAU,IAAImB,GAAG,GAAGpB,UAAU,IAAIe,GAAG,GAAGhB,WAAW,GAAGc,CAAxB,CAApB,CADpB;AAEAH,gBAAM,CAACE,SAAS,EAAV,CAAN,GAAsBP,OAAO,CAACoB,QAAD,CAA7B;AACD;AACF;AACF;AACF;;AAED,SAAOlC,OAAO,CAACmC,cAAR,CACH,CAAC7B,SAAD,EAAYK,YAAZ,EAA0BC,WAA1B,EAAuCC,WAAvC,CADG,EACkDX,CAAC,CAACkC,KADpD,EAC2DjB,MAD3D,CAAP;AAED;AAED,OAAO,MAAMkB,kBAAkB,GAAiB;AAC9CC,YAAU,EAAE3C,YADkC;AAE9C4C,aAAW,EAAE,KAFiC;AAG9CC,YAAU,EAAE3C;AAHkC,CAAzC","names":["DepthToSpace","util","depthToSpace","args","inputs","backend","attrs","x","blockSize","dataFormat","assert","batchSize","shape","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","xValues","data","get","dataId","values","result","Float32Array","outputIdx","b","h","inH","Math","floor","offsetH","w","inW","offsetW","offsetD","d","inD","inputIdx","makeTensorInfo","dtype","depthToSpaceConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/DepthToSpace.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendCPU,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  util.assert(\n      dataFormat === 'NHWC',\n      () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${\n          dataFormat}`);\n\n  const batchSize = x.shape[0];\n  const inputHeight = x.shape[1];\n  const inputWidth = x.shape[2];\n  const inputDepth = x.shape[3];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const result =\n      new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n\n  let outputIdx = 0;\n  for (let b = 0; b < batchSize; ++b) {\n    for (let h = 0; h < outputHeight; ++h) {\n      const inH = Math.floor(h / blockSize);\n      const offsetH = (h % blockSize);\n      for (let w = 0; w < outputWidth; ++w) {\n        const inW = Math.floor(w / blockSize);\n        const offsetW = (w % blockSize);\n        const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n        for (let d = 0; d < outputDepth; ++d) {\n          const inD = d + offsetD;\n          const inputIdx =\n              inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n          result[outputIdx++] = xValues[inputIdx];\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'cpu',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}