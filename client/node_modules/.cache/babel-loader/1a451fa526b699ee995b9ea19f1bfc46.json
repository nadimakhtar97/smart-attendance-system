{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { countParamsInWeights } from './variable_utils';\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\n\nexport function printSummary(model, lineLength, positions) {\n  let printFn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : console.log;\n  const sequentialLike = isModelSequentialLike(model); // Header names for different log elements.\n\n  const toDisplay = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n\n  if (sequentialLike) {\n    lineLength = lineLength || 90;\n    positions = positions || [0.32, 0.61, 0.89, 1];\n  } else {\n    lineLength = lineLength || 115;\n    positions = positions || [0.24, 0.48, 0.70, 0.80, 1]; // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n\n  let relevantNodes;\n\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n  const layers = model.layers;\n\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(layers[i], positions, relevantNodes, printFn);\n    }\n\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  } // tslint:disable-next-line:no-any\n\n\n  model.checkTrainableWeightsConsistency();\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\n\nfunction countTrainableParams(model) {\n  let trainableCount; // tslint:disable:no-any\n\n  if (model.collectedTrainableWeights != null) {\n    trainableCount = countParamsInWeights(model.collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  } // tslint:enable:no-any\n\n\n  return trainableCount;\n}\n\nfunction isModelSequentialLike(model) {\n  let sequentialLike = true;\n  const nodesByDepth = [];\n  const nodes = [];\n\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 || depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n\n    nodes.push(...depthNodes);\n  }\n\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n\n  return sequentialLike;\n}\n\nfunction printRow(fields, positions) {\n  let printFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : console.log;\n  let line = '';\n\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n\n  printFn(line);\n}\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\n\n\nfunction printLayerSummary(layer, positions, // tslint:disable-next-line:no-any\nprintFn) {\n  let outputShape;\n  let inputShape;\n\n  try {\n    inputShape = layer.inboundNodes.map(x => JSON.stringify(x.inputShapes)).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields = [`${name} (${className})`, inputShape, outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\n\n\nfunction printLayerSummaryWithConnections(layer, positions, relevantNodes, // tslint:disable-next-line:no-any\nprintFn) {\n  let outputShape;\n  let inputShape;\n\n  try {\n    inputShape = layer.inboundNodes.map(x => JSON.stringify(x.inputShapes)).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const connections = [];\n\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 && relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(`${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields = [`${name} (${className})`, inputShape, outputShape, layer.countParams().toString(), firstConnection];\n  printRow(fields, positions, printFn);\n\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', '', connections[i]], positions, printFn);\n  }\n}","map":{"version":3,"mappings":"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","names":["countParamsInWeights","printSummary","model","lineLength","positions","printFn","console","log","sequentialLike","isModelSequentialLike","toDisplay","length","map","p","Math","floor","relevantNodes","push","depth","nodesByDepth","repeat","printRow","layers","i","printLayerSummary","printLayerSummaryWithConnections","checkTrainableWeightsConsistency","trainableCount","countTrainableParams","nonTrainableCount","nonTrainableWeights","collectedTrainableWeights","trainableWeights","nodes","depthNodes","inboundLayers","layer","flag","node","inboundNodes","indexOf","fields","line","slice","outputShape","inputShape","x","JSON","stringify","inputShapes","join","err","name","className","getClassName","countParams","toString","connections","inboundLayer","inboundLayerIndex","nodeIndices","inboundTensorIndex","tensorIndices","firstConnection"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/utils/layer_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {Container} from '../engine/container';\nimport {Layer, Node} from '../engine/topology';\nimport {countParamsInWeights} from './variable_utils';\n\n/**\n * Print the summary of a LayersModel object.\n *\n * @param model tf.LayersModel instance.\n * @param lineLength Total length of printed lines. Set this to adapt to the\n *   display to different terminal or console sizes.\n * @param positions Relative or absolute positions of log elements in each\n *   line. Each number corresponds to right-most (i.e., ending) position of a\n *   column.\n *   If not provided, defaults to `[0.45, 0.85, 1]` for sequential-like\n *   models and `[0.33, 0.55, 0.67, 1]` for non-sequential like models.\n * @param printFn Print function to use.\n *   It will be called on each line of the summary. You can provide a custom\n *   function in order to capture the string summary. Defaults to `console.log`.\n */\nexport function printSummary(\n    model: Container, lineLength?: number, positions?: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void =\n        console.log): void {\n  const sequentialLike = isModelSequentialLike(model);\n\n  // Header names for different log elements.\n  const toDisplay: string[] = ['Layer (type)', 'Input Shape', 'Output shape', 'Param #'];\n  if (sequentialLike) {\n    lineLength = lineLength || 90;\n    positions = positions || [0.32, 0.61, 0.89, 1];\n  } else {\n    lineLength = lineLength || 115;\n    positions = positions || [0.24, 0.48, 0.70, 0.80, 1];\n    // Header names for different log elements.\n  }\n\n  if (positions[positions.length - 1] <= 1) {\n    // `positions` is relative. Convert it to absolute positioning.\n    positions = positions.map(p => Math.floor(lineLength * p));\n  }\n\n  let relevantNodes: Node[];\n  if (!sequentialLike) {\n    toDisplay.push('Receives inputs');\n    relevantNodes = [];\n    for (const depth in model.nodesByDepth) {\n      relevantNodes.push(...model.nodesByDepth[depth]);\n    }\n  }\n\n  printFn('_'.repeat(lineLength));\n  printRow(toDisplay, positions, printFn);\n  printFn('='.repeat(lineLength));\n\n  const layers = model.layers;\n  for (let i = 0; i < layers.length; ++i) {\n    if (sequentialLike) {\n      printLayerSummary(layers[i], positions, printFn);\n    } else {\n      printLayerSummaryWithConnections(\n          layers[i], positions, relevantNodes, printFn);\n    }\n    printFn((i === layers.length - 1 ? '=' : '_').repeat(lineLength));\n  }\n\n  // tslint:disable-next-line:no-any\n  (model as any).checkTrainableWeightsConsistency();\n\n  const trainableCount = countTrainableParams(model);\n  const nonTrainableCount = countParamsInWeights(model.nonTrainableWeights);\n\n  printFn(`Total params: ${trainableCount + nonTrainableCount}`);\n  printFn(`Trainable params: ${trainableCount}`);\n  printFn(`Non-trainable params: ${nonTrainableCount}`);\n  printFn('_'.repeat(lineLength));\n}\n\nfunction countTrainableParams(model: Container): number {\n  let trainableCount: number;\n  // tslint:disable:no-any\n  if ((model as any).collectedTrainableWeights != null) {\n    trainableCount =\n        countParamsInWeights((model as any).collectedTrainableWeights);\n  } else {\n    trainableCount = countParamsInWeights(model.trainableWeights);\n  }\n  // tslint:enable:no-any\n  return trainableCount;\n}\n\nfunction isModelSequentialLike(model: Container): boolean {\n  let sequentialLike = true;\n  const nodesByDepth: Node[][] = [];\n  const nodes: Node[] = [];\n  for (const depth in model.nodesByDepth) {\n    nodesByDepth.push(model.nodesByDepth[depth]);\n  }\n  for (const depthNodes of nodesByDepth) {\n    if (depthNodes.length > 1 ||\n        depthNodes.length === 1 && depthNodes[0].inboundLayers.length > 1) {\n      sequentialLike = false;\n      break;\n    }\n    nodes.push(...depthNodes);\n  }\n  if (sequentialLike) {\n    // Search for shared layers.\n    for (const layer of model.layers) {\n      let flag = false;\n      for (const node of layer.inboundNodes) {\n        if (nodes.indexOf(node) !== -1) {\n          if (flag) {\n            sequentialLike = false;\n            break;\n          } else {\n            flag = true;\n          }\n        }\n      }\n      if (!sequentialLike) {\n        break;\n      }\n    }\n  }\n  return sequentialLike;\n}\n\nfunction printRow(\n    fields: string[], positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void = console.log) {\n  let line = '';\n  for (let i = 0; i < fields.length; ++i) {\n    if (i > 0) {\n      line = line.slice(0, line.length - 1) + ' ';\n    }\n    line += fields[i];\n    line = line.slice(0, positions[i]);\n    line += ' '.repeat(positions[i] - line.length);\n  }\n  printFn(line);\n}\n\n/**\n * Prints a summary for a single Layer, without connectivity information.\n *\n * @param layer: Layer instance to print.\n */\nfunction printLayerSummary(\n    layer: Layer, positions: number[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const name = layer.name;\n  const className = layer.getClassName();\n  const fields: string[] =\n      [`${name} (${className})`, inputShape,\n      outputShape, layer.countParams().toString()];\n  printRow(fields, positions, printFn);\n}\n\n/**\n * Prints a summary for a single Layer, with connectivity information.\n */\nfunction printLayerSummaryWithConnections(\n    layer: Layer, positions: number[], relevantNodes: Node[],\n    // tslint:disable-next-line:no-any\n    printFn: (message?: any, ...optionalParams: any[]) => void) {\n  let outputShape: string;\n  let inputShape: string;\n\n  try {\n    inputShape = (layer.inboundNodes.map(\n      x => JSON.stringify(x.inputShapes)\n    )).join(',');\n  } catch (err) {\n    inputShape = 'multiple';\n  }\n\n  try {\n    outputShape = JSON.stringify(layer.outputShape);\n  } catch (err) {\n    outputShape = 'multiple';\n  }\n\n  const connections: string[] = [];\n  for (const node of layer.inboundNodes) {\n    if (relevantNodes != null && relevantNodes.length > 0 &&\n        relevantNodes.indexOf(node) === -1) {\n      continue;\n    }\n    for (let i = 0; i < node.inboundLayers.length; ++i) {\n      const inboundLayer = node.inboundLayers[i].name;\n      const inboundLayerIndex = node.nodeIndices[i];\n      const inboundTensorIndex = node.tensorIndices[i];\n      connections.push(\n          `${inboundLayer}[${inboundLayerIndex}][${inboundTensorIndex}]`);\n    }\n  }\n  const name = layer.name;\n  const className = layer.getClassName();\n  const firstConnection = connections.length === 0 ? '' : connections[0];\n  const fields: string[] = [\n    `${name} (${className})`, inputShape,\n    outputShape, layer.countParams().toString(),\n    firstConnection\n  ];\n\n  printRow(fields, positions, printFn);\n  for (let i = 1; i < connections.length; ++i) {\n    printRow(['', '', '', '', connections[i]], positions, printFn);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}