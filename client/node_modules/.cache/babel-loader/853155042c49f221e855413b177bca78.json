{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TopK } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { topKImpl } from './TopK_impl';\nexport function topK(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    k,\n    sorted\n  } = attrs;\n  assertNotComplex(x, 'topk');\n  const xVals = backend.data.get(x.dataId).values;\n  const [allTopKVals, allTopKIndices] = topKImpl(xVals, x.shape, x.dtype, k, sorted);\n  return [backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values), backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)];\n}\nexport const topKConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA+DA,IAA/D,QAA6G,uBAA7G;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA,OAAM,SAAUC,IAAV,CACFC,IADE,EACmE;AAEvE,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,KAAD;AAAIC;AAAJ,MAAcH,KAApB;AAEAN,kBAAgB,CAACO,CAAD,EAAI,MAAJ,CAAhB;AAEA,QAAMG,KAAK,GAAGL,OAAO,CAACM,IAAR,CAAaC,GAAb,CAAiBL,CAAC,CAACM,MAAnB,EAA2BC,MAAzC;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IACFf,QAAQ,CAACS,KAAD,EAAQH,CAAC,CAACU,KAAV,EAAiBV,CAAC,CAACW,KAAnB,EAA6CV,CAA7C,EAAgDC,MAAhD,CADZ;AAGA,SAAO,CACLJ,OAAO,CAACc,cAAR,CACIJ,WAAW,CAACE,KADhB,EACuBF,WAAW,CAACG,KADnC,EAC0CH,WAAW,CAACD,MADtD,CADK,EAGLT,OAAO,CAACc,cAAR,CACIH,cAAc,CAACC,KADnB,EAC0BD,cAAc,CAACE,KADzC,EACgDF,cAAc,CAACF,MAD/D,CAHK,CAAP;AAMD;AAED,OAAO,MAAMM,UAAU,GAAiB;AACtCC,YAAU,EAAEtB,IAD0B;AAEtCuB,aAAW,EAAE,KAFyB;AAGtCC,YAAU,EAAErB;AAH0B,CAAjC","names":["TopK","assertNotComplex","topKImpl","topK","args","inputs","backend","attrs","x","k","sorted","xVals","data","get","dataId","values","allTopKVals","allTopKIndices","shape","dtype","makeTensorInfo","topKConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/TopK.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, NumericDataType, TensorInfo, TopK, TopKAttrs, TopKInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {topKImpl} from './TopK_impl';\n\nexport function topK(\n    args: {inputs: TopKInputs, backend: MathBackendCPU, attrs: TopKAttrs}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {k, sorted} = attrs;\n\n  assertNotComplex(x, 'topk');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [allTopKVals, allTopKIndices] =\n      topKImpl(xVals, x.shape, x.dtype as NumericDataType, k, sorted);\n\n  return [\n    backend.makeTensorInfo(\n        allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n    backend.makeTensorInfo(\n        allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n  ];\n}\n\nexport const topKConfig: KernelConfig = {\n  kernelName: TopK,\n  backendName: 'cpu',\n  kernelFunc: topK as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}