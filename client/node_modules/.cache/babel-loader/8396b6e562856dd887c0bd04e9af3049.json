{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Fill, util } from '@tensorflow/tfjs-core';\nexport function fill(args) {\n  const {\n    backend,\n    attrs\n  } = args;\n  const {\n    shape,\n    value,\n    dtype\n  } = attrs;\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\nexport const fillConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill\n};\n\nfunction fillValues(values, value, dtype) {\n  if (dtype === 'string') {\n    values.fill(value);\n  } else {\n    values.fill(value);\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8BA,IAA9B,EAAiGC,IAAjG,QAA4G,uBAA5G;AAIA,OAAM,SAAUC,IAAV,CAAeC,IAAf,EAAgE;AAEpE,QAAM;AAACC,WAAD;AAAUC;AAAV,MAAmBF,IAAzB;AACA,QAAM;AAACG,SAAD;AAAQC,SAAR;AAAeC;AAAf,MAAwBH,KAA9B;AAEA,QAAMI,MAAM,GAAGD,KAAK,IAAIP,IAAI,CAACS,UAAL,CAAgBH,KAAhB,CAAxB;AACA,QAAMI,MAAM,GAAGV,IAAI,CAACW,iBAAL,CAAuBH,MAAvB,EAA+BR,IAAI,CAACY,aAAL,CAAmBP,KAAnB,CAA/B,CAAf;AACAQ,YAAU,CAACH,MAAD,EAASJ,KAAT,EAAgBE,MAAhB,CAAV;AAEA,SAAOL,OAAO,CAACW,cAAR,CAAuBT,KAAvB,EAA8BG,MAA9B,EAAsCE,MAAtC,CAAP;AACD;AAED,OAAO,MAAMK,UAAU,GAAiB;AACtCC,YAAU,EAAEjB,IAD0B;AAEtCkB,aAAW,EAAE,KAFyB;AAGtCC,YAAU,EAAEjB;AAH0B,CAAjC;;AAMP,SAASY,UAAT,CACIH,MADJ,EACwBJ,KADxB,EAC8CC,KAD9C,EAC6D;AAC3D,MAAIA,KAAK,KAAK,QAAd,EAAwB;AACrBG,UAAmB,CAACT,IAApB,CAAyBK,KAAzB;AACF,GAFD,MAEO;AACJI,UAAqB,CAACT,IAAtB,CAA2BK,KAA3B;AACF;AACF","names":["Fill","util","fill","args","backend","attrs","shape","value","dtype","$dtype","inferDtype","values","getArrayFromDType","sizeFromShape","fillValues","makeTensorInfo","fillConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Fill.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, DataValues, Fill, FillAttrs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function fill(args: {backend: MathBackendCPU, attrs: FillAttrs}):\n    TensorInfo {\n  const {backend, attrs} = args;\n  const {shape, value, dtype} = attrs;\n\n  const $dtype = dtype || util.inferDtype(value);\n  const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n  fillValues(values, value, $dtype);\n\n  return backend.makeTensorInfo(shape, $dtype, values);\n}\n\nexport const fillConfig: KernelConfig = {\n  kernelName: Fill,\n  backendName: 'cpu',\n  kernelFunc: fill as {} as KernelFunc\n};\n\nfunction fillValues(\n    values: DataValues, value: string|number, dtype: DataType): void {\n  if (dtype === 'string') {\n    (values as string[]).fill(value as string);\n  } else {\n    (values as TypedArray).fill(value as number);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}