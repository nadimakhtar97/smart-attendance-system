{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { MPRandGauss } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction randomNormal_(shape) {\n  let mean = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let stdDev = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let dtype = arguments.length > 3 ? arguments[3] : undefined;\n  let seed = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (dtype != null && dtype === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n\n  const randGauss = new MPRandGauss(mean, stdDev, dtype, false\n  /* truncated */\n  , seed);\n  const res = buffer(shape, dtype);\n\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n\n  return res.toTensor();\n}\n\nexport const randomNormal = op({\n  randomNormal_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,SAAQA,MAAR,QAAqB,UAArB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,WAAR,QAA0B,aAA1B;AAEA;;;;;;;;;;;;;;;;AAeA,SAASC,aAAT,CACIC,KADJ,EAEiB;AAAA,MADOC,IACP,uEADc,CACd;AAAA,MADiBC,MACjB,uEAD0B,CAC1B;AAAA,MAD6BC,KAC7B;AAAA,MAAbC,IAAa;;AACf,MAAID,KAAK,IAAI,IAAT,IAAkBA,KAAkB,KAAK,MAA7C,EAAqD;AACnD,UAAM,IAAIE,KAAJ,CAAU,yBAAyBF,KAAK,EAAxC,CAAN;AACD;;AACD,QAAMG,SAAS,GACX,IAAIR,WAAJ,CAAgBG,IAAhB,EAAsBC,MAAtB,EAA8BC,KAA9B,EAAqC;AAAM;AAA3C,IAA4DC,IAA5D,CADJ;AAEA,QAAMG,GAAG,GAAGX,MAAM,CAACI,KAAD,EAAQG,KAAR,CAAlB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAJ,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1CD,OAAG,CAACE,MAAJ,CAAWD,CAAX,IAAgBF,SAAS,CAACK,SAAV,EAAhB;AACD;;AACD,SAAOJ,GAAG,CAACK,QAAJ,EAAP;AACD;;AAED,OAAO,MAAMC,YAAY,GAAGhB,EAAE,CAAC;AAACE;AAAD,CAAD,CAAvB","names":["buffer","op","MPRandGauss","randomNormal_","shape","mean","stdDev","dtype","seed","Error","randGauss","res","i","values","length","nextValue","toTensor","randomNormal"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/random_normal.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {MPRandGauss} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a normal distribution.\n *\n * ```js\n * tf.randomNormal([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param mean The mean of the normal distribution.\n * @param stdDev The standard deviation of the normal distribution.\n * @param dtype The data type of the output.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomNormal_<R extends Rank>(\n    shape: ShapeMap[R], mean = 0, stdDev = 1, dtype?: 'float32'|'int32',\n    seed?: number): Tensor<R> {\n  if (dtype != null && (dtype as DataType) === 'bool') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const randGauss =\n      new MPRandGauss(mean, stdDev, dtype, false /* truncated */, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = randGauss.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomNormal = op({randomNormal_});\n"]},"metadata":{},"sourceType":"module"}