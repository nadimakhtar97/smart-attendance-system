{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function cast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dtype\n  } = attrs; // Casting to complex64.\n\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({\n        inputs: {\n          x\n        },\n        backend\n      });\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        dtype: 'float32'\n      }\n    });\n    const result = complex({\n      inputs: {\n        real: floatX,\n        imag: zerosTensorInfo\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n    return result;\n  } // Casting from complex64\n\n\n  if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const result = cast({\n      inputs: {\n        x: realPart\n      },\n      backend,\n      attrs: {\n        dtype\n      }\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n    return {\n      dataId: result.dataId,\n      shape: result.shape,\n      dtype\n    };\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values;\n    const zero = util.toTypedArray([0], x.dtype);\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => a !== b ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast\n};","map":{"version":3,"mappings":"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","names":["Cast","util","createSimpleBinaryKernelImpl","zeros","complex","identity","real","cast","args","inputs","backend","attrs","x","dtype","zerosTensorInfo","shape","floatX","result","imag","disposeIntermediateTensorInfo","realPart","input","hasEncodingLoss","dataId","values","data","get","resultValues","Int32Array","from","makeTensorInfo","xVals","zero","toTypedArray","resultData","resultShape","a","b","Error","castConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Cast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Cast, CastAttrs, CastInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {createSimpleBinaryKernelImpl} from '../utils/binary_impl';\nimport {zeros} from '../utils/zeros_impl';\n\nimport {complex} from './Complex';\nimport {identity} from './Identity';\nimport {real} from './Real';\n\nexport function cast(\n    args: {inputs: CastInputs, backend: MathBackendCPU, attrs: CastAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dtype} = attrs;\n\n  // Casting to complex64.\n  if (dtype === 'complex64') {\n    if (x.dtype === 'complex64') {\n      return identity({inputs: {x}, backend});\n    }\n\n    const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n    const floatX = cast({inputs: {x}, backend, attrs: {dtype: 'float32'}});\n\n    const result =\n        complex({inputs: {real: floatX, imag: zerosTensorInfo}, backend});\n\n    backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n    backend.disposeIntermediateTensorInfo(floatX);\n\n    return result;\n  }\n\n  // Casting from complex64\n  if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const result = cast({inputs: {x: realPart}, backend, attrs: {dtype}});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n\n    return result;\n  }\n\n  if (!util.hasEncodingLoss(x.dtype, dtype)) {\n    // We don't change the underlying data, since we cast to higher\n    // precision.\n    const result = identity({inputs: {x}, backend});\n    return {dataId: result.dataId, shape: result.shape, dtype};\n  }\n\n  if (dtype === 'int32') {\n    const values = backend.data.get(x.dataId).values as TypedArray;\n    const resultValues = Int32Array.from(values);\n    return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n  }\n\n  if (dtype === 'bool') {\n    // This is essentially the result of notEqual(x, 0). We avoid using\n    // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n    // cast -> notEqual -> binary_utils.\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const zero = util.toTypedArray([0], x.dtype);\n\n    const [resultData, resultShape] = createSimpleBinaryKernelImpl(\n        (a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n\n    return backend.makeTensorInfo(resultShape, 'bool', resultData);\n  }\n\n  throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\n\nexport const castConfig: KernelConfig = {\n  kernelName: Cast,\n  backendName: 'cpu',\n  kernelFunc: cast as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}