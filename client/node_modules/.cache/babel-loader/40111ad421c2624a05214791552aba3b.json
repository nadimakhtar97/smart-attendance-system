{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { BatchNormProgram } from '../batchnorm_gpu';\nimport { BatchNormPackedProgram } from '../batchnorm_packed_gpu';\nexport const batchNorm = _ref => {\n  let {\n    inputs,\n    backend,\n    attrs\n  } = _ref;\n  const {\n    x,\n    mean,\n    variance,\n    offset,\n    scale\n  } = inputs;\n  util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n  util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n  util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n  let {\n    varianceEpsilon\n  } = attrs;\n\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n  let offsetShape = null;\n\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ? new BatchNormPackedProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon) : new BatchNormProgram(x.shape, mean.shape, variance.shape, offsetShape, scaleShape, varianceEpsilon);\n  const output = backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n  return output;\n};\nexport const batchNormConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm\n};","map":{"version":3,"mappings":"AACA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,EAAaC,cAAb,EAA8GC,IAA9G,QAAyH,uBAAzH;AAGA,SAAQC,gBAAR,QAA+B,kBAA/B;AACA,SAAQC,sBAAR,QAAqC,yBAArC;AAEA,OAAO,MAAMC,SAAS,GAIH,QAA6B;AAAA,MAA5B;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,GAA4B;AAC9C,QAAM;AAACC,KAAD;AAAIC,QAAJ;AAAUC,YAAV;AAAoBC,UAApB;AAA4BC;AAA5B,MAAqCP,MAA3C;AAEAJ,MAAI,CAACY,MAAL,CACIJ,IAAI,CAACK,KAAL,CAAWC,MAAX,KAAsBL,QAAQ,CAACI,KAAT,CAAeC,MADzC,EAEI,MAAM,qEACF,cAHR;AAIAd,MAAI,CAACY,MAAL,CACIF,MAAM,IAAI,IAAV,IAAkBF,IAAI,CAACK,KAAL,CAAWC,MAAX,KAAsBJ,MAAM,CAACG,KAAP,CAAaC,MADzD,EAEI,MAAM,mEACF,cAHR;AAIAd,MAAI,CAACY,MAAL,CACID,KAAK,IAAI,IAAT,IAAiBH,IAAI,CAACK,KAAL,CAAWC,MAAX,KAAsBH,KAAK,CAACE,KAAN,CAAYC,MADvD,EAEI,MAAM,kEACF,cAHR;AAKA,MAAI;AAACC;AAAD,MAAoBT,KAAxB;;AACA,MAAIS,eAAe,IAAI,IAAvB,EAA6B;AAC3BA,mBAAe,GAAG,KAAlB;AACD;;AAED,QAAMC,WAAW,GAAG,CAACT,CAAD,EAAIC,IAAJ,EAAUC,QAAV,CAApB;AAEA,MAAIQ,WAAW,GAAG,IAAlB;;AACA,MAAIP,MAAM,IAAI,IAAd,EAAoB;AAClBO,eAAW,GAAGP,MAAM,CAACG,KAArB;AACAG,eAAW,CAACE,IAAZ,CAAiBR,MAAjB;AACD;;AAED,MAAIS,UAAU,GAAG,IAAjB;;AACA,MAAIR,KAAK,IAAI,IAAb,EAAmB;AACjBQ,cAAU,GAAGR,KAAK,CAACE,KAAnB;AACAG,eAAW,CAACE,IAAZ,CAAiBP,KAAjB;AACD;;AAED,QAAMS,OAAO,GAAGtB,GAAG,GAAGuB,OAAN,CAAc,0BAAd,IACZ,IAAInB,sBAAJ,CACIK,CAAC,CAACM,KADN,EACaL,IAAI,CAACK,KADlB,EACyBJ,QAAQ,CAACI,KADlC,EACyCI,WADzC,EACsDE,UADtD,EAEIJ,eAFJ,CADY,GAIZ,IAAId,gBAAJ,CACIM,CAAC,CAACM,KADN,EACaL,IAAI,CAACK,KADlB,EACyBJ,QAAQ,CAACI,KADlC,EACyCI,WADzC,EACsDE,UADtD,EAEIJ,eAFJ,CAJJ;AAOA,QAAMO,MAAM,GACRjB,OAAO,CAACkB,eAAR,CAAwBH,OAAxB,EAAiCJ,WAAjC,EAA8CA,WAAW,CAAC,CAAD,CAAX,CAAeQ,KAA7D,CADJ;AAGA,SAAOF,MAAP;AACD,CAlDM;AAoDP,OAAO,MAAMG,eAAe,GAAiB;AAC3CC,YAAU,EAAE3B,cAD+B;AAE3C4B,aAAW,EAAE,OAF8B;AAG3CC,YAAU,EAAEzB;AAH+B,CAAtC","names":["env","FusedBatchNorm","util","BatchNormProgram","BatchNormPackedProgram","batchNorm","inputs","backend","attrs","x","mean","variance","offset","scale","assert","shape","length","varianceEpsilon","finalInputs","offsetShape","push","scaleShape","program","getBool","output","runWebGLProgram","dtype","batchNormConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/BatchNorm.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, FusedBatchNorm, FusedBatchNormAttrs, FusedBatchNormInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {BatchNormProgram} from '../batchnorm_gpu';\nimport {BatchNormPackedProgram} from '../batchnorm_packed_gpu';\n\nexport const batchNorm: (params: {\n  inputs: FusedBatchNormInputs,\n  backend: MathBackendWebGL,\n  attrs: FusedBatchNormAttrs\n}) => TensorInfo = ({inputs, backend, attrs}) => {\n  const {x, mean, variance, offset, scale} = inputs;\n\n  util.assert(\n      mean.shape.length === variance.shape.length,\n      () => 'Batch normalization gradient requires mean and variance to have ' +\n          'equal ranks.');\n  util.assert(\n      offset == null || mean.shape.length === offset.shape.length,\n      () => 'Batch normalization gradient requires mean and offset to have ' +\n          'equal ranks.');\n  util.assert(\n      scale == null || mean.shape.length === scale.shape.length,\n      () => 'Batch normalization gradient requires mean and scale to have ' +\n          'equal ranks.');\n\n  let {varianceEpsilon} = attrs;\n  if (varianceEpsilon == null) {\n    varianceEpsilon = 0.001;\n  }\n\n  const finalInputs = [x, mean, variance];\n\n  let offsetShape = null;\n  if (offset != null) {\n    offsetShape = offset.shape;\n    finalInputs.push(offset);\n  }\n\n  let scaleShape = null;\n  if (scale != null) {\n    scaleShape = scale.shape;\n    finalInputs.push(scale);\n  }\n\n  const program = env().getBool('WEBGL_PACK_NORMALIZATION') ?\n      new BatchNormPackedProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon) :\n      new BatchNormProgram(\n          x.shape, mean.shape, variance.shape, offsetShape, scaleShape,\n          varianceEpsilon);\n  const output =\n      backend.runWebGLProgram(program, finalInputs, finalInputs[0].dtype);\n\n  return output;\n};\n\nexport const batchNormConfig: KernelConfig = {\n  kernelName: FusedBatchNorm,\n  backendName: 'webgl',\n  kernelFunc: batchNorm as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}