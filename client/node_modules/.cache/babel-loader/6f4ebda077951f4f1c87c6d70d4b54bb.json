{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims({\n      inputs: {\n        input: inputs[0]\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n  inputs.forEach(t => {\n    util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n    util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n  });\n  const intermediateTensorInfos = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT = expandDims({\n      inputs: {\n        input: t\n      },\n      backend,\n      attrs: {\n        dim: axis\n      }\n    });\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n  const result = concat({\n    inputs: expandedTensors,\n    backend,\n    attrs: {\n      axis\n    }\n  });\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const packConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,IAAlC,EAA2EC,IAA3E,QAAsF,uBAAtF;AAGA,SAAQC,MAAR,QAAqB,UAArB;AACA,SAAQC,UAAR,QAAyB,cAAzB;AAEA,OAAM,SAAUC,IAAV,CACFC,IADE,EACqE;AAEzE,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAASD,KAAf;;AAEA,MAAIF,MAAM,CAACI,MAAP,KAAkB,CAAtB,EAAyB;AACvB,WAAOP,UAAU,CACb;AAACG,YAAM,EAAE;AAACK,aAAK,EAAEL,MAAM,CAAC,CAAD;AAAd,OAAT;AAA6BC,aAA7B;AAAsCC,WAAK,EAAE;AAACI,WAAG,EAAEH;AAAN;AAA7C,KADa,CAAjB;AAED;;AAED,QAAMI,KAAK,GAAGP,MAAM,CAAC,CAAD,CAAN,CAAUO,KAAxB;AACA,QAAMC,KAAK,GAAGR,MAAM,CAAC,CAAD,CAAN,CAAUQ,KAAxB;AAEAR,QAAM,CAACS,OAAP,CAAeC,CAAC,IAAG;AACjBf,QAAI,CAACgB,iBAAL,CACIJ,KADJ,EACWG,CAAC,CAACH,KADb,EAEI,uDAFJ;AAGAZ,QAAI,CAACiB,MAAL,CACIJ,KAAK,KAAKE,CAAC,CAACF,KADhB,EAEI,MAAM,uDAFV;AAGD,GAPD;AASA,QAAMK,uBAAuB,GAAiB,EAA9C;AACA,QAAMC,eAAe,GAAGd,MAAM,CAACe,GAAP,CAAWL,CAAC,IAAG;AACrC,UAAMM,SAAS,GACXnB,UAAU,CAAC;AAACG,YAAM,EAAE;AAACK,aAAK,EAAEK;AAAR,OAAT;AAAqBT,aAArB;AAA8BC,WAAK,EAAE;AAACI,WAAG,EAAEH;AAAN;AAArC,KAAD,CADd;AAEAU,2BAAuB,CAACI,IAAxB,CAA6BD,SAA7B;AACA,WAAOA,SAAP;AACD,GALuB,CAAxB;AAOA,QAAME,MAAM,GAAGtB,MAAM,CAAC;AAACI,UAAM,EAAEc,eAAT;AAA0Bb,WAA1B;AAAmCC,SAAK,EAAE;AAACC;AAAD;AAA1C,GAAD,CAArB;AAEAU,yBAAuB,CAACJ,OAAxB,CACIC,CAAC,IAAIT,OAAO,CAACkB,6BAAR,CAAsCT,CAAtC,CADT;AAGA,SAAOQ,MAAP;AACD;AAED,OAAO,MAAME,UAAU,GAAiB;AACtCC,YAAU,EAAE3B,IAD0B;AAEtC4B,aAAW,EAAE,OAFyB;AAGtCC,YAAU,EAAEzB;AAH0B,CAAjC","names":["Pack","util","concat","expandDims","pack","args","inputs","backend","attrs","axis","length","input","dim","shape","dtype","forEach","t","assertShapesMatch","assert","intermediateTensorInfos","expandedTensors","map","expandedT","push","result","disposeIntermediateTensorInfo","packConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Pack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Pack, PackAttrs, PackInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concat} from './Concat';\nimport {expandDims} from './ExpandDims';\n\nexport function pack(\n    args: {inputs: PackInputs, backend: MathBackendWebGL, attrs: PackAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  if (inputs.length === 1) {\n    return expandDims(\n        {inputs: {input: inputs[0]}, backend, attrs: {dim: axis}});\n  }\n\n  const shape = inputs[0].shape;\n  const dtype = inputs[0].dtype;\n\n  inputs.forEach(t => {\n    util.assertShapesMatch(\n        shape, t.shape,\n        'All tensors passed to stack must have matching shapes');\n    util.assert(\n        dtype === t.dtype,\n        () => 'All tensors passed to stack must have matching dtypes');\n  });\n\n  const intermediateTensorInfos: TensorInfo[] = [];\n  const expandedTensors = inputs.map(t => {\n    const expandedT =\n        expandDims({inputs: {input: t}, backend, attrs: {dim: axis}});\n    intermediateTensorInfos.push(expandedT);\n    return expandedT;\n  });\n\n  const result = concat({inputs: expandedTensors, backend, attrs: {axis}});\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const packConfig: KernelConfig = {\n  kernelName: Pack,\n  backendName: 'webgl',\n  kernelFunc: pack as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}