{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { getReductionAxes } from '../ops/broadcast_util';\nimport { mul } from '../ops/mul';\nimport { reshape } from '../ops/reshape';\nimport { rsqrt } from '../ops/rsqrt';\nimport { scalar } from '../ops/scalar';\nimport { sub } from '../ops/sub';\nimport { sum } from '../ops/sum';\nimport { tile } from '../ops/tile';\nexport const fusedBatchNormGradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      varianceEpsilon\n    } = attrs;\n    const [x, mean, variance, scale] = saved;\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape = [];\n\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n\n      tileShape.push(1);\n    }\n\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance), scalar(-0.5));\n\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(mul(mul(dy, tile(reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]), tileShape)), scaleValue), x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n\n    const derMean = () => {\n      let meanDer = mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n\n      return reshape(meanDer, mean.shape);\n    };\n\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n\n      return reshape(varianceDer, mean.shape);\n    };\n\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n\n      return reshape(scaleDer, mean.shape);\n    };\n\n    const derOffset = () => {\n      let offsetDer = dy;\n\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n\n      return reshape(offsetDer, mean.shape);\n    };\n\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,cAAR,QAAkD,iBAAlD;AAEA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,gBAAR,QAA+B,uBAA/B;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;AACA,SAAQC,KAAR,QAAoB,cAApB;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,IAAR,QAAmB,aAAnB;AAIA,OAAO,MAAMC,wBAAwB,GAAe;AAClDC,YAAU,EAAEX,cADsC;AAElDY,cAAY,EAAE,CAAC,GAAD,EAAM,MAAN,EAAc,UAAd,EAA0B,OAA1B,CAFoC;AAGlDC,UAAQ,EAAE,CACNC,EADM,EACMC,KADN,EACuBC,KADvB,KAC8C;AACtD,UAAM;AAACC;AAAD,QAAoBD,KAA1B;AACA,UAAM,CAACE,CAAD,EAAIC,IAAJ,EAAUC,QAAV,EAAoBC,KAApB,IAA6BN,KAAnC;AAEA,UAAMO,UAAU,GAAGD,KAAK,IAAI,IAAT,GAAgBf,MAAM,CAAC,CAAD,CAAtB,GAA4Be,KAA/C;AACA,UAAME,aAAa,GAAGrB,gBAAgB,CAACiB,IAAI,CAACK,KAAN,EAAaN,CAAC,CAACM,KAAf,CAAtC;AACA,UAAMC,SAAS,GAAa,EAA5B;;AACA,QAAIN,IAAI,CAACO,IAAL,KAAc,CAAlB,EAAqB;AACnB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,CAAC,CAACM,KAAF,CAAQI,MAAR,GAAiB,CAArC,EAAwC,EAAED,CAA1C,EAA6C;AAC3CF,iBAAS,CAACI,IAAV,CAAeX,CAAC,CAACM,KAAF,CAAQG,CAAR,CAAf;AACD;;AACDF,eAAS,CAACI,IAAV,CAAe,CAAf;AACD;;AAED,UAAMC,UAAU,GAAGvB,GAAG,CAACW,CAAD,EAAIC,IAAJ,CAAtB;AACA,UAAMY,iBAAiB,GAAG5B,GAAG,CAACW,EAAD,EAAKQ,UAAL,CAA7B;AACA,UAAMU,mBAAmB,GAAG3B,KAAK,CAACJ,GAAG,CAACmB,QAAD,EAAWd,MAAM,CAACW,eAAD,CAAjB,CAAJ,CAAjC;AACA,UAAMgB,cAAc,GAAG9B,GAAG,CACtBA,GAAG,CAACA,GAAG,CAAC6B,mBAAD,EAAsBA,mBAAtB,CAAJ,EAAgDA,mBAAhD,CADmB,EAEtB1B,MAAM,CAAC,CAAC,GAAF,CAFgB,CAA1B;;AAIA,UAAM4B,IAAI,GAAG,MAAK;AAChB,UAAIf,IAAI,CAACO,IAAL,KAAc,CAAlB,EAAqB;AACnB,eAAOtB,OAAO,CACVD,GAAG,CAACA,GAAG,CAACW,EAAD,EACCL,IAAI,CACAL,OAAO,CAAC4B,mBAAD,EAAsB,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAUb,IAAI,CAACK,KAAL,CAAW,CAAX,CAAV,CAAtB,CADP,EAEAC,SAFA,CADL,CAAJ,EAICH,UAJD,CADO,EAMVJ,CAAC,CAACM,KANQ,CAAd;AAOD,OARD,MAQO;AACL,eAAOpB,OAAO,CAACD,GAAG,CAACA,GAAG,CAACW,EAAD,EAAKkB,mBAAL,CAAJ,EAA+BV,UAA/B,CAAJ,EAAgDJ,CAAC,CAACM,KAAlD,CAAd;AACD;AACF,KAZD;;AAaA,UAAMW,OAAO,GAAG,MAAK;AACnB,UAAIC,OAAO,GACPjC,GAAG,CAACA,GAAG,CAAC6B,mBAAD,EAAsB1B,MAAM,CAAC,CAAC,CAAF,CAA5B,CAAJ,EAAuCyB,iBAAvC,CADP;;AAEA,UAAIZ,IAAI,CAACO,IAAL,KAAc,CAAlB,EAAqB;AACnBU,eAAO,GAAG5B,GAAG,CAAC4B,OAAD,EAAUb,aAAV,CAAb;AACD;;AACD,aAAOnB,OAAO,CAACgC,OAAD,EAAUjB,IAAI,CAACK,KAAf,CAAd;AACD,KAPD;;AAQA,UAAMa,WAAW,GAAG,MAAK;AACvB,UAAIC,WAAW,GAAGnC,GAAG,CAACA,GAAG,CAAC8B,cAAD,EAAiBH,UAAjB,CAAJ,EAAkCC,iBAAlC,CAArB;;AAEA,UAAIZ,IAAI,CAACO,IAAL,KAAc,CAAlB,EAAqB;AACnBY,mBAAW,GAAG9B,GAAG,CAAC8B,WAAD,EAAcf,aAAd,CAAjB;AACD;;AACD,aAAOnB,OAAO,CAACkC,WAAD,EAAcnB,IAAI,CAACK,KAAnB,CAAd;AACD,KAPD;;AAQA,UAAMe,QAAQ,GAAG,MAAK;AACpB,YAAMC,qBAAqB,GAAGrC,GAAG,CAAC2B,UAAD,EAAaE,mBAAb,CAAjC;AAEA,UAAIS,QAAQ,GAAGtC,GAAG,CAACW,EAAD,EAAK0B,qBAAL,CAAlB;;AACA,UAAIrB,IAAI,CAACO,IAAL,KAAc,CAAlB,EAAqB;AACnBe,gBAAQ,GAAGjC,GAAG,CAACiC,QAAD,EAAWlB,aAAX,CAAd;AACD;;AACD,aAAOnB,OAAO,CAACqC,QAAD,EAAWtB,IAAI,CAACK,KAAhB,CAAd;AACD,KARD;;AASA,UAAMkB,SAAS,GAAG,MAAK;AACrB,UAAIC,SAAS,GAAG7B,EAAhB;;AACA,UAAIK,IAAI,CAACO,IAAL,KAAc,CAAlB,EAAqB;AACnBiB,iBAAS,GAAGnC,GAAG,CAACmC,SAAD,EAAYpB,aAAZ,CAAf;AACD;;AACD,aAAOnB,OAAO,CAACuC,SAAD,EAAYxB,IAAI,CAACK,KAAjB,CAAd;AACD,KAND;;AAQA,WAAO;AACLN,OAAC,EAAEgB,IADE;AAELf,UAAI,EAAEgB,OAFD;AAGLf,cAAQ,EAAEiB,WAHL;AAILhB,WAAK,EAAEkB,QAJF;AAKLK,YAAM,EAAEF;AALH,KAAP;AAOD;AA9EiD,CAA7C","names":["FusedBatchNorm","add","getReductionAxes","mul","reshape","rsqrt","scalar","sub","sum","tile","fusedBatchNormGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","varianceEpsilon","x","mean","variance","scale","scaleValue","reductionAxes","shape","tileShape","rank","i","length","push","xMinusMean","dyTimesScaleValue","oneOverSqrtVariance","minusHalfRCube","derX","derMean","meanDer","derVariance","varianceDer","derScale","xMinusMean2TimesRsqrt","scaleDer","derOffset","offsetDer","offset"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/FusedBatchNorm_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {FusedBatchNorm, FusedBatchNormAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {getReductionAxes} from '../ops/broadcast_util';\nimport {mul} from '../ops/mul';\nimport {reshape} from '../ops/reshape';\nimport {rsqrt} from '../ops/rsqrt';\nimport {scalar} from '../ops/scalar';\nimport {sub} from '../ops/sub';\nimport {sum} from '../ops/sum';\nimport {tile} from '../ops/tile';\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\n\nexport const fusedBatchNormGradConfig: GradConfig = {\n  kernelName: FusedBatchNorm,\n  inputsToSave: ['x', 'mean', 'variance', 'scale'],\n  gradFunc: <R extends Rank>(\n      dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {varianceEpsilon} = attrs as {} as FusedBatchNormAttrs;\n    const [x, mean, variance, scale] = saved;\n\n    const scaleValue = scale == null ? scalar(1) : scale;\n    const reductionAxes = getReductionAxes(mean.shape, x.shape);\n    const tileShape: number[] = [];\n    if (mean.rank === 1) {\n      for (let i = 0; i < x.shape.length - 1; ++i) {\n        tileShape.push(x.shape[i]);\n      }\n      tileShape.push(1);\n    }\n\n    const xMinusMean = sub(x, mean);\n    const dyTimesScaleValue = mul(dy, scaleValue);\n    const oneOverSqrtVariance = rsqrt(add(variance, scalar(varianceEpsilon)));\n    const minusHalfRCube = mul(\n        mul(mul(oneOverSqrtVariance, oneOverSqrtVariance), oneOverSqrtVariance),\n        scalar(-0.5));\n\n    const derX = () => {\n      if (mean.rank === 1) {\n        return reshape(\n            mul(mul(dy,\n                    tile(\n                        reshape(oneOverSqrtVariance, [1, 1, 1, mean.shape[0]]),\n                        tileShape)),\n                scaleValue),\n            x.shape);\n      } else {\n        return reshape(mul(mul(dy, oneOverSqrtVariance), scaleValue), x.shape);\n      }\n    };\n    const derMean = () => {\n      let meanDer =\n          mul(mul(oneOverSqrtVariance, scalar(-1)), dyTimesScaleValue);\n      if (mean.rank === 1) {\n        meanDer = sum(meanDer, reductionAxes);\n      }\n      return reshape(meanDer, mean.shape as ShapeMap[R]);\n    };\n    const derVariance = () => {\n      let varianceDer = mul(mul(minusHalfRCube, xMinusMean), dyTimesScaleValue);\n\n      if (mean.rank === 1) {\n        varianceDer = sum(varianceDer, reductionAxes);\n      }\n      return reshape(varianceDer, mean.shape as ShapeMap[R]);\n    };\n    const derScale = () => {\n      const xMinusMean2TimesRsqrt = mul(xMinusMean, oneOverSqrtVariance);\n\n      let scaleDer = mul(dy, xMinusMean2TimesRsqrt);\n      if (mean.rank === 1) {\n        scaleDer = sum(scaleDer, reductionAxes);\n      }\n      return reshape(scaleDer, mean.shape as ShapeMap[R]);\n    };\n    const derOffset = () => {\n      let offsetDer = dy;\n      if (mean.rank === 1) {\n        offsetDer = sum(offsetDer, reductionAxes);\n      }\n      return reshape(offsetDer, mean.shape as ShapeMap[R]);\n    };\n\n    return {\n      x: derX,\n      mean: derMean,\n      variance: derVariance,\n      scale: derScale,\n      offset: derOffset\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}