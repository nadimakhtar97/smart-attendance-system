{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function addN(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const tensors = inputs;\n  assertNotComplex(inputs, 'addN');\n  const vals = tensors.map(t => backend.data.get(t.dataId).values);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype);\n  const outVals = outBuf.values;\n\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAR,EAA0BC,MAA1B,QAAiG,uBAAjG;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAUC,IAAV,CAAeC,IAAf,EAAkE;AAEtE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAMG,OAAO,GAAGF,MAAhB;AAEAH,kBAAgB,CAACG,MAAD,EAAS,MAAT,CAAhB;AAEA,QAAMG,IAAI,GACND,OAAO,CAACE,GAAR,CAAYC,CAAC,IAAIJ,OAAO,CAACK,IAAR,CAAaC,GAAb,CAAiBF,CAAC,CAACG,MAAnB,EAA2BC,MAA5C,CADJ;AAEA,QAAMC,MAAM,GAAGd,MAAM,CAACM,OAAO,CAAC,CAAD,CAAP,CAAWS,KAAZ,EAAmBT,OAAO,CAAC,CAAD,CAAP,CAAWU,KAA9B,CAArB;AACA,QAAMC,OAAO,GAAGH,MAAM,CAACD,MAAvB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,OAAO,CAACa,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,UAAME,QAAQ,GAAGb,IAAI,CAACW,CAAD,CAArB;;AACA,SAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,OAAO,CAACE,MAA5B,EAAoCE,CAAC,EAArC,EAAyC;AACvCJ,aAAO,CAACI,CAAD,CAAP,IAAcD,QAAQ,CAACC,CAAD,CAAtB;AACD;AACF;;AAED,SAAOhB,OAAO,CAACiB,cAAR,CAAuBR,MAAM,CAACC,KAA9B,EAAqCD,MAAM,CAACE,KAA5C,EAAmDF,MAAM,CAACD,MAA1D,CAAP;AACD;AAED,OAAO,MAAMU,UAAU,GAAiB;AACtCC,YAAU,EAAEzB,IAD0B;AAEtC0B,aAAW,EAAE,KAFyB;AAGtCC,YAAU,EAAExB;AAH0B,CAAjC","names":["AddN","buffer","assertNotComplex","addN","args","inputs","backend","tensors","vals","map","t","data","get","dataId","values","outBuf","shape","dtype","outVals","i","length","currVals","j","makeTensorInfo","addNConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/AddN.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, buffer, KernelConfig, KernelFunc, Tensor, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const tensors = inputs as Tensor[];\n\n  assertNotComplex(inputs, 'addN');\n\n  const vals =\n      tensors.map(t => backend.data.get(t.dataId).values as TypedArray);\n  const outBuf = buffer(tensors[0].shape, tensors[0].dtype as 'float32');\n  const outVals = outBuf.values;\n  for (let i = 0; i < tensors.length; i++) {\n    const currVals = vals[i];\n    for (let j = 0; j < outVals.length; j++) {\n      outVals[j] += currVals[j];\n    }\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'cpu',\n  kernelFunc: addN as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}