{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nexport class UnaryOpProgram {\n  constructor(aShape, opSnippet) {\n    this.variableNames = ['A'];\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n\n}\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\nexport const LINEAR = `return x;`;\nexport const ABS = `return abs(x);`;\nexport function STEP() {\n  let alpha = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.0;\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\nexport const CLONE = 'return x;';\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,gBAAtB,QAA6C,cAA7C;AAEA,OAAM,MAAOC,cAAP,CAAqB;AAMzBC,cAAYC,MAAZ,EAA8BC,SAA9B,EAA+C;AAL/C,yBAAgB,CAAC,GAAD,CAAhB;AAME,SAAKC,WAAL,GAAmBF,MAAnB;AACA,SAAKG,mBAAL,GAA2BN,gBAAgB,CAAC,KAAKK,WAAL,CAAiBE,MAAlB,CAA3C;AACA,SAAKC,QAAL,GAAgB;;UAEVJ,SAAS;;;;;;;;;KAFf;AAYD;;AArBwB;AAwB3B,OAAO,MAAMK,iBAAiB,GAAG,yBAA1B;AAEP,OAAO,MAAMC,MAAM,GAAG,WAAf;AAEP,OAAO,MAAMC,GAAG,GAAG,gBAAZ;AAEP,OAAM,SAAUC,IAAV,GAA0B;AAAA,MAAXC,KAAW,uEAAH,GAAG;AAC9B,SAAOJ,iBAAiB,GAAG;mCACMI,KAAK;GADtC;AAGD;AAED,OAAO,MAAMC,GAAG,GAAG,yCAAZ;AACP,OAAO,MAAMC,IAAI,GAAGN,iBAAiB,GAAG;;CAAjC;AAIP,OAAO,MAAMO,KAAK,GAAGP,iBAAiB,GAAG;;CAAlC;AAIP,OAAO,MAAMQ,KAAK,GAAG,WAAd;AAEP,OAAO,MAAMC,OAAO,GAAG,qCAAhB","names":["useShapeUniforms","UnaryOpProgram","constructor","aShape","opSnippet","outputShape","enableShapeUniforms","length","userCode","CHECK_NAN_SNIPPET","LINEAR","ABS","STEP","alpha","ELU","RELU","RELU6","CLONE","SIGMOID"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/unaryop_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class UnaryOpProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n\n  constructor(aShape: number[], opSnippet: string) {\n    this.outputShape = aShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    this.userCode = `\n      float unaryOperation(float x) {\n        ${opSnippet}\n      }\n\n      void main() {\n        float x = getAAtOutCoords();\n        float y = unaryOperation(x);\n\n        setOutput(y);\n      }\n    `;\n  }\n}\n\nexport const CHECK_NAN_SNIPPET = `if (isnan(x)) return x;`;\n\nexport const LINEAR = `return x;`;\n\nexport const ABS = `return abs(x);`;\n\nexport function STEP(alpha = 0.0) {\n  return CHECK_NAN_SNIPPET + `\n    return x > 0.0 ? 1.0 : float(${alpha});\n  `;\n}\n\nexport const ELU = `return (x >= 0.0) ? x : (exp(x) - 1.0);`;\nexport const RELU = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : x;\n`;\n\nexport const RELU6 = CHECK_NAN_SNIPPET + `\n  return (x < 0.0) ? 0.0 : min(6.0, x);\n`;\n\nexport const CLONE = 'return x;';\n\nexport const SIGMOID = `return 1.0 / (1.0 + exp(-1.0 * x));`;\n"]},"metadata":{},"sourceType":"module"}