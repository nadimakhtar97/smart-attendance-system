{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { All, backend_util, util } from '@tensorflow/tfjs-core';\nimport { reduce } from '../kernel_utils/reduce';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function all(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis,\n    keepDims\n  } = attrs;\n  const xRank = x.shape.length;\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n\n  if (permutedAxes != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n  let res;\n\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: newShape\n      }\n    });\n  } else {\n    res = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\nexport const allConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all\n};","map":{"version":3,"mappings":"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","names":["All","backend_util","util","reduce","reshape","transpose","all","args","inputs","backend","attrs","x","axis","keepDims","xRank","shape","length","origAxes","parseAxisParam","axes","permutedAxes","getAxesPermutation","permutedX","perm","getInnerMostAxes","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","inSize","sizeFromShape","a2D","reduced","dtype","res","newShape","expandShapeToKeepDim","disposeIntermediateTensorInfo","allConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/All.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {All, AllAttrs, AllInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reduce} from '../kernel_utils/reduce';\n\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function all(\n    args: {inputs: AllInputs, backend: MathBackendWebGL, attrs: AllAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis, keepDims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const origAxes = util.parseAxisParam(axis, x.shape);\n  let axes = origAxes;\n  const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n  let permutedX = x;\n  if (permutedAxes != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    axes = backend_util.getInnerMostAxes(axes.length, xRank);\n  }\n\n  backend_util.assertAxesAreInnerMostDims('all', axes, xRank);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes(permutedX.shape, axes);\n  const inSize = util.sizeFromShape(reduceShape);\n\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  const reduced = reduce(a2D, a2D.dtype, 'all', backend);\n\n  let res;\n  if (keepDims) {\n    const newShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: newShape}});\n  } else {\n    res = reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n  }\n\n  backend.disposeIntermediateTensorInfo(a2D);\n  backend.disposeIntermediateTensorInfo(reduced);\n\n  if (permutedAxes != null) {\n    backend.disposeIntermediateTensorInfo(permutedX);\n  }\n\n  return res;\n}\n\nexport const allConfig: KernelConfig = {\n  kernelName: All,\n  backendName: 'webgl',\n  kernelFunc: all as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}