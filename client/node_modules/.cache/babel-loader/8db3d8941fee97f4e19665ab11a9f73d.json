{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FileChunkIterator } from './file_chunk_iterator';\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\n\nexport async function urlChunkIterator(url) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let fetchFunc = arguments.length > 2 ? arguments[2] : undefined;\n  let urlString;\n  let requestInit;\n\n  if (typeof url === 'string') {\n    urlString = url;\n  } else {\n    urlString = url.url;\n    requestInit = getRequestInitFromRequest(url);\n  }\n\n  const response = await (fetchFunc || util.fetch)(urlString, requestInit);\n\n  if (response.ok) {\n    const uint8Array = new Uint8Array(await response.arrayBuffer());\n    return new FileChunkIterator(uint8Array, options);\n  } else {\n    throw new Error(response.statusText);\n  }\n} // Generate RequestInit from Request to match tf.util.fetch signature.\n\nconst getRequestInitFromRequest = request => {\n  const init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity\n  };\n  return init;\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,IAAR,QAAmB,uBAAnB;AACA,SAAQC,iBAAR,QAA0D,uBAA1D;AAEA;;;;;;;;AAOA,OAAO,eAAeC,gBAAf,CACHC,GADG,EAEiB;AAAA,MADFC,OACE,uEADkC,EAClC;AAAA,MAApBC,SAAoB;AACtB,MAAIC,SAAJ;AACA,MAAIC,WAAJ;;AACA,MAAK,OAAOJ,GAAR,KAAiB,QAArB,EAA+B;AAC7BG,aAAS,GAAGH,GAAZ;AACD,GAFD,MAEO;AACLG,aAAS,GAAIH,GAAe,CAACA,GAA7B;AACAI,eAAW,GAAGC,yBAAyB,CAACL,GAAD,CAAvC;AACD;;AACD,QAAMM,QAAQ,GAAG,MAAM,CAACJ,SAAS,IAAIL,IAAI,CAACU,KAAnB,EAA0BJ,SAA1B,EAAqCC,WAArC,CAAvB;;AACA,MAAIE,QAAQ,CAACE,EAAb,EAAiB;AACf,UAAMC,UAAU,GAAG,IAAIC,UAAJ,CAAe,MAAMJ,QAAQ,CAACK,WAAT,EAArB,CAAnB;AACA,WAAO,IAAIb,iBAAJ,CAAsBW,UAAtB,EAAkCR,OAAlC,CAAP;AACD,GAHD,MAGO;AACL,UAAM,IAAIW,KAAJ,CAAUN,QAAQ,CAACO,UAAnB,CAAN;AACD;AACF,C,CAED;;AACA,MAAMR,yBAAyB,GAAIS,OAAD,IAAqB;AACrD,QAAMC,IAAI,GAAG;AACXC,UAAM,EAAEF,OAAO,CAACE,MADL;AAEXC,WAAO,EAAEH,OAAO,CAACG,OAFN;AAGXC,QAAI,EAAEJ,OAAO,CAACI,IAHH;AAIXC,QAAI,EAAEL,OAAO,CAACK,IAJH;AAKXC,eAAW,EAAEN,OAAO,CAACM,WALV;AAMXC,SAAK,EAAEP,OAAO,CAACO,KANJ;AAOXC,YAAQ,EAAER,OAAO,CAACQ,QAPP;AAQXC,YAAQ,EAAET,OAAO,CAACS,QARP;AASXC,aAAS,EAAEV,OAAO,CAACU;AATR,GAAb;AAWA,SAAOT,IAAP;AACD,CAbD","names":["util","FileChunkIterator","urlChunkIterator","url","options","fetchFunc","urlString","requestInit","getRequestInitFromRequest","response","fetch","ok","uint8Array","Uint8Array","arrayBuffer","Error","statusText","request","init","method","headers","body","mode","credentials","cache","redirect","referrer","integrity"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-data/src/iterators/url_chunk_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\nimport {FileChunkIterator, FileChunkIteratorOptions} from './file_chunk_iterator';\n\n/**\n * Provide a stream of chunks from a URL.\n *\n * Note this class first downloads the entire file into memory before providing\n * the first element from the stream.  This is because the Fetch API does not\n * yet reliably provide a reader stream for the response body.\n */\nexport async function urlChunkIterator(\n    url: RequestInfo, options: FileChunkIteratorOptions = {},\n    fetchFunc?: Function) {\n  let urlString;\n  let requestInit;\n  if ((typeof url) === 'string') {\n    urlString = url as string;\n  } else {\n    urlString = (url as Request).url;\n    requestInit = getRequestInitFromRequest(url as Request);\n  }\n  const response = await (fetchFunc || util.fetch)(urlString, requestInit);\n  if (response.ok) {\n    const uint8Array = new Uint8Array(await response.arrayBuffer());\n    return new FileChunkIterator(uint8Array, options);\n  } else {\n    throw new Error(response.statusText);\n  }\n}\n\n// Generate RequestInit from Request to match tf.util.fetch signature.\nconst getRequestInitFromRequest = (request: Request) => {\n  const init = {\n    method: request.method,\n    headers: request.headers,\n    body: request.body,\n    mode: request.mode,\n    credentials: request.credentials,\n    cache: request.cache,\n    redirect: request.redirect,\n    referrer: request.referrer,\n    integrity: request.integrity,\n  };\n  return init;\n};\n"]},"metadata":{},"sourceType":"module"}