{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nexport class Im2ColPackedProgram {\n  constructor(outputShape, convInfo) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    this.customUniforms = [{\n      name: 'inputShape',\n      type: 'ivec3'\n    }, {\n      name: 'pad',\n      type: 'ivec2'\n    }, {\n      name: 'stride',\n      type: 'ivec2'\n    }, {\n      name: 'dilation',\n      type: 'ivec2'\n    }, {\n      name: 'inChannels',\n      type: 'int'\n    }, {\n      name: 'itemsPerBlockRow',\n      type: 'int'\n    }, {\n      name: 'outWidth',\n      type: 'int'\n    }];\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {\n      dataFormat\n    } = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n    const boundsCheckingSnippet = this.enableShapeUniforms ? 'if(blockIndex < outShape[1] && pos < outShape[0]) {' : `if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,kBAAR,QAAiC,gBAAjC;AACA,SAAsBC,gBAAtB,QAA6C,cAA7C;AAEA,OAAM,MAAOC,mBAAP,CAA0B;AAiB9BC,cAAYC,WAAZ,EAAmCC,QAAnC,EAAoE;AAhBpE,yBAAgB,CAAC,GAAD,CAAhB;AACA,wBAAe,IAAf;AACA,wBAAe,IAAf;AAIA,0BAAiB,CACf;AAACC,UAAI,EAAE,YAAP;AAAqBC,UAAI,EAAE;AAA3B,KADe,EAEf;AAACD,UAAI,EAAE,KAAP;AAAcC,UAAI,EAAE;AAApB,KAFe,EAGf;AAACD,UAAI,EAAE,QAAP;AAAiBC,UAAI,EAAE;AAAvB,KAHe,EAIf;AAACD,UAAI,EAAE,UAAP;AAAmBC,UAAI,EAAE;AAAzB,KAJe,EAKf;AAACD,UAAI,EAAE,YAAP;AAAqBC,UAAI,EAAE;AAA3B,KALe,EAMf;AAACD,UAAI,EAAE,kBAAP;AAA2BC,UAAI,EAAE;AAAjC,KANe,EAOf;AAACD,UAAI,EAAE,UAAP;AAAmBC,UAAI,EAAE;AAAzB,KAPe,CAAjB;AAWE,SAAKH,WAAL,GAAmBA,WAAnB;AACA,SAAKI,mBAAL,GAA2BP,gBAAgB,CAAC,KAAKG,WAAL,CAAiBK,MAAlB,CAA3C;AACA,UAAM;AAACC;AAAD,QAAeL,QAArB;AACA,UAAMM,IAAI,GAAGX,kBAAkB,EAA/B;AACA,UAAMY,cAAc,GAAGF,UAAU,KAAK,cAAtC;AACA,UAAMG,MAAM,GAAGD,cAAc,GAAG,CAAH,GAAO,CAApC;AACA,UAAME,MAAM,GAAGF,cAAc,GAAG,CAAH,GAAO,CAApC;AAEA,UAAMG,qBAAqB,GAAG,KAAKP,mBAAL,GAC1B,qDAD0B,GAE1B,mBAAmBJ,WAAW,CAAC,CAAD,CAAG,aAAaA,WAAW,CAAC,CAAD,CAAG,KAFhE;AAGA,QAAIY,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAI,CAAzB,EAA4BA,GAAG,EAA/B,EAAmC;AACjC,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,IAAI,CAAzB,EAA4BA,GAAG,EAA/B,EAAmC;AACjCF,gBAAQ,IAAI;gCACYE,GAAG;yBACVD,GAAG;;YAEhBF,qBAAqB;;;;iCAIAF,MAAM;;;;;;;;mCAQJC,MAAM;;;;sBAInBF,cAAc;;2BAETK,GAAG,GAAG,CAAN,GAAUC,GAAG;;;;;2BAKbD,GAAG,GAAG,CAAN,GAAUC,GAAG;;;;;;;SA3BhC;AAmCD;AACF;;AAED,SAAKC,QAAL,GAAgB;;;;;;;;;UASVH,QAAQ;;UAERL,IAAI,CAACS,MAAM;;KAXjB;AAcD;;AArF6B","names":["getGlslDifferences","useShapeUniforms","Im2ColPackedProgram","constructor","outputShape","convInfo","name","type","enableShapeUniforms","length","dataFormat","glsl","isChannelsLast","rowDim","colDim","boundsCheckingSnippet","unrolled","row","col","userCode","output"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/im2col_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\n\nexport class Im2ColPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = true;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n  customUniforms = [\n    {name: 'inputShape', type: 'ivec3' as const },\n    {name: 'pad', type: 'ivec2' as const },\n    {name: 'stride', type: 'ivec2' as const },\n    {name: 'dilation', type: 'ivec2' as const },\n    {name: 'inChannels', type: 'int' as const },\n    {name: 'itemsPerBlockRow', type: 'int' as const },\n    {name: 'outWidth', type: 'int' as const },\n  ];\n\n  constructor(outputShape: number[], convInfo: backend_util.Conv2DInfo) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const {dataFormat} = convInfo;\n    const glsl = getGlslDifferences();\n    const isChannelsLast = dataFormat === 'channelsLast';\n    const rowDim = isChannelsLast ? 0 : 1;\n    const colDim = isChannelsLast ? 1 : 2;\n\n    const boundsCheckingSnippet = this.enableShapeUniforms ?\n        'if(blockIndex < outShape[1] && pos < outShape[0]) {' :\n        `if(blockIndex < ${outputShape[1]} && pos < ${outputShape[0]}) {`;\n    let unrolled = ``;\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        unrolled += `\n          blockIndex = rc.y + ${col};\n          pos = rc.x + ${row};\n\n          ${boundsCheckingSnippet}\n            offsetY = int(blockIndex / outWidth) * stride[0] - pad[0];\n            d0 = offsetY + dilation[0] * (pos / itemsPerBlockRow);\n\n            if(d0 < inputShape[${rowDim}] && d0 >= 0) {\n              // Use custom imod instead mod. On Intel GPU, mod may generate\n              // unexpected value.\n              // https://github.com/tensorflow/tfjs/issues/5447\n              offsetX = imod(blockIndex, outWidth) * stride[1] - pad[1];\n              d1 = offsetX + dilation[1] * (imod(pos, itemsPerBlockRow) /\n                  inChannels);\n\n              if(d1 < inputShape[${colDim}] && d1 >= 0) {\n\n                ch = imod(pos, inChannels);\n\n                if (${isChannelsLast}) {\n                  innerDims = vec2(d1, ch);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(d0, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                } else {\n                  innerDims = vec2(d0, d1);\n                  result[${row * 2 + col}] = getChannel(\n                    getA(ch, int(innerDims.x),\n                    int(innerDims.y)), innerDims);\n                }\n              }\n            }\n          }\n        `;\n      }\n    }\n\n    this.userCode = `\n      void main() {\n        ivec2 rc = getOutputCoords();\n\n        vec4 result = vec4(0);\n\n        int blockIndex, pos, offsetY, d0, offsetX, d1, ch;\n        vec2 innerDims;\n\n        ${unrolled}\n\n        ${glsl.output} = result;\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}