{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../gradients';\nimport { convertToTensor } from '../tensor_util_env';\nimport { mul } from './mul';\nimport { neg } from './neg';\nimport { op } from './operation';\nimport { sigmoid } from './sigmoid';\nimport { softplus } from './softplus';\n/**\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\n\nfunction logSigmoid_(x) {\n  const $x = convertToTensor(x, 'x', 'logSigmoid'); // Use a custom gradient to maintain previous implementation.\n  // There is no LogSigmoid kernel in TF so we can't use engine.runKernel\n  // directly\n\n  const customOp = customGrad(x => {\n    // TODO(yassogba) we can remove the chained softplus call here only\n    // after backends have modualrized softplus at which point we can call\n    // engine runKernel(..., Sotfplus, ...) directly.\n    const value = neg(softplus(neg(x)));\n\n    const gradFunc = dy => {\n      const derX = mul(dy, sigmoid(neg(x)));\n      return derX;\n    };\n\n    return {\n      value,\n      gradFunc\n    };\n  });\n  return customOp($x);\n}\n\nexport const logSigmoid = op({\n  logSigmoid_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,UAAR,QAAyB,cAAzB;AAEA,SAAQC,eAAR,QAA8B,oBAA9B;AAGA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA;;;;;;;;;;;;;;AAaA,SAASC,WAAT,CAAuCC,CAAvC,EAAsD;AACpD,QAAMC,EAAE,GAAGR,eAAe,CAACO,CAAD,EAAI,GAAJ,EAAS,YAAT,CAA1B,CADoD,CAGpD;AACA;AACA;;AACA,QAAME,QAAQ,GAAGV,UAAU,CAAEQ,CAAD,IAAc;AACxC;AACA;AACA;AACA,UAAMG,KAAK,GAAGR,GAAG,CAACG,QAAQ,CAACH,GAAG,CAACK,CAAD,CAAJ,CAAT,CAAjB;;AAEA,UAAMI,QAAQ,GAAIC,EAAD,IAAU;AACzB,YAAMC,IAAI,GAAGZ,GAAG,CAACW,EAAD,EAAKR,OAAO,CAACF,GAAG,CAACK,CAAD,CAAJ,CAAZ,CAAhB;AACA,aAAOM,IAAP;AACD,KAHD;;AAIA,WAAO;AAACH,WAAD;AAAQC;AAAR,KAAP;AACD,GAX0B,CAA3B;AAaA,SAAOF,QAAQ,CAACD,EAAD,CAAf;AACD;;AACD,OAAO,MAAMM,UAAU,GAAGX,EAAE,CAAC;AAACG;AAAD,CAAD,CAArB","names":["customGrad","convertToTensor","mul","neg","op","sigmoid","softplus","logSigmoid_","x","$x","customOp","value","gradFunc","dy","derX","logSigmoid"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/log_sigmoid.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {mul} from './mul';\nimport {neg} from './neg';\nimport {op} from './operation';\nimport {sigmoid} from './sigmoid';\nimport {softplus} from './softplus';\n\n/**\n * Computes log sigmoid of the input `tf.Tensor` element-wise:\n * `logSigmoid(x)`. For numerical stability, we use `-tf.softplus(-x)`.\n *\n * ```js\n * const x = tf.tensor1d([0, 1, -1, .7]);\n *\n * x.logSigmoid().print();  // or tf.logSigmoid(x)\n * ```\n * @param x The input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'Basic math'}\n */\nfunction logSigmoid_<T extends Tensor>(x: T|TensorLike): T {\n  const $x = convertToTensor(x, 'x', 'logSigmoid');\n\n  // Use a custom gradient to maintain previous implementation.\n  // There is no LogSigmoid kernel in TF so we can't use engine.runKernel\n  // directly\n  const customOp = customGrad((x: Tensor) => {\n    // TODO(yassogba) we can remove the chained softplus call here only\n    // after backends have modualrized softplus at which point we can call\n    // engine runKernel(..., Sotfplus, ...) directly.\n    const value = neg(softplus(neg(x)));\n\n    const gradFunc = (dy: T) => {\n      const derX = mul(dy, sigmoid(neg(x)));\n      return derX;\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($x) as T;\n}\nexport const logSigmoid = op({logSigmoid_});\n"]},"metadata":{},"sourceType":"module"}