{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace; // tslint:disable-next-line:no-any\n\nexport function getGlobalNamespace() {\n  if (globalNameSpace == null) {\n    // tslint:disable-next-line:no-any\n    let ns;\n\n    if (typeof window !== 'undefined') {\n      ns = window;\n    } else if (typeof global !== 'undefined') {\n      ns = global;\n    } else if (typeof process !== 'undefined') {\n      ns = process;\n    } else if (typeof self !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n\n    globalNameSpace = ns;\n  }\n\n  return globalNameSpace;\n} // tslint:disable-next-line:no-any\n\nfunction getGlobalMap() {\n  const ns = getGlobalNamespace();\n\n  if (ns._tfGlobals == null) {\n    ns._tfGlobals = new Map();\n  }\n\n  return ns._tfGlobals;\n}\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\n\n\nexport function getGlobal(key, init) {\n  const globalMap = getGlobalMap();\n\n  if (globalMap.has(key)) {\n    return globalMap.get(key);\n  } else {\n    const singleton = init();\n    globalMap.set(key, singleton);\n    return globalMap.get(key);\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA;AACA,IAAIA,eAAJ,C,CACA;;AACA,OAAM,SAAUC,kBAAV,GAA4B;AAChC,MAAID,eAAe,IAAI,IAAvB,EAA6B;AAC3B;AACA,QAAIE,EAAJ;;AACA,QAAI,OAAQC,MAAR,KAAoB,WAAxB,EAAqC;AACnCD,QAAE,GAAGC,MAAL;AACD,KAFD,MAEO,IAAI,OAAQC,MAAR,KAAoB,WAAxB,EAAqC;AAC1CF,QAAE,GAAGE,MAAL;AACD,KAFM,MAEA,IAAI,OAAQC,OAAR,KAAqB,WAAzB,EAAsC;AAC3CH,QAAE,GAAGG,OAAL;AACD,KAFM,MAEA,IAAI,OAAQC,IAAR,KAAkB,WAAtB,EAAmC;AACxCJ,QAAE,GAAGI,IAAL;AACD,KAFM,MAEA;AACL,YAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACDP,mBAAe,GAAGE,EAAlB;AACD;;AACD,SAAOF,eAAP;AACD,C,CAED;;AACA,SAASQ,YAAT,GAAqB;AACnB,QAAMN,EAAE,GAAGD,kBAAkB,EAA7B;;AACA,MAAIC,EAAE,CAACO,UAAH,IAAiB,IAArB,EAA2B;AACzBP,MAAE,CAACO,UAAH,GAAgB,IAAIC,GAAJ,EAAhB;AACD;;AACD,SAAOR,EAAE,CAACO,UAAV;AACD;AAED;;;;;;;;;AAOA,OAAM,SAAUE,SAAV,CAAuBC,GAAvB,EAAoCC,IAApC,EAAiD;AACrD,QAAMC,SAAS,GAAGN,YAAY,EAA9B;;AACA,MAAIM,SAAS,CAACC,GAAV,CAAcH,GAAd,CAAJ,EAAwB;AACtB,WAAOE,SAAS,CAACE,GAAV,CAAcJ,GAAd,CAAP;AACD,GAFD,MAEO;AACL,UAAMK,SAAS,GAAGJ,IAAI,EAAtB;AACAC,aAAS,CAACI,GAAV,CAAcN,GAAd,EAAmBK,SAAnB;AACA,WAAOH,SAAS,CAACE,GAAV,CAAcJ,GAAd,CAAP;AACD;AACF","names":["globalNameSpace","getGlobalNamespace","ns","window","global","process","self","Error","getGlobalMap","_tfGlobals","Map","getGlobal","key","init","globalMap","has","get","singleton","set"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/global_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Note that the identifier globalNameSpace is scoped to this module, but will\n// always resolve to the same global object regardless of how the module is\n// resolved.\n// tslint:disable-next-line:no-any\nlet globalNameSpace: {_tfGlobals: Map<string, any>};\n// tslint:disable-next-line:no-any\nexport function getGlobalNamespace(): {_tfGlobals: Map<string, any>} {\n  if (globalNameSpace == null) {\n    // tslint:disable-next-line:no-any\n    let ns: any;\n    if (typeof (window) !== 'undefined') {\n      ns = window;\n    } else if (typeof (global) !== 'undefined') {\n      ns = global;\n    } else if (typeof (process) !== 'undefined') {\n      ns = process;\n    } else if (typeof (self) !== 'undefined') {\n      ns = self;\n    } else {\n      throw new Error('Could not find a global object');\n    }\n    globalNameSpace = ns;\n  }\n  return globalNameSpace;\n}\n\n// tslint:disable-next-line:no-any\nfunction getGlobalMap(): Map<string, any> {\n  const ns = getGlobalNamespace();\n  if (ns._tfGlobals == null) {\n    ns._tfGlobals = new Map();\n  }\n  return ns._tfGlobals;\n}\n\n/**\n * Returns a globally accessible 'singleton' object.\n *\n * @param key the name of the object\n * @param init a function to initialize to initialize this object\n *             the first time it is fetched.\n */\nexport function getGlobal<T>(key: string, init: () => T): T {\n  const globalMap = getGlobalMap();\n  if (globalMap.has(key)) {\n    return globalMap.get(key);\n  } else {\n    const singleton = init();\n    globalMap.set(key, singleton);\n    return globalMap.get(key);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}