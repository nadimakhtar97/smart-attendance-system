{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function scatterNd(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n  const outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0\n  /* defaultValue */\n  , sumDupeIndices);\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAgDC,SAAhD,QAA6G,uBAA7G;AAGA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,OAAM,SAAUC,SAAV,CAAoBC,IAApB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,WAAD;AAAUC;AAAV,MAAqBJ,MAA3B;AACA,QAAM;AAACK;AAAD,MAAUH,KAAhB;AAEA,QAAM;AAACI,aAAD;AAAYC,cAAZ;AAAwBC,aAAxB;AAAmCC,WAAnC;AAA4CC;AAA5C,MACFf,YAAY,CAACgB,eAAb,CAA6BP,OAA7B,EAAsCD,OAAtC,EAA+CE,KAA/C,CADJ;AAEA,QAAMO,cAAc,GAAG,IAAvB;AAEA,QAAMC,UAAU,GAAGZ,OAAO,CAACa,UAAR,CAAmBX,OAAnB,CAAnB;AACA,QAAMY,UAAU,GAAGd,OAAO,CAACa,UAAR,CAAmBV,OAAnB,CAAnB;AAEA,QAAMY,MAAM,GAAGnB,WAAW,CACtBgB,UADsB,EACVE,UADU,EACEV,KADF,EACSK,UADT,EACqBF,SADrB,EACgCD,UADhC,EAEtBD,SAFsB,EAEXG,OAFW,EAEF;AAAE;AAFA,IAEoBG,cAFpB,CAA1B;AAIA,SAAOX,OAAO,CAACgB,cAAR,CAAuBZ,KAAvB,EAA8BW,MAAM,CAACE,KAArC,EAA4CF,MAAM,CAACG,MAAnD,CAAP;AACD;AAED,OAAO,MAAMC,eAAe,GAAiB;AAC3CC,YAAU,EAAEzB,SAD+B;AAE3C0B,aAAW,EAAE,KAF8B;AAG3CC,YAAU,EAAEzB;AAH+B,CAAtC","names":["backend_util","ScatterNd","scatterImpl","scatterNd","args","inputs","backend","attrs","indices","updates","shape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","sumDupeIndices","indicesBuf","bufferSync","updatesBuf","outBuf","makeTensorInfo","dtype","values","scatterNdConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/ScatterNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendCPU,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n  const sumDupeIndices = true;\n\n  const indicesBuf = backend.bufferSync(indices);\n  const updatesBuf = backend.bufferSync(updates);\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n\n  return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'cpu',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}