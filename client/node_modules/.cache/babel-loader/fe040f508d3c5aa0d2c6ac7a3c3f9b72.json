{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\n\nexport async function resolveScalarsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  const promises = [];\n  const keys = [];\n  const scalarsToDispose = [];\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    } // Dispose the original scalar tensors.\n\n\n    dispose(scalarsToDispose);\n  }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\n\nexport function disposeTensorsInLogs(logs) {\n  if (logs == null) {\n    return;\n  }\n\n  for (const key in logs) {\n    const value = logs[key];\n\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;AAUA,SAAQA,OAAR,QAA8B,uBAA9B;AAWA;;;;;;AAKA,OAAO,eAAeC,oBAAf,CAAoCC,IAApC,EAAwD;AAC7D,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AACD,QAAMC,QAAQ,GAAuD,EAArE;AACA,QAAMC,IAAI,GAAa,EAAvB;AACA,QAAMC,gBAAgB,GAAa,EAAnC;;AACA,OAAK,MAAMC,GAAX,IAAkBJ,IAAlB,EAAwB;AACtB,UAAMK,KAAK,GAAGL,IAAI,CAACI,GAAD,CAAlB;;AACA,QAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC7B,YAAMC,WAAW,GAAGD,KAApB;AACAJ,cAAQ,CAACM,IAAT,CAAcD,WAAW,CAACE,IAAZ,EAAd;AACAN,UAAI,CAACK,IAAL,CAAUH,GAAV;AACAD,sBAAgB,CAACI,IAAjB,CAAsBD,WAAtB;AACD;AACF;;AACD,MAAIL,QAAQ,CAACQ,MAAT,GAAkB,CAAtB,EAAyB;AACvB,UAAMC,MAAM,GAAG,MAAMC,OAAO,CAACC,GAAR,CAAYX,QAAZ,CAArB;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACD,MAA3B,EAAmC,EAAEI,CAArC,EAAwC;AACtCb,UAAI,CAACE,IAAI,CAACW,CAAD,CAAL,CAAJ,GAAgBH,MAAM,CAACG,CAAD,CAAN,CAAU,CAAV,CAAhB;AACD,KAJsB,CAKvB;;;AACAf,WAAO,CAACK,gBAAD,CAAP;AACD;AACF;AAED;;;;;;;AAMA,OAAM,SAAUW,oBAAV,CAA+Bd,IAA/B,EAAmD;AACvD,MAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB;AACD;;AACD,OAAK,MAAMI,GAAX,IAAkBJ,IAAlB,EAAwB;AACtB,UAAMK,KAAK,GAAGL,IAAI,CAACI,GAAD,CAAlB;;AACA,QAAI,OAAOC,KAAP,KAAiB,QAArB,EAA+B;AAC7BA,WAAK,CAACP,OAAN;AACD;AACF;AACF","names":["dispose","resolveScalarsInLogs","logs","promises","keys","scalarsToDispose","key","value","valueScalar","push","data","length","values","Promise","all","i","disposeTensorsInLogs"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/logs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {dispose, Scalar} from '@tensorflow/tfjs-core';\n\n/**\n * Logs in which values can be either numbers or Tensors (Scalars).\n *\n * Used internally.\n */\nexport type UnresolvedLogs = {\n  [key: string]: number|Scalar;\n};\n\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  const promises: Array<Promise<Float32Array|Int32Array|Uint8Array>> = [];\n  const keys: string[] = [];\n  const scalarsToDispose: Scalar[] = [];\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      const valueScalar = value;\n      promises.push(valueScalar.data());\n      keys.push(key);\n      scalarsToDispose.push(valueScalar);\n    }\n  }\n  if (promises.length > 0) {\n    const values = await Promise.all(promises);\n    for (let i = 0; i < values.length; ++i) {\n      logs[keys[i]] = values[i][0];\n    }\n    // Dispose the original scalar tensors.\n    dispose(scalarsToDispose);\n  }\n}\n\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs: UnresolvedLogs) {\n  if (logs == null) {\n    return;\n  }\n  for (const key in logs) {\n    const value = logs[key];\n    if (typeof value !== 'number') {\n      value.dispose();\n    }\n  }\n}\n\n/**\n * Logs in which values can only be numbers.\n *\n * Used when calling client-provided custom callbacks.\n */\nexport type Logs = {\n  [key: string]: number;\n};\n"]},"metadata":{},"sourceType":"module"}