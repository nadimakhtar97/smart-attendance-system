{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// TODO update import path once op is modularized.\nimport { norm } from '../../ops/ops';\nimport { getGlobalTensorClass } from '../../tensor';\n\ngetGlobalTensorClass().prototype.norm = function (ord, axis, keepDims) {\n  this.throwIfDisposed();\n  return norm(this, ord, axis, keepDims);\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA;AACA,SAAQA,IAAR,QAAmB,eAAnB;AACA,SAAQC,oBAAR,QAA2C,cAA3C;;AAWAA,oBAAoB,GAAGC,SAAvB,CAAiCF,IAAjC,GAAwC,UACpCG,GADoC,EACJC,IADI,EAEpCC,QAFoC,EAElB;AACpB,OAAKC,eAAL;AACA,SAAON,IAAI,CAAC,IAAD,EAAOG,GAAP,EAAYC,IAAZ,EAAkBC,QAAlB,CAAX;AACD,CALD","names":["norm","getGlobalTensorClass","prototype","ord","axis","keepDims","throwIfDisposed"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/public/chained_ops/norm.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// TODO update import path once op is modularized.\nimport {norm} from '../../ops/ops';\nimport {getGlobalTensorClass, Tensor} from '../../tensor';\nimport {Rank} from '../../types';\n\ndeclare module '../../tensor' {\n  interface Tensor<R extends Rank = Rank> {\n    norm<T extends Tensor>(\n        ord?: number|'euclidean'|'fro', axis?: number|number[],\n        keepDims?: boolean): Tensor;\n  }\n}\n\ngetGlobalTensorClass().prototype.norm = function<T extends Tensor>(\n    ord?: number|'euclidean'|'fro', axis?: number|number[],\n    keepDims?: boolean) {\n  this.throwIfDisposed();\n  return norm(this, ord, axis, keepDims) as T;\n};\n"]},"metadata":{},"sourceType":"module"}