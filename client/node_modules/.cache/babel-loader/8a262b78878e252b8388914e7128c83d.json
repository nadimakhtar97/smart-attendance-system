{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils'; // mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\n\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\nexport const softplus = unaryKernelFunc(Softplus, xi => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold; // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n\n  const tooSmall = xi < threshold;\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n\n  return result;\n});\nexport const softplusConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,QAAtB,QAAqC,uBAArC;AAEA,SAAQC,eAAR,QAA8B,sBAA9B,C,CAEA;AAEA;AACA;AACA;;AACA,MAAMC,OAAO,GAAG,qBAAhB;AACA,MAAMC,SAAS,GAAGC,IAAI,CAACC,GAAL,CAASH,OAAT,IAAoB,GAAtC;AAEA,OAAO,MAAMI,QAAQ,GAAGL,eAAe,CAACD,QAAD,EAAYO,EAAD,IAAO;AACvD;AACA;AACA,QAAMC,QAAQ,GAAGD,EAAE,GAAG,CAACJ,SAAvB,CAHuD,CAKvD;AACA;;AACA,QAAMM,QAAQ,GAAGF,EAAE,GAAGJ,SAAtB;AAEA,QAAMO,IAAI,GAAGN,IAAI,CAACO,GAAL,CAASJ,EAAT,CAAb;AACA,MAAIK,MAAJ;;AAEA,MAAIH,QAAJ,EAAc;AACZG,UAAM,GAAGF,IAAT;AACD,GAFD,MAEO,IAAIF,QAAJ,EAAc;AACnBI,UAAM,GAAGL,EAAT;AACD,GAFM,MAEA;AACLK,UAAM,GAAGR,IAAI,CAACC,GAAL,CAAS,MAAMK,IAAf,CAAT;AACD;;AACD,SAAOE,MAAP;AACD,CApBsC,CAAhC;AAsBP,OAAO,MAAMC,cAAc,GAAiB;AAC1CC,YAAU,EAAEd,QAD8B;AAE1Ce,aAAW,EAAE,KAF6B;AAG1CC,YAAU,EAAEV;AAH8B,CAArC","names":["Softplus","unaryKernelFunc","epsilon","threshold","Math","log","softplus","xi","tooLarge","tooSmall","expX","exp","result","softplusConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Softplus.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, Softplus} from '@tensorflow/tfjs-core';\n\nimport {unaryKernelFunc} from '../utils/unary_utils';\n\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\n\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n  // Value above which exp(x) may overflow, but softplus(x) == x\n  // is within machine epsilon.\n  const tooLarge = xi > -threshold;\n\n  // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n  // is within machine epsilon.\n  const tooSmall = xi < threshold;\n\n  const expX = Math.exp(xi);\n  let result;\n\n  if (tooSmall) {\n    result = expX;\n  } else if (tooLarge) {\n    result = xi;\n  } else {\n    result = Math.log(1.0 + expX);\n  }\n  return result;\n});\n\nexport const softplusConfig: KernelConfig = {\n  kernelName: Softplus,\n  backendName: 'cpu',\n  kernelFunc: softplus,\n};\n"]},"metadata":{},"sourceType":"module"}