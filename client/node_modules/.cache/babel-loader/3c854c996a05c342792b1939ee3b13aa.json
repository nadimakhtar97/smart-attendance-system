{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getPadding, getParamValue } from './utils';\n\nfunction fusedConvAndDepthWiseParams(node, tensorMap, context) {\n  const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n  const isBiasAdd = extraOp === 'biasadd';\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n  const numArgs = getParamValue('numArgs', node, tensorMap, context);\n\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' + 'must have two extra arguments: bias and alpha.');\n    }\n\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error('FusedConv2d and DepthwiseConv2d with BiasAdd must have ' + 'one extra argument: bias.');\n    }\n  }\n\n  if (isBatchNorm) {\n    throw new Error('FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n\n  const stride = getParamValue('strides', node, tensorMap, context);\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n  const dilations = getParamValue('dilations', node, tensorMap, context);\n  let [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n\n  const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Conv1D':\n      {\n        const stride = getParamValue('stride', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilation = getParamValue('dilation', node, tensorMap, context);\n        return [tfOps.conv1d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), stride, pad, dataFormat, dilation)];\n      }\n\n    case 'Conv2D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        return [tfOps.conv2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n      }\n\n    case '_FusedConv2D':\n      {\n        const {\n          stride,\n          pad,\n          dataFormat,\n          dilations,\n          biasArg,\n          preluArg,\n          activationFunc,\n          leakyreluAlpha\n        } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n        return [tfOps.fused.conv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [stride[1], stride[2]],\n          pad: pad,\n          dataFormat: dataFormat,\n          dilations: [dilations[1], dilations[2]],\n          bias: biasArg,\n          activation: activationFunc,\n          preluActivationWeights: preluArg,\n          leakyreluAlpha\n        })];\n      }\n\n    case 'FusedDepthwiseConv2dNative':\n      {\n        const {\n          stride,\n          pad,\n          dataFormat,\n          dilations,\n          biasArg,\n          preluArg,\n          activationFunc,\n          leakyreluAlpha\n        } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n        return [tfOps.fused.depthwiseConv2d({\n          x: getParamValue('x', node, tensorMap, context),\n          filter: getParamValue('filter', node, tensorMap, context),\n          strides: [stride[1], stride[2]],\n          pad: pad,\n          dataFormat: dataFormat,\n          dilations: [dilations[1], dilations[2]],\n          bias: biasArg,\n          activation: activationFunc,\n          preluActivationWeights: preluArg,\n          leakyreluAlpha\n        })];\n      }\n\n    case 'Conv2DBackpropInput':\n    case 'Conv2dTranspose':\n      {\n        const shape = getParamValue('outputShape', node, tensorMap, context);\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        return [tfOps.conv2dTranspose(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), shape, [stride[1], stride[2]], pad)];\n      }\n\n    case 'DepthwiseConv2dNative':\n    case 'DepthwiseConv2d':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getPadding(node, tensorMap, context);\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        return [tfOps.depthwiseConv2d(getParamValue('input', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2]], pad, dataFormat, [dilations[1], dilations[2]])];\n      }\n\n    case 'Conv3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dataFormat = getParamValue('dataFormat', node, tensorMap, context).toUpperCase();\n        const dilations = getParamValue('dilations', node, tensorMap, context);\n        return [tfOps.conv3d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [stride[1], stride[2], stride[3]], pad, dataFormat, [dilations[1], dilations[2], dilations[3]])];\n      }\n\n    case 'AvgPool':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [tfOps.avgPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n      }\n\n    case 'MaxPool':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [tfOps.maxPool(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad)];\n      }\n\n    case 'MaxPoolWithArgmax':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        const includeBatchInIndex = getParamValue('includeBatchInIndex', node, tensorMap, context);\n        const {\n          result,\n          indexes\n        } = tfOps.maxPoolWithArgmax(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2]], [stride[1], stride[2]], pad, includeBatchInIndex);\n        return [result, indexes];\n      }\n\n    case 'AvgPool3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [tfOps.avgPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n      }\n\n    case 'MaxPool3D':\n      {\n        const stride = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const kernelSize = getParamValue('kernelSize', node, tensorMap, context);\n        return [tfOps.maxPool3d(getParamValue('x', node, tensorMap, context), [kernelSize[1], kernelSize[2], kernelSize[3]], [stride[1], stride[2], stride[3]], pad)];\n      }\n\n    case 'Dilation2D':\n      {\n        const strides = getParamValue('strides', node, tensorMap, context);\n        const pad = getParamValue('pad', node, tensorMap, context);\n        const dilations = getParamValue('dilations', node, tensorMap, context); // strides: [1, stride_height, stride_width, 1].\n\n        const strideHeight = strides[1];\n        const strideWidth = strides[2]; // dilations: [1, dilation_height, dilation_width, 1].\n\n        const dilationHeight = dilations[1];\n        const dilationWidth = dilations[2];\n        return [tfOps.dilation2d(getParamValue('x', node, tensorMap, context), getParamValue('filter', node, tensorMap, context), [strideHeight, strideWidth], pad, [dilationHeight, dilationWidth], 'NHWC'\n        /* dataFormat */\n        )];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'convolution';","map":{"version":3,"mappings":"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","names":["tfOps","getPadding","getParamValue","fusedConvAndDepthWiseParams","node","tensorMap","context","extraOp","activationFunc","isBiasAdd","noBiasAdd","isPrelu","isBatchNorm","numArgs","Error","stride","pad","dataFormat","toUpperCase","dilations","biasArg","preluArg","undefined","leakyreluAlpha","executeOp","op","dilation","conv1d","conv2d","fused","x","filter","strides","bias","activation","preluActivationWeights","depthwiseConv2d","shape","conv2dTranspose","conv3d","kernelSize","avgPool","maxPool","includeBatchInIndex","result","indexes","maxPoolWithArgmax","avgPool3d","maxPool3d","strideHeight","strideWidth","dilationHeight","dilationWidth","dilation2d","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/convolution_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Rank, Tensor, Tensor3D, Tensor4D, Tensor5D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getPadding, getParamValue} from './utils';\n\nfunction fusedConvAndDepthWiseParams(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) {\n  const [extraOp, activationFunc] =\n      (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n  const isBiasAdd = extraOp === 'biasadd';\n  const noBiasAdd = !isBiasAdd;\n  const isPrelu = activationFunc === 'prelu';\n  const isBatchNorm = extraOp === 'fusedbatchnorm';\n\n  const numArgs =\n      (getParamValue('numArgs', node, tensorMap, context) as number);\n  if (isBiasAdd) {\n    if (isPrelu && numArgs !== 2) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu ' +\n          'must have two extra arguments: bias and alpha.');\n    }\n    if (!isPrelu && isBiasAdd && numArgs !== 1) {\n      throw new Error(\n          'FusedConv2d and DepthwiseConv2d with BiasAdd must have ' +\n          'one extra argument: bias.');\n    }\n  }\n  if (isBatchNorm) {\n    throw new Error(\n        'FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported');\n  }\n  const stride = getParamValue('strides', node, tensorMap, context) as number[];\n  const pad = getPadding(node, tensorMap, context);\n  const dataFormat =\n      (getParamValue('dataFormat', node, tensorMap, context) as string)\n          .toUpperCase();\n  const dilations =\n      getParamValue('dilations', node, tensorMap, context) as number[];\n  let [biasArg, preluArg] =\n      getParamValue('args', node, tensorMap, context) as Tensor[];\n  if (noBiasAdd) {\n    preluArg = biasArg;\n    biasArg = undefined;\n  }\n  const leakyreluAlpha =\n      getParamValue('leakyreluAlpha', node, tensorMap, context) as number;\n\n  return {\n    stride,\n    pad,\n    dataFormat,\n    dilations,\n    biasArg,\n    preluArg,\n    activationFunc,\n    leakyreluAlpha\n  };\n}\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Conv1D': {\n          const stride =\n              getParamValue('stride', node, tensorMap, context) as number;\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilation =\n              getParamValue('dilation', node, tensorMap, context) as number;\n          return [tfOps.conv1d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              stride, pad as 'valid' | 'same', dataFormat as 'NWC' | 'NCW',\n              dilation)];\n        }\n        case 'Conv2D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case '_FusedConv2D': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.conv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n\n        case 'FusedDepthwiseConv2dNative': {\n          const {\n            stride,\n            pad,\n            dataFormat,\n            dilations,\n            biasArg,\n            preluArg,\n            activationFunc,\n            leakyreluAlpha,\n          } = fusedConvAndDepthWiseParams(node, tensorMap, context);\n\n          return [tfOps.fused.depthwiseConv2d({\n            x: getParamValue('x', node, tensorMap, context) as Tensor3D |\n                Tensor4D,\n            filter: getParamValue('filter', node, tensorMap, context) as\n                Tensor4D,\n            strides: [stride[1], stride[2]],\n            pad: pad as 'valid' | 'same',\n            dataFormat: dataFormat as 'NHWC' | 'NCHW',\n            dilations: [dilations[1], dilations[2]],\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n        }\n        case 'Conv2DBackpropInput':\n        case 'Conv2dTranspose': {\n          const shape = getParamValue(\n                            'outputShape', node, tensorMap,\n                            context) as [number, number, number] |\n              [number, number, number, number];\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          return [tfOps.conv2dTranspose(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              shape, [stride[1], stride[2]], pad as 'valid' | 'same')];\n        }\n        case 'DepthwiseConv2dNative':\n        case 'DepthwiseConv2d': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getPadding(node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n\n          return [tfOps.depthwiseConv2d(\n              getParamValue('input', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor4D,\n              [stride[1], stride[2]], pad as 'valid' | 'same',\n              dataFormat as 'NHWC' | 'NCHW', [dilations[1], dilations[2]])];\n        }\n        case 'Conv3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dataFormat =\n              (getParamValue('dataFormat', node, tensorMap, context) as string)\n                  .toUpperCase();\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n          return [tfOps.conv3d(\n              getParamValue('x', node, tensorMap, context) as Tensor4D |\n                  Tensor<Rank.R5>,\n              getParamValue('filter', node, tensorMap, context) as\n                  Tensor<Rank.R5>,\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same',\n              dataFormat as 'NDHWC' | 'NCDHW',\n              [dilations[1], dilations[2], dilations[3]])];\n        }\n        case 'AvgPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPool': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same')];\n        }\n        case 'MaxPoolWithArgmax': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n          const includeBatchInIndex =\n              getParamValue('includeBatchInIndex', node, tensorMap, context) as\n              boolean;\n          const {result, indexes} = tfOps.maxPoolWithArgmax(\n              getParamValue('x', node, tensorMap, context) as Tensor4D,\n              [kernelSize[1], kernelSize[2]], [stride[1], stride[2]],\n              pad as 'valid' | 'same', includeBatchInIndex);\n          return [result, indexes];\n        }\n        case 'AvgPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.avgPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'MaxPool3D': {\n          const stride =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const kernelSize =\n              getParamValue('kernelSize', node, tensorMap, context) as number[];\n\n          return [tfOps.maxPool3d(\n              getParamValue('x', node, tensorMap, context) as Tensor5D,\n              [kernelSize[1], kernelSize[2], kernelSize[3]],\n              [stride[1], stride[2], stride[3]], pad as 'valid' | 'same')];\n        }\n\n        case 'Dilation2D': {\n          const strides =\n              getParamValue('strides', node, tensorMap, context) as number[];\n          const pad = getParamValue('pad', node, tensorMap, context);\n          const dilations =\n              getParamValue('dilations', node, tensorMap, context) as number[];\n\n          // strides: [1, stride_height, stride_width, 1].\n          const strideHeight = strides[1];\n          const strideWidth = strides[2];\n\n          // dilations: [1, dilation_height, dilation_width, 1].\n          const dilationHeight = dilations[1];\n          const dilationWidth = dilations[2];\n\n          return [tfOps.dilation2d(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('filter', node, tensorMap, context) as Tensor3D,\n              [strideHeight, strideWidth], pad as 'valid' | 'same',\n              [dilationHeight, dilationWidth], 'NHWC' /* dataFormat */)];\n        }\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'convolution';\n"]},"metadata":{},"sourceType":"module"}