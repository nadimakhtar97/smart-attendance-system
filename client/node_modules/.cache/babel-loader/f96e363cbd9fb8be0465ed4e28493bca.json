{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseSegmentSum } from '@tensorflow/tfjs-core';\nimport { sparseSegmentReductionImplCPU } from '../kernel_utils/shared';\nexport function sparseSegmentSum(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    data,\n    indices,\n    segmentIds\n  } = inputs;\n\n  if (data.shape.length < 1) {\n    throw new Error(`Data should be at least 1 dimensional but received scalar`);\n  }\n\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId);\n  const $indices = backend.readSync(indices.dataId);\n  const $segmentIds = backend.readSync(segmentIds.dataId);\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU($data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\nexport const sparseSegmentSumConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,gBAAlC,QAAyG,uBAAzG;AAGA,SAAQC,6BAAR,QAA4C,wBAA5C;AAEA,OAAM,SAAUC,gBAAV,CACFC,IADE,EAC+D;AAEnE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG,QAAD;AAAOC,WAAP;AAAgBC;AAAhB,MAA8BJ,MAApC;;AACA,MAAIE,IAAI,CAACG,KAAL,CAAWC,MAAX,GAAoB,CAAxB,EAA2B;AACzB,UAAM,IAAIC,KAAJ,CACF,2DADE,CAAN;AAED;;AACD,MAAIJ,OAAO,CAACE,KAAR,CAAcC,MAAd,KAAyB,CAA7B,EAAgC;AAC9B,UAAM,IAAIC,KAAJ,CAAU;eACLJ,OAAO,CAACE,KAAK,EADlB,CAAN;AAED;;AACD,MAAID,UAAU,CAACC,KAAX,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,UAAM,IAAIC,KAAJ,CAAU;eACLH,UAAU,CAACC,KAAK,EADrB,CAAN;AAED;;AAED,QAAMG,KAAK,GAAGP,OAAO,CAACQ,QAAR,CAAiBP,IAAI,CAACQ,MAAtB,CAAd;AACA,QAAMC,QAAQ,GAAGV,OAAO,CAACQ,QAAR,CAAiBN,OAAO,CAACO,MAAzB,CAAjB;AACA,QAAME,WAAW,GAAGX,OAAO,CAACQ,QAAR,CAAiBL,UAAU,CAACM,MAA5B,CAApB;AAEA,QAAM,CAACG,UAAD,EAAaC,eAAb,IAAgCjB,6BAA6B,CAC/DW,KAD+D,EACxDN,IAAI,CAACG,KADmD,EAC5CH,IAAI,CAACa,KADuC,EAChCJ,QADgC,EACtBC,WADsB,CAAnE;AAEA,SAAOX,OAAO,CAACe,cAAR,CAAuBF,eAAvB,EAAwCZ,IAAI,CAACa,KAA7C,EAAoDF,UAApD,CAAP;AACD;AAED,OAAO,MAAMI,sBAAsB,GAAiB;AAClDC,YAAU,EAAEtB,gBADsC;AAElDuB,aAAW,EAAE,OAFqC;AAGlDC,YAAU,EAAEtB;AAHsC,CAA7C","names":["SparseSegmentSum","sparseSegmentReductionImplCPU","sparseSegmentSum","args","inputs","backend","data","indices","segmentIds","shape","length","Error","$data","readSync","dataId","$indices","$segmentIds","outputData","outputDataShape","dtype","makeTensorInfo","sparseSegmentSumConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/SparseSegmentSum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, SparseSegmentSum, SparseSegmentSumInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseSegmentReductionImplCPU} from '../kernel_utils/shared';\n\nexport function sparseSegmentSum(\n    args: {inputs: SparseSegmentSumInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {data, indices, segmentIds} = inputs;\n  if (data.shape.length < 1) {\n    throw new Error(\n        `Data should be at least 1 dimensional but received scalar`);\n  }\n  if (indices.shape.length !== 1) {\n    throw new Error(`Indices should be a vector but received shape\n             ${indices.shape}`);\n  }\n  if (segmentIds.shape.length !== 1) {\n    throw new Error(`Segment ids should be a vector but received shape\n             ${segmentIds.shape}`);\n  }\n\n  const $data = backend.readSync(data.dataId) as TypedArray;\n  const $indices = backend.readSync(indices.dataId) as TypedArray;\n  const $segmentIds = backend.readSync(segmentIds.dataId) as TypedArray;\n\n  const [outputData, outputDataShape] = sparseSegmentReductionImplCPU(\n      $data, data.shape, data.dtype, $indices, $segmentIds);\n  return backend.makeTensorInfo(outputDataShape, data.dtype, outputData);\n}\n\nexport const sparseSegmentSumConfig: KernelConfig = {\n  kernelName: SparseSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: sparseSegmentSum as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}