{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { dispose, tidy } from '../globals';\nimport { add } from '../ops/add';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { pow } from '../ops/pow';\nimport { scalar } from '../ops/scalar';\nimport { sqrt } from '../ops/sqrt';\nimport { square } from '../ops/square';\nimport { sub } from '../ops/sub';\nimport { zerosLike } from '../ops/zeros_like';\nimport { registerClass } from '../serialization';\nimport { Optimizer } from './optimizer';\nexport class AdamOptimizer extends Optimizer {\n  constructor(learningRate, beta1, beta2) {\n    let epsilon = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    super();\n    this.learningRate = learningRate;\n    this.beta1 = beta1;\n    this.beta2 = beta2;\n    this.epsilon = epsilon;\n    this.accumulatedFirstMoment = [];\n    this.accumulatedSecondMoment = [];\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients) {\n    const varNames = Array.isArray(variableGradients) ? variableGradients.map(v => v.name) : Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ? variableGradients[i].tensor : variableGradients[name];\n\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n        const newFirstMoment = add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment = add(mul(secondMoment, this.beta2), mul(square(gradient), 1 - this.beta2));\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment = div(newSecondMoment, oneMinusAccBeta2);\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n        const newValue = add(mul(div(biasCorrectedFirstMoment, add(sqrt(biasCorrectedSecondMoment), this.epsilon)), -this.learningRate), value);\n        value.assign(newValue);\n      });\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  dispose() {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  async getWeights() {\n    // Order matters for Python compatibility.\n    const variables = [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(variables.map(v => ({\n      name: v.originalName,\n      tensor: v.variable\n    })));\n  }\n\n  async setWeights(weightValues) {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment = weightValues.slice(0, variableCount).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n    this.accumulatedSecondMoment = weightValues.slice(variableCount, variableCount * 2).map(v => ({\n      originalName: v.name,\n      variable: v.tensor.variable(trainable)\n    }));\n  }\n\n  getConfig() {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls(config['learningRate'], config['beta1'], config['beta2'], config['epsilon']);\n  }\n\n}\n/** @nocollapse */\n\nAdamOptimizer.className = 'Adam'; // Note: Name matters for Python compatibility.\n\nregisterClass(AdamOptimizer);","map":{"version":3,"mappings":"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","names":["ENGINE","dispose","tidy","add","div","mul","pow","scalar","sqrt","square","sub","zerosLike","registerClass","Optimizer","AdamOptimizer","constructor","learningRate","beta1","beta2","epsilon","accBeta1","variable","accBeta2","backend","applyGradients","variableGradients","varNames","Array","isArray","map","v","name","Object","keys","oneMinusAccBeta1","oneMinusAccBeta2","forEach","i","value","registeredVariables","trainable","accumulatedFirstMoment","originalName","accumulatedSecondMoment","gradient","tensor","firstMoment","secondMoment","newFirstMoment","newSecondMoment","biasCorrectedFirstMoment","biasCorrectedSecondMoment","assign","newValue","incrementIterations","getWeights","variables","saveIterations","concat","setWeights","weightValues","extractIterations","iterations_","variableCount","length","slice","getConfig","fromConfig","cls","config"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/optimizers/adam_optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {dispose, tidy} from '../globals';\nimport {add} from '../ops/add';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {pow} from '../ops/pow';\nimport {scalar} from '../ops/scalar';\nimport {sqrt} from '../ops/sqrt';\nimport {square} from '../ops/square';\nimport {sub} from '../ops/sub';\nimport {zerosLike} from '../ops/zeros_like';\nimport {ConfigDict, registerClass, Serializable, SerializableConstructor} from '../serialization';\nimport {Variable} from '../tensor';\nimport {NamedTensor, NamedVariableMap} from '../tensor_types';\n\nimport {Optimizer, OptimizerVariable} from './optimizer';\n\nexport class AdamOptimizer extends Optimizer {\n  /** @nocollapse */\n  static className = 'Adam';  // Note: Name matters for Python compatibility.\n  private accBeta1: Variable;\n  private accBeta2: Variable;\n\n  private accumulatedFirstMoment: OptimizerVariable[] = [];\n  private accumulatedSecondMoment: OptimizerVariable[] = [];\n\n  constructor(\n      protected learningRate: number, protected beta1: number,\n      protected beta2: number, protected epsilon: number = null) {\n    super();\n    tidy(() => {\n      // accB* will be updated by batch.\n      this.accBeta1 = scalar(beta1).variable();\n      this.accBeta2 = scalar(beta2).variable();\n    });\n\n    if (epsilon == null) {\n      this.epsilon = ENGINE.backend.epsilon();\n    }\n  }\n\n  applyGradients(variableGradients: NamedVariableMap|NamedTensor[]) {\n    const varNames = Array.isArray(variableGradients) ?\n        variableGradients.map(v => v.name) :\n        Object.keys(variableGradients);\n    tidy(() => {\n      const oneMinusAccBeta1 = sub(1, this.accBeta1);\n      const oneMinusAccBeta2 = sub(1, this.accBeta2);\n\n      varNames.forEach((name, i) => {\n        const value = ENGINE.registeredVariables[name];\n        const trainable = false;\n        if (this.accumulatedFirstMoment[i] == null) {\n          this.accumulatedFirstMoment[i] = {\n            originalName: `${name}/m`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n        if (this.accumulatedSecondMoment[i] == null) {\n          this.accumulatedSecondMoment[i] = {\n            originalName: `${name}/v`,\n            variable: tidy(() => zerosLike(value).variable(trainable))\n          };\n        }\n\n        const gradient = Array.isArray(variableGradients) ?\n            variableGradients[i].tensor :\n            variableGradients[name];\n        if (gradient == null) {\n          return;\n        }\n\n        const firstMoment = this.accumulatedFirstMoment[i].variable;\n        const secondMoment = this.accumulatedSecondMoment[i].variable;\n\n        const newFirstMoment =\n            add(mul(firstMoment, this.beta1), mul(gradient, 1 - this.beta1));\n        const newSecondMoment =\n            add(mul(secondMoment, this.beta2),\n                mul(square(gradient), 1 - this.beta2));\n\n        const biasCorrectedFirstMoment = div(newFirstMoment, oneMinusAccBeta1);\n        const biasCorrectedSecondMoment =\n            div(newSecondMoment, oneMinusAccBeta2);\n\n        firstMoment.assign(newFirstMoment);\n        secondMoment.assign(newSecondMoment);\n\n        const newValue =\n            add(mul(div(biasCorrectedFirstMoment,\n                        add(sqrt(biasCorrectedSecondMoment), this.epsilon)),\n                    -this.learningRate),\n                value);\n        value.assign(newValue);\n      });\n\n      this.accBeta1.assign(mul(this.accBeta1, this.beta1));\n      this.accBeta2.assign(mul(this.accBeta2, this.beta2));\n    });\n    this.incrementIterations();\n  }\n\n  dispose(): void {\n    this.accBeta1.dispose();\n    this.accBeta2.dispose();\n\n    if (this.accumulatedFirstMoment != null) {\n      dispose(this.accumulatedFirstMoment.map(v => v.variable));\n    }\n    if (this.accumulatedSecondMoment != null) {\n      dispose(this.accumulatedSecondMoment.map(v => v.variable));\n    }\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    // Order matters for Python compatibility.\n    const variables: OptimizerVariable[] =\n        [...this.accumulatedFirstMoment, ...this.accumulatedSecondMoment];\n    return [await this.saveIterations()].concat(\n        variables.map(v => ({name: v.originalName, tensor: v.variable})));\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    weightValues = await this.extractIterations(weightValues);\n    tidy(() => {\n      this.accBeta1.assign(pow(this.beta1, this.iterations_ + 1));\n      this.accBeta2.assign(pow(this.beta2, this.iterations_ + 1));\n    });\n\n    const variableCount = weightValues.length / 2;\n    const trainable = false;\n    this.accumulatedFirstMoment =\n        weightValues.slice(0, variableCount).map(v => ({\n                                                   originalName: v.name,\n                                                   variable: v.tensor.variable(\n                                                       trainable)\n                                                 }));\n    this.accumulatedSecondMoment =\n        weightValues.slice(variableCount, variableCount * 2)\n            .map(v => ({\n                   originalName: v.name,\n                   variable: v.tensor.variable(trainable)\n                 }));\n  }\n\n  getConfig(): ConfigDict {\n    return {\n      'learningRate': this.learningRate,\n      'beta1': this.beta1,\n      'beta2': this.beta2,\n      'epsilon': this.epsilon,\n    };\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends Serializable>(\n      cls: SerializableConstructor<T>, config: ConfigDict): T {\n    return new cls(\n        config['learningRate'], config['beta1'], config['beta2'],\n        config['epsilon']);\n  }\n}\nregisterClass(AdamOptimizer);\n"]},"metadata":{},"sourceType":"module"}