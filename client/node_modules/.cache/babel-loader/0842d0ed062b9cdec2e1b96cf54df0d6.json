{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { binaryInsert } from './non_max_suppression_util';\nexport function nonMaxSuppressionV3Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0\n  /* softNmsSigma */\n  );\n}\nexport function nonMaxSuppressionV4Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, 0\n  /* softNmsSigma */\n  , false\n  /* returnScoresTensor */\n  , padToMaxOutputSize\n  /* padToMaxOutputSize */\n  , true\n  /* returnValidOutputs */\n  );\n}\nexport function nonMaxSuppressionV5Impl(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  return nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma, true\n  /* returnScoresTensor */\n  );\n}\n\nfunction nonMaxSuppressionImpl_(boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma) {\n  let returnScoresTensor = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n  let padToMaxOutputSize = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;\n  let returnValidOutputs = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : false;\n  // The list is sorted in ascending order, so that we can always pop the\n  // candidate with the largest score in O(1) time.\n  const candidates = [];\n\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] > scoreThreshold) {\n      candidates.push({\n        score: scores[i],\n        boxIndex: i,\n        suppressBeginIndex: 0\n      });\n    }\n  }\n\n  candidates.sort(ascendingComparator); // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n  // before.\n\n  const scale = softNmsSigma > 0 ? -0.5 / softNmsSigma : 0.0;\n  const selectedIndices = [];\n  const selectedScores = [];\n\n  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n    const candidate = candidates.pop();\n    const {\n      score: originalScore,\n      boxIndex,\n      suppressBeginIndex\n    } = candidate;\n\n    if (originalScore < scoreThreshold) {\n      break;\n    } // Overlapping boxes are likely to have similar scores, therefore we\n    // iterate through the previously selected boxes backwards in order to\n    // see if candidate's score should be suppressed. We use\n    // suppressBeginIndex to track and ensure a candidate can be suppressed\n    // by a selected box no more than once. Also, if the overlap exceeds\n    // iouThreshold, we simply ignore the candidate.\n\n\n    let ignoreCandidate = false;\n\n    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n\n      candidate.score = candidate.score * suppressWeight(iouThreshold, scale, iou);\n\n      if (candidate.score <= scoreThreshold) {\n        break;\n      }\n    } // At this point, if `candidate.score` has not dropped below\n    // `scoreThreshold`, then we know that we went through all of the\n    // previous selections and can safely update `suppressBeginIndex` to the\n    // end of the selected array. Then we can re-insert the candidate with\n    // the updated score and suppressBeginIndex back in the candidate list.\n    // If on the other hand, `candidate.score` has dropped below the score\n    // threshold, we will not add it back to the candidates list.\n\n\n    candidate.suppressBeginIndex = selectedIndices.length;\n\n    if (!ignoreCandidate) {\n      // Candidate has passed all the tests, and is not suppressed, so\n      // select the candidate.\n      if (candidate.score === originalScore) {\n        selectedIndices.push(boxIndex);\n        selectedScores.push(candidate.score);\n      } else if (candidate.score > scoreThreshold) {\n        // Candidate's score is suppressed but is still high enough to be\n        // considered, so add back to the candidates list.\n        binaryInsert(candidates, candidate, ascendingComparator);\n      }\n    }\n  } // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n\n\n  const validOutputs = selectedIndices.length;\n  const elemsToPad = maxOutputSize - validOutputs;\n\n  if (padToMaxOutputSize && elemsToPad > 0) {\n    selectedIndices.push(...new Array(elemsToPad).fill(0));\n    selectedScores.push(...new Array(elemsToPad).fill(0.0));\n  }\n\n  const result = {\n    selectedIndices\n  };\n\n  if (returnScoresTensor) {\n    result['selectedScores'] = selectedScores;\n  }\n\n  if (returnValidOutputs) {\n    result['validOutputs'] = validOutputs;\n  }\n\n  return result;\n}\n\nfunction intersectionOverUnion(boxes, i, j) {\n  const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  const yminI = Math.min(iCoord[0], iCoord[2]);\n  const xminI = Math.min(iCoord[1], iCoord[3]);\n  const ymaxI = Math.max(iCoord[0], iCoord[2]);\n  const xmaxI = Math.max(iCoord[1], iCoord[3]);\n  const yminJ = Math.min(jCoord[0], jCoord[2]);\n  const xminJ = Math.min(jCoord[1], jCoord[3]);\n  const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0;\n  }\n\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) * Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n} // A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\n\n\nfunction suppressWeight(iouThreshold, scale, iou) {\n  const weight = Math.exp(scale * iou * iou);\n  return iou <= iouThreshold ? weight : 0.0;\n}\n\nfunction ascendingComparator(c1, c2) {\n  // For objects with same scores, we make the object with the larger index go\n  // first. In an array that pops from the end, this means that the object with\n  // the smaller index will be popped first. This ensures the same output as\n  // the TensorFlow python version.\n  return c1.score - c2.score || c1.score === c2.score && c2.boxIndex - c1.boxIndex;\n}","map":{"version":3,"mappings":"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","names":["binaryInsert","nonMaxSuppressionV3Impl","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","nonMaxSuppressionImpl_","nonMaxSuppressionV4Impl","padToMaxOutputSize","nonMaxSuppressionV5Impl","softNmsSigma","returnScoresTensor","returnValidOutputs","candidates","i","length","push","score","boxIndex","suppressBeginIndex","sort","ascendingComparator","scale","selectedIndices","selectedScores","candidate","pop","originalScore","ignoreCandidate","j","iou","intersectionOverUnion","suppressWeight","validOutputs","elemsToPad","Array","fill","result","iCoord","subarray","jCoord","yminI","Math","min","xminI","ymaxI","max","xmaxI","yminJ","xminJ","ymaxJ","xmaxJ","areaI","areaJ","intersectionYmin","intersectionXmin","intersectionYmax","intersectionXmax","intersectionArea","weight","exp","c1","c2"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/backends/non_max_suppression_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray} from '../types';\nimport {binaryInsert} from './non_max_suppression_util';\n\n/**\n * Implementation of the NonMaxSuppression kernel shared between webgl and cpu.\n */\ninterface Candidate {\n  score: number;\n  boxIndex: number;\n  suppressBeginIndex: number;\n}\n\ninterface NonMaxSuppressionResult {\n  selectedIndices: number[];\n  selectedScores?: number[];\n  validOutputs?: number;\n}\n\nexport function nonMaxSuppressionV3Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n      0 /* softNmsSigma */);\n}\n\nexport function nonMaxSuppressionV4Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number,\n    padToMaxOutputSize: boolean): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold,\n      0 /* softNmsSigma */, false /* returnScoresTensor */,\n      padToMaxOutputSize /* padToMaxOutputSize */, true\n      /* returnValidOutputs */);\n}\n\nexport function nonMaxSuppressionV5Impl(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number,\n    softNmsSigma: number): NonMaxSuppressionResult {\n  return nonMaxSuppressionImpl_(\n      boxes, scores, maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma,\n      true /* returnScoresTensor */);\n}\n\nfunction nonMaxSuppressionImpl_(\n    boxes: TypedArray, scores: TypedArray, maxOutputSize: number,\n    iouThreshold: number, scoreThreshold: number, softNmsSigma: number,\n    returnScoresTensor = false, padToMaxOutputSize = false,\n    returnValidOutputs = false): NonMaxSuppressionResult {\n  // The list is sorted in ascending order, so that we can always pop the\n  // candidate with the largest score in O(1) time.\n  const candidates = [];\n\n  for (let i = 0; i < scores.length; i++) {\n    if (scores[i] > scoreThreshold) {\n      candidates.push({score: scores[i], boxIndex: i, suppressBeginIndex: 0});\n    }\n  }\n\n  candidates.sort(ascendingComparator);\n\n  // If softNmsSigma is 0, the outcome of this algorithm is exactly same as\n  // before.\n  const scale = softNmsSigma > 0 ? (-0.5 / softNmsSigma) : 0.0;\n\n  const selectedIndices: number[] = [];\n  const selectedScores: number[] = [];\n\n  while (selectedIndices.length < maxOutputSize && candidates.length > 0) {\n    const candidate = candidates.pop();\n    const {score: originalScore, boxIndex, suppressBeginIndex} = candidate;\n\n    if (originalScore < scoreThreshold) {\n      break;\n    }\n\n    // Overlapping boxes are likely to have similar scores, therefore we\n    // iterate through the previously selected boxes backwards in order to\n    // see if candidate's score should be suppressed. We use\n    // suppressBeginIndex to track and ensure a candidate can be suppressed\n    // by a selected box no more than once. Also, if the overlap exceeds\n    // iouThreshold, we simply ignore the candidate.\n    let ignoreCandidate = false;\n    for (let j = selectedIndices.length - 1; j >= suppressBeginIndex; --j) {\n      const iou = intersectionOverUnion(boxes, boxIndex, selectedIndices[j]);\n\n      if (iou >= iouThreshold) {\n        ignoreCandidate = true;\n        break;\n      }\n\n      candidate.score =\n          candidate.score * suppressWeight(iouThreshold, scale, iou);\n\n      if (candidate.score <= scoreThreshold) {\n        break;\n      }\n    }\n\n    // At this point, if `candidate.score` has not dropped below\n    // `scoreThreshold`, then we know that we went through all of the\n    // previous selections and can safely update `suppressBeginIndex` to the\n    // end of the selected array. Then we can re-insert the candidate with\n    // the updated score and suppressBeginIndex back in the candidate list.\n    // If on the other hand, `candidate.score` has dropped below the score\n    // threshold, we will not add it back to the candidates list.\n    candidate.suppressBeginIndex = selectedIndices.length;\n\n    if (!ignoreCandidate) {\n      // Candidate has passed all the tests, and is not suppressed, so\n      // select the candidate.\n      if (candidate.score === originalScore) {\n        selectedIndices.push(boxIndex);\n        selectedScores.push(candidate.score);\n      } else if (candidate.score > scoreThreshold) {\n        // Candidate's score is suppressed but is still high enough to be\n        // considered, so add back to the candidates list.\n        binaryInsert(candidates, candidate, ascendingComparator);\n      }\n    }\n  }\n\n  // NonMaxSuppressionV4 feature: padding output to maxOutputSize.\n  const validOutputs = selectedIndices.length;\n  const elemsToPad = maxOutputSize - validOutputs;\n\n  if (padToMaxOutputSize && elemsToPad > 0) {\n    selectedIndices.push(...new Array(elemsToPad).fill(0));\n    selectedScores.push(...new Array(elemsToPad).fill(0.0));\n  }\n\n  const result: NonMaxSuppressionResult = {selectedIndices};\n\n  if (returnScoresTensor) {\n    result['selectedScores'] = selectedScores;\n  }\n\n  if (returnValidOutputs) {\n    result['validOutputs'] = validOutputs;\n  }\n\n  return result;\n}\n\nfunction intersectionOverUnion(boxes: TypedArray, i: number, j: number) {\n  const iCoord = boxes.subarray(i * 4, i * 4 + 4);\n  const jCoord = boxes.subarray(j * 4, j * 4 + 4);\n  const yminI = Math.min(iCoord[0], iCoord[2]);\n  const xminI = Math.min(iCoord[1], iCoord[3]);\n  const ymaxI = Math.max(iCoord[0], iCoord[2]);\n  const xmaxI = Math.max(iCoord[1], iCoord[3]);\n  const yminJ = Math.min(jCoord[0], jCoord[2]);\n  const xminJ = Math.min(jCoord[1], jCoord[3]);\n  const ymaxJ = Math.max(jCoord[0], jCoord[2]);\n  const xmaxJ = Math.max(jCoord[1], jCoord[3]);\n  const areaI = (ymaxI - yminI) * (xmaxI - xminI);\n  const areaJ = (ymaxJ - yminJ) * (xmaxJ - xminJ);\n  if (areaI <= 0 || areaJ <= 0) {\n    return 0.0;\n  }\n  const intersectionYmin = Math.max(yminI, yminJ);\n  const intersectionXmin = Math.max(xminI, xminJ);\n  const intersectionYmax = Math.min(ymaxI, ymaxJ);\n  const intersectionXmax = Math.min(xmaxI, xmaxJ);\n  const intersectionArea = Math.max(intersectionYmax - intersectionYmin, 0.0) *\n      Math.max(intersectionXmax - intersectionXmin, 0.0);\n  return intersectionArea / (areaI + areaJ - intersectionArea);\n}\n\n// A Gaussian penalty function, this method always returns values in [0, 1].\n// The weight is a function of similarity, the more overlap two boxes are, the\n// smaller the weight is, meaning highly overlapping boxe will be significantly\n// penalized. On the other hand, a non-overlapping box will not be penalized.\nfunction suppressWeight(iouThreshold: number, scale: number, iou: number) {\n  const weight = Math.exp(scale * iou * iou);\n  return iou <= iouThreshold ? weight : 0.0;\n}\n\nfunction ascendingComparator(c1: Candidate, c2: Candidate) {\n  // For objects with same scores, we make the object with the larger index go\n  // first. In an array that pops from the end, this means that the object with\n  // the smaller index will be popped first. This ensures the same output as\n  // the TensorFlow python version.\n  return (c1.score - c2.score) ||\n      ((c1.score === c2.score) && (c2.boxIndex - c1.boxIndex));\n}\n"]},"metadata":{},"sourceType":"module"}