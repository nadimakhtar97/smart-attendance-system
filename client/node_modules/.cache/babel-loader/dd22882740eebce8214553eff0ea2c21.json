{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../complex';\nimport { concat } from '../concat';\nimport { imag } from '../imag';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { real } from '../real';\nimport { reshape } from '../reshape';\nimport { reverse } from '../reverse';\nimport { scalar } from '../scalar';\nimport { slice } from '../slice';\nimport { ifft } from './ifft';\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\n\nfunction irfft_(input) {\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  let ret;\n\n  if (innerDimensionSize <= 2) {\n    const complexInput = reshape(input, [batch, innerDimensionSize]);\n    ret = ifft(complexInput);\n  } else {\n    // The length of unique components of the DFT of a real-valued signal\n    // is 2 * (input_len - 1)\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = reshape(real(input), [batch, innerDimensionSize]);\n    const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n    const realConjugate = reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n    const imagConjugate = mul(reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1), scalar(-1));\n    const r = concat([realInput, realConjugate], 1);\n    const i = concat([imagInput, imagConjugate], 1);\n    const complexInput = reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n    ret = ifft(complexInput);\n  }\n\n  ret = real(ret); // reshape the result if the input is 3D tensor.\n\n  if (input.rank === 3 && input.shape[0] !== 0) {\n    const temp = ret;\n    const batch = input.shape[0];\n    ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n    temp.dispose();\n  }\n\n  return ret;\n}\n\nexport const irfft = op({\n  irfft_\n});","map":{"version":3,"mappings":"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","names":["complex","concat","imag","mul","op","real","reshape","reverse","scalar","slice","ifft","irfft_","input","innerDimensionSize","shape","length","batch","size","ret","complexInput","outputShape","realInput","imagInput","realConjugate","imagConjugate","r","i","rank","temp","dispose","irfft"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/spectral/irfft.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '../../tensor';\nimport {complex} from '../complex';\nimport {concat} from '../concat';\nimport {imag} from '../imag';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {real} from '../real';\nimport {reshape} from '../reshape';\nimport {reverse} from '../reverse';\nimport {scalar} from '../scalar';\nimport {slice} from '../slice';\n\nimport {ifft} from './ifft';\n\n/**\n * Inversed real value input fast Fourier transform.\n *\n * Computes the 1-dimensional inversed discrete Fourier transform over the\n * inner-most dimension of the real input.\n *\n * ```js\n * const real = tf.tensor1d([1, 2, 3]);\n * const imag = tf.tensor1d([0, 0, 0]);\n * const x = tf.complex(real, imag);\n *\n * x.irfft().print();\n * ```\n * @param input The real value input to compute an irfft over.\n *\n * @doc {heading: 'Operations', subheading: 'Spectral', namespace: 'spectral'}\n */\nfunction irfft_(input: Tensor): Tensor {\n  const innerDimensionSize = input.shape[input.shape.length - 1];\n  const batch = input.size / innerDimensionSize;\n  let ret: Tensor;\n  if (innerDimensionSize <= 2) {\n    const complexInput = reshape(input, [batch, innerDimensionSize]);\n    ret = ifft(complexInput);\n  } else {\n    // The length of unique components of the DFT of a real-valued signal\n    // is 2 * (input_len - 1)\n    const outputShape = [batch, 2 * (innerDimensionSize - 1)];\n    const realInput = reshape(real(input), [batch, innerDimensionSize]);\n    const imagInput = reshape(imag(input), [batch, innerDimensionSize]);\n\n    const realConjugate =\n        reverse(slice(realInput, [0, 1], [batch, innerDimensionSize - 2]), 1);\n    const imagConjugate: Tensor2D = mul(\n        reverse(slice(imagInput, [0, 1], [batch, innerDimensionSize - 2]), 1),\n        scalar(-1));\n\n    const r = concat([realInput, realConjugate], 1);\n    const i = concat([imagInput, imagConjugate], 1);\n    const complexInput =\n        reshape(complex(r, i), [outputShape[0], outputShape[1]]);\n    ret = ifft(complexInput);\n  }\n  ret = real(ret);\n  // reshape the result if the input is 3D tensor.\n  if (input.rank === 3 && input.shape[0] !== 0) {\n    const temp = ret;\n    const batch = input.shape[0];\n    ret = reshape(ret, [batch, ret.shape[0] / batch, ret.shape[1]]);\n    temp.dispose();\n  }\n  return ret;\n}\n\nexport const irfft = op({irfft_});\n"]},"metadata":{},"sourceType":"module"}