{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, ZipMismatchMode } from './iterators/lazy_iterator';\nimport { canTensorify, deepMapAndAwaitAll, isIterable } from './util/deep_map'; // TODO(soergel): consider vectorized operations within the pipeline.\n\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\n\nexport class Dataset {\n  constructor() {\n    this.size = null;\n  } // TODO(soergel): Make Datasets report whether repeated iterator() calls\n  // produce the same result (e.g., reading from a file) or different results\n  // (e.g., from the webcam).  Currently we don't make this distinction but it\n  // could be important for the user to know.\n  // abstract isDeterministic(): boolean;\n\n  /**\n   * Groups elements into batches.\n   *\n   * It is assumed that each of the incoming dataset elements has the same\n   * structure-- i.e. the same set of keys at each location in an object\n   * hierarchy.  For each key, the resulting `Dataset` provides a batched\n   * element collecting all of the incoming values for that key.\n   *\n   *  * Incoming primitives are grouped into a 1-D Tensor.\n   *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is\n   *    the batch dimension.\n   *  * Incoming arrays are converted to Tensor and then batched.\n   *  * A nested array is interpreted as an n-D Tensor, so the batched result\n   *    has n+1 dimensions.\n   *  * An array that cannot be converted to Tensor produces an error.\n   *\n   * If an array should not be batched as a unit, it should first be converted\n   * to an object with integer keys.\n   *\n   * Here are a few examples:\n   *\n   * Batch a dataset of numbers:\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n   * await a.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of arrays:\n   * ```js\n   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n   * await b.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of objects:\n   * ```js\n   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n   *   {a: 8, b: 18}]).batch(4);\n   * await c.forEachAsync(e => {\n   *   console.log('{');\n   *   for(var key in e) {\n   *     console.log(key+':');\n   *     e[key].print();\n   *   }\n   *   console.log('}');\n   * })\n   * ```\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `Dataset`, from which a stream of batches can be obtained.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  batch(batchSize) {\n    let smallLastBatch = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    const base = this;\n    tf.util.assert(batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n    let size;\n\n    if (this.size === Infinity || this.size == null) {\n      // If the size of this dataset is infinity or null, the new size keeps the\n      // same.\n      size = this.size;\n    } else if (smallLastBatch) {\n      // If the size of this dataset is known and include small last batch, the\n      // new size is full batch count plus last batch.\n      size = Math.ceil(this.size / batchSize);\n    } else {\n      // If the size of this dataset is known and not include small last batch,\n      // the new size is full batch count.\n      size = Math.floor(this.size / batchSize);\n    }\n\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n    }, size);\n  }\n  /**\n   * Concatenates this `Dataset` with another.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * const b = tf.data.array([4, 5, 6]);\n   * const c = a.concatenate(b);\n   * await c.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param dataset A `Dataset` to be concatenated onto this one.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  concatenate(dataset) {\n    const base = this;\n    let size;\n\n    if (this.size === Infinity || dataset.size === Infinity) {\n      // If the size of any of these two dataset is infinity, new size is\n      // infinity.\n      size = Infinity;\n    } else if (this.size != null && dataset.size != null) {\n      // If the size of both datasets are known and not infinity, new size is\n      // sum the size of these two datasets.\n      size = this.size + dataset.size;\n    } else {\n      // If neither of these two datasets has infinite size and any of these two\n      // datasets' size is null, the new size is null.\n      size = null;\n    }\n\n    return datasetFromIteratorFn(async () => (await base.iterator()).concatenate(await dataset.iterator()), size);\n  }\n  /**\n   * Filters this dataset according to `predicate`.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n   *   .filter(x => x%2 === 0);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param predicate A function mapping a dataset element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `Dataset` of elements for which the predicate was true.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  filter(predicate) {\n    const base = this;\n    let size;\n\n    if (this.size === Infinity) {\n      // If the size of this dataset is infinity, new size is infinity\n      size = Infinity;\n    } else {\n      // If this dataset has limited elements, new size is null because it might\n      // exhausted randomly.\n      size = null;\n    }\n\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).filter(x => tf.tidy(() => predicate(x)));\n    }, size);\n  }\n  /**\n   * Apply a function to every element of the dataset.\n   *\n   * After the function is applied to a dataset element, any Tensors contained\n   * within that element are disposed.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param f A function to apply to each dataset element.\n   * @returns A `Promise` that resolves after all elements have been processed.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  async forEachAsync(f) {\n    return (await this.iterator()).forEachAsync(f);\n  }\n  /**\n   * Maps this dataset through a 1-to-1 transform.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a transformed\n   *   dataset element.\n   *\n   * @returns A `Dataset` of transformed elements.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  map(transform) {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).map(x => tf.tidy(() => transform(x)));\n    }, this.size);\n  }\n  /**\n   * Maps this dataset through an async 1-to-1 transform.\n   *\n   * ```js\n   * const a =\n   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n   *    setTimeout(() => {\n   *      resolve(x * x);\n   *    }, Math.random()*1000 + 500);\n   *  }));\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a `Promise` for a\n   *   transformed dataset element.  This transform is responsible for disposing\n   *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n   *   `map()` case).\n   *\n   * @returns A `Dataset` of transformed elements.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  mapAsync(transform) {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).mapAsync(transform);\n    }, this.size);\n  }\n  /**\n   *  Creates a `Dataset` that prefetches elements from this dataset.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  prefetch(bufferSize) {\n    if (bufferSize == null) {\n      throw new RangeError('`Dataset.prefetch()` requires bufferSize to be specified.');\n    }\n\n    const base = this;\n    return datasetFromIteratorFn(async () => (await base.iterator()).prefetch(bufferSize), this.size);\n  }\n  /**\n   * Repeats this dataset `count` times.\n   *\n   * NOTE: If this dataset is a function of global state (e.g. a random number\n   * generator), then different repetitions may produce different elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).repeat(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: (Optional) An integer, representing the number of times\n   *   the dataset should be repeated. The default behavior (if `count` is\n   *   `undefined` or negative) is for the dataset be repeated indefinitely.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  repeat(count) {\n    const base = this;\n    let size;\n\n    if (this.size != null && count > 0) {\n      // If this dataset has size and count is positive, new size is current\n      // size multiply count. This also covers the case that current size is\n      // infinity.\n      size = this.size * count;\n    } else if (count === 0) {\n      // If count is 0, new size is 0.\n      size = 0;\n    } else if (this.size != null && (count === undefined || count < 0)) {\n      // If this dataset has size and count is undefined or negative, the\n      // dataset will be repeated indefinitely and new size is infinity.\n      size = Infinity;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n\n    return datasetFromIteratorFn(async () => {\n      const iteratorIterator = iteratorFromFunction(async () => ({\n        value: await base.iterator(),\n        done: false\n      }));\n      return iteratorFromConcatenated(iteratorIterator.take(count));\n    }, size);\n  }\n  /**\n   * Creates a `Dataset` that skips `count` initial elements from this dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be skipped\n   *   to form the new dataset.  If `count` is greater than the size of this\n   *   dataset, the new dataset will contain no elements.  If `count`\n   *   is `undefined` or negative, skips the entire dataset.\n   *\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  skip(count) {\n    const base = this;\n    let size;\n\n    if (this.size != null && count >= 0 && this.size >= count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is current size minus skipped size.This also covers the case that\n      // current size is infinity.\n      size = this.size - count;\n    } else if (this.size != null && (this.size < count || count === undefined || count < 0)) {\n      // If the size of this dataset is smaller than count, or count is\n      // undefined or negative, skips the entire dataset and the new size is 0.\n      size = 0;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n\n    return datasetFromIteratorFn(async () => (await base.iterator()).skip(count), size);\n  }\n  /**\n   * Pseudorandomly shuffles the elements of this dataset. This is done in a\n   * streaming manner, by sampling from a given number of prefetched elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param bufferSize: An integer specifying the number of elements from this\n   *   dataset from which the new dataset will sample.\n   * @param seed: (Optional) An integer specifying the random seed that will\n   *   be used to create the distribution.\n   * @param reshuffleEachIteration: (Optional) A boolean, which if true\n   *   indicates that the dataset should be pseudorandomly reshuffled each time\n   *   it is iterated over. If false, elements will be returned in the same\n   *   shuffled order on each iteration. (Defaults to `true`.)\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  shuffle(bufferSize, seed) {\n    let reshuffleEachIteration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n\n    if (bufferSize == null || bufferSize < 0) {\n      if (this.size == null) {\n        throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.');\n      } else {\n        throw new RangeError('`Dataset.shuffle()` requires bufferSize to be specified.  ' + 'If your data fits in main memory (for regular JS objects), ' + 'and/or GPU memory (for `tf.Tensor`s), consider setting ' + `bufferSize to the dataset size (${this.size} elements)`);\n      }\n    }\n\n    const base = this;\n    const random = seedrandom.alea(seed || tf.util.now().toString());\n    return datasetFromIteratorFn(async () => {\n      let seed2 = random.int32();\n\n      if (reshuffleEachIteration) {\n        seed2 += random.int32();\n      }\n\n      return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n    }, this.size);\n  }\n  /**\n   * Creates a `Dataset` with at most `count` initial elements from this\n   * dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be taken\n   *   to form the new dataset.  If `count` is `undefined` or negative, or if\n   *   `count` is greater than the size of this dataset, the new dataset will\n   *   contain all elements of this dataset.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  take(count) {\n    const base = this;\n    let size;\n\n    if (this.size != null && this.size > count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is count.\n      size = count;\n    } else if (this.size != null && this.size <= count) {\n      // If the size of this dataset is equal or smaller than count, the new\n      // dataset's size is the size of this dataset.\n      size = this.size;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n\n    return datasetFromIteratorFn(async () => (await base.iterator()).take(count), size);\n  }\n  /**\n   * Collect all elements of this dataset into an array.\n   *\n   * Obviously this will succeed only for small datasets that fit in memory.\n   * Useful for testing and generally should be avoided if possible.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n\n\n  async toArray() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n\n    return (await this.iterator()).toArray();\n  }\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   */\n\n\n  async toArrayForTest() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n\n    return (await this.iterator()).toArrayForTest();\n  }\n\n} // TODO(soergel): deep sharded shuffle, where supported\n\nDataset.MAX_BUFFER_SIZE = 10000;\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\n\nexport function datasetFromIteratorFn(iteratorFn) {\n  let size = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  return new class extends Dataset {\n    constructor() {\n      super(...arguments);\n      this.size = size;\n    }\n    /*\n     * Provide a new stream of elements.  Note this will also start new streams\n     * from any underlying `Dataset`s.\n     */\n\n\n    async iterator() {\n      return iteratorFn();\n    }\n\n  }();\n}\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n *\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\n */\n\nexport function array(items) {\n  return datasetFromIteratorFn(async () => iteratorFromItems(items), items.length);\n}\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n *\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\n */\n\nexport function zip(datasets) {\n  // manually type-check the argument for JS users\n  if (!isIterable(datasets)) {\n    throw new Error('The argument to zip() must be an object or array.');\n  }\n\n  let size;\n\n  if (Array.isArray(datasets)) {\n    for (let i = 0; i < datasets.length; i++) {\n      size = size == null ? datasets[i].size : Math.min(size, datasets[i].size);\n    }\n  } else if (datasets instanceof Object) {\n    for (const ds in datasets) {\n      size = size == null ? datasets[ds].size : Math.min(size, datasets[ds].size);\n    }\n  }\n\n  return datasetFromIteratorFn(async () => {\n    const streams = await deepMapAndAwaitAll(datasets, d => {\n      if (d instanceof Dataset) {\n        return {\n          value: d.iterator(),\n          recurse: false\n        };\n      } else if (isIterable(d)) {\n        return {\n          value: null,\n          recurse: true\n        };\n      } else {\n        throw new Error('Leaves of the structure passed to zip() must be Datasets, ' + 'not primitives.');\n      }\n    });\n    return iteratorFromZipped(streams, ZipMismatchMode.SHORTEST);\n  }, size);\n}\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\n\nfunction deepBatchConcat(rows) {\n  if (rows === null) {\n    return null;\n  } // use the first item to decide whether to recurse or batch here.\n\n\n  const exampleRow = rows[0];\n\n  if (canTensorify(exampleRow)) {\n    // rows is an array of primitives, Tensors, or arrays.  Batch them.\n    const value = batchConcat(rows);\n    return {\n      value,\n      recurse: false\n    };\n  } // the example row is an object, so recurse into it.\n\n\n  return {\n    value: null,\n    recurse: true\n  };\n}\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\n\n\nfunction batchConcat(arrays) {\n  if (arrays.length === 0) {\n    // We can't return an empty Tensor because we don't know the element shape.\n    throw new Error('Can\\'t make a batch of zero elements.');\n  }\n\n  if (arrays[0] instanceof tf.Tensor) {\n    // Input is an array of Tensors\n    return tf.stack(arrays);\n  } else {\n    // Input is a possibly-nested array of numbers.\n    return tf.tensor(arrays);\n  }\n}","map":{"version":3,"mappings":"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","names":["tf","seedrandom","iteratorFromConcatenated","iteratorFromFunction","iteratorFromItems","iteratorFromZipped","ZipMismatchMode","canTensorify","deepMapAndAwaitAll","isIterable","Dataset","constructor","batch","batchSize","smallLastBatch","base","util","assert","size","Infinity","Math","ceil","floor","datasetFromIteratorFn","iterator","columnMajorBatch","deepBatchConcat","concatenate","dataset","filter","predicate","x","tidy","forEachAsync","f","map","transform","mapAsync","prefetch","bufferSize","RangeError","repeat","count","undefined","iteratorIterator","value","done","take","skip","shuffle","seed","reshuffleEachIteration","random","alea","now","toString","seed2","int32","toArray","Error","toArrayForTest","iteratorFn","array","items","length","zip","datasets","Array","isArray","i","min","Object","ds","streams","d","recurse","SHORTEST","rows","exampleRow","batchConcat","arrays","Tensor","stack","tensor"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-data/src/dataset.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {TensorContainer, TensorLike} from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\n\nimport {iteratorFromConcatenated, iteratorFromFunction, iteratorFromItems, iteratorFromZipped, LazyIterator, ZipMismatchMode} from './iterators/lazy_iterator';\nimport {Container} from './types';\nimport {canTensorify, deepMapAndAwaitAll, DeepMapResult, isIterable} from './util/deep_map';\n\n/**\n * A nested structure of Datasets, used as the input to zip().\n */\nexport type DatasetContainer = Container<Dataset<TensorContainer>>;\n\n// TODO(soergel): consider vectorized operations within the pipeline.\n\n/**\n * Represents a potentially large list of independent data elements (typically\n * 'samples' or 'examples').\n *\n * A 'data example' may be a primitive, an array, a map from string keys to\n * values, or any nested structure of these.\n *\n * A `Dataset` represents an ordered collection of elements, together with a\n * chain of transformations to be performed on those elements. Each\n * transformation is a method of `Dataset` that returns another `Dataset`, so\n * these may be chained, e.g.\n * `const processedDataset = rawDataset.filter(...).map(...).batch(...)`.\n *\n * Data loading and transformation is done in a lazy, streaming fashion.  The\n * dataset may be iterated over multiple times; each iteration starts the data\n * loading anew and recapitulates the transformations.\n *\n * A `Dataset` is typically processed as a stream of unbatched examples --i.e.,\n * its transformations are applied one example at a time. Batching produces a\n * new `Dataset` where each element is a batch. Batching should usually come\n * last in a pipeline, because data transformations are easier to express on a\n * per-example basis than on a per-batch basis.\n *\n * The following code examples are calling `await dataset.forEachAsync(...)` to\n * iterate once over the entire dataset in order to print out the data.\n *\n * @doc {heading: 'Data', subheading: 'Classes', namespace: 'data'}\n */\nexport abstract class Dataset<T extends tf.TensorContainer> {\n  /*\n   * Provide a new stream of elements.  Note this will also start new streams\n   * from any underlying `Dataset`s.\n   *\n   * CAUTION: Any Tensors contained within the elements returned from\n   * this stream *must* be manually disposed to avoid a GPU memory leak.\n   * The tf.tidy() approach cannot be used in an asynchronous context.\n   */\n  abstract async iterator(): Promise<LazyIterator<T>>;\n\n  readonly size: number = null;\n\n  // TODO(soergel): Make Datasets report whether repeated iterator() calls\n  // produce the same result (e.g., reading from a file) or different results\n  // (e.g., from the webcam).  Currently we don't make this distinction but it\n  // could be important for the user to know.\n  // abstract isDeterministic(): boolean;\n\n  /**\n   * Groups elements into batches.\n   *\n   * It is assumed that each of the incoming dataset elements has the same\n   * structure-- i.e. the same set of keys at each location in an object\n   * hierarchy.  For each key, the resulting `Dataset` provides a batched\n   * element collecting all of the incoming values for that key.\n   *\n   *  * Incoming primitives are grouped into a 1-D Tensor.\n   *  * Incoming Tensors are grouped into a new Tensor where the 0'th axis is\n   *    the batch dimension.\n   *  * Incoming arrays are converted to Tensor and then batched.\n   *  * A nested array is interpreted as an n-D Tensor, so the batched result\n   *    has n+1 dimensions.\n   *  * An array that cannot be converted to Tensor produces an error.\n   *\n   * If an array should not be batched as a unit, it should first be converted\n   * to an object with integer keys.\n   *\n   * Here are a few examples:\n   *\n   * Batch a dataset of numbers:\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8]).batch(4);\n   * await a.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of arrays:\n   * ```js\n   * const b = tf.data.array([[1], [2], [3], [4], [5], [6], [7], [8]]).batch(4);\n   * await b.forEachAsync(e => e.print());\n   * ```\n   *\n   * Batch a dataset of objects:\n   * ```js\n   * const c = tf.data.array([{a: 1, b: 11}, {a: 2, b: 12}, {a: 3, b: 13},\n   *   {a: 4, b: 14}, {a: 5, b: 15}, {a: 6, b: 16}, {a: 7, b: 17},\n   *   {a: 8, b: 18}]).batch(4);\n   * await c.forEachAsync(e => {\n   *   console.log('{');\n   *   for(var key in e) {\n   *     console.log(key+':');\n   *     e[key].print();\n   *   }\n   *   console.log('}');\n   * })\n   * ```\n   *\n   * @param batchSize The number of elements desired per batch.\n   * @param smallLastBatch Whether to emit the final batch when it has fewer\n   *   than batchSize elements. Default true.\n   * @returns A `Dataset`, from which a stream of batches can be obtained.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  batch(batchSize: number, smallLastBatch = true): Dataset<tf.TensorContainer> {\n    const base = this;\n    tf.util.assert(\n        batchSize > 0, () => `batchSize needs to be positive, but it is\n      ${batchSize}`);\n    let size;\n    if (this.size === Infinity || this.size == null) {\n      // If the size of this dataset is infinity or null, the new size keeps the\n      // same.\n      size = this.size;\n    } else if (smallLastBatch) {\n      // If the size of this dataset is known and include small last batch, the\n      // new size is full batch count plus last batch.\n      size = Math.ceil(this.size / batchSize);\n    } else {\n      // If the size of this dataset is known and not include small last batch,\n      // the new size is full batch count.\n      size = Math.floor(this.size / batchSize);\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator())\n          .columnMajorBatch(batchSize, smallLastBatch, deepBatchConcat);\n    }, size);\n  }\n\n  /**\n   * Concatenates this `Dataset` with another.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * const b = tf.data.array([4, 5, 6]);\n   * const c = a.concatenate(b);\n   * await c.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param dataset A `Dataset` to be concatenated onto this one.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  concatenate(dataset: Dataset<T>): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size === Infinity || dataset.size === Infinity) {\n      // If the size of any of these two dataset is infinity, new size is\n      // infinity.\n      size = Infinity;\n    } else if (this.size != null && dataset.size != null) {\n      // If the size of both datasets are known and not infinity, new size is\n      // sum the size of these two datasets.\n      size = this.size + dataset.size;\n    } else {\n      // If neither of these two datasets has infinite size and any of these two\n      // datasets' size is null, the new size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () =>\n            (await base.iterator()).concatenate(await dataset.iterator()),\n        size);\n  }\n\n  /**\n   * Filters this dataset according to `predicate`.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n   *   .filter(x => x%2 === 0);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param predicate A function mapping a dataset element to a boolean or a\n   * `Promise` for one.\n   *\n   * @returns A `Dataset` of elements for which the predicate was true.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  filter(predicate: (value: T) => boolean): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size === Infinity) {\n      // If the size of this dataset is infinity, new size is infinity\n      size = Infinity;\n    } else {\n      // If this dataset has limited elements, new size is null because it might\n      // exhausted randomly.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).filter(x => tf.tidy(() => predicate(x)));\n    }, size);\n  }\n\n  /**\n   * Apply a function to every element of the dataset.\n   *\n   * After the function is applied to a dataset element, any Tensors contained\n   * within that element are disposed.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param f A function to apply to each dataset element.\n   * @returns A `Promise` that resolves after all elements have been processed.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async forEachAsync(f: (input: T) => void): Promise<void> {\n    return (await this.iterator()).forEachAsync(f);\n  }\n\n  /**\n   * Maps this dataset through a 1-to-1 transform.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).map(x => x*x);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a transformed\n   *   dataset element.\n   *\n   * @returns A `Dataset` of transformed elements.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  map<O extends tf.TensorContainer>(transform: (value: T) => O): Dataset<O> {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).map(x => tf.tidy(() => transform(x)));\n    }, this.size);\n  }\n\n  /**\n   * Maps this dataset through an async 1-to-1 transform.\n   *\n   * ```js\n   * const a =\n   *  tf.data.array([1, 2, 3]).mapAsync(x => new Promise(function(resolve){\n   *    setTimeout(() => {\n   *      resolve(x * x);\n   *    }, Math.random()*1000 + 500);\n   *  }));\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @param transform A function mapping a dataset element to a `Promise` for a\n   *   transformed dataset element.  This transform is responsible for disposing\n   *   any intermediate `Tensor`s, i.e. by wrapping its computation in\n   *   `tf.tidy()`; that cannot be automated here (as it is in the synchronous\n   *   `map()` case).\n   *\n   * @returns A `Dataset` of transformed elements.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  mapAsync<O extends tf.TensorContainer>(transform: (value: T) => Promise<O>):\n      Dataset<O> {\n    const base = this;\n    return datasetFromIteratorFn(async () => {\n      return (await base.iterator()).mapAsync(transform);\n    }, this.size);\n  }\n\n  /**\n   *  Creates a `Dataset` that prefetches elements from this dataset.\n   *\n   * @param bufferSize: An integer specifying the number of elements to be\n   *   prefetched.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  prefetch(bufferSize: number): Dataset<T> {\n    if (bufferSize == null) {\n      throw new RangeError(\n          '`Dataset.prefetch()` requires bufferSize to be specified.');\n    }\n\n    const base = this;\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).prefetch(bufferSize), this.size);\n  }\n\n  /**\n   * Repeats this dataset `count` times.\n   *\n   * NOTE: If this dataset is a function of global state (e.g. a random number\n   * generator), then different repetitions may produce different elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3]).repeat(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: (Optional) An integer, representing the number of times\n   *   the dataset should be repeated. The default behavior (if `count` is\n   *   `undefined` or negative) is for the dataset be repeated indefinitely.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  repeat(count?: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && count > 0) {\n      // If this dataset has size and count is positive, new size is current\n      // size multiply count. This also covers the case that current size is\n      // infinity.\n      size = this.size * count;\n    } else if (count === 0) {\n      // If count is 0, new size is 0.\n      size = 0;\n    } else if (this.size != null && (count === undefined || count < 0)) {\n      // If this dataset has size and count is undefined or negative, the\n      // dataset will be repeated indefinitely and new size is infinity.\n      size = Infinity;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(async () => {\n      const iteratorIterator = iteratorFromFunction(\n          async () => ({value: await base.iterator(), done: false}));\n      return iteratorFromConcatenated(iteratorIterator.take(count));\n    }, size);\n  }\n\n  /**\n   * Creates a `Dataset` that skips `count` initial elements from this dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).skip(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be skipped\n   *   to form the new dataset.  If `count` is greater than the size of this\n   *   dataset, the new dataset will contain no elements.  If `count`\n   *   is `undefined` or negative, skips the entire dataset.\n   *\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  skip(count: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && count >= 0 && this.size >= count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is current size minus skipped size.This also covers the case that\n      // current size is infinity.\n      size = this.size - count;\n    } else if (\n        this.size != null &&\n        (this.size < count || count === undefined || count < 0)) {\n      // If the size of this dataset is smaller than count, or count is\n      // undefined or negative, skips the entire dataset and the new size is 0.\n      size = 0;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).skip(count), size);\n  }\n\n  // TODO(soergel): deep sharded shuffle, where supported\n\n  static readonly MAX_BUFFER_SIZE = 10000;\n\n  /**\n   * Pseudorandomly shuffles the elements of this dataset. This is done in a\n   * streaming manner, by sampling from a given number of prefetched elements.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).shuffle(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param bufferSize: An integer specifying the number of elements from this\n   *   dataset from which the new dataset will sample.\n   * @param seed: (Optional) An integer specifying the random seed that will\n   *   be used to create the distribution.\n   * @param reshuffleEachIteration: (Optional) A boolean, which if true\n   *   indicates that the dataset should be pseudorandomly reshuffled each time\n   *   it is iterated over. If false, elements will be returned in the same\n   *   shuffled order on each iteration. (Defaults to `true`.)\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  shuffle(bufferSize: number, seed?: string, reshuffleEachIteration = true):\n      Dataset<T> {\n    if (bufferSize == null || bufferSize < 0) {\n      if (this.size == null) {\n        throw new RangeError(\n            '`Dataset.shuffle()` requires bufferSize to be specified.');\n      } else {\n        throw new RangeError(\n            '`Dataset.shuffle()` requires bufferSize to be specified.  ' +\n            'If your data fits in main memory (for regular JS objects), ' +\n            'and/or GPU memory (for `tf.Tensor`s), consider setting ' +\n            `bufferSize to the dataset size (${this.size} elements)`);\n      }\n    }\n    const base = this;\n    const random = seedrandom.alea(seed || tf.util.now().toString());\n    return datasetFromIteratorFn(async () => {\n      let seed2 = random.int32();\n      if (reshuffleEachIteration) {\n        seed2 += random.int32();\n      }\n      return (await base.iterator()).shuffle(bufferSize, seed2.toString());\n    }, this.size);\n  }\n\n  /**\n   * Creates a `Dataset` with at most `count` initial elements from this\n   * dataset.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]).take(3);\n   * await a.forEachAsync(e => console.log(e));\n   * ```\n   *\n   * @param count: The number of elements of this dataset that should be taken\n   *   to form the new dataset.  If `count` is `undefined` or negative, or if\n   *   `count` is greater than the size of this dataset, the new dataset will\n   *   contain all elements of this dataset.\n   * @returns A `Dataset`.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  take(count: number): Dataset<T> {\n    const base = this;\n    let size;\n    if (this.size != null && this.size > count) {\n      // If the size of this dataset is greater than count, the new dataset's\n      // size is count.\n      size = count;\n    } else if (this.size != null && this.size <= count) {\n      // If the size of this dataset is equal or smaller than count, the new\n      // dataset's size is the size of this dataset.\n      size = this.size;\n    } else {\n      // If the size of this dataset is null, the new dataset's size is null.\n      size = null;\n    }\n    return datasetFromIteratorFn(\n        async () => (await base.iterator()).take(count), size);\n  }\n\n  /**\n   * Collect all elements of this dataset into an array.\n   *\n   * Obviously this will succeed only for small datasets that fit in memory.\n   * Useful for testing and generally should be avoided if possible.\n   *\n   * ```js\n   * const a = tf.data.array([1, 2, 3, 4, 5, 6]);\n   * console.log(await a.toArray());\n   * ```\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   *\n   * @doc {heading: 'Data', subheading: 'Classes'}\n   */\n  async toArray() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArray();\n  }\n\n  /**\n   * Collect all elements of this dataset into an array with prefetching 100\n   * elements. This is useful for testing, because the prefetch changes the\n   * order in which the Promises are resolved along the processing pipeline.\n   * This may help expose bugs where results are dependent on the order of\n   * Promise resolution rather than on the logical order of the stream (i.e.,\n   * due to hidden mutable state).\n   *\n   * @returns A Promise for an array of elements, which will resolve\n   *   when a new stream has been obtained and fully consumed.\n   */\n  async toArrayForTest() {\n    if (this.size === Infinity) {\n      throw new Error('Can not convert infinite data stream to array.');\n    }\n    return (await this.iterator()).toArrayForTest();\n  }\n}\n\n/**\n * Create a `Dataset` defined by a provided iterator() function.\n *\n * ```js\n * let i = -1;\n * const func = () =>\n *    ++i < 5 ? {value: i, done: false} : {value: null, done: true};\n * const iter = tf.data.iteratorFromFunction(func);\n * const ds = tf.data.datasetFromIteratorFn(iter);\n * await ds.forEachAsync(e => console.log(e));\n * ```\n */\nexport function datasetFromIteratorFn<T extends tf.TensorContainer>(\n    iteratorFn: () => Promise<LazyIterator<T>>,\n    size: number = null): Dataset<T> {\n  return new class extends Dataset<T> {\n    size = size;\n\n    /*\n     * Provide a new stream of elements.  Note this will also start new streams\n     * from any underlying `Dataset`s.\n     */\n    async iterator(): Promise<LazyIterator<T>> {\n      return iteratorFn();\n    }\n  }\n  ();\n}\n\n/**\n * Create a `Dataset` from an array of elements.\n *\n * Create a Dataset from an array of objects:\n * ```js\n * const a = tf.data.array([{'item': 1}, {'item': 2}, {'item': 3}]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n *\n * Create a Dataset from an array of numbers:\n * ```js\n * const a = tf.data.array([4, 5, 6]);\n * await a.forEachAsync(e => console.log(e));\n * ```\n * @param items An array of elements that will be parsed as items in a dataset.\n *\n * @doc {heading: 'Data', subheading: 'Creation', namespace: 'data'}\n */\nexport function array<T extends tf.TensorContainer>(items: T[]): Dataset<T> {\n  return datasetFromIteratorFn(\n      async () => iteratorFromItems(items), items.length);\n}\n\n/**\n * Create a `Dataset` by zipping together an array, dict, or nested\n * structure of `Dataset`s (and perhaps additional constants).\n * The underlying datasets must provide elements in a consistent order such that\n * they correspond.\n *\n * The number of elements in the resulting dataset is the same as the size of\n * the smallest dataset in datasets.\n *\n * The nested structure of the `datasets` argument determines the\n * structure of elements in the resulting iterator.\n *\n * Note this means that, given an array of two datasets that produce dict\n * elements, the result is a dataset that produces elements that are arrays\n * of two dicts:\n *\n * Zip an array of datasets:\n * ```js\n * console.log('Zip two datasets of objects:');\n * const ds1 = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const ds2 = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const ds3 = tf.data.zip([ds1, ds2]);\n * await ds3.forEachAsync(e => console.log(JSON.stringify(e)));\n *\n * // If the goal is to merge the dicts in order to produce elements like\n * // {a: ..., b: ...}, this requires a second step such as:\n * console.log('Merge the objects:');\n * const ds4 = ds3.map(x => {return {a: x[0].a, b: x[1].b}});\n * await ds4.forEachAsync(e => console.log(e));\n * ```\n *\n * Zip a dict of datasets:\n * ```js\n * const a = tf.data.array([{a: 1}, {a: 2}, {a: 3}]);\n * const b = tf.data.array([{b: 4}, {b: 5}, {b: 6}]);\n * const c = tf.data.zip({c: a, d: b});\n * await c.forEachAsync(e => console.log(JSON.stringify(e)));\n * ```\n *\n * @doc {heading: 'Data', subheading: 'Operations', namespace: 'data'}\n */\nexport function zip<O extends tf.TensorContainer>(datasets: DatasetContainer):\n    Dataset<O> {\n  // manually type-check the argument for JS users\n  if (!isIterable(datasets)) {\n    throw new Error('The argument to zip() must be an object or array.');\n  }\n  let size;\n  if (Array.isArray(datasets)) {\n    for (let i = 0; i < datasets.length; i++) {\n      size = size == null ? (datasets[i] as Dataset<O>).size :\n                            Math.min(size, (datasets[i] as Dataset<O>).size);\n    }\n  } else if (datasets instanceof Object) {\n    for (const ds in datasets) {\n      size = size == null ? (datasets[ds] as Dataset<O>).size :\n                            Math.min(size, (datasets[ds] as Dataset<O>).size);\n    }\n  }\n  return datasetFromIteratorFn<O>(async () => {\n    const streams = await deepMapAndAwaitAll(datasets, d => {\n      if (d instanceof Dataset) {\n        return {value: d.iterator(), recurse: false};\n      } else if (isIterable(d)) {\n        return {value: null, recurse: true};\n      } else {\n        throw new Error(\n            'Leaves of the structure passed to zip() must be Datasets, ' +\n            'not primitives.');\n      }\n    });\n    return iteratorFromZipped<O>(streams, ZipMismatchMode.SHORTEST);\n  }, size);\n}\n\n/**\n * A zip function for use with deepZip, passed via the columnMajorBatch call.\n *\n * Accepts an array of identically-structured nested elements and either batches\n * them (if they are primitives, numeric arrays, or Tensors) or requests\n * recursion (if not).\n */\n// tslint:disable-next-line:no-any\nfunction deepBatchConcat(rows: any[]): DeepMapResult {\n  if (rows === null) {\n    return null;\n  }\n\n  // use the first item to decide whether to recurse or batch here.\n  const exampleRow = rows[0];\n\n  if (canTensorify(exampleRow)) {\n    // rows is an array of primitives, Tensors, or arrays.  Batch them.\n    const value = batchConcat(rows);\n    return {value, recurse: false};\n  }\n\n  // the example row is an object, so recurse into it.\n  return {value: null, recurse: true};\n}\n\n/**\n * Assembles a list of same-shaped numbers, number arrays, or Tensors\n * into a single new Tensor where axis 0 is the batch dimension.\n */\nfunction batchConcat<T extends(TensorLike | tf.Tensor)>(arrays: T[]):\n    tf.Tensor {\n  if (arrays.length === 0) {\n    // We can't return an empty Tensor because we don't know the element shape.\n    throw new Error('Can\\'t make a batch of zero elements.');\n  }\n\n  if (arrays[0] instanceof tf.Tensor) {\n    // Input is an array of Tensors\n    return tf.stack(arrays as tf.Tensor[]);\n  } else {\n    // Input is a possibly-nested array of numbers.\n    return tf.tensor(arrays as TensorLike);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}