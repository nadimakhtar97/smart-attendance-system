{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function pool(xValues, xShape, dtype, strides, convInfo, poolType) {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n  const initialValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n\n              if (poolType === 'max' && pixel > minMaxValue) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] = poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n\n  return output;\n}\nexport function maxPoolPositions(xValues, xShape, dtype, convInfo) {\n  let flattenPositions = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n  let includeBatchInIndex = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n  const xBuf = buffer(xShape, dtype, xValues);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        } // const xRMin = Math.max(0, xRCorner);\n\n\n        const xRMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n\n          const xCMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n\n              if (pixel > maxValue) {\n                maxValue = pixel;\n\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ? ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) * convInfo.inChannels + d : (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\nexport function pool3d(xValues, xShape, dtype, strides, convInfo, poolType) {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n  const initialValue = poolType === 'max' ? Number.NEGATIVE_INFINITY : Number.POSITIVE_INFINITY;\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides = convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n\n        const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset = outputBatchOffset + yDepth * outputDepthStrides;\n\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n\n          const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n\n            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner); // Shader code begins\n\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n\n                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n\n                  if (poolType === 'max' && pixel > minMaxValue) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] = poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\nexport function maxPool3dPositions(xBuf, convInfo) {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n\n        const xDepthMax = Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n\n          const xRowMax = Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n\n            const xColMax = Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner); // Shader code begins\n\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax; xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n\n                for (let xCol = xColMin; xCol < xColMax; xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n\n                  if (pixel >= maxValue) {\n                    maxValue = pixel;\n                    maxPosition = wDepth * effectiveFilterHeight * effectiveFilterWidth + wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}","map":{"version":3,"mappings":"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","names":["buffer","pool","xValues","xShape","dtype","strides","convInfo","poolType","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padTop","padInfo","top","padLeft","left","initialValue","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","output","outShape","outputVals","values","outputBatchStrides","outputRowStrides","outputColStrides","b","batchSize","outputBatchOffset","inputBatchOffset","d","inChannels","yR","outHeight","xRCorner","xRMin","Math","max","xRMax","min","inHeight","outputRowOffset","yC","outWidth","xCCorner","xCMin","xCMax","inWidth","minMaxValue","avgValue","count","xR","xROffset","xC","xCOffset","pixel","isNaN","outputOffset","maxPoolPositions","flattenPositions","includeBatchInIndex","maxPositions","xBuf","maxValue","maxPosition","wR","wC","get","set","pool3d","strideDepth","dilationDepth","effectiveFilterDepth","padFront","front","outputDepthStrides","batch","channel","yDepth","outDepth","xDepthCorner","xDepthMin","xDepthMax","inDepth","outputDepthOffset","yRow","xRowCorner","xRowMin","xRowMax","yCol","xColCorner","xColMin","xColMax","outputColOffset","xDepth","xDepthOffset","xRow","xRowOffset","xCol","xColOffset","maxPool3dPositions","wDepth","wRow","wCol"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/utils/pool_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function pool(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv2DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides =\n      convInfo.outShape[1] * convInfo.outShape[2] * convInfo.outShape[3];\n  const outputRowStrides = convInfo.outShape[2] * convInfo.outShape[3];\n  const outputColStrides = convInfo.outShape[3];\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const outputBatchOffset = b * outputBatchStrides;\n    const inputBatchOffset = b * strides[0];\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        const outputRowOffset = outputBatchOffset + yR * outputRowStrides;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          const xCMin = Math.max(0, xCCorner);\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let minMaxValue = initialValue;\n          let avgValue = 0;\n          let count = 0;\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const xROffset = inputBatchOffset + xR * strides[1];\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const xCOffset = xROffset + xC * strides[2];\n              const pixel = xValues[xCOffset + d];\n              if ((poolType === 'max' && pixel > minMaxValue)) {\n                minMaxValue = pixel;\n              } else if (poolType === 'avg') {\n                avgValue += pixel;\n                count++;\n              }\n            }\n            if (isNaN(minMaxValue)) {\n              break;\n            }\n          }\n          const outputOffset = outputRowOffset + yC * outputColStrides + d;\n          outputVals[outputOffset] =\n              poolType === 'avg' ? avgValue / count : minMaxValue;\n        }\n      }\n    }\n  }\n  return output;\n}\n\nexport function maxPoolPositions(\n    xValues: TypedArray, xShape: number[], dtype: DataType,\n    convInfo: backend_util.Conv2DInfo, flattenPositions = false,\n    includeBatchInIndex = false): TensorBuffer<Rank, 'int32'> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const xBuf = buffer(xShape, dtype, xValues);\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n        const xRCorner = yR * strideHeight - padTop;\n        let xRMin = xRCorner;\n        while (xRMin < 0) {\n          xRMin += dilationHeight;\n        }\n        // const xRMin = Math.max(0, xRCorner);\n        const xRMax =\n            Math.min(convInfo.inHeight, effectiveFilterHeight + xRCorner);\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const xCCorner = yC * strideWidth - padLeft;\n          let xCMin = xCCorner;\n          while (xCMin < 0) {\n            xCMin += dilationWidth;\n          }\n          const xCMax =\n              Math.min(convInfo.inWidth, effectiveFilterWidth + xCCorner);\n          let maxValue = Number.NEGATIVE_INFINITY;\n          let maxPosition = -1;\n\n          for (let xR = xRMin; xR < xRMax; xR += dilationHeight) {\n            const wR = xR - xRCorner;\n            for (let xC = xCMin; xC < xCMax; xC += dilationWidth) {\n              const wC = xC - xCCorner;\n              const pixel = xBuf.get(b, xR, xC, d);\n              if (pixel > maxValue) {\n                maxValue = pixel as number;\n                if (flattenPositions) {\n                  maxPosition = includeBatchInIndex ?\n                      ((b * convInfo.inHeight + xR) * convInfo.inWidth + xC) *\n                              convInfo.inChannels +\n                          d :\n                      (xR * convInfo.inWidth + xC) * convInfo.inChannels + d;\n                } else {\n                  maxPosition = wR * effectiveFilterWidth + wC;\n                }\n              }\n            }\n          }\n          maxPositions.set(maxPosition, b, yR, yC, d);\n        }\n      }\n    }\n  }\n  return maxPositions;\n}\n\nexport function pool3d(\n    xValues: TypedArray, xShape: number[], dtype: DataType, strides: number[],\n    convInfo: backend_util.Conv3DInfo,\n    poolType: 'max'|'avg'): TensorBuffer<Rank, DataType> {\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  const initialValue =\n      (poolType === 'max' ? Number.NEGATIVE_INFINITY :\n                            Number.POSITIVE_INFINITY);\n\n  const output = buffer(convInfo.outShape, dtype);\n  const outputVals = output.values;\n\n  const outputBatchStrides = convInfo.outShape[1] * convInfo.outShape[2] *\n      convInfo.outShape[3] * convInfo.outShape[4];\n  const outputDepthStrides =\n      convInfo.outShape[2] * convInfo.outShape[3] * convInfo.outShape[4];\n  const outputRowStrides = convInfo.outShape[3] * convInfo.outShape[4];\n  const outputColStrides = convInfo.outShape[4];\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    const outputBatchOffset = batch * outputBatchStrides;\n    const inputBatchOffset = batch * strides[0];\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        const outputDepthOffset =\n            outputBatchOffset + yDepth * outputDepthStrides;\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          const outputRowOffset = outputDepthOffset + yRow * outputRowStrides;\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n            // Shader code begins\n            const outputColOffset = outputRowOffset + yCol * outputColStrides;\n            let minMaxValue = initialValue;\n            let avgValue = 0;\n            let count = 0;\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const xDepthOffset = inputBatchOffset + xDepth * strides[1];\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const xRowOffset = xDepthOffset + xRow * strides[2];\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const xColOffset = xRowOffset + xCol * strides[3];\n                  const pixel = xValues[xColOffset + channel];\n                  if ((poolType === 'max' && pixel > minMaxValue)) {\n                    minMaxValue = pixel;\n                  } else if (poolType === 'avg') {\n                    avgValue += pixel;\n                    count++;\n                  }\n                  if (isNaN(minMaxValue)) {\n                    break;\n                  }\n                }\n                if (isNaN(minMaxValue)) {\n                  break;\n                }\n              }\n              if (isNaN(minMaxValue)) {\n                break;\n              }\n            }\n            const outputOffset = outputColOffset + channel;\n            outputVals[outputOffset] =\n                poolType === 'avg' ? avgValue / count : minMaxValue;\n          }\n        }\n      }\n    }\n  }\n\n  return output;\n}\n\nexport function maxPool3dPositions(\n    xBuf: TensorBuffer<Rank, DataType>,\n    convInfo: backend_util.Conv3DInfo): TensorBuffer<Rank, DataType> {\n  const maxPositions = buffer(convInfo.outShape, 'int32');\n  const strideDepth = convInfo.strideDepth;\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationDepth = convInfo.dilationDepth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padFront = convInfo.padInfo.front;\n  const padTop = convInfo.padInfo.top;\n  const padLeft = convInfo.padInfo.left;\n\n  for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n    for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n      for (let yDepth = 0; yDepth < convInfo.outDepth; ++yDepth) {\n        const xDepthCorner = yDepth * strideDepth - padFront;\n        let xDepthMin = xDepthCorner;\n        while (xDepthMin < 0) {\n          xDepthMin += dilationDepth;\n        }\n        const xDepthMax =\n            Math.min(convInfo.inDepth, effectiveFilterDepth + xDepthCorner);\n        for (let yRow = 0; yRow < convInfo.outHeight; ++yRow) {\n          const xRowCorner = yRow * strideHeight - padTop;\n          let xRowMin = xRowCorner;\n          while (xRowMin < 0) {\n            xRowMin += dilationHeight;\n          }\n          const xRowMax =\n              Math.min(convInfo.inHeight, effectiveFilterHeight + xRowCorner);\n          for (let yCol = 0; yCol < convInfo.outWidth; ++yCol) {\n            const xColCorner = yCol * strideWidth - padLeft;\n            let xColMin = xColCorner;\n            while (xColMin < 0) {\n              xColMin += dilationWidth;\n            }\n            const xColMax =\n                Math.min(convInfo.inWidth, effectiveFilterWidth + xColCorner);\n\n            // Shader code begins\n            let maxValue = Number.NEGATIVE_INFINITY;\n            let maxPosition = -1;\n\n            for (let xDepth = xDepthMin; xDepth < xDepthMax;\n                 xDepth += dilationDepth) {\n              const wDepth = xDepth - xDepthCorner;\n              for (let xRow = xRowMin; xRow < xRowMax; xRow += dilationHeight) {\n                const wRow = xRow - xRowCorner;\n                for (let xCol = xColMin; xCol < xColMax;\n                     xCol += dilationWidth) {\n                  const wCol = xCol - xColCorner;\n                  const pixel = xBuf.get(batch, xDepth, xRow, xCol, channel);\n                  if (pixel >= maxValue) {\n                    maxValue = pixel as number;\n                    maxPosition =\n                        wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                        wRow * effectiveFilterHeight + wCol;\n                  }\n                }\n              }\n            }\n\n            maxPositions.set(maxPosition, batch, yDepth, yRow, yCol, channel);\n          }\n        }\n      }\n    }\n  }\n\n  return maxPositions;\n}\n"]},"metadata":{},"sourceType":"module"}