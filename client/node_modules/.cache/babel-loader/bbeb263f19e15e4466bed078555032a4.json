{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { padV2Config } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function spaceToBatchND(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    paddings\n  } = attrs;\n  assertNotComplex([x], 'spaceToBatchND');\n  const prod = util.sizeFromShape(blockShape);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  const reshapeInputs = {\n    x: paddedX\n  };\n  const reshapeAttrs = {\n    shape: reshapedPaddedShape\n  };\n  const paddedXReshaped = reshape({\n    inputs: reshapeInputs,\n    backend,\n    attrs: reshapeAttrs\n  });\n  const transposeInputs = {\n    x: paddedXReshaped\n  };\n  const transposeAttrs = {\n    perm: permutedReshapedPaddedPermutation\n  };\n  const paddedXT = transpose({\n    inputs: transposeInputs,\n    backend,\n    attrs: transposeAttrs\n  });\n  const resultReshapeInputs = {\n    x: paddedXT\n  };\n  const resultReshapeAttrs = {\n    shape: flattenShape\n  };\n  const result = reshape({\n    inputs: resultReshapeInputs,\n    backend,\n    attrs: resultReshapeAttrs\n  });\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n  return result;\n}\nexport const spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"mappings":"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","names":["backend_util","SpaceToBatchND","util","assertNotComplex","padV2Config","reshape","transpose","spaceToBatchND","args","inputs","backend","attrs","x","blockShape","paddings","prod","sizeFromShape","completePaddings","push","i","length","shape","paddedX","kernelFunc","constantValue","reshapedPaddedShape","getReshaped","permutedReshapedPaddedPermutation","getPermuted","flattenShape","getReshapedPermuted","reshapeInputs","reshapeAttrs","paddedXReshaped","transposeInputs","transposeAttrs","perm","paddedXT","resultReshapeInputs","resultReshapeAttrs","result","disposeIntermediateTensorInfo","spaceToBatchNDConfig","kernelName","backendName"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/SpaceToBatchND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ReshapeAttrs, ReshapeInputs, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, TransposeAttrs, TransposeInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {padV2Config} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport function spaceToBatchND(args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendCPU,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  assertNotComplex([x], 'spaceToBatchND');\n\n  const prod = util.sizeFromShape(blockShape);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...(paddings as Array<[number, number]>));\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const paddedX = padV2Config.kernelFunc({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  }) as TensorInfo;\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapeInputs: ReshapeInputs = {x: paddedX};\n  const reshapeAttrs: ReshapeAttrs = {shape: reshapedPaddedShape};\n  const paddedXReshaped =\n      reshape({inputs: reshapeInputs, backend, attrs: reshapeAttrs});\n\n  const transposeInputs: TransposeInputs = {x: paddedXReshaped};\n  const transposeAttrs:\n      TransposeAttrs = {perm: permutedReshapedPaddedPermutation};\n  const paddedXT =\n      transpose({inputs: transposeInputs, backend, attrs: transposeAttrs});\n\n  const resultReshapeInputs: ReshapeInputs = {x: paddedXT};\n  const resultReshapeAttrs: ReshapeAttrs = {shape: flattenShape};\n  const result = reshape(\n      {inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs});\n\n  backend.disposeIntermediateTensorInfo(paddedX);\n  backend.disposeIntermediateTensorInfo(paddedXReshaped);\n  backend.disposeIntermediateTensorInfo(paddedXT);\n\n  return result;\n}\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'cpu',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}