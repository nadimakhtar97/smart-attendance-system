{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl, bincountReduceImpl } from './Bincount_impl';\nexport function denseBincount(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    weights\n  } = inputs;\n  const {\n    size,\n    binaryOutput\n  } = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values;\n    const weightsVals = backend.data.get(weights.dataId).values;\n    const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` + `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,aAAR,QAAuH,uBAAvH;AAGA,SAAQC,YAAR,EAAsBC,kBAAtB,QAA+C,iBAA/C;AAEA,OAAM,SAAUC,aAAV,CAAwBC,IAAxB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC;AAAJ,MAAeJ,MAArB;AACA,QAAM;AAACK,QAAD;AAAOC;AAAP,MAAuBJ,KAA7B;;AAEA,MAAIC,CAAC,CAACI,KAAF,CAAQC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,UAAMC,KAAK,GAAGR,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBR,CAAC,CAACS,MAAnB,EAA2BC,MAAzC;AACA,UAAMC,WAAW,GAAGb,OAAO,CAACS,IAAR,CAAaC,GAAb,CAAiBP,OAAO,CAACQ,MAAzB,EAAiCC,MAArD;AAEA,UAAME,OAAO,GACTnB,YAAY,CAACa,KAAD,EAAQK,WAAR,EAAqBV,OAAO,CAACY,KAA7B,EAAoCZ,OAAO,CAACG,KAA5C,EAAmDF,IAAnD,CADhB;AAGA,WAAOJ,OAAO,CAACgB,cAAR,CAAuB,CAACZ,IAAD,CAAvB,EAA+BD,OAAO,CAACY,KAAvC,EAA8CD,OAA9C,CAAP;AACD,GARD,MAQO,IAAIZ,CAAC,CAACI,KAAF,CAAQC,MAAR,KAAmB,CAAvB,EAA0B;AAC/B,UAAMU,IAAI,GAAGjB,OAAO,CAACkB,UAAR,CAAmBhB,CAAnB,CAAb;AACA,UAAMiB,UAAU,GAAGnB,OAAO,CAACkB,UAAR,CAAmBf,OAAnB,CAAnB;AAEA,UAAMiB,MAAM,GAAGxB,kBAAkB,CAACqB,IAAD,EAAOE,UAAP,EAAmBf,IAAnB,EAAyBC,YAAzB,CAAjC;AAEA,WAAOL,OAAO,CAACgB,cAAR,CAAuBI,MAAM,CAACd,KAA9B,EAAqCH,OAAO,CAACY,KAA7C,EAAoDK,MAAM,CAACR,MAA3D,CAAP;AACD;;AAED,QAAM,IAAIS,KAAJ,CACF,uEACA,GAAGnB,CAAC,CAACI,KAAF,CAAQC,MAAM,GAFf,CAAN;AAGD;AAED,OAAO,MAAMe,mBAAmB,GAAiB;AAC/CC,YAAU,EAAE7B,aADmC;AAE/C8B,aAAW,EAAE,KAFkC;AAG/CC,YAAU,EAAE5B;AAHmC,CAA1C","names":["DenseBincount","bincountImpl","bincountReduceImpl","denseBincount","args","inputs","backend","attrs","x","weights","size","binaryOutput","shape","length","xVals","data","get","dataId","values","weightsVals","outVals","dtype","makeTensorInfo","xBuf","bufferSync","weightsBuf","outBuf","Error","denseBincountConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/DenseBincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DenseBincount, DenseBincountAttrs, DenseBincountInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {bincountImpl, bincountReduceImpl} from './Bincount_impl';\n\nexport function denseBincount(args: {\n  inputs: DenseBincountInputs,\n  backend: MathBackendCPU,\n  attrs: DenseBincountAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, weights} = inputs;\n  const {size, binaryOutput} = attrs;\n\n  if (x.shape.length === 1) {\n    const xVals = backend.data.get(x.dataId).values as TypedArray;\n    const weightsVals = backend.data.get(weights.dataId).values as TypedArray;\n\n    const outVals =\n        bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n  } else if (x.shape.length === 2) {\n    const xBuf = backend.bufferSync(x);\n    const weightsBuf = backend.bufferSync(weights);\n\n    const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n\n    return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n  }\n\n  throw new Error(\n      `Error in denseBincount: input must be at most rank 2, but got rank` +\n      `${x.shape.length}.`);\n}\n\nexport const denseBincountConfig: KernelConfig = {\n  kernelName: DenseBincount,\n  backendName: 'cpu',\n  kernelFunc: denseBincount as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}