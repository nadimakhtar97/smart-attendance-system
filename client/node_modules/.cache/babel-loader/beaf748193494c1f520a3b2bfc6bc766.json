{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights) {\n  let count = 0;\n\n  for (const weight of weights) {\n    if (weight.shape.length === 0) {\n      count += 1;\n    } else {\n      count += weight.shape.reduce((a, b) => a * b);\n    }\n  }\n\n  return count;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAYA;;;;;;;AAOA,OAAM,SAAUA,oBAAV,CAA+BC,OAA/B,EAAuD;AAC3D,MAAIC,KAAK,GAAG,CAAZ;;AACA,OAAK,MAAMC,MAAX,IAAqBF,OAArB,EAA8B;AAC5B,QAAIE,MAAM,CAACC,KAAP,CAAaC,MAAb,KAAwB,CAA5B,EAA+B;AAC7BH,WAAK,IAAI,CAAT;AACD,KAFD,MAEO;AACLA,WAAK,IAAIC,MAAM,CAACC,KAAP,CAAaE,MAAb,CAAoB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAlC,CAAT;AACD;AACF;;AACD,SAAON,KAAP;AACD","names":["countParamsInWeights","weights","count","weight","shape","length","reduce","a","b"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/utils/variable_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\nimport {LayerVariable} from '../variables';\n\n/**\n * Count the elements in an Array of LayerVariables.\n *\n * @param weights: The LayerVariables of which the constituent numbers are to\n *   be counted.\n * @returns A count of the elements in all the LayerVariables\n */\nexport function countParamsInWeights(weights: LayerVariable[]): number {\n  let count = 0;\n  for (const weight of weights) {\n    if (weight.shape.length === 0) {\n      count += 1;\n    } else {\n      count += weight.shape.reduce((a, b) => a * b);\n    }\n  }\n  return count;\n}\n"]},"metadata":{},"sourceType":"module"}