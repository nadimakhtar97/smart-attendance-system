{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue, getTensor } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'Abs':\n    case 'ComplexAbs':\n      return [tfOps.abs(getParamValue('x', node, tensorMap, context))];\n\n    case 'Acos':\n      return [tfOps.acos(getParamValue('x', node, tensorMap, context))];\n\n    case 'Acosh':\n      return [tfOps.acosh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Asin':\n      return [tfOps.asin(getParamValue('x', node, tensorMap, context))];\n\n    case 'Asinh':\n      return [tfOps.asinh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Atan':\n      return [tfOps.atan(getParamValue('x', node, tensorMap, context))];\n\n    case 'Atan2':\n      return [tfOps.atan2(getParamValue('x', node, tensorMap, context), getParamValue('y', node, tensorMap, context))];\n\n    case 'Atanh':\n      return [tfOps.atanh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Ceil':\n      return [tfOps.ceil(getParamValue('x', node, tensorMap, context))];\n\n    case 'Complex':\n      return [tfOps.complex(getParamValue('real', node, tensorMap, context), getParamValue('imag', node, tensorMap, context))];\n\n    case 'Cos':\n      return [tfOps.cos(getParamValue('x', node, tensorMap, context))];\n\n    case 'Cosh':\n      return [tfOps.cosh(getParamValue('x', node, tensorMap, context))];\n\n    case 'Elu':\n      return [tfOps.elu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Erf':\n      return [tfOps.erf(getParamValue('x', node, tensorMap, context))];\n\n    case 'Exp':\n      return [tfOps.exp(getParamValue('x', node, tensorMap, context))];\n\n    case 'Expm1':\n      {\n        return [tfOps.expm1(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Floor':\n      return [tfOps.floor(getParamValue('x', node, tensorMap, context))];\n\n    case 'Log':\n      return [tfOps.log(getParamValue('x', node, tensorMap, context))];\n\n    case 'Log1p':\n      {\n        return [tfOps.log1p(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Imag':\n      return [tfOps.imag(getParamValue('x', node, tensorMap, context))];\n\n    case 'Neg':\n      return [tfOps.neg(getParamValue('x', node, tensorMap, context))];\n\n    case 'Reciprocal':\n      {\n        return [tfOps.reciprocal(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Real':\n      return [tfOps.real(getParamValue('x', node, tensorMap, context))];\n\n    case 'Relu':\n      return [tfOps.relu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Round':\n      {\n        return [tfOps.round(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Selu':\n      return [tfOps.selu(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sigmoid':\n      return [tfOps.sigmoid(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sin':\n      return [tfOps.sin(getParamValue('x', node, tensorMap, context))];\n\n    case 'Sign':\n      {\n        return [tfOps.sign(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Sinh':\n      {\n        return [tfOps.sinh(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Softplus':\n      {\n        return [tfOps.softplus(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Sqrt':\n      {\n        return [tfOps.sqrt(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Square':\n      {\n        return [tfOps.square(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Tanh':\n      {\n        return [tfOps.tanh(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'Tan':\n      return [tfOps.tan(getParamValue('x', node, tensorMap, context))];\n\n    case 'ClipByValue':\n      return [tfOps.clipByValue(getParamValue('x', node, tensorMap, context), getParamValue('clipValueMin', node, tensorMap, context), getParamValue('clipValueMax', node, tensorMap, context))];\n\n    case 'Relu6':\n      return [tfOps.relu6(getParamValue('x', node, tensorMap, context))];\n\n    case 'Rsqrt':\n      return [tfOps.rsqrt(getTensor(node.inputNames[0], tensorMap, context))];\n\n    case 'Prod':\n      return [tfOps.prod(getParamValue('x', node, tensorMap, context), getParamValue('axes', node, tensorMap, context))];\n\n    case 'LeakyRelu':\n      return [tfOps.leakyRelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n\n    case 'Prelu':\n      return [tfOps.prelu(getParamValue('x', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context))];\n\n    case 'IsNan':\n      return [tfOps.isNaN(getTensor(node.inputNames[0], tensorMap, context))];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'basic_math';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","getTensor","executeOp","node","tensorMap","context","op","abs","acos","acosh","asin","asinh","atan","atan2","atanh","ceil","complex","cos","cosh","elu","erf","exp","expm1","floor","log","log1p","imag","neg","reciprocal","real","relu","round","selu","sigmoid","sin","sign","sinh","softplus","sqrt","square","tanh","tan","clipByValue","relu6","rsqrt","inputNames","prod","leakyRelu","prelu","isNaN","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/basic_math_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'Abs':\n        case 'ComplexAbs':\n          return [tfOps.abs(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acos':\n          return [tfOps.acos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Acosh':\n          return [tfOps.acosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asin':\n          return [tfOps.asin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Asinh':\n          return [tfOps.asinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan':\n          return [tfOps.atan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Atan2':\n          return [tfOps.atan2(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('y', node, tensorMap, context) as Tensor)];\n        case 'Atanh':\n          return [tfOps.atanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Ceil':\n          return [tfOps.ceil(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Complex':\n          return [tfOps.complex(\n              getParamValue('real', node, tensorMap, context) as Tensor,\n              getParamValue('imag', node, tensorMap, context) as Tensor)];\n        case 'Cos':\n          return [tfOps.cos(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Cosh':\n          return [tfOps.cosh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Elu':\n          return [tfOps.elu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Erf':\n          return [tfOps.erf(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Exp':\n          return [tfOps.exp(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Expm1': {\n          return [tfOps.expm1(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Floor':\n          return [tfOps.floor(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log':\n          return [tfOps.log(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Log1p': {\n          return [tfOps.log1p(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Imag':\n          return [tfOps.imag(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n\n        case 'Neg':\n          return [tfOps.neg(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Reciprocal': {\n          return [tfOps.reciprocal(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Real':\n          return [tfOps.real(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Relu':\n          return [tfOps.relu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Round': {\n          return [tfOps.round(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Selu':\n          return [tfOps.selu(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sigmoid':\n          return [tfOps.sigmoid(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sin':\n          return [tfOps.sin(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Sign': {\n          return [tfOps.sign(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sinh': {\n          return [tfOps.sinh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Softplus': {\n          return [tfOps.softplus(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Sqrt': {\n          return [tfOps.sqrt(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Square': {\n          return [tfOps.square(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tanh': {\n          return [tfOps.tanh(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'Tan':\n          return [tfOps.tan(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'ClipByValue':\n          return [tfOps.clipByValue(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('clipValueMin', node, tensorMap, context) as number,\n              getParamValue('clipValueMax', node, tensorMap, context) as\n                  number)];\n        case 'Relu6':\n          return [tfOps.relu6(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        case 'Rsqrt':\n          return [tfOps.rsqrt(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        case 'Prod':\n          return [tfOps.prod(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('axes', node, tensorMap, context) as number[])];\n        case 'LeakyRelu':\n          return [tfOps.leakyRelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as number)];\n        case 'Prelu':\n          return [tfOps.prelu(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('alpha', node, tensorMap, context) as Tensor)];\n        case 'IsNan':\n          return [tfOps.isNaN(\n              getTensor(node.inputNames[0], tensorMap, context))];\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'basic_math';\n"]},"metadata":{},"sourceType":"module"}