{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AddN } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\n\nfunction addN_(tensors) {\n  util.assert(Array.isArray(tensors), () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(tensors.length >= 1, () => `Must pass at least one tensor to tf.addN(), but got ` + `${tensors.length}`);\n  const $tensors = tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error('All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error('All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n  const inputs = $tensors;\n  return ENGINE.runKernel(AddN, inputs);\n}\n\nexport const addN = op({\n  addN_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,IAAR,QAA+B,iBAA/B;AAGA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;AAaA,SAASC,KAAT,CAAiCC,OAAjC,EAA6D;AAC3DH,MAAI,CAACI,MAAL,CACIC,KAAK,CAACC,OAAN,CAAcH,OAAd,CADJ,EAEI,MAAM,4DAFV;AAGAH,MAAI,CAACI,MAAL,CACID,OAAO,CAACI,MAAR,IAAkB,CADtB,EAEI,MAAM,yDACF,GAAGJ,OAAO,CAACI,MAAM,EAHzB;AAKA,QAAMC,QAAQ,GACVL,OAAO,CAACM,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAAUZ,eAAe,CAACW,CAAD,EAAI,UAAUC,CAAC,EAAf,EAAmB,MAAnB,CAArC,CADJ;AAGA,QAAMC,WAAW,GAAGJ,QAAQ,CAAC,CAAD,CAA5B;AACAA,UAAQ,CAACK,OAAT,CAAiBH,CAAC,IAAG;AACnB,QAAIA,CAAC,CAACI,KAAF,KAAYF,WAAW,CAACE,KAA5B,EAAmC;AACjC,YAAM,IAAIC,KAAJ,CACF,0DADE,CAAN;AAED;AACF,GALD;AAOAP,UAAQ,CAACK,OAAT,CAAiBH,CAAC,IAAG;AACnB,QAAI,CAACV,IAAI,CAACgB,WAAL,CAAiBN,CAAC,CAACO,KAAnB,EAA0BL,WAAW,CAACK,KAAtC,CAAL,EAAmD;AACjD,YAAM,IAAIF,KAAJ,CACF,0DADE,CAAN;AAED;AACF,GALD;AAOA,QAAMG,MAAM,GAAeV,QAA3B;AAEA,SAAOX,MAAM,CAACsB,SAAP,CAAiBrB,IAAjB,EAAuBoB,MAAvB,CAAP;AACD;;AAED,OAAO,MAAME,IAAI,GAAGnB,EAAE,CAAC;AAACC;AAAD,CAAD,CAAf","names":["ENGINE","AddN","convertToTensor","util","op","addN_","tensors","assert","Array","isArray","length","$tensors","map","t","i","firstTensor","forEach","dtype","Error","arraysEqual","shape","inputs","runKernel","addN"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/add_n.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {AddN, AddNInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Adds a list of `tf.Tensor`s element-wise, each with the same shape and dtype.\n *\n * ```js\n * const a = tf.tensor1d([1, 2]);\n * const b = tf.tensor1d([3, 4]);\n * const c = tf.tensor1d([5, 6]);\n *\n * tf.addN([a, b, c]).print();\n * ```\n * @param tensors A list of tensors with the same shape and dtype.\n * @doc {heading: 'Operations', subheading: 'Arithmetic'}\n */\nfunction addN_<T extends Tensor>(tensors: Array<T|TensorLike>): T {\n  util.assert(\n      Array.isArray(tensors),\n      () => 'The argument passed to tf.addN() must be a list of tensors');\n  util.assert(\n      tensors.length >= 1,\n      () => `Must pass at least one tensor to tf.addN(), but got ` +\n          `${tensors.length}`);\n\n  const $tensors =\n      tensors.map((t, i) => convertToTensor(t, `tensors${i}`, 'addN'));\n\n  const firstTensor = $tensors[0];\n  $tensors.forEach(t => {\n    if (t.dtype !== firstTensor.dtype) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same dtype');\n    }\n  });\n\n  $tensors.forEach(t => {\n    if (!util.arraysEqual(t.shape, firstTensor.shape)) {\n      throw new Error(\n          'All tensors passed to tf.addN() must have the same shape');\n    }\n  });\n\n  const inputs: AddNInputs = $tensors;\n\n  return ENGINE.runKernel(AddN, inputs as {} as NamedTensorMap);\n}\n\nexport const addN = op({addN_});\n"]},"metadata":{},"sourceType":"module"}