{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringToHashBucketFast } from '@tensorflow/tfjs-core';\nimport { stringToHashBucketFastImpl } from './StringToHashBucketFast_impl';\nexport function stringToHashBucketFast(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    numBuckets\n  } = attrs;\n  const {\n    input\n  } = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values;\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\nexport const stringToHashBucketFastConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,sBAAlC,QAAsI,uBAAtI;AAIA,SAAQC,0BAAR,QAAyC,+BAAzC;AAEA,OAAM,SAAUC,sBAAV,CAAiCC,IAAjC,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAeD,KAArB;AACA,QAAM;AAACE;AAAD,MAAUJ,MAAhB;;AAEA,MAAII,KAAK,CAACC,KAAN,KAAgB,QAApB,EAA8B;AAC5B,UAAM,IAAIC,KAAJ,CAAU,kCAAV,CAAN;AACD;;AACD,MAAIH,UAAU,IAAI,CAAlB,EAAqB;AACnB,UAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAGN,OAAO,CAACO,IAAR,CAAaC,GAAb,CAAiBL,KAAK,CAACM,MAAvB,EAA+BC,MAA9C;AAEA,QAAMC,MAAM,GAAGf,0BAA0B,CAACU,MAAD,EAASJ,UAAT,CAAzC;AACA,SAAOF,OAAO,CAACY,cAAR,CAAuBT,KAAK,CAACU,KAA7B,EAAoC,OAApC,EAA6CF,MAA7C,CAAP;AACD;AAED,OAAO,MAAMG,4BAA4B,GAAiB;AACxDC,YAAU,EAAEpB,sBAD4C;AAExDqB,aAAW,EAAE,KAF2C;AAGxDC,YAAU,EAAEpB;AAH4C,CAAnD","names":["StringToHashBucketFast","stringToHashBucketFastImpl","stringToHashBucketFast","args","inputs","backend","attrs","numBuckets","input","dtype","Error","$input","data","get","dataId","values","output","makeTensorInfo","shape","stringToHashBucketFastConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/StringToHashBucketFast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringToHashBucketFastImpl} from './StringToHashBucketFast_impl';\n\nexport function stringToHashBucketFast(args: {\n  inputs: StringToHashBucketFastInputs,\n  backend: MathBackendCPU,\n  attrs: StringToHashBucketFastAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {numBuckets} = attrs;\n  const {input} = inputs;\n\n  if (input.dtype !== 'string') {\n    throw new Error('Input must be of datatype string');\n  }\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const $input = backend.data.get(input.dataId).values as Uint8Array[];\n\n  const output = stringToHashBucketFastImpl($input, numBuckets);\n  return backend.makeTensorInfo(input.shape, 'int32', output);\n}\n\nexport const stringToHashBucketFastConfig: KernelConfig = {\n  kernelName: StringToHashBucketFast,\n  backendName: 'cpu',\n  kernelFunc: stringToHashBucketFast as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}