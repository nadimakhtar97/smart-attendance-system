{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from '../util';\nconst NEW_AXIS = -2;\nconst SHRINK_AXIS = -1;\nexport function assertParamsValid(input, begin, size) {\n  const inputRank = input.shape.length;\n  util.assert(inputRank === begin.length, () => `Error in slice${inputRank}D: Length of begin ${begin} must ` + `match the rank of the array (${inputRank}).`);\n  util.assert(inputRank === size.length, () => `Error in slice${inputRank}D: Length of size ${size} must ` + `match the rank of the array (${inputRank}).`);\n\n  for (let i = 0; i < inputRank; ++i) {\n    util.assert(begin[i] + size[i] <= input.shape[i], () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` + `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${input.shape[i]})`);\n  }\n}\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\n\nexport function maskToAxes(mask) {\n  const axes = [];\n  let axis = 0;\n\n  while (mask > 0) {\n    if (mask & 1) {\n      axes.push(axis);\n    }\n\n    mask /= 2;\n    axis++;\n  }\n\n  return axes;\n}\n/** Computes the output shape given the strided slice params. */\n\nexport function computeOutShape(begin, end, strides) {\n  const size = [];\n\n  for (let axis = 0; axis < begin.length; axis++) {\n    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n  }\n\n  return size;\n} // Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stride value. Otherwise, insert.\n\nexport function stridesWithElidedDims(strides, ellipsisInsertionIndex, numElidedAxes, inputShape) {\n  const newStrides = [...strides];\n\n  for (let i = newStrides.length; i < inputShape.length; i++) {\n    newStrides.push(1);\n  }\n\n  for (let i = 0; i < numElidedAxes; i++) {\n    if (i === 0) {\n      newStrides[ellipsisInsertionIndex] = 1;\n    } else {\n      newStrides.splice(ellipsisInsertionIndex, 0\n      /* num elements to delete */\n      , 1\n      /* element to add */\n      );\n      newStrides.pop();\n    }\n  }\n\n  return newStrides;\n}\n\nfunction unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, normalizedAxis) {\n  if (normalizedAxis <= ellipsisInsertionIndex) {\n    return normalizedAxis;\n  }\n\n  return normalizedAxis - (numElidedAxes - 1);\n}\n\nfunction getElidedAxes(numElidedAxes, ellipsisInsertionIndex) {\n  const elidedAxes = [];\n\n  for (let i = 0; i < numElidedAxes; i++) {\n    elidedAxes.push(ellipsisInsertionIndex + i);\n  }\n\n  return elidedAxes;\n} // Normalize the start, end and strides.\n\n\nexport function getNormalizedAxes(inputShape, ellipsisAxes, numInterpolatedAxes, begin, end, strides, beginMask, endMask, ellipsisMask) {\n  const inputRank = inputShape.length;\n  let normalizedBegin = new Array(inputRank),\n      normalizedEnd = new Array(inputRank),\n      normalizedStrides = new Array(inputRank);\n\n  if (ellipsisAxes.length && numInterpolatedAxes > 0) {\n    const fullIndex = ellipsisAxes[0]; // The ellipsis applies to the masked index as well as any dimensions\n    // that are interpolated.\n\n    const numElidedAxes = numInterpolatedAxes + 1;\n    normalizedBegin = startIndicesWithElidedDims(beginMask, fullIndex, numElidedAxes, begin, inputShape);\n    normalizedEnd = stopIndicesWithElidedDims(endMask, fullIndex, numElidedAxes, end, inputShape);\n    normalizedStrides = stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);\n  } else {\n    for (let axis = 0; axis < inputRank; axis++) {\n      normalizedBegin[axis] = startForAxis(beginMask, begin, strides, inputShape, axis, ellipsisMask);\n      normalizedEnd[axis] = stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);\n      normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);\n    }\n  }\n\n  return {\n    begin: normalizedBegin,\n    end: normalizedEnd,\n    strides: normalizedStrides\n  };\n} // Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current start value. Otherwise, insert.\n\nexport function startIndicesWithElidedDims(beginMask, ellipsisInsertionIndex, numElidedAxes, originalBegin, inputShape) {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = 0;\n    } else {\n      const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalBegin[originalAxis];\n\n      if (beginMask & 1 << originalAxis) {\n        originalValue = 0;\n      }\n\n      newIndices[axis] = originalValue;\n    }\n  }\n\n  return newIndices;\n} // Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stop value. Otherwise, insert.\n\nexport function stopIndicesWithElidedDims(endMask, ellipsisInsertionIndex, numElidedAxes, originalEnd, inputShape) {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = Number.MAX_SAFE_INTEGER;\n    } else {\n      const originalAxis = unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalEnd[originalAxis];\n\n      if (endMask & 1 << originalAxis) {\n        originalValue = Number.MAX_SAFE_INTEGER;\n      }\n\n      newIndices[axis] = originalValue;\n    }\n  }\n\n  for (let i = 0; i < newIndices.length; i++) {\n    // Handle negative indices\n    const axisSize = inputShape[i];\n\n    if (newIndices[i] < 0) {\n      newIndices[i] += axisSize;\n    }\n\n    newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);\n  }\n\n  return newIndices;\n}\nexport function stridesForAxis(strides, axis, ellipsisMask) {\n  let stride = strides[axis];\n\n  if (ellipsisMask & 1 << axis || stride == null) {\n    stride = 1;\n  }\n\n  return stride;\n}\nexport function startForAxis(beginMask, startIndices, strides, inputShape, axis, ellipsisMask) {\n  // Begin with the specified index\n  let start = startIndices[axis];\n  const stride = strides[axis] || 1; // Check the axis bit from right of masked axes, or the begin index is not set\n  // for the axis.\n\n  if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {\n    if (stride > 0) {\n      // Forward iteration - use the first element. These values will get\n      // clamped below (Note: We could have set them to 0 and axis_size-1, but\n      // use lowest() and max() to maintain symmetry with StopForAxis())\n      start = Number.MIN_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the last element.\n      start = Number.MAX_SAFE_INTEGER;\n    }\n  } // Handle negative indices\n\n\n  const axisSize = inputShape[axis];\n\n  if (start < 0) {\n    start += axisSize;\n  } // Clamping\n\n\n  start = util.clamp(0, start, axisSize - 1);\n  return start;\n}\nexport function stopForAxis(endMask, stopIndices, strides, inputShape, axis, ellipsisMask) {\n  // Begin with the specified index\n  let stop = stopIndices[axis];\n  const stride = strides[axis] || 1; // Check the axis bit from right of masked axes, or if the stop index is not\n  // set for this axis.\n\n  if (endMask & 1 << axis || ellipsisMask & 1 << axis || stop == null) {\n    if (stride > 0) {\n      // Forward iteration - use the last element. These values will get\n      // clamped below\n      stop = Number.MAX_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the first element.\n      stop = Number.MIN_SAFE_INTEGER;\n    }\n  } // Handle negative indices\n\n\n  const axisSize = inputShape[axis];\n\n  if (stop < 0) {\n    stop += axisSize;\n  } // Clamping\n  // Because the end index points one past the last element, we need slightly\n  // different clamping ranges depending on the direction.\n\n\n  if (stride > 0) {\n    // Forward iteration\n    stop = util.clamp(0, stop, axisSize);\n  } else {\n    // Backward iteration\n    stop = util.clamp(-1, stop, axisSize - 1);\n  }\n\n  return stop;\n}\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\n\nexport function isSliceContinous(shape, begin, size) {\n  // Index of the first axis that has size > 1.\n  let firstNonOneAxis = size.length;\n\n  for (let i = 0; i < size.length; i++) {\n    if (size[i] > 1) {\n      firstNonOneAxis = i;\n      break;\n    }\n  }\n\n  for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n    if (begin[i] > 0 || size[i] !== shape[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\nexport function computeFlatOffset(begin, strides) {\n  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n\n  for (let i = 0; i < begin.length - 1; i++) {\n    flatOffset += begin[i] * strides[i];\n  }\n\n  return flatOffset;\n}\nexport function parseSliceParams(x, begin, size) {\n  // The following logic allows for more ergonomic calls.\n  let begin_;\n  const xRank = x.shape.length;\n\n  if (typeof begin === 'number') {\n    begin_ = [begin, ...new Array(xRank - 1).fill(0)];\n  } else if (begin.length < xRank) {\n    begin_ = begin.concat(new Array(xRank - begin.length).fill(0));\n  } else {\n    begin_ = begin.slice();\n  }\n\n  begin_.forEach(d => {\n    util.assert(d !== -1, () => 'slice() does not support negative begin indexing.');\n  });\n  let size_;\n\n  if (size == null) {\n    size_ = new Array(xRank).fill(-1);\n  } else if (typeof size === 'number') {\n    size_ = [size, ...new Array(xRank - 1).fill(-1)];\n  } else if (size.length < xRank) {\n    size_ = size.concat(new Array(xRank - size.length).fill(-1));\n  } else {\n    size_ = size;\n  }\n\n  size_ = size_.map((d, i) => {\n    if (d >= 0) {\n      return d;\n    } else {\n      util.assert(d === -1, () => `Negative size values should be exactly -1 but got ` + `${d} for the slice() size at index ${i}.`);\n      return x.shape[i] - begin_[i];\n    }\n  });\n  return [begin_, size_];\n} // Convert the slicing specification from a sparse representation to a dense\n// representation. This means that all ellipses and newaxis are expanded out.\n\nexport function sliceInfo(xShape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask) {\n  let stridesNonNull;\n\n  if (strides == null) {\n    stridesNonNull = new Array(begin.length);\n    stridesNonNull.fill(1);\n  } else {\n    stridesNonNull = strides;\n  } // Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask\n  // is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power\n  // of 2. When i is a power of 2, i & (i - 1) is always 0.\n  // Also ref:\n  // https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2\n\n\n  if (ellipsisMask != null && (ellipsisMask & ellipsisMask - 1) !== 0) {\n    throw new Error('Multiple ellipses in slice is not allowed.');\n  } // Step 1: Account for ellipsis and new axis.\n  // Check for ellipsis and count how many non-newaxis there are after.\n\n\n  let ellipsisSeen = false;\n  const sparseSpec = {\n    dims: stridesNonNull.length,\n    numAddAxisAfterEllipsis: 0,\n    begin: begin.slice(),\n    end: end.slice(),\n    strides: stridesNonNull.slice(),\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n\n  for (let i = 0; i < sparseSpec.dims; i++) {\n    if (ellipsisSeen && (1 << i & newAxisMask) !== 0) {\n      sparseSpec.numAddAxisAfterEllipsis++;\n    }\n\n    if (1 << i & ellipsisMask) {\n      ellipsisSeen = true;\n    }\n  } // If no ellipsis insert one at the end.\n\n\n  if (!ellipsisSeen) {\n    sparseSpec.ellipsisMask |= 1 << sparseSpec.dims;\n    sparseSpec.dims++; // this effects loop iteration below\n  } // Step 2: Make a sparse spec into a full index spec.\n  //\n  // The sparse spec deos not correspond to the number of dimensions.\n  // Make a dense spec that cooresponds to the number of dimensions.\n  //\n  // For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to\n  // produce the missing beginMask for the first two dimensions i.e. from\n  // beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),\n  // endMask = 7 (111).\n\n\n  const denseSpec = {\n    dims: xShape.length,\n    beginMask: 0,\n    endMask: 0,\n    beginValid: false,\n    endValid: false\n  };\n  buildDenseSpec(sparseSpec, denseSpec); // Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit\n  // and bounds check.\n\n  let isIdentity = true;\n  let sliceDim0 = true;\n  let isSimpleSlice = true;\n  const processingShape = [];\n  const finalShape = [];\n\n  for (let i = 0; i < xShape.length; ++i) {\n    if (denseSpec.strides[i] === 0) {\n      throw Error(`strides[${i}] must be non-zero`);\n    }\n\n    const shrinkI = !!(denseSpec.shrinkAxisMask & 1 << i);\n    const dimI = xShape[i];\n\n    if (dimI === -1) {\n      processingShape.push(shrinkI ? 1 : -1);\n      continue;\n    }\n\n    const masks = [denseSpec.beginMask & 1 << i, denseSpec.endMask & 1 << i];\n    const validRange = [denseSpec.strides[i] > 0 ? 0 : -1, denseSpec.strides[i] > 0 ? dimI : dimI - 1];\n\n    if (shrinkI && denseSpec.strides[i] <= 0) {\n      throw Error('only stride 1 allowed on non-range indexing.');\n    }\n\n    isSimpleSlice = isSimpleSlice && denseSpec.strides[i] === 1;\n    const beginAndEndMasked = !!(denseSpec.beginMask & 1 << i && denseSpec.endMask & 1 << i);\n\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      if (shrinkI) {\n        // If we are shrinking, the end index is now possibly incorrect. In\n        // particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.\n        // and canonical puts these to n-1 and 0, which implies a degenerate\n        // interval. Fortunately, it is now safe to re-create end as begin + 1.\n        const xFwd = denseSpec.begin[i] < 0 ? dimI + denseSpec.begin[i] : denseSpec.begin[i];\n        denseSpec.begin[i] = xFwd;\n        denseSpec.end[i] = denseSpec.begin[i] + 1;\n\n        if (xFwd < 0 || xFwd >= dimI) {\n          throw Error(`slice index ${denseSpec.begin[i]} of dimension ${i} out of bounds.`);\n        }\n      } else {\n        denseSpec.begin[i] = canonical(denseSpec.begin[i], 0, denseSpec.strides[i], dimI, masks, validRange);\n        denseSpec.end[i] = canonical(denseSpec.end[i], 1, denseSpec.strides[i], dimI, masks, validRange);\n      } // Update optimization values\n\n\n      const takeAllInDimension = denseSpec.strides[i] === 1 && denseSpec.begin[i] === 0 && denseSpec.end[i] === dimI;\n      isIdentity = isIdentity && takeAllInDimension;\n      sliceDim0 = sliceDim0 && (i === 0 && denseSpec.strides[i] === 1 || takeAllInDimension);\n    } else {\n      isIdentity = isIdentity && denseSpec.strides[i] === 1 && beginAndEndMasked;\n      sliceDim0 = sliceDim0 && (i === 0 && denseSpec.strides[i] === 1 || beginAndEndMasked);\n    } // Compute the processing shape (the intermediate Eigen will produce)\n\n\n    let intervalLength;\n    let knownInterval = false;\n\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      intervalLength = denseSpec.end[i] - denseSpec.begin[i];\n      knownInterval = true;\n    } else if (shrinkI) {\n      // The dimension is still known as 1 for the processingShape, but will be\n      // discarded for the final shape.\n      intervalLength = 1;\n      knownInterval = true;\n    } else if (beginAndEndMasked) {\n      // Even if we don't have values for begin or end, we do know that this\n      // dimension covers the whole interval. If we have shape information for\n      // this dimension, that tells us the interval length.\n      if (dimI >= 0) {\n        if (denseSpec.strides[i] < 0) {\n          intervalLength = -dimI;\n        } else {\n          intervalLength = dimI;\n        }\n\n        knownInterval = true;\n      }\n    }\n\n    if (knownInterval) {\n      let sizeI; // Hold zero if the interval is degenerate, otherwise account for\n      // remainder\n\n      if (intervalLength === 0 || intervalLength < 0 !== denseSpec.strides[i] < 0) {\n        sizeI = 0;\n      } else {\n        sizeI = Math.trunc(intervalLength / denseSpec.strides[i]) + (intervalLength % denseSpec.strides[i] !== 0 ? 1 : 0);\n      }\n\n      processingShape.push(sizeI);\n    } else {\n      processingShape.push(-1);\n    }\n  } // Step 4: Compute the final shape\n  //\n  // newAxis will increase dimension by 1 (with a one-size dimension)\n  // slices like foo[3, ...] will reduce dimension by 1.\n  // This cannot be done earlier, because it depends on Step 3.\n\n\n  for (let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length; ++denseDim) {\n    const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];\n\n    if (gatherIndex >= 0) {\n      finalShape.push(processingShape[gatherIndex]);\n    } else if (gatherIndex === NEW_AXIS) {\n      finalShape.push(1);\n    }\n  }\n\n  const finalShapeSparse = finalShape.filter((dim, i) => denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);\n  return {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: denseSpec.begin,\n    end: denseSpec.end,\n    strides: denseSpec.strides\n  };\n}\n\nfunction buildDenseSpec(sparse, dense) {\n  dense.beginMask = 0;\n  dense.endMask = 0;\n  dense.shrinkAxisMask = 0;\n  let fullIndex = 0;\n  dense.beginValid = sparse.begin != null;\n  dense.endValid = sparse.end != null;\n  dense.begin = new Array(dense.dims);\n  dense.end = new Array(dense.dims);\n  dense.strides = new Array(dense.dims);\n  dense.finalShapeGatherIndices = [];\n  dense.finalShapeGatherIndicesSparse = [];\n  dense.inputShapeGatherIndicesSparse = new Array(dense.dims);\n\n  for (let i = 0; i < sparse.dims; i++) {\n    if (1 << i & sparse.ellipsisMask) {\n      // Only the bit that has ellipsis will fall in this condition.\n      // Expand the ellipsis into the appropriate indices\n      // Note: this only works because we guaranteed one ellipsis.\n      const nextIndex = Math.min(dense.dims - (sparse.dims - i) + 1 + sparse.numAddAxisAfterEllipsis, dense.dims);\n\n      for (; fullIndex < nextIndex; fullIndex++) {\n        // newAxis aren't real axis so you have to skip.\n        dense.begin[fullIndex] = 0;\n        dense.end[fullIndex] = 0;\n        dense.strides[fullIndex] = 1;\n        dense.beginMask |= 1 << fullIndex;\n        dense.endMask |= 1 << fullIndex;\n        dense.finalShapeGatherIndices.push(fullIndex);\n        dense.finalShapeGatherIndicesSparse.push(-1);\n        dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n      }\n    } else if (1 << i & sparse.newAxisMask) {\n      // Only the bit that has newAxis will fall in this condition.\n      dense.finalShapeGatherIndices.push(NEW_AXIS);\n      dense.finalShapeGatherIndicesSparse.push(-1);\n    } else {\n      if (fullIndex === dense.begin.length) {\n        throw Error(`Index out of range using input dim ${fullIndex}; input ` + `has only ${dense.dims} dims, ${dense.begin.length}.`);\n      } // Gather slicing spec into appropriate index.\n\n\n      if (sparse.begin != null) {\n        dense.begin[fullIndex] = sparse.begin[i];\n      }\n\n      if (sparse.end != null) {\n        dense.end[fullIndex] = sparse.end[i];\n      }\n\n      dense.strides[fullIndex] = sparse.strides[i];\n\n      if (sparse.beginMask & 1 << i) {\n        dense.beginMask |= 1 << fullIndex;\n      }\n\n      if (sparse.endMask & 1 << i) {\n        dense.endMask |= 1 << fullIndex;\n      } // If shrink, record where to get the dimensionality from (i.e. newAxis)\n      // creates a fake 1 size dimension. Also remember shrink axis (now in\n      // dense form) so we can ignore dense.end below.\n\n\n      if (sparse.shrinkAxisMask & 1 << i) {\n        dense.finalShapeGatherIndices.push(SHRINK_AXIS);\n        dense.finalShapeGatherIndicesSparse.push(-1);\n        dense.shrinkAxisMask |= 1 << fullIndex;\n      } else {\n        dense.finalShapeGatherIndices.push(fullIndex); // Remember that where in the sparse shape the dense dim comes from.\n\n        dense.finalShapeGatherIndicesSparse.push(i);\n      }\n\n      dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n      fullIndex++;\n    }\n  }\n}\n\nfunction canonical(x, c, strideI, dimI, masks, validRange) {\n  if (masks[c]) {\n    return strideI > 0 ? validRange[c] : validRange[c + 1 & 1];\n  } else {\n    const xFwd = x < 0 ? dimI + x : x; // make negative indices positive\n\n    return xFwd < validRange[0] ? validRange[0] : xFwd > validRange[1] ? validRange[1] : xFwd;\n  }\n}","map":{"version":3,"mappings":"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","names":["util","NEW_AXIS","SHRINK_AXIS","assertParamsValid","input","begin","size","inputRank","shape","length","assert","i","maskToAxes","mask","axes","axis","push","computeOutShape","end","strides","Math","ceil","stridesWithElidedDims","ellipsisInsertionIndex","numElidedAxes","inputShape","newStrides","splice","pop","unnormalizeAxis","normalizedAxis","getElidedAxes","elidedAxes","getNormalizedAxes","ellipsisAxes","numInterpolatedAxes","beginMask","endMask","ellipsisMask","normalizedBegin","Array","normalizedEnd","normalizedStrides","fullIndex","startIndicesWithElidedDims","stopIndicesWithElidedDims","startForAxis","stopForAxis","stridesForAxis","originalBegin","newIndices","indexOf","originalAxis","originalValue","originalEnd","Number","MAX_SAFE_INTEGER","axisSize","clamp","stride","startIndices","start","MIN_SAFE_INTEGER","stopIndices","stop","isSliceContinous","firstNonOneAxis","computeFlatOffset","flatOffset","parseSliceParams","x","begin_","xRank","fill","concat","slice","forEach","d","size_","map","sliceInfo","xShape","newAxisMask","shrinkAxisMask","stridesNonNull","Error","ellipsisSeen","sparseSpec","dims","numAddAxisAfterEllipsis","denseSpec","beginValid","endValid","buildDenseSpec","isIdentity","sliceDim0","isSimpleSlice","processingShape","finalShape","shrinkI","dimI","masks","validRange","beginAndEndMasked","xFwd","canonical","takeAllInDimension","intervalLength","knownInterval","sizeI","trunc","denseDim","finalShapeGatherIndices","gatherIndex","finalShapeSparse","filter","dim","sparse","dense","finalShapeGatherIndicesSparse","inputShapeGatherIndicesSparse","nextIndex","min","c","strideI"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/slice_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo} from '../kernel_registry';\nimport * as util from '../util';\n\nconst NEW_AXIS = -2;\nconst SHRINK_AXIS = -1;\n\n// Sparse slicing specification\n// if one does foo[3:5, ..., -3], the begin, end and strides will have length\n// of 3.\ninterface StridedSliceSparseSpec {\n  dims: number;\n  numAddAxisAfterEllipsis: number;\n  begin: number[];\n  end: number[];\n  strides: number[];\n  beginMask: number;\n  endMask: number;\n  ellipsisMask: number;\n  newAxisMask: number;\n  shrinkAxisMask: number;\n}\n\n// Dense slicing specification\n// all ellipses and newaxis are expanded out. So if foo[3:5, ..., -3] where foo\n// is 10 dimensional, each array of begin, end, strides will have 10 entries\n// where as the sparse can have length less than the rank of foo.\ninterface StridedSliceDenseSpec {\n  dims: number;\n  beginMask?: number;\n  endMask?: number;\n  beginValid: boolean;\n  endValid: boolean;\n  begin?: number[];\n  end?: number[];\n  strides?: number[];\n  // This array helps construct the final shape of the slice.\n  // The final tensor is reduced in rank whenever a single index e.g. foo[3]\n  // is called for. The final tensor increases in rank with newAxis entries.\n  // If an index in this array is positive, the size of the dimension is\n  // obtained from canonical end-begin.  Otherwise, if it is a NEW_AXIS, it will\n  // be 1. A shrunk dimension is skipped.\n  finalShapeGatherIndices?: number[];\n  // This array has the same size as finalShapeGatherIndices, but it remembers\n  // the sparse index that a dimension comes from, instead of dense index.\n  // A -1 in this vector means the index is not from the sparse input.\n  finalShapeGatherIndicesSparse?: number[];\n  inputShapeGatherIndicesSparse?: number[];\n  // The dense indexed shrink mask is which processing dimensions should be\n  // shrunk. For example, if foo.shape = [10, 10, 10, 10], foo[3, ..., 5] has\n  // sparseShrinkAxisMask of 5 (0101) and denseShrinkAxisMask of 9 (1001),\n  // yielding a final shape [10, 10].\n  shrinkAxisMask?: number;\n}\n\nexport type SliceInfo = {\n  finalShapeSparse: number[],\n  finalShape: number[],\n  isIdentity: boolean,\n  sliceDim0: boolean,\n  isSimpleSlice: boolean,\n  begin: number[],\n  end: number[],\n  strides: number[]\n};\n\nexport function assertParamsValid(\n    input: TensorInfo, begin: number[], size: number[]): void {\n  const inputRank = input.shape.length;\n  util.assert(\n      inputRank === begin.length,\n      () => `Error in slice${inputRank}D: Length of begin ${begin} must ` +\n          `match the rank of the array (${inputRank}).`);\n  util.assert(\n      inputRank === size.length,\n      () => `Error in slice${inputRank}D: Length of size ${size} must ` +\n          `match the rank of the array (${inputRank}).`);\n\n  for (let i = 0; i < inputRank; ++i) {\n    util.assert(\n        begin[i] + size[i] <= input.shape[i],\n        () => `Error in slice${inputRank}D: begin[${i}] + size[${i}] ` +\n            `(${begin[i] + size[i]}) would overflow input.shape[${i}] (${\n                  input.shape[i]})`);\n  }\n}\n\n/** Converts a binary mask to an array of axes. Used in stridedSlice(). */\nexport function maskToAxes(mask: number): number[] {\n  const axes = [];\n  let axis = 0;\n  while (mask > 0) {\n    if (mask & 1) {\n      axes.push(axis);\n    }\n    mask /= 2;\n    axis++;\n  }\n  return axes;\n}\n\n/** Computes the output shape given the strided slice params. */\nexport function computeOutShape(\n    begin: number[], end: number[], strides: number[]): number[] {\n  const size = [];\n  for (let axis = 0; axis < begin.length; axis++) {\n    size[axis] = Math.ceil((end[axis] - begin[axis]) / strides[axis]);\n  }\n  return size;\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stride value. Otherwise, insert.\nexport function stridesWithElidedDims(\n    strides: number[], ellipsisInsertionIndex: number, numElidedAxes: number,\n    inputShape: number[]): number[] {\n  const newStrides = [...strides];\n  for (let i = newStrides.length; i < inputShape.length; i++) {\n    newStrides.push(1);\n  }\n  for (let i = 0; i < numElidedAxes; i++) {\n    if (i === 0) {\n      newStrides[ellipsisInsertionIndex] = 1;\n    } else {\n      newStrides.splice(\n          ellipsisInsertionIndex, 0 /* num elements to delete */,\n          1 /* element to add */);\n      newStrides.pop();\n    }\n  }\n  return newStrides;\n}\n\nfunction unnormalizeAxis(\n    ellipsisInsertionIndex: number, numElidedAxes: number,\n    normalizedAxis: number): number {\n  if (normalizedAxis <= ellipsisInsertionIndex) {\n    return normalizedAxis;\n  }\n\n  return normalizedAxis - (numElidedAxes - 1);\n}\n\nfunction getElidedAxes(numElidedAxes: number, ellipsisInsertionIndex: number) {\n  const elidedAxes = [];\n  for (let i = 0; i < numElidedAxes; i++) {\n    elidedAxes.push(ellipsisInsertionIndex + i);\n  }\n  return elidedAxes;\n}\n\n// Normalize the start, end and strides.\nexport function getNormalizedAxes(\n    inputShape: number[], ellipsisAxes: number[], numInterpolatedAxes: number,\n    begin: number[], end: number[], strides: number[], beginMask: number,\n    endMask: number,\n    ellipsisMask: number): {begin: number[], end: number[], strides: number[]} {\n  const inputRank = inputShape.length;\n  let normalizedBegin = new Array(inputRank),\n      normalizedEnd = new Array(inputRank),\n      normalizedStrides = new Array(inputRank);\n  if (ellipsisAxes.length && numInterpolatedAxes > 0) {\n    const fullIndex = ellipsisAxes[0];\n\n    // The ellipsis applies to the masked index as well as any dimensions\n    // that are interpolated.\n    const numElidedAxes = numInterpolatedAxes + 1;\n    normalizedBegin = startIndicesWithElidedDims(\n        beginMask, fullIndex, numElidedAxes, begin, inputShape);\n    normalizedEnd = stopIndicesWithElidedDims(\n        endMask, fullIndex, numElidedAxes, end, inputShape);\n    normalizedStrides =\n        stridesWithElidedDims(strides, fullIndex, numElidedAxes, inputShape);\n  } else {\n    for (let axis = 0; axis < inputRank; axis++) {\n      normalizedBegin[axis] = startForAxis(\n          beginMask, begin, strides, inputShape, axis, ellipsisMask);\n      normalizedEnd[axis] =\n          stopForAxis(endMask, end, strides, inputShape, axis, ellipsisMask);\n      normalizedStrides[axis] = stridesForAxis(strides, axis, ellipsisMask);\n    }\n  }\n\n  return {\n    begin: normalizedBegin,\n    end: normalizedEnd,\n    strides: normalizedStrides\n  };\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current start value. Otherwise, insert.\nexport function startIndicesWithElidedDims(\n    beginMask: number, ellipsisInsertionIndex: number, numElidedAxes: number,\n    originalBegin: number[], inputShape: number[]): number[] {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = 0;\n    } else {\n      const originalAxis =\n          unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalBegin[originalAxis];\n      if (beginMask & 1 << originalAxis) {\n        originalValue = 0;\n      }\n\n      newIndices[axis] = originalValue;\n    }\n  }\n  return newIndices;\n}\n\n// Creates full selection at the elided dimensions. If the dimension matches\n// the ellipsis mask, override the current stop value. Otherwise, insert.\nexport function stopIndicesWithElidedDims(\n    endMask: number, ellipsisInsertionIndex: number, numElidedAxes: number,\n    originalEnd: number[], inputShape: number[]): number[] {\n  const newIndices = [...inputShape];\n  const elidedAxes = getElidedAxes(numElidedAxes, ellipsisInsertionIndex);\n\n  for (let axis = 0; axis < newIndices.length; axis++) {\n    if (elidedAxes.indexOf(axis) > -1) {\n      newIndices[axis] = Number.MAX_SAFE_INTEGER;\n    } else {\n      const originalAxis =\n          unnormalizeAxis(ellipsisInsertionIndex, numElidedAxes, axis);\n      let originalValue = originalEnd[originalAxis];\n      if (endMask & 1 << originalAxis) {\n        originalValue = Number.MAX_SAFE_INTEGER;\n      }\n      newIndices[axis] = originalValue;\n    }\n  }\n\n  for (let i = 0; i < newIndices.length; i++) {\n    // Handle negative indices\n    const axisSize = inputShape[i];\n    if (newIndices[i] < 0) {\n      newIndices[i] += axisSize;\n    }\n    newIndices[i] = util.clamp(0, newIndices[i], inputShape[i]);\n  }\n  return newIndices;\n}\n\nexport function stridesForAxis(\n    strides: number[], axis: number, ellipsisMask: number): number {\n  let stride = strides[axis];\n  if (ellipsisMask & (1 << axis) || stride == null) {\n    stride = 1;\n  }\n\n  return stride;\n}\n\nexport function startForAxis(\n    beginMask: number, startIndices: number[], strides: number[],\n    inputShape: number[], axis: number, ellipsisMask: number): number {\n  // Begin with the specified index\n  let start = startIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of masked axes, or the begin index is not set\n  // for the axis.\n  if (beginMask & 1 << axis || ellipsisMask & 1 << axis || start == null) {\n    if (stride > 0) {\n      // Forward iteration - use the first element. These values will get\n      // clamped below (Note: We could have set them to 0 and axis_size-1, but\n      // use lowest() and max() to maintain symmetry with StopForAxis())\n      start = Number.MIN_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the last element.\n      start = Number.MAX_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (start < 0) {\n    start += axisSize;\n  }\n\n  // Clamping\n  start = util.clamp(0, start, axisSize - 1);\n\n  return start;\n}\n\nexport function stopForAxis(\n    endMask: number, stopIndices: number[], strides: number[],\n    inputShape: number[], axis: number, ellipsisMask: number): number {\n  // Begin with the specified index\n  let stop = stopIndices[axis];\n  const stride = strides[axis] || 1;\n\n  // Check the axis bit from right of masked axes, or if the stop index is not\n  // set for this axis.\n  if (endMask & (1 << axis) || ellipsisMask & (1 << axis) || stop == null) {\n    if (stride > 0) {\n      // Forward iteration - use the last element. These values will get\n      // clamped below\n      stop = Number.MAX_SAFE_INTEGER;\n    } else {\n      // Backward iteration - use the first element.\n      stop = Number.MIN_SAFE_INTEGER;\n    }\n  }\n\n  // Handle negative indices\n  const axisSize = inputShape[axis];\n  if (stop < 0) {\n    stop += axisSize;\n  }\n\n  // Clamping\n  // Because the end index points one past the last element, we need slightly\n  // different clamping ranges depending on the direction.\n  if (stride > 0) {\n    // Forward iteration\n    stop = util.clamp(0, stop, axisSize);\n  } else {\n    // Backward iteration\n    stop = util.clamp(-1, stop, axisSize - 1);\n  }\n\n  return stop;\n}\n\n/**\n * Returns true if the slice occupies a continous set of elements in the\n * 'flat' space.\n */\nexport function isSliceContinous(\n    shape: number[], begin: number[], size: number[]) {\n  // Index of the first axis that has size > 1.\n  let firstNonOneAxis = size.length;\n  for (let i = 0; i < size.length; i++) {\n    if (size[i] > 1) {\n      firstNonOneAxis = i;\n      break;\n    }\n  }\n\n  for (let i = firstNonOneAxis + 1; i < size.length; i++) {\n    if (begin[i] > 0 || size[i] !== shape[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport function computeFlatOffset(begin: number[], strides: number[]): number {\n  let flatOffset = begin.length > 0 ? begin[begin.length - 1] : 1;\n  for (let i = 0; i < begin.length - 1; i++) {\n    flatOffset += begin[i] * strides[i];\n  }\n  return flatOffset;\n}\n\nexport function parseSliceParams(\n    x: TensorInfo, begin: number|number[], size?: number|number[]) {\n  // The following logic allows for more ergonomic calls.\n  let begin_: number[];\n  const xRank = x.shape.length;\n  if (typeof begin === 'number') {\n    begin_ = [begin, ...new Array(xRank - 1).fill(0)];\n  } else if (begin.length < xRank) {\n    begin_ = begin.concat(new Array(xRank - begin.length).fill(0));\n  } else {\n    begin_ = begin.slice();\n  }\n  begin_.forEach(d => {\n    util.assert(\n        d !== -1, () => 'slice() does not support negative begin indexing.');\n  });\n  let size_: number[];\n  if (size == null) {\n    size_ = new Array(xRank).fill(-1);\n  } else if (typeof size === 'number') {\n    size_ = [size, ...new Array(xRank - 1).fill(-1)];\n  } else if (size.length < xRank) {\n    size_ = size.concat(new Array(xRank - size.length).fill(-1));\n  } else {\n    size_ = size;\n  }\n  size_ = size_.map((d, i) => {\n    if (d >= 0) {\n      return d;\n    } else {\n      util.assert(\n          d === -1,\n          () => `Negative size values should be exactly -1 but got ` +\n              `${d} for the slice() size at index ${i}.`);\n      return x.shape[i] - begin_[i];\n    }\n  });\n  return [begin_, size_];\n}\n\n// Convert the slicing specification from a sparse representation to a dense\n// representation. This means that all ellipses and newaxis are expanded out.\nexport function sliceInfo(\n    xShape: number[], begin: number[], end: number[], strides: number[],\n    beginMask: number, endMask: number, ellipsisMask: number,\n    newAxisMask: number, shrinkAxisMask: number): SliceInfo {\n  let stridesNonNull;\n  if (strides == null) {\n    stridesNonNull = new Array(begin.length);\n    stridesNonNull.fill(1);\n  } else {\n    stridesNonNull = strides;\n  }\n\n  // Only one non-zero bit is allowed in ellipsisMask, which means ellipsisMask\n  // is a power of 2. Use bit compares to ensure ellipsisMask is 0 or a power\n  // of 2. When i is a power of 2, i & (i - 1) is always 0.\n  // Also ref:\n  // https://stackoverflow.com/questions/600293/how-to-check-if-a-number-is-a-power-of-2\n  if (ellipsisMask != null && (ellipsisMask & (ellipsisMask - 1)) !== 0) {\n    throw new Error('Multiple ellipses in slice is not allowed.');\n  }\n\n  // Step 1: Account for ellipsis and new axis.\n  // Check for ellipsis and count how many non-newaxis there are after.\n  let ellipsisSeen = false;\n\n  const sparseSpec: StridedSliceSparseSpec = {\n    dims: stridesNonNull.length,\n    numAddAxisAfterEllipsis: 0,\n    begin: begin.slice(),\n    end: end.slice(),\n    strides: stridesNonNull.slice(),\n    beginMask,\n    endMask,\n    ellipsisMask,\n    newAxisMask,\n    shrinkAxisMask\n  };\n\n  for (let i = 0; i < sparseSpec.dims; i++) {\n    if (ellipsisSeen && ((1 << i) & newAxisMask) !== 0) {\n      sparseSpec.numAddAxisAfterEllipsis++;\n    }\n    if ((1 << i) & ellipsisMask) {\n      ellipsisSeen = true;\n    }\n  }\n  // If no ellipsis insert one at the end.\n  if (!ellipsisSeen) {\n    sparseSpec.ellipsisMask |= (1 << sparseSpec.dims);\n    sparseSpec.dims++;  // this effects loop iteration below\n  }\n\n  // Step 2: Make a sparse spec into a full index spec.\n  //\n  // The sparse spec deos not correspond to the number of dimensions.\n  // Make a dense spec that cooresponds to the number of dimensions.\n  //\n  // For example suppose foo[...,3:] on foo.shape = [2, 2, 3] then we need to\n  // produce the missing beginMask for the first two dimensions i.e. from\n  // beginMaskSpec = 0, endMaskSpec = 2, we achieve beginMask = 6 (110),\n  // endMask = 7 (111).\n  const denseSpec: StridedSliceDenseSpec = {\n    dims: xShape.length,\n    beginMask: 0,\n    endMask: 0,\n    beginValid: false,\n    endValid: false\n  };\n\n  buildDenseSpec(sparseSpec, denseSpec);\n\n  // Step 3: Make implicit ranges (non-zero beginMasks and endMasks) explicit\n  // and bounds check.\n  let isIdentity = true;\n  let sliceDim0 = true;\n  let isSimpleSlice = true;\n  const processingShape = [];\n  const finalShape = [];\n\n  for (let i = 0; i < xShape.length; ++i) {\n    if (denseSpec.strides[i] === 0) {\n      throw Error(`strides[${i}] must be non-zero`);\n    }\n    const shrinkI = !!(denseSpec.shrinkAxisMask & (1 << i));\n    const dimI = xShape[i];\n    if (dimI === -1) {\n      processingShape.push(shrinkI ? 1 : -1);\n      continue;\n    }\n\n    const masks =\n        [denseSpec.beginMask & (1 << i), denseSpec.endMask & (1 << i)];\n    const validRange = [\n      denseSpec.strides[i] > 0 ? 0 : -1,\n      denseSpec.strides[i] > 0 ? dimI : dimI - 1\n    ];\n\n    if (shrinkI && denseSpec.strides[i] <= 0) {\n      throw Error('only stride 1 allowed on non-range indexing.');\n    }\n\n    isSimpleSlice = isSimpleSlice && (denseSpec.strides[i] === 1);\n\n    const beginAndEndMasked =\n        !!((denseSpec.beginMask & (1 << i)) && (denseSpec.endMask & (1 << i)));\n\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      if (shrinkI) {\n        // If we are shrinking, the end index is now possibly incorrect. In\n        // particular foo[-1] produces sparseBegin = -1, sparseEnd = 0.\n        // and canonical puts these to n-1 and 0, which implies a degenerate\n        // interval. Fortunately, it is now safe to re-create end as begin + 1.\n        const xFwd = denseSpec.begin[i] < 0 ? dimI + denseSpec.begin[i] :\n                                              denseSpec.begin[i];\n        denseSpec.begin[i] = xFwd;\n        denseSpec.end[i] = denseSpec.begin[i] + 1;\n        if (xFwd < 0 || xFwd >= dimI) {\n          throw Error(`slice index ${denseSpec.begin[i]} of dimension ${\n              i} out of bounds.`);\n        }\n      } else {\n        denseSpec.begin[i] = canonical(\n            denseSpec.begin[i], 0, denseSpec.strides[i], dimI, masks,\n            validRange);\n        denseSpec.end[i] = canonical(\n            denseSpec.end[i], 1, denseSpec.strides[i], dimI, masks, validRange);\n      }\n      // Update optimization values\n      const takeAllInDimension = denseSpec.strides[i] === 1 &&\n          denseSpec.begin[i] === 0 && denseSpec.end[i] === dimI;\n      isIdentity = isIdentity && takeAllInDimension;\n      sliceDim0 = sliceDim0 &&\n          ((i === 0 && denseSpec.strides[i] === 1) || takeAllInDimension);\n    } else {\n      isIdentity =\n          isIdentity && ((denseSpec.strides[i] === 1) && beginAndEndMasked);\n      sliceDim0 = sliceDim0 &&\n          ((i === 0 && denseSpec.strides[i] === 1) || beginAndEndMasked);\n    }\n    // Compute the processing shape (the intermediate Eigen will produce)\n    let intervalLength;\n    let knownInterval = false;\n    if (denseSpec.beginValid && denseSpec.endValid) {\n      intervalLength = denseSpec.end[i] - denseSpec.begin[i];\n      knownInterval = true;\n    } else if (shrinkI) {\n      // The dimension is still known as 1 for the processingShape, but will be\n      // discarded for the final shape.\n      intervalLength = 1;\n      knownInterval = true;\n    } else if (beginAndEndMasked) {\n      // Even if we don't have values for begin or end, we do know that this\n      // dimension covers the whole interval. If we have shape information for\n      // this dimension, that tells us the interval length.\n      if (dimI >= 0) {\n        if (denseSpec.strides[i] < 0) {\n          intervalLength = -dimI;\n        } else {\n          intervalLength = dimI;\n        }\n        knownInterval = true;\n      }\n    }\n    if (knownInterval) {\n      let sizeI;\n      // Hold zero if the interval is degenerate, otherwise account for\n      // remainder\n      if (intervalLength === 0 ||\n          ((intervalLength < 0) !== (denseSpec.strides[i] < 0))) {\n        sizeI = 0;\n      } else {\n        sizeI = Math.trunc(intervalLength / denseSpec.strides[i]) +\n            (intervalLength % denseSpec.strides[i] !== 0 ? 1 : 0);\n      }\n      processingShape.push(sizeI);\n    } else {\n      processingShape.push(-1);\n    }\n  }\n\n  // Step 4: Compute the final shape\n  //\n  // newAxis will increase dimension by 1 (with a one-size dimension)\n  // slices like foo[3, ...] will reduce dimension by 1.\n  // This cannot be done earlier, because it depends on Step 3.\n  for (let denseDim = 0; denseDim < denseSpec.finalShapeGatherIndices.length;\n       ++denseDim) {\n    const gatherIndex = denseSpec.finalShapeGatherIndices[denseDim];\n    if (gatherIndex >= 0) {\n      finalShape.push(processingShape[gatherIndex]);\n    } else if (gatherIndex === NEW_AXIS) {\n      finalShape.push(1);\n    }\n  }\n\n  const finalShapeSparse = finalShape.filter(\n      (dim, i) => denseSpec.finalShapeGatherIndices[i] !== NEW_AXIS);\n\n  return {\n    finalShapeSparse,\n    finalShape,\n    isIdentity,\n    sliceDim0,\n    isSimpleSlice,\n    begin: denseSpec.begin,\n    end: denseSpec.end,\n    strides: denseSpec.strides\n  };\n}\n\nfunction buildDenseSpec(\n    sparse: StridedSliceSparseSpec, dense: StridedSliceDenseSpec) {\n  dense.beginMask = 0;\n  dense.endMask = 0;\n  dense.shrinkAxisMask = 0;\n\n  let fullIndex = 0;\n  dense.beginValid = sparse.begin != null;\n  dense.endValid = sparse.end != null;\n\n  dense.begin = new Array(dense.dims);\n  dense.end = new Array(dense.dims);\n  dense.strides = new Array(dense.dims);\n  dense.finalShapeGatherIndices = [];\n  dense.finalShapeGatherIndicesSparse = [];\n  dense.inputShapeGatherIndicesSparse = new Array(dense.dims);\n\n  for (let i = 0; i < sparse.dims; i++) {\n    if ((1 << i) & sparse.ellipsisMask) {\n      // Only the bit that has ellipsis will fall in this condition.\n      // Expand the ellipsis into the appropriate indices\n      // Note: this only works because we guaranteed one ellipsis.\n      const nextIndex = Math.min(\n          dense.dims - (sparse.dims - i) + 1 + sparse.numAddAxisAfterEllipsis,\n          dense.dims);\n      for (; fullIndex < nextIndex; fullIndex++) {\n        // newAxis aren't real axis so you have to skip.\n        dense.begin[fullIndex] = 0;\n        dense.end[fullIndex] = 0;\n        dense.strides[fullIndex] = 1;\n        dense.beginMask |= (1 << fullIndex);\n        dense.endMask |= (1 << fullIndex);\n        dense.finalShapeGatherIndices.push(fullIndex);\n        dense.finalShapeGatherIndicesSparse.push(-1);\n        dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n      }\n    } else if ((1 << i) & sparse.newAxisMask) {\n      // Only the bit that has newAxis will fall in this condition.\n      dense.finalShapeGatherIndices.push(NEW_AXIS);\n      dense.finalShapeGatherIndicesSparse.push(-1);\n    } else {\n      if (fullIndex === dense.begin.length) {\n        throw Error(\n            `Index out of range using input dim ${fullIndex}; input ` +\n            `has only ${dense.dims} dims, ${dense.begin.length}.`);\n      }\n\n      // Gather slicing spec into appropriate index.\n      if (sparse.begin != null) {\n        dense.begin[fullIndex] = sparse.begin[i];\n      }\n      if (sparse.end != null) {\n        dense.end[fullIndex] = sparse.end[i];\n      }\n      dense.strides[fullIndex] = sparse.strides[i];\n      if (sparse.beginMask & (1 << i)) {\n        dense.beginMask |= (1 << fullIndex);\n      }\n      if (sparse.endMask & (1 << i)) {\n        dense.endMask |= (1 << fullIndex);\n      }\n      // If shrink, record where to get the dimensionality from (i.e. newAxis)\n      // creates a fake 1 size dimension. Also remember shrink axis (now in\n      // dense form) so we can ignore dense.end below.\n      if (sparse.shrinkAxisMask & (1 << i)) {\n        dense.finalShapeGatherIndices.push(SHRINK_AXIS);\n        dense.finalShapeGatherIndicesSparse.push(-1);\n        dense.shrinkAxisMask |= (1 << fullIndex);\n      } else {\n        dense.finalShapeGatherIndices.push(fullIndex);\n        // Remember that where in the sparse shape the dense dim comes from.\n        dense.finalShapeGatherIndicesSparse.push(i);\n      }\n      dense.inputShapeGatherIndicesSparse[fullIndex] = i;\n      fullIndex++;\n    }\n  }\n}\n\nfunction canonical(\n    x: number, c: number, strideI: number, dimI: number, masks: number[],\n    validRange: number[]) {\n  if (masks[c]) {\n    return strideI > 0 ? validRange[c] : validRange[(c + 1) & 1];\n  } else {\n    const xFwd = x < 0 ? dimI + x : x;  // make negative indices positive\n    return xFwd < validRange[0] ? validRange[0] :\n                                  xFwd > validRange[1] ? validRange[1] : xFwd;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}