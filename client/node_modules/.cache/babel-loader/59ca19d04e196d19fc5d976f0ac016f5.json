{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function oneHot(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices\n  } = inputs;\n  const {\n    depth,\n    onValue,\n    offValue\n  } = attrs;\n  assertNotComplex(indices, 'oneHot');\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\nexport const oneHotConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,MAAlC,EAA6FC,IAA7F,QAAwG,uBAAxG;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAUC,MAAV,CACFC,IADE,EACuE;AAE3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAYH,MAAlB;AACA,QAAM;AAACI,SAAD;AAAQC,WAAR;AAAiBC;AAAjB,MAA6BJ,KAAnC;AAEAL,kBAAgB,CAACM,OAAD,EAAU,QAAV,CAAhB;AAEA,QAAMI,WAAW,GAAGX,IAAI,CAACY,aAAL,CAAmBL,OAAO,CAACM,KAA3B,CAApB;AAEA,QAAMC,GAAG,GAAG,IAAIC,YAAJ,CAAiBJ,WAAW,GAAGH,KAA/B,CAAZ;AACAM,KAAG,CAACE,IAAJ,CAASN,QAAT;AACA,QAAMO,UAAU,GAAGZ,OAAO,CAACa,IAAR,CAAaC,GAAb,CAAiBZ,OAAO,CAACa,MAAzB,EAAiCC,MAApD;;AAEA,OAAK,IAAIC,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGX,WAA5B,EAAyC,EAAEW,KAA3C,EAAkD;AAChD,QAAIL,UAAU,CAACK,KAAD,CAAV,IAAqB,CAArB,IAA0BL,UAAU,CAACK,KAAD,CAAV,GAAoBd,KAAlD,EAAyD;AACvDM,SAAG,CAACQ,KAAK,GAAGd,KAAR,GAAgBS,UAAU,CAACK,KAAD,CAA3B,CAAH,GAAyCb,OAAzC;AACD;AACF;;AAED,SAAOJ,OAAO,CAACkB,cAAR,CAAuB,CAAC,GAAGhB,OAAO,CAACM,KAAZ,EAAmBL,KAAnB,CAAvB,EAAkD,OAAlD,EAA2DM,GAA3D,CAAP;AACD;AAED,OAAO,MAAMU,YAAY,GAAiB;AACxCC,YAAU,EAAE1B,MAD4B;AAExC2B,aAAW,EAAE,KAF2B;AAGxCC,YAAU,EAAEzB;AAH4B,CAAnC","names":["OneHot","util","assertNotComplex","oneHot","args","inputs","backend","attrs","indices","depth","onValue","offValue","indicesSize","sizeFromShape","shape","res","Float32Array","fill","indicesVal","data","get","dataId","values","event","makeTensorInfo","oneHotConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/OneHot.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OneHot, OneHotAttrs, OneHotInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function oneHot(\n    args: {inputs: OneHotInputs, backend: MathBackendCPU, attrs: OneHotAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices} = inputs;\n  const {depth, onValue, offValue} = attrs;\n\n  assertNotComplex(indices, 'oneHot');\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const res = new Float32Array(indicesSize * depth);\n  res.fill(offValue);\n  const indicesVal = backend.data.get(indices.dataId).values as TypedArray;\n\n  for (let event = 0; event < indicesSize; ++event) {\n    if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n      res[event * depth + indicesVal[event]] = onValue;\n    }\n  }\n\n  return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\n\nexport const oneHotConfig: KernelConfig = {\n  kernelName: OneHot,\n  backendName: 'cpu',\n  kernelFunc: oneHot as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}