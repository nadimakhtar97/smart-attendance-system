{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\n\nexport function getLogicalCoordinatesFromFlatIndex(coords, shape) {\n  let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  const strides = util.computeStrides(shape);\n  return strides.map((stride, i) => {\n    const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` : `index -= ${coords[i]} * ${stride}`;\n    return `${line1}; ${line2};`;\n  }).join('');\n}\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(coords, shape) {\n  let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  const strides = util.computeStrides(shape);\n  return strides.map((_, i) => {\n    const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${i}]` : `index -= ${coords[i]} * outShapeStrides[${i}]`;\n    return `${line1}; ${line2};`;\n  }).join('');\n} // Produces GLSL code that computes strides.\n\nfunction symbolicallyComputeStrides(indicesArr, variableName) {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(coords, variableName) {\n  let index = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'index';\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides.map((_, i) => {\n    const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n    const line2 = i === strides.length - 1 ? `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` : `index -= ${coords[i]} * ${strides[i]}`;\n    return `${line1}; ${line2};`;\n  }).join('');\n}\n\nfunction buildVec(x) {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n\n  return `vec${x.length}(${x.join(',')})`;\n}\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\n\n\nexport function dotify(x, y) {\n  if (x.length !== y.length) {\n    throw new Error(`Vectors to be dotted must be of the same length -` + `got ${x.length} and ${y.length}`);\n  }\n\n  const slices = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\n\nexport function getFlatIndexFrom3D(shape) {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\nexport function getFlatIndexFrom3DOutput() {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;","map":{"version":3,"mappings":"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","names":["util","getLogicalCoordinatesFromFlatIndex","coords","shape","index","strides","computeStrides","map","stride","i","line1","line2","length","join","getOutputLogicalCoordinatesFromFlatIndexByUniform","_","symbolicallyComputeStrides","indicesArr","variableName","numCoords","d","Array","getLogicalCoordinatesFromFlatIndexByUniform","indicesArray","buildVec","x","dotify","y","Error","slices","nearestVec4","Math","floor","nearestVec4Remainder","xSlice","slice","ySlice","push","getFlatIndexFrom3D","toString","getFlatIndexFrom3DOutput","ENCODE_FLOAT_SNIPPET"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/shader_compiler_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * Produces GLSL code that derives logical coordinates from a flat\n * index. The code performs integer division with each stride and decrements\n * the index until the index equals the final dimension coordinate.\n */\nexport function getLogicalCoordinatesFromFlatIndex(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((stride, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${stride}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${stride}` :\n            `index -= ${coords[i]} * ${stride}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nexport function getOutputLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], shape: number[], index = 'index'): string {\n  const strides = util.computeStrides(shape);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / outShapeStrides[${i}]`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * outShapeStrides[${\n                i}]` :\n            `index -= ${coords[i]} * outShapeStrides[${i}]`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\n// Produces GLSL code that computes strides.\nfunction symbolicallyComputeStrides(\n    indicesArr: number[], variableName: string): string[] {\n  const numCoords = indicesArr.length;\n  const shape = indicesArr.map(d => `${variableName}[${d}]`);\n  const strides = new Array(numCoords - 1);\n  strides[numCoords - 2] = shape[numCoords - 1];\n  for (let i = numCoords - 3; i >= 0; --i) {\n    strides[i] = `(${strides[i + 1]} * ${shape[i + 1]})`;\n  }\n\n  return strides;\n}\n\nexport function getLogicalCoordinatesFromFlatIndexByUniform(\n    coords: string[], variableName: string, index = 'index'): string {\n  const indicesArray = coords.map((_, i) => i);\n  const strides = symbolicallyComputeStrides(indicesArray, variableName);\n  return strides\n      .map((_, i) => {\n        const line1 = `int ${coords[i]} = ${index} / ${strides[i]}`;\n        const line2 = i === strides.length - 1 ?\n            `int ${coords[i + 1]} = ${index} - ${coords[i]} * ${strides[i]}` :\n            `index -= ${coords[i]} * ${strides[i]}`;\n        return `${line1}; ${line2};`;\n      })\n      .join('');\n}\n\nfunction buildVec(x: string[]): string {\n  if (x.length === 1) {\n    return `${x[0]}`;\n  }\n  return `vec${x.length}(${x.join(',')})`;\n}\n\n/**\n * Produces GLSL code that computes the dot product of the input x and y\n * vectors. Handles splitting inputs into increments of vec4s when necessary.\n */\nexport function dotify(x: string[], y: string[]): string {\n  if (x.length !== y.length) {\n    throw new Error(\n        `Vectors to be dotted must be of the same length -` +\n        `got ${x.length} and ${y.length}`);\n  }\n\n  const slices: string[] = [];\n  const nearestVec4 = Math.floor(x.length / 4);\n  const nearestVec4Remainder = x.length % 4;\n\n  for (let i = 0; i < nearestVec4; i++) {\n    const xSlice = x.slice(i * 4, i * 4 + 4);\n    const ySlice = y.slice(i * 4, i * 4 + 4);\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  if (nearestVec4Remainder !== 0) {\n    let xSlice = x.slice(nearestVec4 * 4);\n    let ySlice = y.slice(nearestVec4 * 4);\n    if (xSlice.length === 1) {\n      xSlice = xSlice.map(d => `float(${d})`);\n      ySlice = ySlice.map(d => `float(${d})`);\n    }\n    slices.push(`${buildVec(xSlice)}, ${buildVec(ySlice)}`);\n  }\n\n  return slices.map((d, i) => `dot(${d})`).join('+');\n}\n\n/**\n * Produces GLSL that computes the flat index from 3D coordinates.\n */\nexport function getFlatIndexFrom3D(shape: [number, number, number]): string {\n  const strides = util.computeStrides(shape).map(d => d.toString());\n\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * ${strides[0]} + coords.y * ${strides[1]} + coords.z;\n  }\n`;\n}\n\nexport function getFlatIndexFrom3DOutput(): string {\n  return `\n  int getFlatIndex(ivec3 coords) {\n    return coords.x * outShapeStrides[0] + coords.y * outShapeStrides[1] + coords.z;\n  }\n`;\n}\n\nexport const ENCODE_FLOAT_SNIPPET = `\n  const float FLOAT_MAX = 1.70141184e38;\n  const float FLOAT_MIN = 1.17549435e-38;\n\n  lowp vec4 encode_float(highp float v) {\n    if (isnan(v)) {\n      return vec4(255, 255, 255, 255);\n    }\n\n    highp float av = abs(v);\n\n    if(av < FLOAT_MIN) {\n      return vec4(0.0, 0.0, 0.0, 0.0);\n    } else if(v > FLOAT_MAX) {\n      return vec4(0.0, 0.0, 128.0, 127.0) / 255.0;\n    } else if(v < -FLOAT_MAX) {\n      return vec4(0.0, 0.0,  128.0, 255.0) / 255.0;\n    }\n\n    highp vec4 c = vec4(0,0,0,0);\n\n    highp float e = floor(log2(av));\n    highp float m = exp2(fract(log2(av))) - 1.0;\n\n    c[2] = floor(128.0 * m);\n    m -= c[2] / 128.0;\n    c[1] = floor(32768.0 * m);\n    m -= c[1] / 32768.0;\n    c[0] = floor(8388608.0 * m);\n\n    highp float ebias = e + 127.0;\n    c[3] = floor(ebias / 2.0);\n    ebias -= c[3] * 2.0;\n    c[2] += floor(ebias) * 128.0;\n\n    c[3] += 128.0 * step(0.0, -v);\n\n    return c / 255.0;\n  }\n`;\n"]},"metadata":{},"sourceType":"module"}