{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getGlslDifferences } from './glsl_version';\nimport { useShapeUniforms } from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\nexport class EncodeMatrixProgram {\n  constructor(outputShape) {\n    let inputIsUnsignedByte = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    this.variableNames = ['A'];\n    this.customUniforms = [{\n      name: 'texShape',\n      type: 'ivec2'\n    }];\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    let output = `result`;\n\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() : shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAR,QAAiC,gBAAjC;AACA,SAAsBC,gBAAtB,QAA6C,cAA7C;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AAEA,OAAM,MAAOC,mBAAP,CAA0B;AAO9BC,cACIC,WADJ,EACsE;AAAA,QAA3BC,mBAA2B,uEAAL,KAAK;AAPtE,yBAAgB,CAAC,GAAD,CAAhB;AAIA,0BAAiB,CAAC;AAACC,UAAI,EAAE,UAAP;AAAmBC,UAAI,EAAE;AAAzB,KAAD,CAAjB;AAIE,UAAMC,IAAI,GAAGT,kBAAkB,EAA/B;AACA,SAAKK,WAAL,GAAmBA,WAAnB;AACA,SAAKK,mBAAL,GAA2BT,gBAAgB,CAAC,KAAKI,WAAL,CAAiBM,MAAlB,CAA3C;AAEA,QAAIC,MAAM,GAAG,QAAb;;AACA,QAAIN,mBAAJ,EAAyB;AACvBM,YAAM,GAAG,4BAAT;AACD;;AAED,SAAKC,QAAL,GAAgB;QAEZ,KAAKH,mBAAL,GAA2BR,WAAW,CAACY,wBAAZ,EAA3B,GAC2BZ,WAAW,CAACa,kBAAZ,CAA+BV,WAA/B,CAA2C;;;;;;;;;;;;;wBAatDI,IAAI,CAACO,SAAS;;;;;;;;;;;;;;UAc5BP,IAAI,CAACG,MAAM,WAAWA,MAAM;;KA9BlC;AAiCD;;AAnD6B","names":["getGlslDifferences","useShapeUniforms","shader_util","EncodeMatrixProgram","constructor","outputShape","inputIsUnsignedByte","name","type","glsl","enableShapeUniforms","length","output","userCode","getFlatIndexFrom3DOutput","getFlatIndexFrom3D","texture2D"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/encode_matrix_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {getGlslDifferences} from './glsl_version';\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport * as shader_util from './shader_compiler_util';\n\nexport class EncodeMatrixProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  userCode: string;\n  outputShape: number[];\n  enableShapeUniforms: boolean;\n  customUniforms = [{name: 'texShape', type: 'ivec2' as const }];\n\n  constructor(\n      outputShape: [number, number, number], inputIsUnsignedByte = false) {\n    const glsl = getGlslDifferences();\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    let output = `result`;\n    if (inputIsUnsignedByte) {\n      output = `floor(result * 255. + 0.5)`;\n    }\n\n    this.userCode = `\n      ${\n        this.enableShapeUniforms ? shader_util.getFlatIndexFrom3DOutput() :\n                                   shader_util.getFlatIndexFrom3D(outputShape)}\n\n      void main() {\n        ivec3 coords = getOutputCoords();\n\n        int flatIndex = getFlatIndex(coords);\n        int offset = imod(flatIndex, 4);\n\n        flatIndex = idiv(flatIndex, 4, 1.);\n\n        int r = flatIndex / texShape[1];\n        int c = imod(flatIndex, texShape[1]);\n        vec2 uv = (vec2(c, r) + halfCR) / vec2(texShape[1], texShape[0]);\n        vec4 values = ${glsl.texture2D}(A, uv);\n\n        float result;\n\n        if(offset == 0) {\n          result = values[0];\n        } else if(offset == 1) {\n          result = values[1];\n        } else if(offset == 2) {\n          result = values[2];\n        } else {\n          result = values[3];\n        }\n\n        ${glsl.output} = vec4(${output}, 0., 0., 0.);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}