{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { parseNodeName } from '../operations/executors/utils';\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\n\nexport function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {\n  const usedNodes = new Set();\n  const missingInputs = [];\n  let dynamicNode = null;\n  let syncInputs = null; // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n\n  const seen = new Set();\n  const inputNodeNames = Object.keys(inputs).map(name => parseNodeName(name)[0]);\n  let initNodeNames = [];\n\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name).filter(name => usedNodes.has(name));\n      }\n    }\n\n    usedNodes.add(node.name); // Weights are dead end since we already have their values.\n\n    if (weightMap[node.name] != null) {\n      continue;\n    } // This node is a dead end since it's one of the user-provided inputs.\n\n\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    } // This node is a dead end since it doesn't have any inputs.\n\n\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n\n  return {\n    inputs,\n    outputs,\n    usedNodes,\n    missingInputs,\n    dynamicNode,\n    syncInputs\n  };\n}\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\n\nexport function getNodesInTopologicalOrder(graph, weightMap, executionInfo) {\n  const {\n    usedNodes,\n    inputs\n  } = executionInfo;\n  const frontier = [];\n  const inputNodes = Object.keys(inputs).map(name => parseNodeName(name)[0]).map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n\n  const seen = new Set();\n  const orderedNodes = [];\n\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) && child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n\n  return orderedNodes;\n}\nconst CONTROL_FLOW_OPS = ['Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf', 'StatelessWhile', 'if', 'While'];\nconst DYNAMIC_SHAPE_OPS = ['NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'];\nconst HASH_TABLE_OPS = ['HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2', 'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'];\nexport function isControlFlow(node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\nexport function isDynamicShape(node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\nexport function isHashTable(node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}","map":{"version":3,"mappings":"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","names":["parseNodeName","getExecutionSubgraph","inputs","outputs","weightMap","initNodes","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","Object","keys","map","name","initNodeNames","node","frontier","length","pop","isControlFlow","isDynamicShape","isHashTable","children","child","filter","has","add","indexOf","push","forEach","input","getNodesInTopologicalOrder","graph","executionInfo","inputNodes","nodes","weights","weight","orderedNodes","every","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","HASH_TABLE_OPS","op"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/executor/model_analysis.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {NamedTensorMap} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {parseNodeName} from '../operations/executors/utils';\nimport {Graph, Node} from '../operations/types';\n\nexport interface ExecutionInfo {\n  inputs: NamedTensorMap;\n  outputs: Node[];\n  usedNodes: Set<string>;\n  missingInputs: string[];\n  dynamicNode: Node;\n  syncInputs: string[];\n}\n\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(\n    inputs: NamedTensorMap, outputs: Node[], weightMap: NamedTensorsMap,\n    initNodes?: Node[]): ExecutionInfo {\n  const usedNodes = new Set<string>();\n  const missingInputs: string[] = [];\n  let dynamicNode: Node = null;\n  let syncInputs: string[] = null;\n\n  // Start with the outputs, going backwards and find all the nodes that are\n  // needed to compute those outputs.\n  const seen = new Set<string>();\n  const inputNodeNames =\n      Object.keys(inputs).map(name => parseNodeName(name)[0]);\n\n  let initNodeNames: string[] = [];\n  if (initNodes != null) {\n    initNodeNames = initNodes.map(node => parseNodeName(node.name)[0]);\n  }\n\n  const frontier = [...outputs];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n      if (dynamicNode == null) {\n        dynamicNode = node;\n        syncInputs = dynamicNode.children.map(child => child.name)\n                         .filter(name => usedNodes.has(name));\n      }\n    }\n    usedNodes.add(node.name);\n\n    // Weights are dead end since we already have their values.\n    if (weightMap[node.name] != null) {\n      continue;\n    }\n    // This node is a dead end since it's one of the user-provided inputs.\n    if (inputNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    // This node is a dead end since it doesn't have any inputs.\n    if (initNodeNames.indexOf(node.name) !== -1) {\n      continue;\n    }\n    if (node.inputs.length === 0) {\n      missingInputs.push(node.name);\n      continue;\n    }\n    node.inputs.forEach(input => {\n      // Don't add to the frontier if it is already there.\n      if (seen.has(input.name)) {\n        return;\n      }\n      seen.add(input.name);\n      frontier.push(input);\n    });\n  }\n  return {inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs};\n}\n\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(\n    graph: Graph, weightMap: NamedTensorsMap,\n    executionInfo: ExecutionInfo): Node[] {\n  const {usedNodes, inputs} = executionInfo;\n  const frontier: Node[] = [];\n  const inputNodes = Object.keys(inputs)\n                         .map(name => parseNodeName(name)[0])\n                         .map(name => graph.nodes[name]);\n  const initNodes = graph.initNodes;\n\n  inputNodes.forEach(input => {\n    if (usedNodes.has(input.name)) {\n      frontier.push(input);\n    }\n  });\n  graph.weights.forEach(weight => {\n    if (usedNodes.has(weight.name)) {\n      frontier.push(weight);\n    }\n  });\n  if (initNodes != null) {\n    initNodes.forEach(node => {\n      if (usedNodes.has(node.name)) {\n        frontier.push(node);\n      }\n    });\n  }\n  const seen = new Set<string>();\n  const orderedNodes: Node[] = [];\n  while (frontier.length > 0) {\n    const node = frontier.pop();\n    seen.add(node.name);\n    if (!weightMap[node.name]) {\n      orderedNodes.push(node);\n    }\n    node.children.forEach(child => {\n      if (!seen.has(child.name) && usedNodes.has(child.name) &&\n          child.inputs.every(input => seen.has(input.name))) {\n        frontier.push(child);\n      }\n    });\n  }\n  return orderedNodes;\n}\n\nconst CONTROL_FLOW_OPS = [\n  'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n  'StatelessWhile', 'if', 'While'\n];\nconst DYNAMIC_SHAPE_OPS = [\n  'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n];\nconst HASH_TABLE_OPS = [\n  'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n  'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n];\n\nexport function isControlFlow(node: Node) {\n  return CONTROL_FLOW_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isDynamicShape(node: Node) {\n  return DYNAMIC_SHAPE_OPS.indexOf(node.op) >= 0;\n}\n\nexport function isHashTable(node: Node) {\n  return HASH_TABLE_OPS.indexOf(node.op) >= 0;\n}\n"]},"metadata":{},"sourceType":"module"}