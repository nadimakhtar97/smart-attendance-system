{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getTensor } from '../executors/utils';\nimport { getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam } from '../operation_mapper';\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\n\nexport class NodeValueImpl {\n  constructor(node, tensorMap, context) {\n    this.node = node;\n    this.tensorMap = tensorMap;\n    this.context = context;\n    this.inputs = [];\n    this.attrs = {};\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs).reduce((attrs, key) => {\n        attrs[key] = this.getAttr(key);\n        return attrs;\n      }, {});\n    }\n  }\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n\n\n  getInput(name) {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n\n\n  getAttr(name, defaultValue) {\n    const value = this.node.rawAttrs[name];\n\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.shape != null) {\n      return getTensorShapeParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue);\n    }\n\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n\n      if (value.list.s != null) {\n        return getStringArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n\n      if (value.list.b != null) {\n        return getBoolArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n\n      if (value.list.type != null) {\n        return getDtypeArrayParam(this.node.rawAttrs, name, defaultValue);\n      }\n    }\n\n    return defaultValue;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["getTensor","getBoolArrayParam","getBoolParam","getDtypeArrayParam","getDtypeParam","getNumberParam","getNumericArrayParam","getStringArrayParam","getStringParam","getTensorShapeArrayParam","getTensorShapeParam","NodeValueImpl","constructor","node","tensorMap","context","inputs","inputNames","map","name","getInput","rawAttrs","attrs","Object","keys","reduce","key","getAttr","defaultValue","value","tensor","i","f","s","b","shape","type","list"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/custom_op/node_value_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {getTensor} from '../executors/utils';\nimport {getBoolArrayParam, getBoolParam, getDtypeArrayParam, getDtypeParam, getNumberParam, getNumericArrayParam, getStringArrayParam, getStringParam, getTensorShapeArrayParam, getTensorShapeParam} from '../operation_mapper';\nimport {GraphNode, Node, ValueType} from '../types';\n\n/**\n * Helper class for lookup inputs and params for nodes in the model graph.\n */\nexport class NodeValueImpl implements GraphNode {\n  public readonly inputs: Tensor[] = [];\n  public readonly attrs: {[key: string]: ValueType} = {};\n  constructor(\n      private node: Node, private tensorMap: NamedTensorsMap,\n      private context: ExecutionContext) {\n    this.inputs = node.inputNames.map(name => this.getInput(name));\n    if (node.rawAttrs != null) {\n      this.attrs = Object.keys(node.rawAttrs)\n                       .reduce((attrs: {[key: string]: ValueType}, key) => {\n                         attrs[key] = this.getAttr(key);\n                         return attrs;\n                       }, {});\n    }\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getInput(name: string): Tensor {\n    return getTensor(name, this.tensorMap, this.context);\n  }\n\n  /**\n   * Return the value of the attribute or input param.\n   * @param name String: name of attribute or input param.\n   */\n  private getAttr(name: string, defaultValue?: ValueType): ValueType {\n    const value = this.node.rawAttrs[name];\n    if (value.tensor != null) {\n      return getTensor(name, this.tensorMap, this.context);\n    }\n    if (value.i != null || value.f != null) {\n      return getNumberParam(this.node.rawAttrs, name, defaultValue as number);\n    }\n    if (value.s != null) {\n      return getStringParam(this.node.rawAttrs, name, defaultValue as string);\n    }\n    if (value.b != null) {\n      return getBoolParam(this.node.rawAttrs, name, defaultValue as boolean);\n    }\n    if (value.shape != null) {\n      return getTensorShapeParam(\n          this.node.rawAttrs, name, defaultValue as number[]);\n    }\n    if (value.type != null) {\n      return getDtypeParam(this.node.rawAttrs, name, defaultValue as DataType);\n    }\n    if (value.list != null) {\n      if (value.list.i != null || value.list.f != null) {\n        return getNumericArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[]);\n      }\n      if (value.list.s != null) {\n        return getStringArrayParam(\n            this.node.rawAttrs, name, defaultValue as string[]);\n      }\n      if (value.list.shape != null) {\n        return getTensorShapeArrayParam(\n            this.node.rawAttrs, name, defaultValue as number[][]);\n      }\n      if (value.list.b != null) {\n        return getBoolArrayParam(\n            this.node.rawAttrs, name, defaultValue as boolean[]);\n      }\n      if (value.list.type != null) {\n        return getDtypeArrayParam(\n            this.node.rawAttrs, name, defaultValue as DataType[]);\n      }\n    }\n\n    return defaultValue;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}