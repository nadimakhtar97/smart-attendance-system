{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { dispose } from '../globals';\nimport { variableGrads } from '../gradients';\nimport { scalar } from '../ops/ops';\nimport { Serializable } from '../serialization';\n/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */\n\nexport class Optimizer extends Serializable {\n  /**\n   * Executes `f()` and minimizes the scalar output of `f()` by computing\n   * gradients of y with respect to the list of trainable variables provided by\n   * `varList`. If no list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to minimize.\n   * @param returnCost Whether to return the scalar cost value produced by\n   * executing `f()`.\n   * @param varList An optional list of variables to update. If specified, only\n   * the trainable variables in varList will be updated by minimize. Defaults to\n   * all trainable variables.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  minimize(f) {\n    let returnCost = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let varList = arguments.length > 2 ? arguments[2] : undefined;\n    const {\n      value,\n      grads\n    } = this.computeGradients(f, varList);\n\n    if (varList != null) {\n      const gradArray = varList.map(v => ({\n        name: v.name,\n        tensor: grads[v.name]\n      }));\n      this.applyGradients(gradArray);\n    } else {\n      this.applyGradients(grads);\n    } // Dispose gradients.\n\n\n    dispose(grads);\n\n    if (returnCost) {\n      return value;\n    } else {\n      value.dispose();\n      return null;\n    }\n  }\n  /**\n   * The number of iterations that this optimizer instance has been invoked for.\n   */\n\n\n  get iterations() {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n\n    return this.iterations_;\n  }\n\n  incrementIterations() {\n    this.iterations_ = this.iterations + 1;\n  }\n  /**\n   * Executes f() and computes the gradient of the scalar output of f() with\n   * respect to the list of trainable variables provided by `varList`. If no\n   * list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to use for computing\n   * gradients with respect to variables.\n   * @param varList An optional list of variables to compute gradients with\n   * respect to. If specified, only the trainable variables in varList will have\n   * gradients computed with respect to. Defaults to all trainable variables.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n\n\n  computeGradients(f, varList) {\n    return variableGrads(f, varList);\n  }\n  /**\n   * Dispose the variables (if any) owned by this optimizer instance.\n   */\n\n\n  dispose() {\n    if (this.iterations_ != null) {\n      dispose(this.iterations_);\n    }\n  }\n\n  async saveIterations() {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n\n    return {\n      name: 'iter',\n      // TODO(cais): Use 'int64' type when available.\n      tensor: scalar(this.iterations_, 'int32')\n    };\n  }\n\n  async getWeights() {\n    throw new Error('getWeights() is not implemented for this optimizer yet.');\n  }\n\n  async setWeights(weightValues) {\n    throw new Error(`setWeights() is not implemented for this optimizer class ` + `${this.getClassName()}`);\n  }\n  /**\n   * Extract the first element of the weight values and set it\n   * as the iterations counter variable of this instance of optimizer.\n   *\n   * @param weightValues\n   * @returns Weight values with the first element consumed and excluded.\n   */\n\n\n  async extractIterations(weightValues) {\n    this.iterations_ = (await weightValues[0].tensor.data())[0];\n    return weightValues.slice(1);\n  }\n\n}\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n  value: instance => {\n    return instance.minimize != null && instance.computeGradients != null && instance.applyGradients != null;\n  }\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,OAAR,QAAsB,YAAtB;AACA,SAAQC,aAAR,QAA4B,cAA5B;AACA,SAAQC,MAAR,QAAqB,YAArB;AACA,SAAQC,YAAR,QAA2B,kBAA3B;AAoBA;;AACA,OAAM,MAAgBC,SAAhB,SAAkCD,YAAlC,CAA8C;AAGlD;;;;;;;;;;;;;;AAcAE,UAAQ,CAACC,CAAD,EAA0D;AAAA,QAAxCC,UAAwC,uEAA3B,KAA2B;AAAA,QAApBC,OAAoB;AAEhE,UAAM;AAACC,WAAD;AAAQC;AAAR,QAAiB,KAAKC,gBAAL,CAAsBL,CAAtB,EAAyBE,OAAzB,CAAvB;;AAEA,QAAIA,OAAO,IAAI,IAAf,EAAqB;AACnB,YAAMI,SAAS,GACXJ,OAAO,CAACK,GAAR,CAAYC,CAAC,KAAK;AAACC,YAAI,EAAED,CAAC,CAACC,IAAT;AAAeC,cAAM,EAAEN,KAAK,CAACI,CAAC,CAACC,IAAH;AAA5B,OAAL,CAAb,CADJ;AAEA,WAAKE,cAAL,CAAoBL,SAApB;AACD,KAJD,MAIO;AACL,WAAKK,cAAL,CAAoBP,KAApB;AACD,KAV+D,CAYhE;;;AACAV,WAAO,CAACU,KAAD,CAAP;;AAEA,QAAIH,UAAJ,EAAgB;AACd,aAAOE,KAAP;AACD,KAFD,MAEO;AACLA,WAAK,CAACT,OAAN;AACA,aAAO,IAAP;AACD;AACF;AAED;;;;;AAGc,MAAVkB,UAAU;AACZ,QAAI,KAAKC,WAAL,IAAoB,IAAxB,EAA8B;AAC5B,WAAKA,WAAL,GAAmB,CAAnB;AACD;;AACD,WAAO,KAAKA,WAAZ;AACD;;AAESC,qBAAmB;AAC3B,SAAKD,WAAL,GAAmB,KAAKD,UAAL,GAAkB,CAArC;AACD;AAED;;;;;;;;;;;;;;;AAaAP,kBAAgB,CAACL,CAAD,EAAkBE,OAAlB,EAAsC;AAEpD,WAAOP,aAAa,CAACK,CAAD,EAAIE,OAAJ,CAApB;AACD;AAYD;;;;;AAGAR,SAAO;AACL,QAAI,KAAKmB,WAAL,IAAoB,IAAxB,EAA8B;AAC5BnB,aAAO,CAAC,KAAKmB,WAAN,CAAP;AACD;AACF;;AAEmB,QAAdE,cAAc;AAClB,QAAI,KAAKF,WAAL,IAAoB,IAAxB,EAA8B;AAC5B,WAAKA,WAAL,GAAmB,CAAnB;AACD;;AACD,WAAO;AACLJ,UAAI,EAAE,MADD;AAEL;AACAC,YAAM,EAAEd,MAAM,CAAC,KAAKiB,WAAN,EAAmB,OAAnB;AAHT,KAAP;AAKD;;AAEe,QAAVG,UAAU;AACd,UAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;;AAEe,QAAVC,UAAU,CAACC,YAAD,EAA4B;AAC1C,UAAM,IAAIF,KAAJ,CACF,8DACA,GAAG,KAAKG,YAAL,EAAmB,EAFpB,CAAN;AAGD;AAED;;;;;;;;;AAOiC,QAAjBC,iBAAiB,CAACF,YAAD,EAA4B;AAE3D,SAAKN,WAAL,GAAmB,CAAC,MAAMM,YAAY,CAAC,CAAD,CAAZ,CAAgBT,MAAhB,CAAuBY,IAAvB,EAAP,EAAsC,CAAtC,CAAnB;AACA,WAAOH,YAAY,CAACI,KAAb,CAAmB,CAAnB,CAAP;AACD;;AA3HiD;AA8HpDC,MAAM,CAACC,cAAP,CAAsB3B,SAAtB,EAAiC4B,MAAM,CAACC,WAAxC,EAAqD;AACnDxB,OAAK,EAAGyB,QAAD,IAAwB;AAC7B,WAAOA,QAAQ,CAAC7B,QAAT,IAAqB,IAArB,IAA6B6B,QAAQ,CAACvB,gBAAT,IAA6B,IAA1D,IACHuB,QAAQ,CAACjB,cAAT,IAA2B,IAD/B;AAED;AAJkD,CAArD","names":["dispose","variableGrads","scalar","Serializable","Optimizer","minimize","f","returnCost","varList","value","grads","computeGradients","gradArray","map","v","name","tensor","applyGradients","iterations","iterations_","incrementIterations","saveIterations","getWeights","Error","setWeights","weightValues","getClassName","extractIterations","data","slice","Object","defineProperty","Symbol","hasInstance","instance"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/optimizers/optimizer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {dispose} from '../globals';\nimport {variableGrads} from '../gradients';\nimport {scalar} from '../ops/ops';\nimport {Serializable} from '../serialization';\nimport {Scalar, Variable} from '../tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\n\n/**\n * A variable that belongs to an optimizer.\n *\n * The `originalName` field is required for keeping track of the canonical\n * name of the variable, which is usually the name of the model weight that\n * the variable is related to plus a suffix, e.g., 'dense1/kernel/momentum'.\n * The name of the `Variable` object itself cannot be used directly due to\n * possible deduplication: Every `Variable` must have a unique name but more\n * than one optimizer objects of the same type may be created for the same model\n * or the same `Variable`.\n */\nexport interface OptimizerVariable {\n  originalName: string;\n  variable: Variable;\n}\n\n/** @doc {heading: 'Training', subheading: 'Classes', namespace: 'train'} */\nexport abstract class Optimizer extends Serializable {\n  protected iterations_: number;\n\n  /**\n   * Executes `f()` and minimizes the scalar output of `f()` by computing\n   * gradients of y with respect to the list of trainable variables provided by\n   * `varList`. If no list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to minimize.\n   * @param returnCost Whether to return the scalar cost value produced by\n   * executing `f()`.\n   * @param varList An optional list of variables to update. If specified, only\n   * the trainable variables in varList will be updated by minimize. Defaults to\n   * all trainable variables.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  minimize(f: () => Scalar, returnCost = false, varList?: Variable[]): Scalar\n      |null {\n    const {value, grads} = this.computeGradients(f, varList);\n\n    if (varList != null) {\n      const gradArray: NamedTensor[] =\n          varList.map(v => ({name: v.name, tensor: grads[v.name]}));\n      this.applyGradients(gradArray);\n    } else {\n      this.applyGradients(grads);\n    }\n\n    // Dispose gradients.\n    dispose(grads);\n\n    if (returnCost) {\n      return value;\n    } else {\n      value.dispose();\n      return null;\n    }\n  }\n\n  /**\n   * The number of iterations that this optimizer instance has been invoked for.\n   */\n  get iterations(): number {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return this.iterations_;\n  }\n\n  protected incrementIterations() {\n    this.iterations_ = this.iterations + 1;\n  }\n\n  /**\n   * Executes f() and computes the gradient of the scalar output of f() with\n   * respect to the list of trainable variables provided by `varList`. If no\n   * list is provided, it defaults to all trainable variables.\n   *\n   * @param f The function to execute and whose output to use for computing\n   * gradients with respect to variables.\n   * @param varList An optional list of variables to compute gradients with\n   * respect to. If specified, only the trainable variables in varList will have\n   * gradients computed with respect to. Defaults to all trainable variables.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  computeGradients(f: () => Scalar, varList?: Variable[]):\n      {value: Scalar, grads: NamedTensorMap} {\n    return variableGrads(f, varList);\n  }\n\n  /**\n   * Updates variables by using the computed gradients.\n   *\n   * @param variableGradients A mapping of variable name to its gradient value.\n   *\n   * @doc {heading: 'Training', subheading: 'Optimizers'}\n   */\n  abstract applyGradients(variableGradients: NamedTensorMap|\n                          NamedTensor[]): void;\n\n  /**\n   * Dispose the variables (if any) owned by this optimizer instance.\n   */\n  dispose(): void {\n    if (this.iterations_ != null) {\n      dispose(this.iterations_);\n    }\n  }\n\n  async saveIterations(): Promise<NamedTensor> {\n    if (this.iterations_ == null) {\n      this.iterations_ = 0;\n    }\n    return {\n      name: 'iter',  // Named for Python compatibility.\n      // TODO(cais): Use 'int64' type when available.\n      tensor: scalar(this.iterations_, 'int32')\n    };\n  }\n\n  async getWeights(): Promise<NamedTensor[]> {\n    throw new Error('getWeights() is not implemented for this optimizer yet.');\n  }\n\n  async setWeights(weightValues: NamedTensor[]): Promise<void> {\n    throw new Error(\n        `setWeights() is not implemented for this optimizer class ` +\n        `${this.getClassName()}`);\n  }\n\n  /**\n   * Extract the first element of the weight values and set it\n   * as the iterations counter variable of this instance of optimizer.\n   *\n   * @param weightValues\n   * @returns Weight values with the first element consumed and excluded.\n   */\n  protected async extractIterations(weightValues: NamedTensor[]):\n      Promise<NamedTensor[]> {\n    this.iterations_ = (await weightValues[0].tensor.data())[0];\n    return weightValues.slice(1);\n  }\n}\n\nObject.defineProperty(Optimizer, Symbol.hasInstance, {\n  value: (instance: Optimizer) => {\n    return instance.minimize != null && instance.computeGradients != null &&\n        instance.applyGradients != null;\n  }\n});\n"]},"metadata":{},"sourceType":"module"}