{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { UniformRandom } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a uniform distribution.\n *\n * The generated values follow a uniform distribution in the range [minval,\n * maxval). The lower bound minval is included in the range, while the upper\n * bound maxval is excluded.\n *\n * ```js\n * tf.randomUniform([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param minval The lower bound on the range of random values to generate.\n *   Defaults to 0.\n * @param maxval The upper bound on the range of random values to generate.\n *   Defaults to 1.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction randomUniform_(shape) {\n  let minval = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  let maxval = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let dtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'float32';\n  let seed = arguments.length > 4 ? arguments[4] : undefined;\n  const res = buffer(shape, dtype);\n  const random = new UniformRandom(minval, maxval, null, seed);\n\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = random.nextValue();\n  }\n\n  return res.toTensor();\n}\n\nexport const randomUniform = op({\n  randomUniform_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,SAAQA,MAAR,QAAqB,UAArB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,aAAR,QAA4B,aAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,cAAT,CACIC,KADJ,EAEwB;AAAA,MADAC,MACA,uEADS,CACT;AAAA,MADYC,MACZ,uEADqB,CACrB;AAAA,MADwBC,KACxB,uEAD0C,SAC1C;AAAA,MAApBC,IAAoB;AACtB,QAAMC,GAAG,GAAGT,MAAM,CAACI,KAAD,EAAQG,KAAR,CAAlB;AACA,QAAMG,MAAM,GAAG,IAAIR,aAAJ,CAAkBG,MAAlB,EAA0BC,MAA1B,EAAkC,IAAlC,EAAwCE,IAAxC,CAAf;;AACA,OAAK,IAAIG,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAAG,CAACG,MAAJ,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1CF,OAAG,CAACG,MAAJ,CAAWD,CAAX,IAAgBD,MAAM,CAACI,SAAP,EAAhB;AACD;;AACD,SAAOL,GAAG,CAACM,QAAJ,EAAP;AACD;;AAED,OAAO,MAAMC,aAAa,GAAGf,EAAE,CAAC;AAACE;AAAD,CAAD,CAAxB","names":["buffer","op","UniformRandom","randomUniform_","shape","minval","maxval","dtype","seed","res","random","i","values","length","nextValue","toTensor","randomUniform"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/random_uniform.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {DataType, Rank, ShapeMap} from '../types';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {UniformRandom} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a uniform distribution.\n *\n * The generated values follow a uniform distribution in the range [minval,\n * maxval). The lower bound minval is included in the range, while the upper\n * bound maxval is excluded.\n *\n * ```js\n * tf.randomUniform([2, 2]).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param minval The lower bound on the range of random values to generate.\n *   Defaults to 0.\n * @param maxval The upper bound on the range of random values to generate.\n *   Defaults to 1.\n * @param dtype The data type of the output tensor. Defaults to 'float32'.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomUniform_<R extends Rank>(\n    shape: ShapeMap[R], minval = 0, maxval = 1, dtype: DataType = 'float32',\n    seed?: number|string): Tensor<R> {\n  const res = buffer(shape, dtype);\n  const random = new UniformRandom(minval, maxval, null, seed);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = random.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomUniform = op({randomUniform_});\n"]},"metadata":{},"sourceType":"module"}