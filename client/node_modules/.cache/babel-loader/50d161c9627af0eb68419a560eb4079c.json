{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { Reduction } from '../loss_ops_utils';\nimport { op } from '../operation';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\n\nfunction absoluteDifference_(labels, predictions, weights) {\n  let reduction = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Reduction.SUM_BY_NONZERO_WEIGHTS;\n  const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n  const $predictions = convertToTensor(predictions, 'predictions', 'absoluteDifference');\n  let $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n  }\n\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n  const losses = abs(sub($labels, $predictions));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const absoluteDifference = op({\n  absoluteDifference_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAR,QAA8B,uBAA9B;AAEA,SAAQC,iBAAR,QAAgC,YAAhC;AACA,SAAQC,GAAR,QAAkB,QAAlB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,EAAR,QAAiB,cAAjB;AACA,SAAQC,GAAR,QAAkB,QAAlB;AAEA,SAAQC,mBAAR,QAAkC,yBAAlC;AAEA;;;;;;;;;;;;;;;;AAeA,SAASC,mBAAT,CACIC,MADJ,EAC0BC,WAD1B,EAEIC,OAFJ,EAGgD;AAAA,MAA5CC,SAA4C,uEAAhCR,SAAS,CAACS,sBAAsB;AAC9C,QAAMC,OAAO,GAAGb,eAAe,CAACQ,MAAD,EAAS,QAAT,EAAmB,oBAAnB,CAA/B;AACA,QAAMM,YAAY,GACdd,eAAe,CAACS,WAAD,EAAc,aAAd,EAA6B,oBAA7B,CADnB;AAEA,MAAIM,QAAQ,GAAW,IAAvB;;AACA,MAAIL,OAAO,IAAI,IAAf,EAAqB;AACnBK,YAAQ,GAAGf,eAAe,CAACU,OAAD,EAAU,SAAV,EAAqB,oBAArB,CAA1B;AACD;;AACDT,mBAAiB,CACbY,OAAO,CAACG,KADK,EACEF,YAAY,CAACE,KADf,EACsB,+BADtB,CAAjB;AAGA,QAAMC,MAAM,GAAGf,GAAG,CAACG,GAAG,CAACQ,OAAD,EAAUC,YAAV,CAAJ,CAAlB;AACA,SAAOR,mBAAmB,CAACW,MAAD,EAASF,QAAT,EAAmBJ,SAAnB,CAA1B;AACD;;AAED,OAAO,MAAMO,kBAAkB,GAAGd,EAAE,CAAC;AAACG;AAAD,CAAD,CAA7B","names":["convertToTensor","assertShapesMatch","abs","Reduction","op","sub","computeWeightedLoss","absoluteDifference_","labels","predictions","weights","reduction","SUM_BY_NONZERO_WEIGHTS","$labels","$predictions","$weights","shape","losses","absoluteDifference"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/losses/absolute_difference.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {Reduction} from '../loss_ops_utils';\nimport {op} from '../operation';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the absolute difference loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction absoluteDifference_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'absoluteDifference');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'absoluteDifference');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'absoluteDifference');\n  }\n  assertShapesMatch(\n      $labels.shape, $predictions.shape, 'Error in absoluteDifference: ');\n\n  const losses = abs(sub($labels, $predictions));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const absoluteDifference = op({absoluteDifference_});\n"]},"metadata":{},"sourceType":"module"}