{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { StringToHashBucketFast } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport { op } from '../operation';\n/**\n * Converts each string in the input Tensor to its hash mod by a number of\n * buckets.\n *\n * The hash function is deterministic on the content of the string within the\n * process and will never change. However, it is not suitable for cryptography.\n * This function may be used when CPU time is scarce and inputs are trusted or\n * unimportant. There is a risk of adversaries constructing inputs that all hash\n * to the same bucket.\n *\n * ```js\n * const result = tf.string.stringToHashBucketFast(\n *   ['Hello', 'TensorFlow', '2.x'], 3);\n * result.print(); // [0, 2, 2]\n * ```\n * @param input: The strings to assign a hash bucket.\n * @param numBuckets: The number of buckets.\n * @return A Tensor of the same shape as the input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\n\nfunction stringToHashBucketFast_(input, numBuckets) {\n  const $input = convertToTensor(input, 'input', 'stringToHashBucketFast', 'string');\n  const attrs = {\n    numBuckets\n  };\n\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const inputs = {\n    input: $input\n  };\n  return ENGINE.runKernel(StringToHashBucketFast, inputs, attrs);\n}\n\nexport const stringToHashBucketFast = op({\n  stringToHashBucketFast_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,cAArB;AACA,SAAQC,sBAAR,QAAgG,oBAAhG;AAEA,SAAQC,eAAR,QAA8B,uBAA9B;AAEA,SAAQC,EAAR,QAAiB,cAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASC,uBAAT,CACIC,KADJ,EAC8BC,UAD9B,EACgD;AAC9C,QAAMC,MAAM,GACRL,eAAe,CAACG,KAAD,EAAQ,OAAR,EAAiB,wBAAjB,EAA2C,QAA3C,CADnB;AAEA,QAAMG,KAAK,GAAgC;AAACF;AAAD,GAA3C;;AAEA,MAAIA,UAAU,IAAI,CAAlB,EAAqB;AACnB,UAAM,IAAIG,KAAJ,CAAU,sCAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAiC;AAACL,SAAK,EAAEE;AAAR,GAA7C;AACA,SAAOP,MAAM,CAACW,SAAP,CAAiBV,sBAAjB,EAAyCS,MAAzC,EAAuDF,KAAvD,CAAP;AACD;;AAED,OAAO,MAAMI,sBAAsB,GAAGT,EAAE,CAAC;AAACC;AAAD,CAAD,CAAjC","names":["ENGINE","StringToHashBucketFast","convertToTensor","op","stringToHashBucketFast_","input","numBuckets","$input","attrs","Error","inputs","runKernel","stringToHashBucketFast"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/string/string_to_hash_bucket_fast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {StringToHashBucketFast, StringToHashBucketFastAttrs, StringToHashBucketFastInputs} from '../../kernel_names';\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {op} from '../operation';\n\n/**\n * Converts each string in the input Tensor to its hash mod by a number of\n * buckets.\n *\n * The hash function is deterministic on the content of the string within the\n * process and will never change. However, it is not suitable for cryptography.\n * This function may be used when CPU time is scarce and inputs are trusted or\n * unimportant. There is a risk of adversaries constructing inputs that all hash\n * to the same bucket.\n *\n * ```js\n * const result = tf.string.stringToHashBucketFast(\n *   ['Hello', 'TensorFlow', '2.x'], 3);\n * result.print(); // [0, 2, 2]\n * ```\n * @param input: The strings to assign a hash bucket.\n * @param numBuckets: The number of buckets.\n * @return A Tensor of the same shape as the input tensor.\n *\n * @doc {heading: 'Operations', subheading: 'String'}\n */\nfunction stringToHashBucketFast_(\n    input: Tensor|TensorLike, numBuckets: number): Tensor {\n  const $input =\n      convertToTensor(input, 'input', 'stringToHashBucketFast', 'string');\n  const attrs: StringToHashBucketFastAttrs = {numBuckets};\n\n  if (numBuckets <= 0) {\n    throw new Error(`Number of buckets must be at least 1`);\n  }\n\n  const inputs: StringToHashBucketFastInputs = {input: $input};\n  return ENGINE.runKernel(StringToHashBucketFast, inputs as {}, attrs as {});\n}\n\nexport const stringToHashBucketFast = op({stringToHashBucketFast_});\n"]},"metadata":{},"sourceType":"module"}