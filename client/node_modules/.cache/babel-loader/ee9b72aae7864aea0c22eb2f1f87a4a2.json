{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n\nfunction split(str, delimiters, skipEmpty, result) {\n  if (!str.length) {\n    return;\n  } // When the delimiter is empty, the input is split into individual characters.\n\n\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n\n    return;\n  } // When there is one delimiter, the input is split only at that delimiter.\n\n\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n\n    return;\n  } // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n\n\n  let tokenStart = 0;\n\n  for (let i = 0; i < str.length + 1; i++) {\n    if (i === str.length || delimiters.indexOf(str[i]) !== -1) {\n      const token = str.subarray(tokenStart, i);\n\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(input, delimiter, skipEmpty) {\n  const batchSize = input.length; // Empty delimiter means split the input character by character.\n\n  const tokens = [];\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices = new Array(batchSize);\n\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2);\n  const values = new Array(outputSize);\n  const shape = [batchSize, maxNumEntries];\n  let c = 0;\n\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}","map":{"version":3,"mappings":"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","names":["util","split","str","delimiters","skipEmpty","result","length","i","push","subarray","delimiter","f","indexOf","token","tokenStart","stringSplitImpl","input","batchSize","tokens","outputSize","maxNumEntries","numIndices","Array","prevTokensLength","nEntries","Math","max","indices","getArrayFromDType","values","shape","c","j"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/StringSplit_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TypedArray, util} from '@tensorflow/tfjs-core';\n\nfunction split(\n    str: Uint8Array, delimiters: Uint8Array, skipEmpty: boolean,\n    result: Uint8Array[]): void {\n  if (!str.length) {\n    return;\n  }\n  // When the delimiter is empty, the input is split into individual characters.\n  if (delimiters.length === 0) {\n    for (let i = 0; i < str.length; ++i) {\n      result.push(str.subarray(i, i + 1));\n    }\n    return;\n  }\n  // When there is one delimiter, the input is split only at that delimiter.\n  if (delimiters.length === 1) {\n    const delimiter = delimiters[0];\n    let f = str.indexOf(delimiter);\n    while (f !== -1) {\n      const token = str.subarray(0, f);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      str = str.subarray(f + 1);\n      f = str.indexOf(delimiter);\n    }\n    if (!skipEmpty || str.length !== 0) {\n      result.push(str);\n    }\n    return;\n  }\n  // When there are multiple delimiters, the input is split at every instance\n  // one of the delimiters appears.\n  let tokenStart = 0;\n  for (let i = 0; i < str.length + 1; i++) {\n    if ((i === str.length) || (delimiters.indexOf(str[i]) !== -1)) {\n      const token = str.subarray(tokenStart, i);\n      if (!skipEmpty || token.length !== 0) {\n        result.push(token);\n      }\n      tokenStart = i + 1;\n    }\n  }\n}\n\nexport function stringSplitImpl(\n    input: Uint8Array[], delimiter: Uint8Array,\n    skipEmpty: boolean): [TypedArray, Uint8Array[], [number, number]] {\n  const batchSize = input.length;\n\n  // Empty delimiter means split the input character by character.\n  const tokens: Uint8Array[] = [];\n\n  let outputSize = 0;\n  let maxNumEntries = 0;\n  const numIndices: number[] = new Array(batchSize);\n  for (let i = 0; i < batchSize; ++i) {\n    const prevTokensLength = tokens.length;\n    split(input[i], delimiter, skipEmpty, tokens);\n    const nEntries = tokens.length - prevTokensLength;\n    numIndices[i] = nEntries;\n    outputSize += nEntries;\n    maxNumEntries = Math.max(maxNumEntries, nEntries);\n  }\n\n  const indices = util.getArrayFromDType('int32', outputSize * 2) as TypedArray;\n  const values: Uint8Array[] = new Array(outputSize);\n  const shape: [number, number] = [batchSize, maxNumEntries];\n\n  let c = 0;\n  for (let i = 0; i < batchSize; ++i) {\n    for (let j = 0; j < numIndices[i]; ++j) {\n      // indices is a 2d tensor with shape of [outputSize, 2]\n      indices[c * 2] = i;\n      indices[c * 2 + 1] = j;\n      values[c] = tokens[c];\n      ++c;\n    }\n  }\n\n  return [indices, values, shape];\n}\n"]},"metadata":{},"sourceType":"module"}