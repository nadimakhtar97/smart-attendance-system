{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Bincount } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\n\nfunction bincount_(x, weights, size) {\n  const $x = convertToTensor(x, 'x', 'bincount');\n  const $weights = convertToTensor(weights, 'weights', 'bincount');\n  util.assert($x.dtype === 'int32', () => `Error in bincount: input ` + `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert($weights.size === $x.size || $weights.size === 0, () => `Error in bincount: weights must have the same size as input or` + `0-length, but got input shape: ${$x.shape}, weights shape: ` + `${$weights.shape}.`);\n  const inputs = {\n    x: $x,\n    weights: $weights\n  };\n  const attrs = {\n    size\n  };\n  return ENGINE.runKernel(Bincount, inputs, attrs);\n}\n\nexport const bincount = op({\n  bincount_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,QAAR,QAAsD,iBAAtD;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;AAiBA,SAASC,SAAT,CACIC,CADJ,EACqBC,OADrB,EAC4CC,IAD5C,EACwD;AACtD,QAAMC,EAAE,GAAGP,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,UAAT,CAA1B;AACA,QAAMI,QAAQ,GAAGR,eAAe,CAACK,OAAD,EAAU,SAAV,EAAqB,UAArB,CAAhC;AAEAJ,MAAI,CAACQ,MAAL,CACIF,EAAE,CAACG,KAAH,KAAa,OADjB,EAEI,MAAM,8BACF,gCAAgCH,EAAE,CAACG,KAAK,EAHhD;AAIAT,MAAI,CAACQ,MAAL,CAAYH,IAAI,IAAI,CAApB,EAAuB,MAAM,sCAAsCA,IAAI,GAAvE;AACAL,MAAI,CAACQ,MAAL,CACID,QAAQ,CAACF,IAAT,KAAkBC,EAAE,CAACD,IAArB,IAA6BE,QAAQ,CAACF,IAAT,KAAkB,CADnD,EAEI,MAAM,mEACF,kCAAkCC,EAAE,CAACI,KAAK,mBADxC,GAEF,GAAGH,QAAQ,CAACG,KAAK,GAJzB;AAMA,QAAMC,MAAM,GAAmB;AAACR,KAAC,EAAEG,EAAJ;AAAQF,WAAO,EAAEG;AAAjB,GAA/B;AACA,QAAMK,KAAK,GAAkB;AAACP;AAAD,GAA7B;AAEA,SAAOR,MAAM,CAACgB,SAAP,CACHf,QADG,EACOa,MADP,EACuCC,KADvC,CAAP;AAED;;AAED,OAAO,MAAME,QAAQ,GAAGb,EAAE,CAAC;AAACC;AAAD,CAAD,CAAnB","names":["ENGINE","Bincount","convertToTensor","util","op","bincount_","x","weights","size","$x","$weights","assert","dtype","shape","inputs","attrs","runKernel","bincount"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/bincount.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {Bincount, BincountAttrs, BincountInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Outputs a vector with length `size` and the same dtype as `weights`.\n *\n * If `weights` are empty, then index `i` stores the number of times the value\n * `i` is counted in `x`. If `weights` are non-empty, then index `i` stores the\n * sum of the value in `weights` at each index where the corresponding value in\n * `x` is `i`.\n *\n * Values in `x` outside of the range [0, size) are ignored.\n *\n * @param x The input int tensor, rank 1.\n * @param weights The weights tensor, must have the same shape as x, or a\n *     length-0 Tensor, in which case it acts as all weights equal to 1.\n * @param size Non-negative integer.\n *\n * @doc {heading: 'Operations', subheading: 'Reduction'}\n */\nfunction bincount_<T extends Tensor1D>(\n    x: T|TensorLike, weights: T|TensorLike, size: number): T {\n  const $x = convertToTensor(x, 'x', 'bincount');\n  const $weights = convertToTensor(weights, 'weights', 'bincount');\n\n  util.assert(\n      $x.dtype === 'int32',\n      () => `Error in bincount: input ` +\n          `dtype must be int32, but got ${$x.dtype}`);\n  util.assert(size >= 0, () => `size must be non-negative, but got ${size}.`);\n  util.assert(\n      $weights.size === $x.size || $weights.size === 0,\n      () => `Error in bincount: weights must have the same size as input or` +\n          `0-length, but got input shape: ${$x.shape}, weights shape: ` +\n          `${$weights.shape}.`);\n\n  const inputs: BincountInputs = {x: $x, weights: $weights};\n  const attrs: BincountAttrs = {size};\n\n  return ENGINE.runKernel(\n      Bincount, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const bincount = op({bincount_});\n"]},"metadata":{},"sourceType":"module"}