{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unique } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { uniqueImpl } from './Unique_impl';\nexport function unique(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'unique');\n  const values = backend.data.get(x.dataId).values;\n  const {\n    outputValues,\n    outputShape,\n    indices\n  } = uniqueImpl(values, axis, x.shape, x.dtype);\n  return [backend.makeTensorInfo(outputShape, x.dtype, outputValues), backend.makeTensorInfo([indices.length], 'int32', indices)];\n}\nexport const uniqueConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,MAA9C,QAAsF,uBAAtF;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,SAAQC,UAAR,QAAyB,eAAzB;AAEA,OAAM,SAAUC,MAAV,CACFC,IADE,EACuE;AAE3E,QAAM;AAACC,UAAD;AAASC,SAAT;AAAgBC;AAAhB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAASF,KAAf;AACA,QAAM;AAACG;AAAD,MAAMJ,MAAZ;AACAJ,kBAAgB,CAACQ,CAAD,EAAI,QAAJ,CAAhB;AAEA,QAAMC,MAAM,GAAGH,OAAO,CAACI,IAAR,CAAaC,GAAb,CAAiBH,CAAC,CAACI,MAAnB,EAA2BH,MAA1C;AACA,QAAM;AAACI,gBAAD;AAAeC,eAAf;AAA4BC;AAA5B,MACFd,UAAU,CAACQ,MAAD,EAASF,IAAT,EAAeC,CAAC,CAACQ,KAAjB,EAAwBR,CAAC,CAACS,KAA1B,CADd;AAEA,SAAO,CACLX,OAAO,CAACY,cAAR,CAAuBJ,WAAvB,EAAoCN,CAAC,CAACS,KAAtC,EAA6CJ,YAA7C,CADK,EAELP,OAAO,CAACY,cAAR,CAAuB,CAACH,OAAO,CAACI,MAAT,CAAvB,EAAyC,OAAzC,EAAkDJ,OAAlD,CAFK,CAAP;AAID;AAED,OAAO,MAAMK,YAAY,GAAiB;AACxCC,YAAU,EAAEtB,MAD4B;AAExCuB,aAAW,EAAE,KAF2B;AAGxCC,YAAU,EAAErB;AAH4B,CAAnC","names":["Unique","assertNotComplex","uniqueImpl","unique","args","inputs","attrs","backend","axis","x","values","data","get","dataId","outputValues","outputShape","indices","shape","dtype","makeTensorInfo","length","uniqueConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Unique.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unique, UniqueAttrs, UniqueInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {uniqueImpl} from './Unique_impl';\n\nexport function unique(\n    args: {inputs: UniqueInputs, attrs: UniqueAttrs, backend: MathBackendCPU}):\n    TensorInfo[] {\n  const {inputs, attrs, backend} = args;\n  const {axis} = attrs;\n  const {x} = inputs;\n  assertNotComplex(x, 'unique');\n\n  const values = backend.data.get(x.dataId).values;\n  const {outputValues, outputShape, indices} =\n      uniqueImpl(values, axis, x.shape, x.dtype);\n  return [\n    backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n    backend.makeTensorInfo([indices.length], 'int32', indices),\n  ];\n}\n\nexport const uniqueConfig: KernelConfig = {\n  kernelName: Unique,\n  backendName: 'cpu',\n  kernelFunc: unique as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}