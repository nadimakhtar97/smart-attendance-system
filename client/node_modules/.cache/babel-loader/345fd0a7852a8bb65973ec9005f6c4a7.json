{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\n\nfunction argReduce(backend, x, reduceType) {\n  let bestIndicesA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo = {\n    windowSize,\n    inSize,\n    batchSize,\n    outSize: Math.ceil(inSize / windowSize)\n  };\n  const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n\n  const output = backend.runWebGLProgram(program, inputs, 'int32'); // No need to run another GPGPU program.\n\n  if (output.shape[1] === 1) {\n    return output;\n  }\n\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(backend, x, reduceType) {\n  let bestIndicesA = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n\n  return output;\n}\n\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = []; // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape({\n      inputs: {\n        x: xUnPacked\n      },\n      backend,\n      attrs: {\n        shape: [-1, inSize]\n      }\n    });\n    intermediateTensorInfos.push(a2D);\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped = reshape({\n      inputs: {\n        x: reduced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n\n  return argReducePacked(backend, x, reduceType);\n}","map":{"version":3,"mappings":"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","names":["backend_util","env","util","ArgMinMaxProgram","ArgMinMaxPackedProgram","reshape","argReduce","backend","x","reduceType","bestIndicesA","batchSize","shape","inSize","windowSize","computeOptimalWindowSize","reduceInfo","outSize","Math","ceil","program","inputs","push","output","runWebGLProgram","result","disposeIntermediateTensorInfo","argReducePacked","inShape","length","argMinMaxReduce","axis","axes","assertAxesAreInnerMostDims","charAt","toUpperCase","slice","getBool","intermediateTensorInfos","xtexData","texData","get","dataId","xIsPacked","isPacked","xUnPacked","unpackTensor","outShape","reduceShape","computeOutAndReduceShapes","sizeFromShape","a2D","attrs","reduced","reshaped","forEach","t"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernel_utils/arg_min_max.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {ArgMinMaxProgram} from '../argminmax_gpu';\nimport {ArgMinMaxPackedProgram} from '../argminmax_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {reshape} from '../kernels/Reshape';\n\nfunction argReduce(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  let batchSize = x.shape[0];\n  let inSize = x.shape[1];\n  if (bestIndicesA != null) {\n    batchSize = bestIndicesA.shape[0];\n    inSize = bestIndicesA.shape[1];\n  }\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const reduceInfo =\n      {windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize)};\n  const program =\n      new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n  const inputs = [x];\n  if (bestIndicesA != null) {\n    inputs.push(bestIndicesA);\n  }\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  // No need to run another GPGPU program.\n  if (output.shape[1] === 1) {\n    return output;\n  }\n  const result = argReduce(backend, x, reduceType, output);\n  backend.disposeIntermediateTensorInfo(output);\n  return result;\n}\n\nfunction argReducePacked(\n    backend: MathBackendWebGL, x: TensorInfo, reduceType: 'max'|'min',\n    bestIndicesA: TensorInfo = null): TensorInfo {\n  const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n  const inSize = inShape[inShape.length - 1];\n  const windowSize = backend_util.computeOptimalWindowSize(inSize);\n  const program = new ArgMinMaxPackedProgram(\n      inShape, windowSize, reduceType, bestIndicesA == null);\n  const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n  const output = backend.runWebGLProgram(program, inputs, 'int32');\n  if (output.shape.length === x.shape.length) {\n    const result = argReducePacked(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n  }\n  return output;\n}\n\nexport function argMinMaxReduce(\n    backend: MathBackendWebGL, x: TensorInfo, axis: number,\n    reduceType: 'min'|'max'): TensorInfo {\n  const axes = [axis];\n  backend_util.assertAxesAreInnerMostDims(\n      'arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes,\n      x.shape.length);\n  if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n    const intermediateTensorInfos = [];\n    // Eagerly unpack x input since it is passed in to all the shaders which\n    // require unpacked inputs.\n    const xtexData = backend.texData.get(x.dataId);\n    const xIsPacked = xtexData !== null && xtexData.isPacked;\n    let xUnPacked = x;\n    if (xIsPacked) {\n      xUnPacked = backend.unpackTensor(x);\n      intermediateTensorInfos.push(xUnPacked);\n    }\n\n    const [outShape, reduceShape] =\n        backend_util.computeOutAndReduceShapes(xUnPacked.shape, axes);\n    const inSize = util.sizeFromShape(reduceShape);\n    const a2D = reshape(\n        {inputs: {x: xUnPacked}, backend, attrs: {shape: [-1, inSize]}});\n    intermediateTensorInfos.push(a2D);\n\n    const reduced = argReduce(backend, a2D, reduceType);\n    intermediateTensorInfos.push(reduced);\n    const reshaped =\n        reshape({inputs: {x: reduced}, backend, attrs: {shape: outShape}});\n\n    intermediateTensorInfos.forEach(\n        t => backend.disposeIntermediateTensorInfo(t));\n    return reshaped;\n  }\n  return argReducePacked(backend, x, reduceType);\n}\n"]},"metadata":{},"sourceType":"module"}