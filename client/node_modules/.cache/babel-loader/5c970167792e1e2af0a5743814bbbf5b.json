{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long'; // tslint:disable-next-line\n\nconst Long = // tslint:disable-next-line\nLongExports.default || LongExports;\nexport function hexToLong(hex) {\n  return Long.fromString(hex, true, 16);\n} // Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\n\nconst k0 = hexToLong('c3a5c85c97cb3127'); // Hex 0xb492b66fbe98f273\n\nconst k1 = hexToLong('b492b66fbe98f273'); // Hex 0x9ae16a3b2f90404f\n\nconst k2 = hexToLong('9ae16a3b2f90404f');\n\nfunction shiftMix(val) {\n  return val.xor(val.shru(47));\n}\n\nfunction fetch(s, offset, numBytes) {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\n\nfunction fetch64(s, offset) {\n  return fetch(s, offset, 8);\n}\n\nfunction fetch32(s, offset) {\n  return fetch(s, offset, 4);\n}\n\nfunction rotate64(val, shift) {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\n\nfunction hashLen16(u, v) {\n  let mul = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : hexToLong('9ddfea08eb382d69');\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n} // Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\n\n\nfunction weakHashLen32WithSeeds(w, x, y, z, a, b) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\n\nfunction weakHashLen32WithSeedsStr(s, offset, a, b) {\n  return weakHashLen32WithSeeds(fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16), fetch64(s, offset + 24), a, b);\n}\n\nfunction hashLen0to16(s) {\n  let len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : s.length;\n\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n\n  return k2;\n}\n\nfunction hashLen17to32(s) {\n  let len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : s.length;\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d), a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\n\nfunction hashLen33to64(s) {\n  let len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : s.length;\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h), e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\n\nexport function fingerPrint64(s) {\n  let len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : s.length;\n  const seed = Long.fromNumber(81, true);\n\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  } // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n\n\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n  let offset = 0; // Set end so that after the loop we have 1 to 64 bytes left to process.\n\n  const end = (len - 1 >> 6) * 64;\n  const last64 = end + (len - 1 & 63) - 63;\n\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n\n  const mul = k1.add(z.and(0xff).shl(1)); // Point to the last 64 bytes of input.\n\n  offset = last64;\n  w[0] = w[0].add(len - 1 & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n  [z, x] = [x, z];\n  return hashLen16(hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z), hashLen16(v[1], w[1], mul).add(x), mul);\n}","map":{"version":3,"mappings":"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","names":["LongExports","Long","default","hexToLong","hex","fromString","k0","k1","k2","shiftMix","val","xor","shru","fetch","s","offset","numBytes","bytes","slice","fromBytes","Array","from","fetch64","fetch32","rotate64","shift","or","shl","hashLen16","u","v","mul","a","b","weakHashLen32WithSeeds","w","x","y","z","add","c","weakHashLen32WithSeedsStr","hashLen0to16","len","length","d","hashLen17to32","hashLen33to64","e","f","g","h","fingerPrint64","seed","fromNumber","UZERO","end","last64","and"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/hash_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for allowing cjs module to be included in bundle created by\n// rollup.\nimport * as LongExports from 'long';\n// tslint:disable-next-line\nconst Long: LongExports.LongConstructor =\n    // tslint:disable-next-line\n    (LongExports as any).default || LongExports;\n\nexport function hexToLong(hex: string): Long {\n  return Long.fromString(hex, true, 16);\n}\n\n// Some primes between 2^63 and 2^64 for various uses.\n// Hex 0xc3a5c85c97cb3127\nconst k0: Long = hexToLong('c3a5c85c97cb3127');\n// Hex 0xb492b66fbe98f273\nconst k1: Long = hexToLong('b492b66fbe98f273');\n// Hex 0x9ae16a3b2f90404f\nconst k2: Long = hexToLong('9ae16a3b2f90404f');\n\nfunction shiftMix(val: Long): Long {\n  return val.xor(val.shru(47));\n}\n\nfunction fetch(s: Uint8Array, offset: number, numBytes: number): Long {\n  const bytes = s.slice(offset, offset + numBytes);\n  return Long.fromBytes(Array.from(bytes), true, true);\n}\n\nfunction fetch64(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 8);\n}\n\nfunction fetch32(s: Uint8Array, offset: number): Long {\n  return fetch(s, offset, 4);\n}\n\nfunction rotate64(val: Long, shift: number): Long {\n  // Avoid shifting by 64: doing so yields an undefined result.\n  return shift === 0 ? val : val.shru(shift).or(val.shl(64 - shift));\n}\n\nfunction hashLen16(u: Long, v: Long, mul = hexToLong('9ddfea08eb382d69')) {\n  // Murmur-inspired hashing.\n  let a = u.xor(v).mul(mul);\n  a = a.xor(a.shru(47));\n  let b = v.xor(a).mul(mul);\n  b = b.xor(b.shru(47));\n  b = b.mul(mul);\n  return b;\n}\n\n// Return a 16-byte hash for 48 bytes.  Quick and dirty.\n// Callers do best to use \"random-looking\" values for a and b.\nfunction weakHashLen32WithSeeds(\n    w: Long, x: Long, y: Long, z: Long, a: Long, b: Long) {\n  a = a.add(w);\n  b = rotate64(b.add(a).add(z), 21);\n  const c = a;\n  a = a.add(x);\n  a = a.add(y);\n  b = b.add(rotate64(a, 44));\n  return [a.add(z), b.add(c)];\n}\n\nfunction weakHashLen32WithSeedsStr(\n    s: Uint8Array, offset: number, a: Long, b: Long) {\n  return weakHashLen32WithSeeds(\n      fetch64(s, offset), fetch64(s, offset + 8), fetch64(s, offset + 16),\n      fetch64(s, offset + 24), a, b);\n}\n\nfunction hashLen0to16(s: Uint8Array, len = s.length): Long {\n  if (len >= 8) {\n    const mul = k2.add(len * 2);\n    const a = fetch64(s, 0).add(k2);\n    const b = fetch64(s, len - 8);\n    const c = rotate64(b, 37).mul(mul).add(a);\n    const d = rotate64(a, 25).add(b).mul(mul);\n    return hashLen16(c, d, mul);\n  }\n  if (len >= 4) {\n    const mul = k2.add(len * 2);\n    const a = fetch32(s, 0);\n    return hashLen16(a.shl(3).add(len), fetch32(s, len - 4), mul);\n  }\n  if (len > 0) {\n    const a = s[0];\n    const b = s[len >> 1];\n    const c = s[len - 1];\n    const y = a + (b << 8);\n    const z = len + (c << 2);\n    return shiftMix(k2.mul(y).xor(k0.mul(z))).mul(k2);\n  }\n  return k2;\n}\n\nfunction hashLen17to32(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k1);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  return hashLen16(\n      rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d),\n      a.add(rotate64(b.add(k2), 18)).add(c), mul);\n}\n\nfunction hashLen33to64(s: Uint8Array, len = s.length): Long {\n  const mul = k2.add(len * 2);\n  const a = fetch64(s, 0).mul(k2);\n  const b = fetch64(s, 8);\n  const c = fetch64(s, len - 8).mul(mul);\n  const d = fetch64(s, len - 16).mul(k2);\n  const y = rotate64(a.add(b), 43).add(rotate64(c, 30)).add(d);\n  const z = hashLen16(y, a.add(rotate64(b.add(k2), 18)).add(c), mul);\n  const e = fetch64(s, 16).mul(mul);\n  const f = fetch64(s, 24);\n  const g = y.add(fetch64(s, len - 32)).mul(mul);\n  const h = z.add(fetch64(s, len - 24)).mul(mul);\n  return hashLen16(\n      rotate64(e.add(f), 43).add(rotate64(g, 30)).add(h),\n      e.add(rotate64(f.add(a), 18)).add(g), mul);\n}\n\nexport function fingerPrint64(s: Uint8Array, len = s.length): Long {\n  const seed: Long = Long.fromNumber(81, true);\n  if (len <= 32) {\n    if (len <= 16) {\n      return hashLen0to16(s, len);\n    } else {\n      return hashLen17to32(s, len);\n    }\n  } else if (len <= 64) {\n    return hashLen33to64(s, len);\n  }\n\n  // For strings over 64 bytes we loop.  Internal state consists of\n  // 56 bytes: v, w, x, y, and z.\n  let x = seed;\n  let y = seed.mul(k1).add(113);\n\n  let z = shiftMix(y.mul(k2).add(113)).mul(k2);\n  let v = [Long.UZERO, Long.UZERO];\n  let w = [Long.UZERO, Long.UZERO];\n  x = x.mul(k2).add(fetch64(s, 0));\n\n  let offset = 0;\n  // Set end so that after the loop we have 1 to 64 bytes left to process.\n  const end = ((len - 1) >> 6) * 64;\n  const last64 = end + ((len - 1) & 63) - 63;\n\n  do {\n    x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(k1);\n    y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(k1);\n    x = x.xor(w[1]);\n    y = y.add(v[0]).add(fetch64(s, offset + 40));\n    z = rotate64(z.add(w[0]), 33).mul(k1);\n    v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(k1), x.add(w[0]));\n    w = weakHashLen32WithSeedsStr(\n        s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n    [z, x] = [x, z];\n    offset += 64;\n  } while (offset !== end);\n  const mul = k1.add(z.and(0xff).shl(1));\n  // Point to the last 64 bytes of input.\n  offset = last64;\n\n  w[0] = w[0].add((len - 1) & 63);\n  v[0] = v[0].add(w[0]);\n  w[0] = w[0].add(v[0]);\n\n  x = rotate64(x.add(y).add(v[0]).add(fetch64(s, offset + 8)), 37).mul(mul);\n  y = rotate64(y.add(v[1]).add(fetch64(s, offset + 48)), 42).mul(mul);\n  x = x.xor(w[1].mul(9));\n  y = y.add(v[0].mul(9).add(fetch64(s, offset + 40)));\n  z = rotate64(z.add(w[0]), 33).mul(mul);\n  v = weakHashLen32WithSeedsStr(s, offset, v[1].mul(mul), x.add(w[0]));\n  w = weakHashLen32WithSeedsStr(\n      s, offset + 32, z.add(w[1]), y.add(fetch64(s, offset + 16)));\n\n  [z, x] = [x, z];\n\n  return hashLen16(\n      hashLen16(v[0], w[0], mul).add(shiftMix(y).mul(k0)).add(z),\n      hashLen16(v[1], w[1], mul).add(x), mul);\n}\n"]},"metadata":{},"sourceType":"module"}