{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class ArgMinMaxPackedProgram {\n  constructor(shape, windowSize, op, firstPass) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    util.assert(shape.length > 2, () => `Packed arg${op.charAt(0).toUpperCase() + op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n    let sourceLocSetup;\n    let sourceRank;\n\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1]; // e.g. \".b\" for rank 3.\n\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords = getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords = getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords = getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords = getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n    const compOp = op === 'max' ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["util","getChannels","getCoordsDataType","ArgMinMaxPackedProgram","constructor","shape","windowSize","op","firstPass","assert","length","charAt","toUpperCase","slice","inSize","outSize","Math","ceil","outputShape","push","variableNames","outShape","rank","dtype","coords","sourceLocSetup","sourceRank","sourceLocDType","join","channels","inChannel","intChannels","map","x","srcRCoords","concat","srcGCoords","srcBCoords","srcACoords","compOp","fetchCandidateIdx","fetchValue","getBestIndicesAChannelSnippet","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/argminmax_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class ArgMinMaxPackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(\n      shape: number[], windowSize: number, op: 'max'|'min',\n      firstPass: boolean) {\n    util.assert(\n        shape.length > 2,\n        () => `Packed arg${\n            op.charAt(0).toUpperCase() +\n            op.slice(1)} supports only inputs with rank above 2.`);\n    const inSize = shape[shape.length - 1];\n    const outSize = Math.ceil(inSize / windowSize);\n    this.outputShape = shape.slice(0, -1);\n    if (outSize > 1) {\n      this.outputShape.push(outSize);\n    }\n    if (!firstPass) {\n      this.variableNames.push('bestIndicesA');\n    }\n    const outShape = this.outputShape;\n    const rank = outShape.length;\n    const dtype = getCoordsDataType(rank);\n    const coords = getChannels('coords', rank);\n\n    let sourceLocSetup;\n    let sourceRank;\n    if (outSize === 1) {\n      sourceRank = rank + 1;\n      const sourceLocDType = getCoordsDataType(sourceRank);\n      sourceLocSetup = `\n        ${sourceLocDType} sourceLocR = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 1]};\n        ${sourceLocDType} sourceLocG = ${sourceLocDType}(${coords.join()}, 0);\n        ++${coords[rank - 2]};\n        ${sourceLocDType} sourceLocA = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 1]};\n        ${sourceLocDType} sourceLocB = ${sourceLocDType}(${coords.join()}, 0);\n        --${coords[rank - 2]};`;\n    } else {\n      sourceRank = rank;\n      sourceLocSetup = `\n        ${dtype} sourceLocR = coords;\n        ++${coords[rank - 1]};\n        ${dtype} sourceLocG = coords;\n        ++${coords[rank - 2]};\n        ${dtype} sourceLocA = coords;\n        --${coords[rank - 1]};\n        ${dtype} sourceLocB = coords;\n        --${coords[rank - 2]};`;\n    }\n    const channels = ['x', 'y', 'z', 'w', 'u', 'v'].slice(0, sourceRank);\n    const inChannel = '.' + channels[sourceRank - 1];  // e.g. \".b\" for rank 3.\n    const intChannels = channels.map(x => 'int ' + x);\n    const srcRCoords =\n        getChannels('sourceLocR', sourceRank - 1).concat('inIdx.r');\n    const srcGCoords =\n        getChannels('sourceLocG', sourceRank - 1).concat('inIdx.g');\n    const srcBCoords =\n        getChannels('sourceLocB', sourceRank - 1).concat('inIdx.b');\n    const srcACoords =\n        getChannels('sourceLocA', sourceRank - 1).concat('inIdx.a');\n\n    const compOp = (op === 'max') ? 'greaterThan' : 'lessThan';\n    const fetchCandidateIdx = firstPass ? '' : `\n          inIdx = round(vec4(getBestIndicesAChannel(${srcRCoords.join()}),\n                             getBestIndicesAChannel(${srcGCoords.join()}),\n                             getBestIndicesAChannel(${srcBCoords.join()}),\n                             getBestIndicesAChannel(${srcACoords.join()})));`;\n\n    const fetchValue = `vec4(\n            getAChannel(${srcRCoords.join()}),\n            hasNextCol ? getAChannel(${srcGCoords.join()}) : 0.,\n            hasNextRow ? getAChannel(${srcBCoords.join()}) : 0.,\n            hasNextRow && hasNextCol ? getAChannel(${srcACoords.join()}) : 0.)`;\n\n    const getBestIndicesAChannelSnippet = firstPass ? '' : `\n      float getBestIndicesAChannel(${intChannels.join()}) {\n        return getChannel(getBestIndicesA(${channels.join()}),\n                                          vec2(${channels.slice(-2).join()}));\n      }`;\n\n    this.userCode = `\n      float getAChannel(${intChannels.join()}) {\n        return getChannel(getA(${channels.join()}),\n                               vec2(${channels.slice(-2).join()}));\n      }\n      ${getBestIndicesAChannelSnippet}\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        bool hasNextCol = ${coords[rank - 1]} < ${outShape[rank - 1] - 1};\n        bool hasNextRow = ${coords[rank - 2]} < ${outShape[rank - 2] - 1};\n        ${sourceLocSetup}\n        ivec4 srcIdx = ivec4(sourceLocR${inChannel}, sourceLocG${inChannel},\n          sourceLocB${inChannel}, sourceLocA${inChannel}) * ${windowSize};\n        ivec4 inIdx = srcIdx;\n        vec4 bestIndex = vec4(inIdx);\n        vec4 bestValue = ${fetchValue};\n\n        for (int i = 0; i < ${windowSize}; i++) {\n          inIdx = srcIdx;\n          ${fetchCandidateIdx}\n          vec4 candidate = ${fetchValue};\n          bvec4 nan = isnan(candidate);\n          bvec4 replace = bvec4(\n            vec4(${compOp}(candidate, bestValue)) * (vec4(1.0) - vec4(nan)));\n\n          bestValue = vec4(replace.x  ? candidate.x : bestValue.x,\n                           replace.y  ? candidate.y : bestValue.y,\n                           replace.z  ? candidate.z : bestValue.z,\n                           replace.w  ? candidate.w : bestValue.w);\n          bestIndex = mix(bestIndex, vec4(inIdx), vec4(replace));\n          srcIdx++;\n        }\n        setOutput(bestIndex);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}