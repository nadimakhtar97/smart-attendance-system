{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype);\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size) {\n  let binaryOutput = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,EAA0DC,IAA1D,QAAqE,uBAArE;AAEA,OAAM,SAAUC,YAAV,CACFC,KADE,EACiBC,WADjB,EAC0CC,YAD1C,EAEFC,YAFE,EAEsBC,IAFtB,EAEkC;AACtC,QAAMC,WAAW,GAAGP,IAAI,CAACQ,aAAL,CAAmBH,YAAnB,CAApB;AACA,QAAMI,OAAO,GAAGT,IAAI,CAACU,mBAAL,CAAyBJ,IAAzB,EAA+BF,YAA/B,CAAhB;;AAEA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,KAAK,CAACU,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrC,UAAME,KAAK,GAAGX,KAAK,CAACS,CAAD,CAAnB;;AACA,QAAIE,KAAK,GAAG,CAAZ,EAAe;AACb,YAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,QAAID,KAAK,IAAIP,IAAb,EAAmB;AACjB;AACD;;AAED,QAAIC,WAAW,GAAG,CAAlB,EAAqB;AACnBE,aAAO,CAACI,KAAD,CAAP,IAAkBV,WAAW,CAACQ,CAAD,CAA7B;AACD,KAFD,MAEO;AACLF,aAAO,CAACI,KAAD,CAAP,IAAkB,CAAlB;AACD;AACF;;AAED,SAAOJ,OAAP;AACD;AAED,OAAM,SAAUM,kBAAV,CACFC,IADE,EACqBC,UADrB,EACkDX,IADlD,EAEkB;AAAA,MAApBY,YAAoB,uEAAL,KAAK;AACtB,QAAMC,OAAO,GAAGH,IAAI,CAACI,KAAL,CAAW,CAAX,CAAhB;AACA,QAAMC,OAAO,GAAGL,IAAI,CAACI,KAAL,CAAW,CAAX,CAAhB;AAEA,QAAME,MAAM,GAAGvB,MAAM,CAAC,CAACoB,OAAD,EAAUb,IAAV,CAAD,EAAkBW,UAAU,CAACM,KAA7B,CAArB;;AAEA,OAAK,IAAIZ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,OAApB,EAA6BR,CAAC,EAA9B,EAAkC;AAChC,SAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,OAApB,EAA6BG,CAAC,EAA9B,EAAkC;AAChC,YAAMX,KAAK,GAAGG,IAAI,CAACS,GAAL,CAASd,CAAT,EAAYa,CAAZ,CAAd;;AACA,UAAIX,KAAK,GAAG,CAAZ,EAAe;AACb,cAAM,IAAIC,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAED,UAAID,KAAK,IAAIP,IAAb,EAAmB;AACjB;AACD;;AAED,UAAIY,YAAJ,EAAkB;AAChBI,cAAM,CAACI,GAAP,CAAW,CAAX,EAAcf,CAAd,EAAiBE,KAAjB;AACD,OAFD,MAEO;AACL,YAAII,UAAU,CAACX,IAAX,GAAkB,CAAtB,EAAyB;AACvBgB,gBAAM,CAACI,GAAP,CAAWJ,MAAM,CAACG,GAAP,CAAWd,CAAX,EAAcE,KAAd,IAAuBI,UAAU,CAACQ,GAAX,CAAed,CAAf,EAAkBa,CAAlB,CAAlC,EAAwDb,CAAxD,EAA2DE,KAA3D;AACD,SAFD,MAEO;AACLS,gBAAM,CAACI,GAAP,CAAWJ,MAAM,CAACG,GAAP,CAAWd,CAAX,EAAcE,KAAd,IAAuB,CAAlC,EAAqCF,CAArC,EAAwCE,KAAxC;AACD;AACF;AACF;AACF;;AAED,SAAOS,MAAP;AACD","names":["buffer","util","bincountImpl","xVals","weightsVals","weightsDtype","weightsShape","size","weightsSize","sizeFromShape","outVals","makeZerosTypedArray","i","length","value","Error","bincountReduceImpl","xBuf","weightsBuf","binaryOutput","numRows","shape","numCols","outBuf","dtype","j","get","set"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Bincount_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function bincountImpl(\n    xVals: TypedArray, weightsVals: TypedArray, weightsDtype: DataType,\n    weightsShape: number[], size: number): TypedArray {\n  const weightsSize = util.sizeFromShape(weightsShape);\n  const outVals = util.makeZerosTypedArray(size, weightsDtype) as TypedArray;\n\n  for (let i = 0; i < xVals.length; i++) {\n    const value = xVals[i];\n    if (value < 0) {\n      throw new Error('Input x must be non-negative!');\n    }\n\n    if (value >= size) {\n      continue;\n    }\n\n    if (weightsSize > 0) {\n      outVals[value] += weightsVals[i];\n    } else {\n      outVals[value] += 1;\n    }\n  }\n\n  return outVals;\n}\n\nexport function bincountReduceImpl<R extends Rank>(\n    xBuf: TensorBuffer<R>, weightsBuf: TensorBuffer<R>, size: number,\n    binaryOutput = false): TensorBuffer<R> {\n  const numRows = xBuf.shape[0];\n  const numCols = xBuf.shape[1];\n\n  const outBuf = buffer([numRows, size], weightsBuf.dtype);\n\n  for (let i = 0; i < numRows; i++) {\n    for (let j = 0; j < numCols; j++) {\n      const value = xBuf.get(i, j);\n      if (value < 0) {\n        throw new Error('Input x must be non-negative!');\n      }\n\n      if (value >= size) {\n        continue;\n      }\n\n      if (binaryOutput) {\n        outBuf.set(1, i, value);\n      } else {\n        if (weightsBuf.size > 0) {\n          outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n        } else {\n          outBuf.set(outBuf.get(i, value) + 1, i, value);\n        }\n      }\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n"]},"metadata":{},"sourceType":"module"}