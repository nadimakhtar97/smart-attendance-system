{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nconst {\n  getBroadcastDims\n} = backend_util;\nimport { getGlslDifferences } from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\nexport function makeShader(inputsInfo, outputShape, program) {\n  const prefixSnippets = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape); // Snippet when we decided to upload the values as uniform.\n\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(`uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {\n        uniformShape\n      } = getUniformInfoFromShape(program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n\n        default:\n          break;\n      }\n\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n\n      default:\n        break;\n    }\n\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n\n  if (program.customUniforms) {\n    program.customUniforms.forEach(d => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n  const inputSamplingSnippet = inputsInfo.map(x => getInputSamplingSnippet(x, outputShape, program.packedInputs, program.enableShapeUniforms)).join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet;\n  let floatTextureSetOutputSnippet;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet, inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet, program.userCode].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(inInfo) {\n  let enableShapeUniforms = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n\n    case 5:\n      return getSampler5D(inInfo);\n\n    case 6:\n      return getSampler6D(inInfo);\n\n    default:\n      throw new Error(`${shape.length}-D input sampling` + ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(inInfo, enableShapeUniforms) {\n  const shape = inInfo.shapeInfo.logicalShape;\n\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(inInfo, outShapeInfo) {\n  let usesPackedTextures = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let enableShapeUniforms = arguments.length > 3 ? arguments[3] : undefined;\n  let res = '';\n\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutputPacked1DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 2:\n      return getOutputPacked2DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 3:\n      return getOutputPacked3DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    default:\n      return getOutputPackedNDCoords(outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(outShape, outTexShape, enableShapeUniforms) {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n\n    case 1:\n      return getOutput1DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 2:\n      return getOutput2DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 3:\n      return getOutput3DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 4:\n      return getOutput4DCoords(outShape, outTexShape, enableShapeUniforms);\n\n    case 5:\n      return getOutput5DCoords(outShape, outTexShape);\n\n    case 6:\n      return getOutput6DCoords(outShape, outTexShape);\n\n    default:\n      throw new Error(`${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl) {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl) {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl) {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl) {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(shape, texShape, enableShapeUniforms) {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd'], shape);\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(shape, texShape, enableShapeUniforms) {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet = shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(['r', 'c', 'd', 'd2'], shape);\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2'], shape);\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3'], shape);\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(shape, texShape) {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(shape, texShape, enableShapeUniforms) {\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      }\n    `;\n  } // texels needed to accommodate a logical row\n\n\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(shape, texShape, enableShapeUniforms) {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName) {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(inputInfo, enableShapeUniforms) {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape = [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(inputInfo, enableShapeUniforms) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo) {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo) {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n\n  let unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` + `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(inputInfo, outShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank && inputInfo.shapeInfo.flatOffset == null && util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet = broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`).join('\\n');\n  }\n\n  let unpackedCoordsSnippet = '';\n\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape.map((s, i) => `coords.${fields[i + rankDiff]}`).join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank) {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\nexport function getUniformInfoFromShape(isPacked, shape, texShape) {\n  const {\n    newShape,\n    keptDims\n  } = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape = !isPacked && rank > 1 && !util.arraysEqual(shape, texShape) && newShape.length < rank || useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {\n    useSqueezeShape,\n    uniformShape,\n    keptDims\n  };\n}\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\n\nexport function squeezeInputInfo(inInfo, squeezedShape) {\n  // Deep copy.\n  const newInputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params, keptDims) {\n  return keptDims.map(d => params[d]).join(', ');\n}","map":{"version":3,"mappings":"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","names":["backend_util","util","getBroadcastDims","getGlslDifferences","shader_util","makeShader","inputsInfo","outputShape","program","prefixSnippets","forEach","x","size","sizeFromShape","shapeInfo","logicalShape","isUniform","push","name","enableShapeUniforms","uniformShape","getUniformInfoFromShape","packedInputs","texShape","length","customUniforms","d","type","arrayIndex","inputPrefixSnippet","join","inputSamplingSnippet","map","getInputSamplingSnippet","outTexShape","glsl","floatTextureSampleSnippet","getFloatTextureSampleSnippet","outputSamplingSnippet","floatTextureSetOutputSnippet","shaderPrefix","getShaderPrefix","isPacked","getPackedOutputSamplingSnippet","getFloatTextureSetRGBASnippet","getOutputSamplingSnippet","getFloatTextureSetRSnippet","SHADER_PACKED_PREFIX","source","userCode","getSamplerFromInInfo","inInfo","shape","getSamplerScalar","getSampler1D","getSampler2D","getSampler3D","getSampler4D","getSampler5D","getSampler6D","Error","getPackedSamplerFromInInfo","getPackedSamplerScalar","getPackedSampler1D","getPackedSampler2D","getPackedSampler3D","getPackedSamplerND","outShapeInfo","usesPackedTextures","res","inShape","outShape","getPackedSamplerAtOutputCoords","getSamplerAtOutputCoords","getOutputScalarCoords","getOutputPacked1DCoords","getOutputPacked2DCoords","getOutputPacked3DCoords","getOutputPackedNDCoords","getOutput1DCoords","getOutput2DCoords","getOutput3DCoords","getOutput4DCoords","getOutput5DCoords","getOutput6DCoords","texture2D","output","SHADER_PREFIX","version","varyingFs","defineOutput","defineSpecialNaN","defineSpecialInf","defineRound","SAMPLE_1D_SNIPPET","SAMPLE_2D_SNIPPET","SAMPLE_3D_SNIPPET","packedTexShape","Math","ceil","texelsInLogicalRow","texelsInBatch","coordsFromIndexSnippet","getOutputLogicalCoordinatesFromFlatIndexByUniform","getLogicalCoordinatesFromFlatIndex","texelsInBatchN","batches","coords","b","arraysEqual","getFlatOffsetUniformName","texName","inputInfo","funcName","charAt","toUpperCase","slice","texNumR","texNumC","offset","tNumR","tNumC","getUniformSampler","valuesPerRow","newShape","keptDims","squeezeShape","squeezedShape","newInputInfo","squeezeInputInfo","params","getSqueezedParams","stride0","stride1","flatOffset","rank","index","stride2","stride2Str","stride1Str","stride0Str","stride3","stride4","inSize","texFuncSnippet","inRank","outRank","broadcastDims","getCoordsDataType","rankDiff","coordsSnippet","fields","unpackedCoordsSnippet","s","i","isInputScalar","outSize","isOutputScalar","rows","cols","indexOf","inTexShape","useSqueezePackedShape","useSqueezeShape","JSON","parse","stringify"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/shader_compiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Please make sure the shaker key in makeShaderKey in gpgpu_math.ts is well\n// mapped if any shader source code is changed in this file.\n\nimport {backend_util, util} from '@tensorflow/tfjs-core';\nconst {getBroadcastDims} = backend_util;\nimport {getGlslDifferences, GLSL} from './glsl_version';\nimport * as shader_util from './shader_compiler_util';\n\nexport type ShapeInfo = {\n  logicalShape: number[],\n  texShape: [number, number],\n  isUniform: boolean,\n  isPacked: boolean,\n  flatOffset: number\n};\n\nexport type InputInfo = {\n  name: string,\n  shapeInfo: ShapeInfo\n};\n\nexport type UniformType =\n    'float'|'vec2'|'vec3'|'vec4'|'int'|'ivec2'|'ivec3'|'ivec4';\n\ninterface ProgramParams {\n  userCode: string;\n  enableShapeUniforms?: boolean;\n  packedInputs?: boolean;\n  customUniforms?:\n      Array<{name: string; arrayIndex?: number; type: UniformType;}>;\n}\n\nexport function makeShader(\n    inputsInfo: InputInfo[], outputShape: ShapeInfo,\n    program: ProgramParams): string {\n  const prefixSnippets: string[] = [];\n  inputsInfo.forEach(x => {\n    const size = util.sizeFromShape(x.shapeInfo.logicalShape);\n\n    // Snippet when we decided to upload the values as uniform.\n    if (x.shapeInfo.isUniform) {\n      prefixSnippets.push(\n          `uniform float ${x.name}${size > 1 ? `[${size}]` : ''};`);\n    } else {\n      prefixSnippets.push(`uniform sampler2D ${x.name};`);\n      prefixSnippets.push(`uniform int offset${x.name};`);\n    }\n\n    if (program.enableShapeUniforms) {\n      const {uniformShape} = getUniformInfoFromShape(\n          program.packedInputs, x.shapeInfo.logicalShape, x.shapeInfo.texShape);\n      switch (uniformShape.length) {\n        case 1:\n          prefixSnippets.push(`uniform int ${x.name}Shape;`);\n          break;\n        case 2:\n          prefixSnippets.push(`uniform ivec2 ${x.name}Shape;`);\n          break;\n        case 3:\n          prefixSnippets.push(`uniform ivec3 ${x.name}Shape;`);\n          break;\n        case 4:\n          prefixSnippets.push(`uniform ivec4 ${x.name}Shape;`);\n          break;\n        default:\n          break;\n      }\n      prefixSnippets.push(`uniform ivec2 ${x.name}TexShape;`);\n    }\n  });\n\n  if (program.enableShapeUniforms) {\n    switch (outputShape.logicalShape.length) {\n      case 1:\n        prefixSnippets.push(`uniform int outShape;`);\n        break;\n      case 2:\n        prefixSnippets.push(`uniform ivec2 outShape;`);\n        prefixSnippets.push(`uniform int outShapeStrides;`);\n        break;\n      case 3:\n        prefixSnippets.push(`uniform ivec3 outShape;`);\n        prefixSnippets.push(`uniform ivec2 outShapeStrides;`);\n        break;\n      case 4:\n        prefixSnippets.push(`uniform ivec4 outShape;`);\n        prefixSnippets.push(`uniform ivec3 outShapeStrides;`);\n        break;\n      default:\n        break;\n    }\n    prefixSnippets.push(`uniform ivec2 outTexShape;`);\n  }\n  if (program.customUniforms) {\n    program.customUniforms.forEach((d) => {\n      prefixSnippets.push(`uniform ${d.type} ${d.name}${\n          d.arrayIndex ? `[${d.arrayIndex}]` : ''};`);\n    });\n  }\n  const inputPrefixSnippet = prefixSnippets.join('\\n');\n\n  const inputSamplingSnippet = inputsInfo\n                                   .map(\n                                       x => getInputSamplingSnippet(\n                                           x, outputShape, program.packedInputs,\n                                           program.enableShapeUniforms))\n                                   .join('\\n');\n  const outTexShape = outputShape.texShape;\n  const glsl = getGlslDifferences();\n  const floatTextureSampleSnippet = getFloatTextureSampleSnippet(glsl);\n  let outputSamplingSnippet: string;\n  let floatTextureSetOutputSnippet: string;\n  let shaderPrefix = getShaderPrefix(glsl);\n\n  if (outputShape.isPacked) {\n    outputSamplingSnippet = getPackedOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRGBASnippet(glsl);\n  } else {\n    outputSamplingSnippet = getOutputSamplingSnippet(\n        outputShape.logicalShape, outTexShape, program.enableShapeUniforms);\n    floatTextureSetOutputSnippet = getFloatTextureSetRSnippet(glsl);\n  }\n\n  if (program.packedInputs) {\n    shaderPrefix += SHADER_PACKED_PREFIX;\n  }\n\n  const source = [\n    shaderPrefix, floatTextureSampleSnippet, floatTextureSetOutputSnippet,\n    inputPrefixSnippet, outputSamplingSnippet, inputSamplingSnippet,\n    program.userCode\n  ].join('\\n');\n  return source;\n}\n\nfunction getSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms = false): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getSamplerScalar(inInfo, enableShapeUniforms);\n    case 1:\n      return getSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getSampler3D(inInfo, enableShapeUniforms);\n    case 4:\n      return getSampler4D(inInfo, enableShapeUniforms);\n    case 5:\n      return getSampler5D(inInfo);\n    case 6:\n      return getSampler6D(inInfo);\n    default:\n      throw new Error(\n          `${shape.length}-D input sampling` +\n          ` is not yet supported`);\n  }\n}\n\nfunction getPackedSamplerFromInInfo(\n    inInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inInfo.shapeInfo.logicalShape;\n  switch (shape.length) {\n    case 0:\n      return getPackedSamplerScalar(inInfo);\n    case 1:\n      return getPackedSampler1D(inInfo, enableShapeUniforms);\n    case 2:\n      return getPackedSampler2D(inInfo, enableShapeUniforms);\n    case 3:\n      return getPackedSampler3D(inInfo, enableShapeUniforms);\n    default:\n      return getPackedSamplerND(inInfo, enableShapeUniforms);\n  }\n}\n\nfunction getInputSamplingSnippet(\n    inInfo: InputInfo, outShapeInfo: ShapeInfo, usesPackedTextures = false,\n    enableShapeUniforms: boolean): string {\n  let res = '';\n  if (usesPackedTextures) {\n    res += getPackedSamplerFromInInfo(inInfo, enableShapeUniforms);\n  } else {\n    res += getSamplerFromInInfo(inInfo, enableShapeUniforms);\n  }\n\n  const inShape = inInfo.shapeInfo.logicalShape;\n  const outShape = outShapeInfo.logicalShape;\n  if (inShape.length <= outShape.length) {\n    if (usesPackedTextures) {\n      res += getPackedSamplerAtOutputCoords(inInfo, outShapeInfo);\n    } else {\n      res += getSamplerAtOutputCoords(inInfo, outShapeInfo);\n    }\n  }\n  return res;\n}\n\nfunction getPackedOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutputPacked1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutputPacked2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutputPacked3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    default:\n      return getOutputPackedNDCoords(\n          outShape, outTexShape, enableShapeUniforms);\n  }\n}\n\nfunction getOutputSamplingSnippet(\n    outShape: number[], outTexShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  switch (outShape.length) {\n    case 0:\n      return getOutputScalarCoords();\n    case 1:\n      return getOutput1DCoords(\n          outShape as [number], outTexShape, enableShapeUniforms);\n    case 2:\n      return getOutput2DCoords(\n          outShape as [number, number], outTexShape, enableShapeUniforms);\n    case 3:\n      return getOutput3DCoords(\n          outShape as [number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 4:\n      return getOutput4DCoords(\n          outShape as [number, number, number, number], outTexShape,\n          enableShapeUniforms);\n    case 5:\n      return getOutput5DCoords(\n          outShape as [number, number, number, number, number], outTexShape);\n    case 6:\n      return getOutput6DCoords(\n          outShape as [number, number, number, number, number, number],\n          outTexShape);\n    default:\n      throw new Error(\n          `${outShape.length}-D output sampling is not yet supported`);\n  }\n}\n\nfunction getFloatTextureSampleSnippet(glsl: GLSL): string {\n  return `\n    float sampleTexture(sampler2D textureSampler, vec2 uv) {\n      return ${glsl.texture2D}(textureSampler, uv).r;\n    }\n  `;\n}\n\nfunction getFloatTextureSetRSnippet(glsl: GLSL): string {\n  return `\n    void setOutput(float val) {\n      ${glsl.output} = vec4(val, 0, 0, 0);\n    }\n  `;\n}\n\nfunction getFloatTextureSetRGBASnippet(glsl: GLSL): string {\n  return `\n    void setOutput(vec4 val) {\n      ${glsl.output} = val;\n    }\n  `;\n}\n\nfunction getShaderPrefix(glsl: GLSL): string {\n  const SHADER_PREFIX = `${glsl.version}\n    precision highp float;\n    precision highp int;\n    precision highp sampler2D;\n    ${glsl.varyingFs} vec2 resultUV;\n    ${glsl.defineOutput}\n    const vec2 halfCR = vec2(0.5, 0.5);\n\n    struct ivec5\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n    };\n\n    struct ivec6\n    {\n      int x;\n      int y;\n      int z;\n      int w;\n      int u;\n      int v;\n    };\n\n    uniform float NAN;\n    ${glsl.defineSpecialNaN}\n    ${glsl.defineSpecialInf}\n    ${glsl.defineRound}\n\n    int imod(int x, int y) {\n      return x - y * (x / y);\n    }\n\n    int idiv(int a, int b, float sign) {\n      int res = a / b;\n      int mod = imod(a, b);\n      if (sign < 0. && mod != 0) {\n        res -= 1;\n      }\n      return res;\n    }\n\n    //Based on the work of Dave Hoskins\n    //https://www.shadertoy.com/view/4djSRW\n    #define HASHSCALE1 443.8975\n    float random(float seed){\n      vec2 p = resultUV * seed;\n      vec3 p3  = fract(vec3(p.xyx) * HASHSCALE1);\n      p3 += dot(p3, p3.yzx + 19.19);\n      return fract((p3.x + p3.y) * p3.z);\n    }\n\n    ${SAMPLE_1D_SNIPPET}\n    ${SAMPLE_2D_SNIPPET}\n    ${SAMPLE_3D_SNIPPET}\n  `;\n\n  return SHADER_PREFIX;\n}\n\nconst SAMPLE_1D_SNIPPET = `\nvec2 uvFromFlat(int texNumR, int texNumC, int index) {\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\nvec2 packedUVfrom1D(int texNumR, int texNumC, int index) {\n  int texelIndex = index / 2;\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_2D_SNIPPET = `\nvec2 packedUVfrom2D(int texelsInLogicalRow, int texNumR,\n  int texNumC, int row, int col) {\n  int texelIndex = (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = texelIndex / texNumC;\n  int texC = texelIndex - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SAMPLE_3D_SNIPPET = `\nvec2 packedUVfrom3D(int texNumR, int texNumC,\n    int texelsInBatch, int texelsInLogicalRow, int b,\n    int row, int col) {\n  int index = b * texelsInBatch + (row / 2) * texelsInLogicalRow + (col / 2);\n  int texR = index / texNumC;\n  int texC = index - texR * texNumC;\n  return (vec2(texC, texR) + halfCR) / vec2(texNumC, texNumR);\n}\n`;\n\nconst SHADER_PACKED_PREFIX = `\n  float getChannel(vec4 frag, vec2 innerDims) {\n    vec2 modCoord = mod(innerDims, 2.);\n    return modCoord.x == 0. ?\n      (modCoord.y == 0. ? frag.r : frag.g) :\n      (modCoord.y == 0. ? frag.b : frag.a);\n  }\n  float getChannel(vec4 frag, int dim) {\n    float modCoord = mod(float(dim), 2.);\n    return modCoord == 0. ? frag.r : frag.g;\n  }\n`;\n\nfunction getOutputScalarCoords() {\n  return `\n    int getOutputCoords() {\n      return 0;\n    }\n  `;\n}\n\nfunction getOutputPacked1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (packedTexShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ceil(float(outTexShape[1]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.x * ${packedTexShape[1]}.0);\n      }\n    `;\n  }\n\n  if (packedTexShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ceil(float(outTexShape[0]) / 2.0));\n      }\n    `;\n    }\n\n    return `\n      int getOutputCoords() {\n        return 2 * int(resultUV.y * ${packedTexShape[0]}.0);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      return 2 * (resTexRC.x * packedTexShape[1] + resTexRC.y);\n    }\n  `;\n  }\n\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      return 2 * (resTexRC.x * ${packedTexShape[1]} + resTexRC.y);\n    }\n  `;\n}\n\nfunction getOutput1DCoords(\n    shape: [number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (texShape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.x * float(outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.x * ${texShape[1]}.0);\n      }\n    `;\n  }\n  if (texShape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      int getOutputCoords() {\n        return int(resultUV.y * float(outTexShape[0]));\n      }\n    `;\n    }\n    return `\n      int getOutputCoords() {\n        return int(resultUV.y * ${texShape[0]}.0);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      return resTexRC.x * outTexShape[1] + resTexRC.y;\n    }\n  `;\n  }\n  return `\n    int getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      return resTexRC.x * ${texShape[1]} + resTexRC.y;\n    }\n  `;\n}\n\nfunction getOutputPacked3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    return `\n    ivec3 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n  }\n\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texelsInLogicalRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = texelsInLogicalRow * Math.ceil(shape[1] / 2);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec3(b, r, c);\n    }\n  `;\n}\n\nfunction getOutput3DCoords(\n    shape: [number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd'], shape);\n\n    return `\n  ivec3 getOutputCoords() {\n    ivec2 resTexRC = ivec2(resultUV.yx *\n                           vec2(outTexShape[0], outTexShape[1]));\n    int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n    ${coordsFromIndexSnippet}\n    return ivec3(r, c, d);\n  }\n`;\n  }\n  const coordsFromIndexSnippet =\n      shader_util.getLogicalCoordinatesFromFlatIndex(['r', 'c', 'd'], shape);\n\n  return `\n    ivec3 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec3(r, c, d);\n    }\n  `;\n}\n\nfunction getOutputPackedNDCoords(\n    shape: number[], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n\n      int texelsInLogicalRow = int(ceil(float(outShape[3]) / 2.0));\n      int texelsInBatch = texelsInLogicalRow * int(ceil(float(outShape[2]) / 2.0));\n      int texelsInBatchN = texelsInBatch * outShape[1];\n\n      int b2 = index / texelsInBatchN;\n      index -= b2 * texelsInBatchN;\n\n      int b = index / texelsInBatch;\n      index -= b * texelsInBatch;\n\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec4(b2, b, r, c);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  const texelsInLogicalRow = Math.ceil(shape[shape.length - 1] / 2);\n  const texelsInBatch =\n      texelsInLogicalRow * Math.ceil(shape[shape.length - 2] / 2);\n  let texelsInBatchN = texelsInBatch;\n  let batches = ``;\n  let coords = 'b, r, c';\n\n  for (let b = 2; b < shape.length - 1; b++) {\n    texelsInBatchN *= shape[shape.length - b - 1];\n    batches = `\n      int b${b} = index / ${texelsInBatchN};\n      index -= b${b} * ${texelsInBatchN};\n    ` + batches;\n    coords = `b${b}, ` + coords;\n  }\n\n  return `\n    ivec${shape.length} getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n\n      ${batches}\n\n      int b = index / ${texelsInBatch};\n      index -= b * ${texelsInBatch};\n\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec${shape.length}(${coords});\n    }\n  `;\n}\n\nfunction getOutput4DCoords(\n    shape: [number, number, number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (enableShapeUniforms) {\n    const coordsFromIndexSnippet =\n        shader_util.getOutputLogicalCoordinatesFromFlatIndexByUniform(\n            ['r', 'c', 'd', 'd2'], shape);\n\n    return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n  }\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2'], shape);\n\n  return `\n    ivec4 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      ${coordsFromIndexSnippet}\n      return ivec4(r, c, d, d2);\n    }\n  `;\n}\n\nfunction getOutput5DCoords(\n    shape: [number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3'], shape);\n\n  return `\n    ivec5 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx * vec2(${texShape[0]},\n                             ${texShape[1]}));\n\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec5 outShape = ivec5(r, c, d, d2, d3);\n      return outShape;\n    }\n  `;\n}\n\nfunction getOutput6DCoords(\n    shape: [number, number, number, number, number, number],\n    texShape: [number, number]): string {\n  const coordsFromIndexSnippet = shader_util.getLogicalCoordinatesFromFlatIndex(\n      ['r', 'c', 'd', 'd2', 'd3', 'd4'], shape);\n\n  return `\n    ivec6 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n        vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n\n      ${coordsFromIndexSnippet}\n\n      ivec6 result = ivec6(r, c, d, d2, d3, d4);\n      return result;\n    }\n  `;\n}\n\nfunction getOutputPacked2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n        return 2 * ivec2(resultUV.yx * vec2(packedTexShape[0], packedTexShape[1]));\n      }\n    `;\n    }\n\n    return `\n      ivec2 getOutputCoords() {\n        return 2 * ivec2(resultUV.yx * vec2(${packedTexShape[0]}, ${\n        packedTexShape[1]}));\n      }\n    `;\n  }\n\n  // texels needed to accommodate a logical row\n  const texelsInLogicalRow = Math.ceil(shape[1] / 2);\n\n  /**\n   * getOutputCoords\n   *\n   * resTexRC: The rows and columns of the texels. If you move over one\n   * texel to the right in the packed texture, you are moving over one column\n   * (not two).\n   *\n   * index: The texel index\n   */\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 packedTexShape = ivec2(ceil(float(outTexShape[0]) / 2.0), ceil(float(outTexShape[1]) / 2.0));\n      int texelsInLogicalRow = int(ceil(float(outShape[1]) / 2.0));\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(packedTexShape[0], packedTexShape[1]));\n\n      int index = resTexRC.x * packedTexShape[1] + resTexRC.y;\n      int r = 2 * (index / texelsInLogicalRow);\n      int c = imod(index, texelsInLogicalRow) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n  }\n\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${packedTexShape[0]}, ${packedTexShape[1]}));\n\n      int index = resTexRC.x * ${packedTexShape[1]} + resTexRC.y;\n      int r = 2 * (index / ${texelsInLogicalRow});\n      int c = imod(index, ${texelsInLogicalRow}) * 2;\n\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getOutput2DCoords(\n    shape: [number, number], texShape: [number, number],\n    enableShapeUniforms: boolean): string {\n  if (util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(outTexShape[0], outTexShape[1]));\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        return ivec2(resultUV.yx * vec2(${texShape[0]}, ${texShape[1]}));\n      }\n    `;\n  }\n  if (shape[1] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(index, 0);\n      }\n    `;\n  }\n  if (shape[0] === 1) {\n    if (enableShapeUniforms) {\n      return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(outTexShape[0], outTexShape[1]));\n        int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n    }\n    return `\n      ivec2 getOutputCoords() {\n        ivec2 resTexRC = ivec2(resultUV.yx *\n                               vec2(${texShape[0]}, ${texShape[1]}));\n        int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n        return ivec2(0, index);\n      }\n    `;\n  }\n  if (enableShapeUniforms) {\n    return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(outTexShape[0], outTexShape[1]));\n      int index = resTexRC.x * outTexShape[1] + resTexRC.y;\n      int r = index / outShape[1];\n      int c = index - r * outShape[1];\n      return ivec2(r, c);\n    }\n  `;\n  }\n  return `\n    ivec2 getOutputCoords() {\n      ivec2 resTexRC = ivec2(resultUV.yx *\n                             vec2(${texShape[0]}, ${texShape[1]}));\n      int index = resTexRC.x * ${texShape[1]} + resTexRC.y;\n      int r = index / ${shape[1]};\n      int c = index - r * ${shape[1]};\n      return ivec2(r, c);\n    }\n  `;\n}\n\nfunction getFlatOffsetUniformName(texName: string): string {\n  return `offset${texName}`;\n}\n\nfunction getPackedSamplerScalar(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  return `\n    vec4 ${funcName}() {\n      return ${glsl.texture2D}(${texName}, halfCR);\n    }\n  `;\n}\n\nfunction getSamplerScalar(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  if (inputInfo.shapeInfo.isUniform) {\n    return `float ${funcName}() {return ${texName};}`;\n  }\n  const [texNumR, texNumC] = inputInfo.shapeInfo.texShape;\n  if (texNumR === 1 && texNumC === 1) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], ${\n        offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const [tNumR, tNumC] = inputInfo.shapeInfo.texShape;\n  return `\n    float ${funcName}() {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int index) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      vec2 uv = packedUVfrom1D(\n        packedTexShape[0], packedTexShape[1], index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  return `\n    vec4 ${funcName}(int index) {\n      vec2 uv = packedUVfrom1D(\n        ${packedTexShape[0]}, ${packedTexShape[1]}, index);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler1D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int index) {\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const tNumR = texShape[0];\n  const tNumC = texShape[1];\n\n  if (tNumC === 1 && tNumR === 1) {\n    return `\n      float ${funcName}(int index) {\n        return sampleTexture(${texName}, halfCR);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  if (tNumC === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2(0.5, (float(index + ${offset}) + 0.5) / ${tNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (tNumR === 1) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / float(${\n          texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    return `\n      float ${funcName}(int index) {\n        vec2 uv = vec2((float(index + ${offset}) + 0.5) / ${tNumC}.0, 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  return `\n    float ${funcName}(int index) {\n      vec2 uv = uvFromFlat(${tNumR}, ${tNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getPackedSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const glsl = getGlslDifferences();\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      vec4 ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n\n        return ${glsl.texture2D}(${texName}, uv);\n      }\n    `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom2D(valuesPerRow, packedTexShape[0], packedTexShape[1], row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const valuesPerRow = Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int row, int col) {\n      vec2 uv = packedUVfrom2D(${valuesPerRow}, ${packedTexShape[0]}, ${\n      packedTexShape[1]}, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler2D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n\n  if (texShape != null && util.arraysEqual(shape, texShape)) {\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        vec2 uv = (vec2(col, row) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n\n    const texNumR = texShape[0];\n    const texNumC = texShape[1];\n    return `\n    float ${funcName}(int row, int col) {\n      vec2 uv = (vec2(col, row) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col) {\n        int index = round(dot(vec2(row, col), vec2(${shape[1]}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const offset = getFlatOffsetUniformName(texName);\n  if (texNumC === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2(0.5, (index + 0.5) / float(${texName}TexShape[0]));\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2(0.5, (index + 0.5) / ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  if (texNumR === 1) {\n    // index is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col) {\n        float index = dot(vec3(row, col, ${offset}), vec3(${\n          texName}Shape[1], 1, 1));\n        vec2 uv = vec2((index + 0.5) / float(${texName}TexShape[1]), 0.5);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col) {\n      float index = dot(vec3(row, col, ${offset}), vec3(${shape[1]}, 1, 1));\n      vec2 uv = vec2((index + 0.5) / ${texNumC}.0, 0.5);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  if (enableShapeUniforms) {\n    return `\n      float ${funcName}(int row, int col) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${texName}Shape[1] + col + ${offset};\n        vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  return `\n  float ${funcName}(int row, int col) {\n    // Explicitly use integer operations as dot() only works on floats.\n    int index = row * ${shape[1]} + col + ${offset};\n    vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n    return sampleTexture(${texName}, uv);\n  }\n`;\n}\n\nfunction getPackedSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n\n  if (shape[0] === 1) {\n    const squeezedShape = shape.slice(1);\n    const keptDims = [1, 2];\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['b', 'row', 'col'];\n    return `\n        ${getPackedSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        vec4 ${funcName}(int b, int row, int col) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    return `\n    vec4 ${funcName}(int b, int row, int col) {\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int valuesPerRow = int(ceil(float(${texName}Shape[2]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[1]) / 2.0));\n      vec2 uv = packedUVfrom3D(\n        packedTexShape[0], packedTexShape[1], texelsInBatch, valuesPerRow, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[2] / 2);\n  const texelsInBatch = valuesPerRow * Math.ceil(shape[1] / 2);\n\n  return `\n    vec4 ${funcName}(int b, int row, int col) {\n      vec2 uv = packedUVfrom3D(\n        ${texNumR}, ${texNumC}, ${texelsInBatch}, ${valuesPerRow}, b, row, col);\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler3D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride0 = shape[1] * shape[2];\n  const stride1 = shape[2];\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const squeezedShape = newShape;\n  if (squeezedShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, squeezedShape);\n    const params = ['row', 'col', 'depth'];\n    return `\n        ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n        float ${funcName}(int row, int col, int depth) {\n          return ${funcName}(${getSqueezedParams(params, keptDims)});\n        }\n      `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth) {\n        int index = round(dot(vec3(row, col, depth),\n                          vec3(${stride0}, ${stride1}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        int stride1 = ${texName}Shape[2];\n        float texR = float(row);\n        float texC = dot(vec2(col, depth), vec2(stride1, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n        float ${funcName}(int row, int col, int depth) {\n          float texR = float(row);\n          float texC = dot(vec2(col, depth), vec2(${stride1}, 1));\n          vec2 uv = (vec2(texC, texR) + halfCR) /\n                     vec2(${texNumC}.0, ${texNumR}.0);\n          return sampleTexture(${texName}, uv);\n        }\n      `;\n  }\n\n  if (texNumC === stride1 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth) {\n        float texR = dot(vec2(row, col), vec2(${texName}Shape[1], 1));\n        float texC = float(depth);\n        vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texName}TexShape[1], ${\n          texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      float texR = dot(vec2(row, col), vec2(${shape[1]}, 1));\n      float texC = float(depth);\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}.0, ${texNumR}.0);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int stride0 = ${texName}Shape[1] * ${texName}Shape[2];\n      int stride1 = ${texName}Shape[2];\n      int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${texName}TexShape[1], index);\n      return sampleTexture(${texName}, uv);\n    }\n    `;\n  }\n  return `\n      float ${funcName}(int row, int col, int depth) {\n        // Explicitly use integer operations as dot() only works on floats.\n        int index = row * ${stride0} + col * ${stride1} + depth + ${offset};\n        vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n        return sampleTexture(${texName}, uv);\n      }\n  `;\n}\n\nfunction getPackedSamplerND(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const glsl = getGlslDifferences();\n  if (enableShapeUniforms) {\n    // TODO: support 5d and 6d\n    return `\n    vec4 ${funcName}(int b2, int b, int row, int col) {\n      int valuesPerRow = int(ceil(float(${texName}Shape[3]) / 2.0));\n      int texelsInBatch = valuesPerRow * int(ceil(float(${\n        texName}Shape[2]) / 2.0));\n      int index = b * texelsInBatch + (row / 2) * valuesPerRow + (col / 2);\n      texelsInBatch *= ${texName}Shape[1];\n      index = b2 * texelsInBatch + index;\n      ivec2 packedTexShape = ivec2(ceil(float(${\n        texName}TexShape[0]) / 2.0), ceil(float(${texName}TexShape[1]) / 2.0));\n      int texR = index / packedTexShape[1];\n      int texC = index - texR * packedTexShape[1];\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(packedTexShape[1], packedTexShape[0]); return ${\n        glsl.texture2D}(${texName}, uv);\n    }\n  `;\n  }\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const rank = shape.length;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const packedTexShape =\n      [Math.ceil(texShape[0] / 2), Math.ceil(texShape[1] / 2)];\n  const texNumR = packedTexShape[0];\n  const texNumC = packedTexShape[1];\n\n  const valuesPerRow = Math.ceil(shape[rank - 1] / 2);\n  let texelsInBatch = valuesPerRow * Math.ceil(shape[rank - 2] / 2);\n  let params = `int b, int row, int col`;\n  let index = `b * ${texelsInBatch} + (row / 2) * ${valuesPerRow} + (col / 2)`;\n  for (let b = 2; b < rank - 1; b++) {\n    params = `int b${b}, ` + params;\n    texelsInBatch *= shape[rank - b - 1];\n    index = `b${b} * ${texelsInBatch} + ` + index;\n  }\n  return `\n    vec4 ${funcName}(${params}) {\n      int index = ${index};\n      int texR = index / ${texNumC};\n      int texC = index - texR * ${texNumC};\n      vec2 uv = (vec2(texC, texR) + halfCR) / vec2(${texNumC}, ${texNumR});\n      return ${glsl.texture2D}(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler4D(\n    inputInfo: InputInfo, enableShapeUniforms: boolean): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride2 = shape[3];\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo, enableShapeUniforms)}\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        int index = round(dot(vec4(row, col, depth, depth2),\n                          vec4(${stride0}, ${stride1}, ${stride2}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  const stride2Str = `int stride2 = ${texName}Shape[3];`;\n  const stride1Str = `int stride1 = ${texName}Shape[2] * stride2;`;\n  const stride0Str = `int stride0 = ${texName}Shape[1] * stride1;`;\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        ${stride2Str}\n        ${stride1Str}\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(stride1, stride2, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = float(row);\n        float texC =\n            dot(vec3(col, depth, depth2),\n                vec3(${stride1}, ${stride2}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride2 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    if (enableShapeUniforms) {\n      return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${texName}Shape[1] * ${texName}Shape[2], ${\n          texName}Shape[2], 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texName}TexShape[1], ${texName}TexShape[0]);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n    }\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2) {\n        float texR = dot(vec3(row, col, depth),\n                         vec3(${shape[1] * shape[2]}, ${shape[2]}, 1));\n        float texC = float(depth2);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  if (enableShapeUniforms) {\n    return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      ${stride2Str}\n      ${stride1Str}\n      ${stride0Str}\n      int index = row * stride0 + col * stride1 +\n          depth * stride2 + depth2;\n      vec2 uv = uvFromFlat(${texName}TexShape[0], ${\n        texName}TexShape[1], index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n  }\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} +\n          depth * ${stride2} + depth2;\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index + ${offset});\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler5D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n  const stride3 = shape[4];\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float index = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          depth3;\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n                         vec4(${stride1}, ${stride2}, ${stride3}, 1));\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  if (texNumC === stride3 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n        float texR = dot(\n          vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3]},\n               ${shape[2] * shape[3]}, ${shape[3]}, 1));\n        int texC = depth3;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth, int depth2, int depth3) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getSampler6D(inputInfo: InputInfo): string {\n  const shape = inputInfo.shapeInfo.logicalShape;\n  const texName = inputInfo.name;\n  const funcName = 'get' + texName.charAt(0).toUpperCase() + texName.slice(1);\n\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  if (newShape.length < shape.length) {\n    const newInputInfo = squeezeInputInfo(inputInfo, newShape);\n    const params = ['row', 'col', 'depth', 'depth2', 'depth3', 'depth4'];\n    return `\n      ${getSamplerFromInInfo(newInputInfo)}\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        return ${funcName}(${getSqueezedParams(params, keptDims)});\n      }\n    `;\n  }\n\n  const stride4 = shape[5];\n  const stride3 = shape[4] * stride4;\n  const stride2 = shape[3] * stride3;\n  const stride1 = shape[2] * stride2;\n  const stride0 = shape[1] * stride1;\n\n  if (inputInfo.shapeInfo.isUniform) {\n    // Uniform arrays will be less than 65505 (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n        int index = round(dot(\n          vec4(row, col, depth, depth2),\n          vec4(${stride0}, ${stride1}, ${stride2}, ${stride3})) +\n          dot(\n            vec2(depth3, depth4),\n            vec2(${stride4}, 1)));\n        ${getUniformSampler(inputInfo)}\n      }\n    `;\n  }\n\n  const flatOffset = inputInfo.shapeInfo.flatOffset;\n  const texShape = inputInfo.shapeInfo.texShape;\n  const texNumR = texShape[0];\n  const texNumC = texShape[1];\n  if (texNumC === stride0 && flatOffset == null) {\n    // texC is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        int texR = row;\n        float texC = dot(vec4(col, depth, depth2, depth3),\n          vec4(${stride1}, ${stride2}, ${stride3}, ${stride4})) +\n               float(depth4);\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                   vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  if (texNumC === stride4 && flatOffset == null) {\n    // texR is used directly as physical (no risk of float16 overflow).\n    return `\n      float ${funcName}(int row, int col, int depth,\n                    int depth2, int depth3, int depth4) {\n        float texR = dot(vec4(row, col, depth, depth2),\n          vec4(${shape[1] * shape[2] * shape[3] * shape[4]},\n               ${shape[2] * shape[3] * shape[4]},\n               ${shape[3] * shape[4]},\n               ${shape[4]})) + float(depth3);\n        int texC = depth4;\n        vec2 uv = (vec2(texC, texR) + halfCR) /\n                  vec2(${texNumC}.0, ${texNumR}.0);\n        return sampleTexture(${texName}, uv);\n      }\n    `;\n  }\n  const offset = getFlatOffsetUniformName(texName);\n  return `\n    float ${funcName}(int row, int col, int depth,\n                  int depth2, int depth3, int depth4) {\n      // Explicitly use integer operations as dot() only works on floats.\n      int index = row * ${stride0} + col * ${stride1} + depth * ${stride2} +\n          depth2 * ${stride3} + depth3 * ${stride4} + depth4 + ${offset};\n      vec2 uv = uvFromFlat(${texNumR}, ${texNumC}, index);\n      return sampleTexture(${texName}, uv);\n    }\n  `;\n}\n\nfunction getUniformSampler(inputInfo: InputInfo): string {\n  const texName = inputInfo.name;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n\n  if (inSize < 2) {\n    return `return ${texName};`;\n  }\n\n  return `\n    for (int i = 0; i < ${inSize}; i++) {\n      if (i == index) {\n        return ${texName}[i];\n      }\n    }\n  `;\n}\n\nfunction getPackedSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n\n  const type = getCoordsDataType(outRank);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  let output = `return outputValue;`;\n  const inSize = util.sizeFromShape(inputInfo.shapeInfo.logicalShape);\n  const isInputScalar = inSize === 1;\n  const outSize = util.sizeFromShape(outShapeInfo.logicalShape);\n  const isOutputScalar = outSize === 1;\n\n  if (inRank === 1 && !isInputScalar && !isOutputScalar) {\n    output = `\n      return vec4(outputValue.xy, outputValue.xy);\n    `;\n  } else if (isInputScalar && !isOutputScalar) {\n    if (outRank === 1) {\n      output = `\n        return vec4(outputValue.x, outputValue.x, 0., 0.);\n      `;\n    } else {\n      output = `\n        return vec4(outputValue.x);\n      `;\n    }\n  } else if (broadcastDims.length) {\n    const rows = inRank - 2;\n    const cols = inRank - 1;\n\n    if (broadcastDims.indexOf(rows) > -1 && broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.x);`;\n    } else if (broadcastDims.indexOf(rows) > -1) {\n      output = `return vec4(outputValue.x, outputValue.y, ` +\n          `outputValue.x, outputValue.y);`;\n    } else if (broadcastDims.indexOf(cols) > -1) {\n      output = `return vec4(outputValue.xx, outputValue.zz);`;\n    }\n  }\n\n  return `\n    vec4 ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      vec4 outputValue = get${texFuncSnippet}(${unpackedCoordsSnippet});\n      ${output}\n    }\n  `;\n}\n\nfunction getSamplerAtOutputCoords(\n    inputInfo: InputInfo, outShapeInfo: ShapeInfo) {\n  const texName = inputInfo.name;\n  const texFuncSnippet = texName.charAt(0).toUpperCase() + texName.slice(1);\n  const funcName = 'get' + texFuncSnippet + 'AtOutCoords';\n  const outTexShape = outShapeInfo.texShape;\n  const inTexShape = inputInfo.shapeInfo.texShape;\n  const inRank = inputInfo.shapeInfo.logicalShape.length;\n  const outRank = outShapeInfo.logicalShape.length;\n\n  if (!inputInfo.shapeInfo.isUniform && inRank === outRank &&\n      inputInfo.shapeInfo.flatOffset == null &&\n      util.arraysEqual(inTexShape, outTexShape)) {\n    return `\n      float ${funcName}() {\n        return sampleTexture(${texName}, resultUV);\n      }\n    `;\n  }\n\n  const type = getCoordsDataType(outRank);\n  const broadcastDims = getBroadcastDims(\n      inputInfo.shapeInfo.logicalShape, outShapeInfo.logicalShape);\n  const rankDiff = outRank - inRank;\n  let coordsSnippet: string;\n  const fields = ['x', 'y', 'z', 'w', 'u', 'v'];\n\n  if (inRank === 0) {\n    coordsSnippet = '';\n  } else if (outRank < 2 && broadcastDims.length >= 1) {\n    coordsSnippet = 'coords = 0;';\n  } else {\n    coordsSnippet =\n        broadcastDims.map(d => `coords.${fields[d + rankDiff]} = 0;`)\n            .join('\\n');\n  }\n  let unpackedCoordsSnippet = '';\n  if (outRank < 2 && inRank > 0) {\n    unpackedCoordsSnippet = 'coords';\n  } else {\n    unpackedCoordsSnippet = inputInfo.shapeInfo.logicalShape\n                                .map((s, i) => `coords.${fields[i + rankDiff]}`)\n                                .join(', ');\n  }\n\n  return `\n    float ${funcName}() {\n      ${type} coords = getOutputCoords();\n      ${coordsSnippet}\n      return get${texFuncSnippet}(${unpackedCoordsSnippet});\n    }\n  `;\n}\n\nexport function getCoordsDataType(rank: number): string {\n  if (rank <= 1) {\n    return 'int';\n  } else if (rank === 2) {\n    return 'ivec2';\n  } else if (rank === 3) {\n    return 'ivec3';\n  } else if (rank === 4) {\n    return 'ivec4';\n  } else if (rank === 5) {\n    return 'ivec5';\n  } else if (rank === 6) {\n    return 'ivec6';\n  } else {\n    throw Error(`GPU for rank ${rank} is not yet supported`);\n  }\n}\n\nexport function getUniformInfoFromShape(\n    isPacked: boolean, shape: number[], texShape: number[]) {\n  const {newShape, keptDims} = util.squeezeShape(shape);\n  const rank = shape.length;\n  const useSqueezePackedShape = isPacked && rank === 3 && shape[0] === 1;\n  const squeezeShape = useSqueezePackedShape ? shape.slice(1) : newShape;\n  const useSqueezeShape =\n      (!isPacked && rank > 1 && !util.arraysEqual(shape, texShape) &&\n       newShape.length < rank) ||\n      useSqueezePackedShape;\n  const uniformShape = useSqueezeShape ? squeezeShape : shape;\n  return {useSqueezeShape, uniformShape, keptDims};\n}\n\n/** Returns a new input info (a copy) that has a squeezed logical shape. */\nexport function squeezeInputInfo(\n    inInfo: InputInfo, squeezedShape: number[]): InputInfo {\n  // Deep copy.\n  const newInputInfo: InputInfo = JSON.parse(JSON.stringify(inInfo));\n  newInputInfo.shapeInfo.logicalShape = squeezedShape;\n  return newInputInfo;\n}\n\nfunction getSqueezedParams(params: string[], keptDims: number[]): string {\n  return keptDims.map(d => params[d]).join(', ');\n}\n"]},"metadata":{},"sourceType":"module"}