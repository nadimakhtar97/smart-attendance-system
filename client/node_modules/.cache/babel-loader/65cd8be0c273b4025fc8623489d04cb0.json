{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\nimport { util } from '@tensorflow/tfjs-core';\nimport { AssertionError, ValueError } from '../errors'; // tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\n\nexport function pyListRepeat(value, numValues) {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray = [];\n\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\nexport function assert(val, message) {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\n\nexport function count(array, refernce) {\n  let counter = 0;\n\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n\n  return counter;\n}\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\n\nexport function singletonOrArray(xs) {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n\n  return xs;\n}\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\n\nexport function toList(x) {\n  if (Array.isArray(x)) {\n    return x;\n  }\n\n  return [x];\n}\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\n\nexport function objectListUid(objs) {\n  const objectList = toList(objs);\n  let retVal = '';\n\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(`Object ${obj} passed to objectListUid without an id`);\n    }\n\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\n\nexport function toSnakeCase(name) {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure = intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n\n  return 'private' + insecure;\n}\nexport function toCamelCase(identifier) {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  } // Check for the underscore indicating snake_case\n\n\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n} // tslint:disable-next-line:no-any\n\nlet _GLOBAL_CUSTOM_OBJECTS = {};\nexport function serializeKerasObject(instance) {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n\n  const dict = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\n\nfunction convertNDArrayScalarsInConfig(config) {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n\n    for (const field of fields) {\n      const value = config[field];\n\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' && typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value);\n        }\n      }\n    }\n  }\n}\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\n\n\nexport function deserializeKerasObject(identifier) {\n  let moduleObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let customObjects = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  let printableModuleName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'object';\n  let fastWeightInit = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n\n      if (fn == null) {\n        throw new ValueError(`Unknown ${printableModuleName}: ${identifier}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`); // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(`${printableModuleName}: Improper config format: ` + `${JSON.stringify(config)}.\\n` + `'className' and 'config' must set.`);\n    }\n\n    const className = config['className'];\n    let cls, fromConfig;\n\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n\n    if (cls == null) {\n      throw new ValueError(`Unknown ${printableModuleName}: ${className}. ` + `This may be due to one of the following reasons:\\n` + `1. The ${printableModuleName} is defined in Python, in which ` + `case it needs to be ported to TensorFlow.js or your JavaScript ` + `code.\\n` + `2. The custom ${printableModuleName} is defined in JavaScript, ` + `but is not registered properly with ` + `tf.serialization.registerClass().`); // TODO(cais): Add link to tutorial page on custom layers.\n    }\n\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {};\n\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      } // Add the customObjects to config\n\n\n      const nestedConfig = config['config'];\n      nestedConfig['customObjects'] = customObjectsCombined;\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj = fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = Object.assign({}, _GLOBAL_CUSTOM_OBJECTS);\n\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      } // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n\n\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = Object.assign({}, backupCustomObjects);\n      return returnObj;\n    }\n  }\n}\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\n\nexport function numberCompare(a, b) {\n  return a < b ? -1 : a > b ? 1 : 0;\n}\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\n\nexport function reverseNumberCompare(a, b) {\n  return -1 * numberCompare(a, b);\n}\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\n\nexport function stringToDType(dtype) {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\n\nexport function stringsEqual(xs, ys) {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n\n  if (xs.length !== ys.length) {\n    return false;\n  }\n\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\n\nexport function unique(xs) {\n  if (xs == null) {\n    return xs;\n  }\n\n  const out = []; // TODO(cais): Maybe improve performance by sorting.\n\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n\n  return out;\n}\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\n\nexport function isObjectEmpty(obj) {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\n\nexport function checkStringTypeUnionValue(values, label, value) {\n  if (value == null) {\n    return;\n  }\n\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${values} or null/undefined.`);\n  }\n}\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\n\nexport function checkArrayTypeAndLength(x, expectedType) {\n  let minLength = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let maxLength = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Infinity;\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return Array.isArray(x) && x.length >= minLength && x.length <= maxLength && x.every(e => typeof e === expectedType);\n} // tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\n\nexport function assertPositiveInteger(value, name) {\n  if (Array.isArray(value)) {\n    util.assert(value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach((v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(Number.isInteger(value) && value > 0, () => `Expected ${name} to be a positive integer, but got ` + `${formatAsFriendlyString(value)}.`);\n  }\n}\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\n\nexport function formatAsFriendlyString(value) {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\n\nexport function debounce(f, waitMs, nowFunc) {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult;\n\n  const f2 = function () {\n    const now = nowFunc != null ? nowFunc() : util.now();\n\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n\n    lastTime = now;\n    lastResult = f(...arguments);\n    return lastResult;\n  };\n\n  return f2;\n}\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\n\nexport function mapActivationToFusedKernel(activationName) {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n\n  return null;\n}\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\n\nexport function getCartesianProductOfValues() {\n  for (var _len = arguments.length, arrayOfValues = new Array(_len), _key = 0; _key < _len; _key++) {\n    arrayOfValues[_key] = arguments[_key];\n  }\n\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values.map(value => {\n      return products.map(prevValue => [...prevValue, value]);\n    }).reduce((flattenedProduct, unflattenedProduct) => {\n      return flattenedProduct.concat(unflattenedProduct);\n    }, []);\n  }, []);\n}","map":{"version":3,"mappings":"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","names":["util","AssertionError","ValueError","pyListRepeat","value","numValues","Array","isArray","newArray","i","concat","fill","assert","val","message","count","array","refernce","counter","item","singletonOrArray","xs","length","toList","x","objectListUid","objs","objectList","retVal","obj","id","Math","abs","toSnakeCase","name","intermediate","replace","insecure","toLowerCase","toCamelCase","identifier","indexOf","m","p1","toUpperCase","_GLOBAL_CUSTOM_OBJECTS","serializeKerasObject","instance","undefined","dict","getClassName","getConfig","convertNDArrayScalarsInConfig","config","forEach","configItem","fields","Object","keys","field","deserializeKerasObject","moduleObjects","customObjects","printableModuleName","fastWeightInit","functionName","fn","JSON","stringify","className","cls","fromConfig","customObjectsCombined","key","nestedConfig","backupCustomObjects","returnObj","numberCompare","a","b","reverseNumberCompare","stringToDType","dtype","stringsEqual","ys","unique","out","push","isObjectEmpty","hasOwnProperty","checkStringTypeUnionValue","values","label","checkArrayTypeAndLength","expectedType","minLength","maxLength","Infinity","every","e","assertPositiveInteger","v","Number","isInteger","formatAsFriendlyString","map","join","debounce","f","waitMs","nowFunc","lastTime","now","lastResult","f2","mapActivationToFusedKernel","activationName","getCartesianProductOfValues","arrayOfValues","reduce","products","prevValue","flattenedProduct","unflattenedProduct"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/utils/generic_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original source: utils/generic_utils.py */\n\nimport {DataType, fused, serialization, util} from '@tensorflow/tfjs-core';\n\nimport {AssertionError, ValueError} from '../errors';\n\n// tslint:enable\n\n/**\n * If `value` is an Array, equivalent to Python's `value * numValues`.\n * If `value` is not an Array, equivalent to Python's `[value] * numValues`\n */\n// tslint:disable-next-line:no-any\nexport function pyListRepeat(value: any, numValues: number): any[] {\n  if (Array.isArray(value)) {\n    // tslint:disable-next-line:no-any\n    let newArray: any[] = [];\n    for (let i = 0; i < numValues; i++) {\n      newArray = newArray.concat(value);\n    }\n    return newArray;\n  } else {\n    const newArray = new Array(numValues);\n    newArray.fill(value);\n    return newArray;\n  }\n}\n\nexport function assert(val: boolean, message?: string): void {\n  if (!val) {\n    throw new AssertionError(message);\n  }\n}\n\n/**\n * Count the number of elements of the `array` that are equal to `reference`.\n */\nexport function count<T>(array: T[], refernce: T) {\n  let counter = 0;\n  for (const item of array) {\n    if (item === refernce) {\n      counter++;\n    }\n  }\n  return counter;\n}\n\n/**\n * If an array is of length 1, just return the first element. Otherwise, return\n * the full array.\n * @param tensors\n */\nexport function singletonOrArray<T>(xs: T[]): T|T[] {\n  if (xs.length === 1) {\n    return xs[0];\n  }\n  return xs;\n}\n\n/**\n * Normalizes a list/tensor into a list.\n *\n * If a tensor is passed, we return\n * a list of size 1 containing the tensor.\n *\n * @param x target object to be normalized.\n */\n// tslint:disable-next-line:no-any\nexport function toList(x: any): any[] {\n  if (Array.isArray(x)) {\n    return x;\n  }\n  return [x];\n}\n\n/**\n * Generate a UID for a list\n */\n// tslint:disable-next-line:no-any\nexport function objectListUid(objs: any|any[]): string {\n  const objectList = toList(objs);\n  let retVal = '';\n  for (const obj of objectList) {\n    if (obj.id == null) {\n      throw new ValueError(\n          `Object ${obj} passed to objectListUid without an id`);\n    }\n    if (retVal !== '') {\n      retVal = retVal + ', ';\n    }\n    retVal = `${retVal}${Math.abs(obj.id)}`;\n  }\n  return retVal;\n}\n/**\n * Converts string to snake-case.\n * @param name\n */\nexport function toSnakeCase(name: string): string {\n  const intermediate = name.replace(/(.)([A-Z][a-z0-9]+)/g, '$1_$2');\n  const insecure =\n      intermediate.replace(/([a-z])([A-Z])/g, '$1_$2').toLowerCase();\n  /*\n   If the class is private the name starts with \"_\" which is not secure\n   for creating scopes. We prefix the name with \"private\" in this case.\n   */\n  if (insecure[0] !== '_') {\n    return insecure;\n  }\n  return 'private' + insecure;\n}\n\nexport function toCamelCase(identifier: string): string {\n  // quick return for empty string or single character strings\n  if (identifier.length <= 1) {\n    return identifier;\n  }\n  // Check for the underscore indicating snake_case\n  if (identifier.indexOf('_') === -1) {\n    return identifier;\n  }\n  return identifier.replace(/[_]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n// tslint:disable-next-line:no-any\nlet _GLOBAL_CUSTOM_OBJECTS = {} as {[objName: string]: any};\n\nexport function serializeKerasObject(instance: serialization.Serializable):\n    serialization.ConfigDictValue {\n  if (instance === null || instance === undefined) {\n    return null;\n  }\n  const dict: serialization.ConfigDictValue = {};\n  dict['className'] = instance.getClassName();\n  dict['config'] = instance.getConfig();\n  return dict;\n}\n\n/**\n * Replace ndarray-style scalar objects in serialization objects with numbers.\n *\n * Background: In some versions of tf.keras, certain scalar values in the HDF5\n * model save file can be serialized as: `{'type': 'ndarray', 'value': num}`,\n * where in `num` is a plain number. This method converts such serialization\n * to a `number`.\n *\n * @param config The keras-format serialization object to be processed\n *   (in place).\n */\nfunction convertNDArrayScalarsInConfig(config: serialization.ConfigDictValue):\n    void {\n  if (config == null || typeof config !== 'object') {\n    return;\n  } else if (Array.isArray(config)) {\n    config.forEach(configItem => convertNDArrayScalarsInConfig(configItem));\n  } else {\n    const fields = Object.keys(config);\n    for (const field of fields) {\n      const value = config[field];\n      if (value != null && typeof value === 'object') {\n        if (!Array.isArray(value) && value['type'] === 'ndarray' &&\n            typeof value['value'] === 'number') {\n          config[field] = value['value'];\n        } else {\n          convertNDArrayScalarsInConfig(value as serialization.ConfigDict);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Deserialize a saved Keras Object\n * @param identifier either a string ID or a saved Keras dictionary\n * @param moduleObjects a list of Python class names to object constructors\n * @param customObjects a list of Python class names to object constructors\n * @param printableModuleName debug text for the object being reconstituted\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns a TensorFlow.js Layers object\n */\n// tslint:disable:no-any\nexport function deserializeKerasObject(\n    identifier: string|serialization.ConfigDict,\n    moduleObjects = {} as {[objName: string]: any},\n    customObjects = {} as {[objName: string]: any},\n    printableModuleName = 'object', fastWeightInit = false): any {\n  // tslint:enable\n  if (typeof identifier === 'string') {\n    const functionName = identifier;\n    let fn;\n    if (functionName in customObjects) {\n      fn = customObjects[functionName];\n    } else if (functionName in _GLOBAL_CUSTOM_OBJECTS) {\n      fn = _GLOBAL_CUSTOM_OBJECTS[functionName];\n    } else {\n      fn = moduleObjects[functionName];\n      if (fn == null) {\n        throw new ValueError(\n            `Unknown ${printableModuleName}: ${identifier}. ` +\n            `This may be due to one of the following reasons:\\n` +\n            `1. The ${printableModuleName} is defined in Python, in which ` +\n            `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n            `code.\\n` +\n            `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n            `but is not registered properly with ` +\n            `tf.serialization.registerClass().`);\n        // TODO(cais): Add link to tutorial page on custom layers.\n      }\n    }\n    return fn;\n  } else {\n    // In this case we are dealing with a Keras config dictionary.\n    const config = identifier;\n    if (config['className'] == null || config['config'] == null) {\n      throw new ValueError(\n          `${printableModuleName}: Improper config format: ` +\n          `${JSON.stringify(config)}.\\n` +\n          `'className' and 'config' must set.`);\n    }\n    const className = config['className'] as string;\n    let cls, fromConfig;\n    if (className in customObjects) {\n      [cls, fromConfig] = customObjects[className];\n    } else if (className in _GLOBAL_CUSTOM_OBJECTS) {\n      [cls, fromConfig] = _GLOBAL_CUSTOM_OBJECTS['className'];\n    } else if (className in moduleObjects) {\n      [cls, fromConfig] = moduleObjects[className];\n    }\n    if (cls == null) {\n      throw new ValueError(\n          `Unknown ${printableModuleName}: ${className}. ` +\n          `This may be due to one of the following reasons:\\n` +\n          `1. The ${printableModuleName} is defined in Python, in which ` +\n          `case it needs to be ported to TensorFlow.js or your JavaScript ` +\n          `code.\\n` +\n          `2. The custom ${printableModuleName} is defined in JavaScript, ` +\n          `but is not registered properly with ` +\n          `tf.serialization.registerClass().`);\n      // TODO(cais): Add link to tutorial page on custom layers.\n    }\n    if (fromConfig != null) {\n      // Porting notes: Instead of checking to see whether fromConfig accepts\n      // customObjects, we create a customObjects dictionary and tack it on to\n      // config['config'] as config['config'].customObjects. Objects can use it,\n      // if they want.\n\n      // tslint:disable-next-line:no-any\n      const customObjectsCombined = {} as {[objName: string]: any};\n      for (const key of Object.keys(_GLOBAL_CUSTOM_OBJECTS)) {\n        customObjectsCombined[key] = _GLOBAL_CUSTOM_OBJECTS[key];\n      }\n      for (const key of Object.keys(customObjects)) {\n        customObjectsCombined[key] = customObjects[key];\n      }\n      // Add the customObjects to config\n      const nestedConfig = config['config'] as serialization.ConfigDict;\n      nestedConfig['customObjects'] = customObjectsCombined;\n\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      convertNDArrayScalarsInConfig(config['config']);\n      const returnObj =\n          fromConfig(cls, config['config'], customObjects, fastWeightInit);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n\n      return returnObj;\n    } else {\n      // Then `cls` may be a function returning a class.\n      // In this case by convention `config` holds\n      // the kwargs of the function.\n      const backupCustomObjects = {..._GLOBAL_CUSTOM_OBJECTS};\n      for (const key of Object.keys(customObjects)) {\n        _GLOBAL_CUSTOM_OBJECTS[key] = customObjects[key];\n      }\n      // In python this is **config['config'], for tfjs-layers we require\n      // classes that use this fall-through construction method to take\n      // a config interface that mimics the expansion of named parameters.\n      const returnObj = new cls(config['config']);\n      _GLOBAL_CUSTOM_OBJECTS = {...backupCustomObjects};\n      return returnObj;\n    }\n  }\n}\n\n/**\n * Compares two numbers for sorting.\n * @param a\n * @param b\n */\nexport function numberCompare(a: number, b: number) {\n  return (a < b) ? -1 : ((a > b) ? 1 : 0);\n}\n\n/**\n * Comparison of two numbers for reverse sorting.\n * @param a\n * @param b\n */\nexport function reverseNumberCompare(a: number, b: number) {\n  return -1 * numberCompare(a, b);\n}\n\n/**\n * Convert a string into the corresponding DType.\n * @param dtype\n * @returns An instance of DType.\n */\nexport function stringToDType(dtype: string): DataType {\n  switch (dtype) {\n    case 'float32':\n      return 'float32';\n    default:\n      throw new ValueError(`Invalid dtype: ${dtype}`);\n  }\n}\n\n/**\n * Test the element-by-element equality of two Arrays of strings.\n * @param xs First array of strings.\n * @param ys Second array of strings.\n * @returns Wether the two arrays are all equal, element by element.\n */\nexport function stringsEqual(xs: string[], ys: string[]): boolean {\n  if (xs == null || ys == null) {\n    return xs === ys;\n  }\n  if (xs.length !== ys.length) {\n    return false;\n  }\n  for (let i = 0; i < xs.length; ++i) {\n    if (xs[i] !== ys[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Get the unique elements of an array.\n * @param xs Array.\n * @returns An Array consisting of the unique elements in `xs`.\n */\nexport function unique<T>(xs: T[]): T[] {\n  if (xs == null) {\n    return xs;\n  }\n  const out: T[] = [];\n  // TODO(cais): Maybe improve performance by sorting.\n  for (const x of xs) {\n    if (out.indexOf(x) === -1) {\n      out.push(x);\n    }\n  }\n  return out;\n}\n\n/**\n * Determine if an Object is empty (i.e., does not have own properties).\n * @param obj Object\n * @returns Whether the Object is empty.\n * @throws ValueError: If object is `null` or `undefined`.\n */\nexport function isObjectEmpty(obj: {}): boolean {\n  if (obj == null) {\n    throw new ValueError(`Invalid value in obj: ${JSON.stringify(obj)}`);\n  }\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Helper function used to build type union/enum run-time checkers.\n * @param values The list of allowed values.\n * @param label A string name for the type\n * @param value The value to test.\n * @throws ValueError: If the value is not in values nor `undefined`/`null`.\n */\nexport function checkStringTypeUnionValue(\n    values: string[], label: string, value: string): void {\n  if (value == null) {\n    return;\n  }\n  if (values.indexOf(value) < 0) {\n    throw new ValueError(`${value} is not a valid ${label}.  Valid values are ${\n        values} or null/undefined.`);\n  }\n}\n\n/**\n * Helper function for verifying the types of inputs.\n *\n * Ensures that the elements of `x` are all of type `expectedType`.\n * Also verifies that the length of `x` is within bounds.\n *\n * @param x Object to test.\n * @param expectedType The string expected type of all of the elements in the\n * Array.\n * @param minLength Return false if x.length is less than this.\n * @param maxLength Return false if x.length is greater than this.\n * @returns true if and only if `x` is an `Array<expectedType>` with\n * length >= `minLength` and <= `maxLength`.\n */\n// tslint:disable:no-any\nexport function checkArrayTypeAndLength(\n    x: any, expectedType: string, minLength = 0,\n    maxLength = Infinity): boolean {\n  assert(minLength >= 0);\n  assert(maxLength >= minLength);\n  return (\n      Array.isArray(x) && x.length >= minLength && x.length <= maxLength &&\n      x.every(e => typeof e === expectedType));\n}\n// tslint:enable:no-any\n\n/**\n * Assert that a value or an array of value are positive integer.\n *\n * @param value The value being asserted on. May be a single number or an array\n *   of numbers.\n * @param name Name of the value, used to make the error message.\n */\nexport function assertPositiveInteger(value: number|number[], name: string) {\n  if (Array.isArray(value)) {\n    util.assert(\n        value.length > 0, () => `${name} is unexpectedly an empty array.`);\n    value.forEach(\n        (v, i) => assertPositiveInteger(v, `element ${i + 1} of ${name}`));\n  } else {\n    util.assert(\n        Number.isInteger(value) && value > 0,\n        () => `Expected ${name} to be a positive integer, but got ` +\n            `${formatAsFriendlyString(value)}.`);\n  }\n}\n\n/**\n * Format a value into a display-friendly, human-readable fashion.\n *\n * - `null` is formatted as `'null'`\n * - Strings are formated with flanking pair of quotes.\n * - Arrays are formatted with flanking pair of square brackets.\n *\n * @param value The value to display.\n * @return Formatted string.\n */\n// tslint:disable-next-line:no-any\nexport function formatAsFriendlyString(value: any): string {\n  if (value === null) {\n    return 'null';\n  } else if (Array.isArray(value)) {\n    return '[' + value.map(v => formatAsFriendlyString(v)).join(',') + ']';\n  } else if (typeof value === 'string') {\n    return `\"${value}\"`;\n  } else {\n    return `${value}`;\n  }\n}\n\n/**\n * Returns a function `f2` (decorator) which wraps the original function\n * `f`. `f2` guarantees that `f` can be called at most once\n * every `waitMs` ms. If `f2` is called more often, it will return\n * the last returned result of `f`.\n *\n * @param f The original function `f` to wrap.\n * @param waitMs The time between two consecutive calls to `f` in ms.\n */\nexport function debounce<T>(\n    f: (...args: Array<{}>) => T, waitMs: number,\n    nowFunc?: Function): (...args: Array<{}>) => T {\n  let lastTime = nowFunc != null ? nowFunc() : util.now();\n  let lastResult: T;\n  const f2 = (...args: Array<{}>) => {\n    const now = nowFunc != null ? nowFunc() : util.now();\n    if (now - lastTime < waitMs) {\n      return lastResult;\n    }\n    lastTime = now;\n    lastResult = f(...args);\n    return lastResult;\n  };\n  return f2;\n}\n\n/**\n * Returns the fusable activation given a layers identifier.\n *\n * @param activationName The layers identifier string.\n * @return The name of the fusable activation.\n */\nexport function mapActivationToFusedKernel(activationName: string):\n    fused.Activation {\n  if (activationName === 'relu') {\n    return 'relu';\n  }\n  if (activationName === 'linear') {\n    return 'linear';\n  }\n  if (activationName === 'elu') {\n    return 'elu';\n  }\n  return null;\n}\n\ntype PossibleValues = Array<Array<boolean|string|number>>;\n\n/**\n * Returns the cartesian product of sets of values.\n * This works the same as itertools.product in Python.\n *\n * Example:\n *\n * filters = [128, 256, 512]\n * paddings = ['same', 'valid']\n *\n * product = [ [128, 'same'], [128, 'valid'], [256, 'same'], [256, 'valid'],\n * [512, 'same'], [512, 'valid']]\n *\n * @param arrayOfValues List/array of values.\n * @return The cartesian product.\n */\nexport function getCartesianProductOfValues(...arrayOfValues: PossibleValues):\n    PossibleValues {\n  assert(arrayOfValues.length > 0, 'arrayOfValues is empty');\n\n  for (const values of arrayOfValues) {\n    assert(Array.isArray(values), 'one of the values is not an array');\n    assert(values.length > 0, 'one of the values is empty');\n  }\n\n  return arrayOfValues.reduce((products, values) => {\n    if (products.length === 0) {\n      return values.map(value => [value]);\n    }\n\n    return values\n        .map(value => {\n          return products.map((prevValue) => [...prevValue, value]);\n        })\n        .reduce((flattenedProduct, unflattenedProduct) => {\n          return flattenedProduct.concat(unflattenedProduct);\n        }, []);\n  }, [] as PossibleValues);\n}\n"]},"metadata":{},"sourceType":"module"}