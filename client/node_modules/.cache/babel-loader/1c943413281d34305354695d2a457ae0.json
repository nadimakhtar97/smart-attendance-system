{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nexport function concat(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    axis\n  } = attrs;\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  } // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n\n\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n\n  if ($inputs.length === 1) {\n    return identity({\n      inputs: {\n        x: $inputs[0]\n      },\n      backend\n    });\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n  return concatImpl($inputs, $axis, backend);\n}\nexport const concatConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,MAAtB,EAA+FC,IAA/F,QAA0G,uBAA1G;AAGA,SAAQC,UAAR,QAAyB,eAAzB;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAUC,MAAV,CACFC,IADE,EAEuE;AAE3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAASD,KAAf;AAEA,QAAME,KAAK,GAAGT,IAAI,CAACU,cAAL,CAAoBF,IAApB,EAA0BH,MAAM,CAAC,CAAD,CAAN,CAAUM,KAApC,EAA2C,CAA3C,CAAd;AACA,QAAMC,QAAQ,GACVd,YAAY,CAACe,eAAb,CAA6BR,MAAM,CAACS,GAAP,CAAWC,CAAC,IAAIA,CAAC,CAACJ,KAAlB,CAA7B,EAAuDF,KAAvD,CADJ;;AAGA,MAAIT,IAAI,CAACgB,aAAL,CAAmBJ,QAAnB,MAAiC,CAArC,EAAwC;AACtC,WAAON,OAAO,CAACW,cAAR,CAAuBL,QAAvB,EAAiCP,MAAM,CAAC,CAAD,CAAN,CAAUa,KAA3C,EAAkD,EAAlD,CAAP;AACD,GAX0E,CAa3E;;;AACA,QAAMC,OAAO,GAAGd,MAAM,CAACe,MAAP,CAAcL,CAAC,IAAIf,IAAI,CAACgB,aAAL,CAAmBD,CAAC,CAACJ,KAArB,IAA8B,CAAjD,CAAhB;;AACA,MAAIQ,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAOnB,QAAQ,CAAC;AAACG,YAAM,EAAE;AAACiB,SAAC,EAAEH,OAAO,CAAC,CAAD;AAAX,OAAT;AAA0Bb;AAA1B,KAAD,CAAf;AACD;;AAED,QAAMiB,MAAM,GAAGJ,OAAO,CAACL,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACJ,KAAnB,CAAf;AACAb,cAAY,CAAC0B,sBAAb,CAAoCD,MAApC,EAA4Cd,KAA5C;AAEA,SAAOR,UAAU,CAACkB,OAAD,EAAUV,KAAV,EAAiBH,OAAjB,CAAjB;AACD;AAED,OAAO,MAAMmB,YAAY,GAAiB;AACxCC,YAAU,EAAE3B,MAD4B;AAExC4B,aAAW,EAAE,OAF2B;AAGxCC,YAAU,EAAEzB;AAH4B,CAAnC","names":["backend_util","Concat","util","concatImpl","identity","concat","args","inputs","backend","attrs","axis","$axis","parseAxisParam","shape","outShape","computeOutShape","map","t","sizeFromShape","makeTensorInfo","dtype","$inputs","filter","length","x","shapes","assertParamsConsistent","concatConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Concat.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Concat, ConcatAttrs, ConcatInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {concatImpl} from './Concat_impl';\nimport {identity} from './Identity';\n\nexport function concat(\n    args:\n        {inputs: ConcatInputs, attrs: ConcatAttrs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {axis} = attrs;\n\n  const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n  const outShape =\n      backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n\n  if (util.sizeFromShape(outShape) === 0) {\n    return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n  }\n\n  // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n  const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n  if ($inputs.length === 1) {\n    return identity({inputs: {x: $inputs[0]}, backend});\n  }\n\n  const shapes = $inputs.map(t => t.shape);\n  backend_util.assertParamsConsistent(shapes, $axis);\n\n  return concatImpl($inputs, $axis, backend);\n}\n\nexport const concatConfig: KernelConfig = {\n  kernelName: Concat,\n  backendName: 'webgl',\n  kernelFunc: concat as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}