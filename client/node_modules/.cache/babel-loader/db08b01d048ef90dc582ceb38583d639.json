{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv3DBackpropInputV2 } from '../kernel_names';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\n\nfunction conv3DBackpropInput_(xShape, dy, filter, strides, pad) {\n  util.assert(xShape.length === dy.rank, () => `Length of inShape ` + `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n  let xShape5D = xShape;\n  let dy5D = dy;\n  let reshapedTo5D = false;\n\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(xShape5D.length === 5, () => `Error in conv3dDerInput: inShape must be length 5, but got length ` + `${xShape5D.length}.`);\n  util.assert(dy5D.rank === 5, () => `Error in conv3dDerInput: dy must be rank 5, but got ` + `rank ${dy5D.rank}`);\n  util.assert(filter.rank === 5, () => `Error in conv3dDerInput: filter must be rank 5, but got ` + `rank ${filter.rank}`);\n  util.assert(inDepth === filter.shape[3], () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` + `match input depth for filter ${filter.shape[3]}.`);\n  util.assert(outDepth === filter.shape[4], () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` + `match output depth for filter ${filter.shape[4]}.`);\n  const inputs = {\n    dy: dy5D,\n    filter\n  };\n  const attrs = {\n    pad,\n    strides,\n    inputShape: xShape5D\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(Conv3DBackpropInputV2, inputs, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport const conv3DBackpropInput = op({\n  conv3DBackpropInput_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,qBAAR,QAA6F,iBAA7F;AAIA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,SAASC,oBAAT,CACIC,MADJ,EAIIC,EAJJ,EAIWC,MAJX,EAI6BC,OAJ7B,EAKIC,GALJ,EAKuB;AACrBR,MAAI,CAACS,MAAL,CACIL,MAAM,CAACM,MAAP,KAAkBL,EAAE,CAACM,IADzB,EAEI,MAAM,uBACF,IAAIP,MAAM,CAACM,MAAM,qBAAqBL,EAAE,CAACM,IAAI,cAHrD;AAKA,MAAIC,QAAQ,GAAGR,MAAf;AACA,MAAIS,IAAI,GAAGR,EAAX;AACA,MAAIS,YAAY,GAAG,KAAnB;;AACA,MAAIT,EAAE,CAACM,IAAH,KAAY,CAAhB,EAAmB;AACjBG,gBAAY,GAAG,IAAf;AACAD,QAAI,GAAGX,OAAO,CAACG,EAAD,EAAK,CAAC,CAAD,EAAIA,EAAE,CAACU,KAAH,CAAS,CAAT,CAAJ,EAAiBV,EAAE,CAACU,KAAH,CAAS,CAAT,CAAjB,EAA8BV,EAAE,CAACU,KAAH,CAAS,CAAT,CAA9B,EAA2CV,EAAE,CAACU,KAAH,CAAS,CAAT,CAA3C,CAAL,CAAd;AACAH,YAAQ,GAAG,CAAC,CAAD,EAAIR,MAAM,CAAC,CAAD,CAAV,EAAeA,MAAM,CAAC,CAAD,CAArB,EAA0BA,MAAM,CAAC,CAAD,CAAhC,EAAqCA,MAAM,CAAC,CAAD,CAA3C,CAAX;AACD;;AAED,QAAMY,OAAO,GAAGJ,QAAQ,CAAC,CAAD,CAAxB;AACA,QAAMK,QAAQ,GAAGJ,IAAI,CAACE,KAAL,CAAW,CAAX,CAAjB;AACAf,MAAI,CAACS,MAAL,CACIG,QAAQ,CAACF,MAAT,KAAoB,CADxB,EAEI,MACI,uEACA,GAAGE,QAAQ,CAACF,MAAM,GAJ1B;AAKAV,MAAI,CAACS,MAAL,CACII,IAAI,CAACF,IAAL,KAAc,CADlB,EAEI,MAAM,yDACF,QAAQE,IAAI,CAACF,IAAI,EAHzB;AAIAX,MAAI,CAACS,MAAL,CACIH,MAAM,CAACK,IAAP,KAAgB,CADpB,EAEI,MAAM,6DACF,QAAQL,MAAM,CAACK,IAAI,EAH3B;AAIAX,MAAI,CAACS,MAAL,CACIO,OAAO,KAAKV,MAAM,CAACS,KAAP,CAAa,CAAb,CADhB,EAEI,MAAM,4CAA4CC,OAAO,SAAnD,GACF,gCAAgCV,MAAM,CAACS,KAAP,CAAa,CAAb,CAAe,GAHvD;AAIAf,MAAI,CAACS,MAAL,CACIQ,QAAQ,KAAKX,MAAM,CAACS,KAAP,CAAa,CAAb,CADjB,EAEI,MAAM,6CAA6CE,QAAQ,SAArD,GACF,iCAAiCX,MAAM,CAACS,KAAP,CAAa,CAAb,CAAe,GAHxD;AAKA,QAAMG,MAAM,GAAgC;AAACb,MAAE,EAAEQ,IAAL;AAAWP;AAAX,GAA5C;AAEA,QAAMa,KAAK,GACsB;AAACX,OAAD;AAAMD,WAAN;AAAea,cAAU,EAAER;AAA3B,GADjC,CAzCqB,CA4CrB;;AACA,QAAMS,GAAG,GAAGvB,MAAM,CAACwB,SAAP,CACIvB,qBADJ,EAC2BmB,MAD3B,EAEIC,KAFJ,CAAZ;;AAIA,MAAIL,YAAJ,EAAkB;AAChB,WAAOZ,OAAO,CACHmB,GADG,EACE,CAACA,GAAG,CAACN,KAAJ,CAAU,CAAV,CAAD,EAAeM,GAAG,CAACN,KAAJ,CAAU,CAAV,CAAf,EAA6BM,GAAG,CAACN,KAAJ,CAAU,CAAV,CAA7B,EAA2CM,GAAG,CAACN,KAAJ,CAAU,CAAV,CAA3C,CADF,CAAd;AAGD;;AACD,SAAOM,GAAP;AACD;;AAED,OAAO,MAAME,mBAAmB,GAAGtB,EAAE,CAAC;AAACE;AAAD,CAAD,CAA9B","names":["ENGINE","Conv3DBackpropInputV2","util","op","reshape","conv3DBackpropInput_","xShape","dy","filter","strides","pad","assert","length","rank","xShape5D","dy5D","reshapedTo5D","shape","inDepth","outDepth","inputs","attrs","inputShape","res","runKernel","conv3DBackpropInput"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/conv3d_backprop_input.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv3DBackpropInputV2, Conv3DBackpropInputV2Attrs, Conv3DBackpropInputV2Inputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport * as util from '../util';\n\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the derivative of the input of a 3D convolution.\n *\n * @param xShape The shape of the input: [batch, depth, height, width,\n * in_channels]. If length of 4, batch of 1 is assumed.\n * @param dy The derivative of the output, of rank 5 or rank 4 of shape\n *   `[batch, outDepth, outHeight, outWidth, in_channels]`.\n * If rank 4, batch of 1 is assumed.\n * @param filter The filter, rank 5, of shape\n *     `[filterDepth, filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideDepth, strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm used:\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n */\nfunction conv3DBackpropInput_<T extends Tensor4D|Tensor5D>(\n    xShape:\n        [number, number, number, number,\n         number]|[number, number, number, number],\n    dy: T, filter: Tensor5D, strides: [number, number, number]|number,\n    pad: 'valid'|'same'): T {\n  util.assert(\n      xShape.length === dy.rank,\n      () => `Length of inShape ` +\n          `(${xShape.length}) and rank of dy (${dy.rank}) must match`);\n\n  let xShape5D = xShape as [number, number, number, number, number];\n  let dy5D = dy as Tensor5D;\n  let reshapedTo5D = false;\n  if (dy.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(dy, [1, dy.shape[0], dy.shape[1], dy.shape[2], dy.shape[3]]);\n    xShape5D = [1, xShape[0], xShape[1], xShape[2], xShape[3]];\n  }\n\n  const inDepth = xShape5D[4];\n  const outDepth = dy5D.shape[4];\n  util.assert(\n      xShape5D.length === 5,\n      () =>\n          `Error in conv3dDerInput: inShape must be length 5, but got length ` +\n          `${xShape5D.length}.`);\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in conv3dDerInput: dy must be rank 5, but got ` +\n          `rank ${dy5D.rank}`);\n  util.assert(\n      filter.rank === 5,\n      () => `Error in conv3dDerInput: filter must be rank 5, but got ` +\n          `rank ${filter.rank}`);\n  util.assert(\n      inDepth === filter.shape[3],\n      () => `Error in conv3dDerInput: depth of input (${inDepth}) must ` +\n          `match input depth for filter ${filter.shape[3]}.`);\n  util.assert(\n      outDepth === filter.shape[4],\n      () => `Error in conv3dDerInput: depth of output (${outDepth}) must ` +\n          `match output depth for filter ${filter.shape[4]}.`);\n\n  const inputs: Conv3DBackpropInputV2Inputs = {dy: dy5D, filter};\n\n  const attrs:\n      Conv3DBackpropInputV2Attrs = {pad, strides, inputShape: xShape5D};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv3DBackpropInputV2, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n  return res;\n}\n\nexport const conv3DBackpropInput = op({conv3DBackpropInput_});\n"]},"metadata":{},"sourceType":"module"}