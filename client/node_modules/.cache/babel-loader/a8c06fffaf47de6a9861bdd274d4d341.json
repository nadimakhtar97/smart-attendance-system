{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(tensors, elementShape, elementDtype) {\n    let maxNumElements = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : -1;\n    this.tensors = tensors;\n    this.elementShape = elementShape;\n    this.elementDtype = elementDtype;\n\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n        }\n\n        assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n      });\n    }\n\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n\n\n  copy() {\n    return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n  }\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n\n\n  clearAndClose(keepIds) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n\n\n  size() {\n    return this.tensors.length;\n  }\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n\n\n  stack(elementShape, elementDtype) {\n    let numElements = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : -1;\n\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n\n\n  popBack(elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n    assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n    return reshape(tensor, outputElementShape);\n  }\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n\n\n  pushBack(tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n\n\n  resize(size) {\n    if (size < 0) {\n      throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n\n    this.tensors.length = size;\n  }\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n\n\n  getItem(elementIndex, elementShape, elementDtype) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n\n\n  setItem(elementIndex, tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 || this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n\n\n  gather(indices, elementDtype, elementShape) {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: '); // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n\n    indices = indices.slice(0, this.size());\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n\n\n  concat(elementDtype, elementShape) {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\n\nexport function fromTensor(tensor, elementShape, elementDtype) {\n  const dtype = tensor.dtype;\n\n  if (tensor.shape.length < 1) {\n    throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n  }\n\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\n\nexport function reserve(elementShape, elementDtype, numElements) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\n\nexport function scatter(tensor, indices, elementShape, numElements) {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\n\nexport function split(tensor, length, elementShape) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = i === 0 ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n    }\n\n    tensor.dispose();\n    return tensors;\n  });\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n\n  return list;\n}","map":{"version":3,"mappings":"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","names":["concat","keep","reshape","scalar","slice","stack","tensor","tidy","unstack","assertShapesMatchAllowUndefinedSize","inferElementShape","mergeElementShape","TensorList","constructor","tensors","elementShape","elementDtype","maxNumElements","forEach","dtype","Error","shape","idTensor","id","copy","clearAndClose","keepIds","has","dispose","length","size","numElements","outputElementShape","reshapedTensors","map","popBack","pop","pushBack","push","resize","getItem","elementIndex","setItem","gather","indices","i","t","fromTensor","tensorElementShape","tensorList","reserve","scatter","maxIndex","Math","max","list","value","index","split","totalLength","cumulativeLengths","len","shapeWithoutFirstDim","elementPerRow","previousLength","sizes"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/executor/tensor_list.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {concat, DataType, keep, reshape, scalar, slice, stack, Tensor, tensor, tidy, unstack} from '@tensorflow/tfjs-core';\n\nimport {assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape} from './tensor_utils';\n\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\n\nexport class TensorList {\n  readonly idTensor: Tensor;\n  maxNumElements: number;\n\n  get id() {\n    return this.idTensor.id;\n  }\n  /**\n   *\n   * @param tensors list of tensors\n   * @param elementShape shape of each tensor, this can be a single number (any\n   * shape is allowed) or partial shape (dim = -1).\n   * @param elementDtype data type of each tensor\n   * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n   *   meaning that the size of `tensors` is unbounded.\n   */\n  constructor(\n      readonly tensors: Tensor[], readonly elementShape: number|number[],\n      readonly elementDtype: DataType, maxNumElements = -1) {\n    if (tensors != null) {\n      tensors.forEach(tensor => {\n        if (elementDtype !== tensor.dtype) {\n          throw new Error(`Invalid data types; op elements ${\n              elementDtype}, but list elements ${tensor.dtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(\n            elementShape, tensor.shape, 'TensorList shape mismatch: ');\n\n        keep(tensor);\n      });\n    }\n    this.idTensor = scalar(0);\n    this.maxNumElements = maxNumElements;\n    keep(this.idTensor);\n  }\n\n  /**\n   * Get a new TensorList containing a copy of the underlying tensor container.\n   */\n  copy(): TensorList {\n    return new TensorList(\n        [...this.tensors], this.elementShape, this.elementDtype);\n  }\n\n  /**\n   * Dispose the tensors and idTensor and clear the tensor list.\n   */\n  clearAndClose(keepIds?: Set<number>) {\n    this.tensors.forEach(tensor => {\n      if (keepIds == null || !keepIds.has(tensor.id)) {\n        tensor.dispose();\n      }\n    });\n    this.tensors.length = 0;\n    this.idTensor.dispose();\n  }\n  /**\n   * The size of the tensors in the tensor list.\n   */\n  size() {\n    return this.tensors.length;\n  }\n\n  /**\n   * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n   * tf.Tensor.\n   * @param elementShape shape of each tensor\n   * @param elementDtype data type of each tensor\n   * @param numElements the number of elements to stack\n   */\n  stack(elementShape: number[], elementDtype: DataType, numElements = -1):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (numElements !== -1 && this.tensors.length !== numElements) {\n      throw new Error(`Operation expected a list with ${\n          numElements} elements but got a list with ${\n          this.tensors.length} elements.`);\n    }\n    assertShapesMatchAllowUndefinedSize(\n        elementShape, this.elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return tidy(() => {\n      const reshapedTensors =\n          this.tensors.map(tensor => reshape(tensor, outputElementShape));\n      return stack(reshapedTensors, 0);\n    });\n  }\n\n  /**\n   * Pop a tensor from the end of the list.\n   * @param elementShape shape of the tensor\n   * @param elementDtype data type of the tensor\n   */\n  popBack(elementShape: number[], elementDtype: DataType): Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (this.size() === 0) {\n      throw new Error('Trying to pop from an empty list.');\n    }\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    const tensor = this.tensors.pop();\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, elementShape, 'TensorList shape mismatch: ');\n\n    return reshape(tensor, outputElementShape);\n  }\n\n  /**\n   * Push a tensor to the end of the list.\n   * @param tensor Tensor to be pushed.\n   */\n  pushBack(tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n\n    if (this.maxNumElements === this.size()) {\n      throw new Error(`Trying to push element into a full list.`);\n    }\n    keep(tensor);\n    this.tensors.push(tensor);\n  }\n\n  /**\n   * Update the size of the list.\n   * @param size the new size of the list.\n   */\n  resize(size: number) {\n    if (size < 0) {\n      throw new Error(\n          `TensorListResize expects size to be non-negative. Got: ${size}`);\n    }\n\n    if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n      throw new Error(`TensorListResize input size ${\n          size} is greater maxNumElement ${this.maxNumElements}.`);\n    }\n    this.tensors.length = size;\n  }\n\n  /**\n   * Retrieve the element at the provided index\n   * @param elementShape shape of the tensor\n   * @param elementDtype dtype of the tensor\n   * @param elementIndex index of the tensor\n   */\n  getItem(elementIndex: number, elementShape: number[], elementDtype: DataType):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n    if (elementIndex < 0 || elementIndex > this.tensors.length) {\n      throw new Error(`Trying to access element ${\n          elementIndex} in a list with ${this.tensors.length} elements.`);\n    }\n\n    if (this.tensors[elementIndex] == null) {\n      throw new Error(`element at index ${elementIndex} is null.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.tensors[elementIndex].shape, elementShape,\n        'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    return reshape(this.tensors[elementIndex], outputElementShape);\n  }\n\n  /**\n   * Set the tensor at the index\n   * @param elementIndex index of the tensor\n   * @param tensor the tensor to be inserted into the list\n   */\n  setItem(elementIndex: number, tensor: Tensor) {\n    if (tensor.dtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          tensor.dtype}, but list elements ${this.elementDtype}`);\n    }\n\n    if (elementIndex < 0 ||\n        this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n      throw new Error(`Trying to set element ${\n          elementIndex} in a list with max ${this.maxNumElements} elements.`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n    keep(tensor);\n    this.tensors[elementIndex] = tensor;\n  }\n\n  /**\n   * Return selected values in the TensorList as a stacked Tensor. All of\n   * selected values must have been written and their shapes must all match.\n   * @param indices indices of tensors to gather\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  gather(indices: number[], elementDtype: DataType, elementShape: number[]):\n      Tensor {\n    if (elementDtype !== this.elementDtype) {\n      throw new Error(`Invalid data types; op elements ${\n          elementDtype}, but list elements ${this.elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n\n    // When indices is greater than the size of the list, indices beyond the\n    // size of the list are ignored.\n    indices = indices.slice(0, this.size());\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n    if (indices.length === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n\n    return tidy(() => {\n      const tensors =\n          indices.map(i => reshape(this.tensors[i], outputElementShape));\n      return stack(tensors, 0);\n    });\n  }\n\n  /**\n   * Return the values in the TensorList as a concatenated Tensor.\n   * @param elementDtype output tensor dtype\n   * @param elementShape output tensor element shape\n   */\n  concat(elementDtype: DataType, elementShape: number[]): Tensor {\n    if (!!elementDtype && elementDtype !== this.elementDtype) {\n      throw new Error(`TensorList dtype is ${\n          this.elementDtype} but concat requested dtype ${elementDtype}`);\n    }\n\n    assertShapesMatchAllowUndefinedSize(\n        this.elementShape, elementShape, 'TensorList shape mismatch: ');\n    const outputElementShape =\n        inferElementShape(this.elementShape, this.tensors, elementShape);\n\n    if (this.size() === 0) {\n      return tensor([], [0].concat(outputElementShape));\n    }\n    return tidy(() => {\n      const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n      return concat(tensors, 0);\n    });\n  }\n}\n\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(\n    tensor: Tensor, elementShape: number[], elementDtype: DataType) {\n  const dtype = tensor.dtype;\n  if (tensor.shape.length < 1) {\n    throw new Error(\n        `Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n  }\n  if (tensor.dtype !== elementDtype) {\n    throw new Error(`Invalid data types; op elements ${\n        tensor.dtype}, but list elements ${elementDtype}`);\n  }\n  const tensorElementShape = tensor.shape.slice(1);\n  assertShapesMatchAllowUndefinedSize(\n      tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n  const tensorList: Tensor[] = unstack(tensor);\n  return new TensorList(tensorList, elementShape, dtype);\n}\n\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n */\nexport function reserve(\n    elementShape: number[], elementDtype: DataType, numElements: number) {\n  return new TensorList([], elementShape, elementDtype, numElements);\n}\n\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(\n    tensor: Tensor, indices: number[], elementShape: number[],\n    numElements?: number): TensorList {\n  if (indices.length !== tensor.shape[0]) {\n    throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${\n        indices.length} vs. ${tensor.shape[0]}`);\n  }\n\n  const maxIndex = Math.max(...indices);\n\n  if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n    throw new Error(\n        `Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n  }\n\n  const list = new TensorList([], elementShape, tensor.dtype, numElements);\n  const tensors = unstack(tensor, 0);\n  indices.forEach((value, index) => {\n    list.setItem(value, tensors[index]);\n  });\n  return list;\n}\n\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(\n    tensor: Tensor, length: number[], elementShape: number[]) {\n  let totalLength = 0;\n  const cumulativeLengths = length.map(len => {\n    totalLength += len;\n    return totalLength;\n  });\n\n  if (totalLength !== tensor.shape[0]) {\n    throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n  }\n\n  const shapeWithoutFirstDim = tensor.shape.slice(1);\n  const outputElementShape =\n      mergeElementShape(shapeWithoutFirstDim, elementShape);\n  const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n  const tensors: Tensor[] = tidy(() => {\n    const tensors = [];\n    tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n    for (let i = 0; i < length.length; ++i) {\n      const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n      const indices = [0, previousLength, 0];\n      const sizes = [1, length[i], elementPerRow];\n      tensors[i] = reshape(\n          slice(tensor, indices, sizes), outputElementShape as number[]);\n    }\n    tensor.dispose();\n    return tensors;\n  });\n\n  const list = new TensorList([], elementShape, tensor.dtype, length.length);\n\n  for (let i = 0; i < tensors.length; i++) {\n    list.setItem(i, tensors[i]);\n  }\n  return list;\n}\n"]},"metadata":{},"sourceType":"module"}