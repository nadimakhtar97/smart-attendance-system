{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n  const emptyRowIndicator = new Array(denseRows);\n  const reverseIndexMap = new Array(indicesCount);\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(indicesCount));\n    }\n\n    const outputIndices = util.getArrayFromDType(indicesDType, 0);\n    const outputValues = util.getArrayFromDType(valuesDType, 0);\n    return [outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n\n    if (row < 0) {\n      throw new Error(backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n\n    if (row >= denseRows) {\n      throw new Error(backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(i, row, denseRows));\n    }\n\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && row >= lastIndicesRow;\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = csrOffset[row] === 0;\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty; // In filled version, each row has at least one element.\n\n    csrOffset[row] = Math.max(csrOffset[row], 1); // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices = indices;\n    const outputValues = values;\n\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n\n    return [outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n    const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n    const filledCount = new Array(denseRows).fill(0); // Fill in values for rows that are not missing\n\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = (row === 0 ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++; // Increment the filled count for this row.\n\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n\n      outputValues[outputI] = values[i]; // We'll need this reverse index map to backprop correctly.\n\n      reverseIndexMap[i] = outputI;\n    } // Fill in values for rows that are missing\n\n\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n\n      if (rowCount === 0) {\n        // We haven't filled this row\n        const startingIndex = row === 0 ? 0 : csrOffset[row - 1]; // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n\n        outputIndices[startingIndex * rank + 0] = row;\n\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n\n    return [outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator, reverseIndexMap];\n  }\n}","map":{"version":3,"mappings":"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","names":["backend_util","util","sparseFillEmptyRowsImpl","indices","indicesShape","indicesDType","values","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","Array","reverseIndexMap","rank","Error","getSparseFillEmptyRowsIndicesDenseShapeMismatch","outputIndices","getArrayFromDType","outputValues","rowsAreOrdered","lastIndicesRow","csrOffset","fill","i","row","getSparseFillEmptyRowsNegativeIndexErrorMessage","getSparseFillEmptyRowsOutOfRangeIndexErrorMessage","allRowsFull","rowEmpty","Math","max","fullIndicesCount","filledCount","offset","outputI","j","rowCount","startingIndex","col"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/SparseFillEmptyRows_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TypedArray, util} from '@tensorflow/tfjs-core';\n\nexport function sparseFillEmptyRowsImpl(\n    indices: TypedArray, indicesShape: number[], indicesDType: DataType,\n    values: TypedArray, valuesDType: DataType, denseShape: TypedArray,\n    defaultValue: number):\n    [TypedArray, number[], TypedArray, boolean[], number[]] {\n  const indicesCount = indicesShape[0];\n  const denseRows = denseShape[0];\n\n  const emptyRowIndicator: boolean[] = new Array(denseRows);\n  const reverseIndexMap: number[] = new Array(indicesCount);\n\n  const rank = indicesShape[1];\n\n  if (denseRows === 0) {\n    if (indicesCount !== 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsIndicesDenseShapeMismatch(\n              indicesCount));\n    }\n    const outputIndices = util.getArrayFromDType(indicesDType, 0) as TypedArray;\n    const outputValues = util.getArrayFromDType(valuesDType, 0) as TypedArray;\n    return [\n      outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n    ];\n  }\n\n  let rowsAreOrdered = true;\n  let lastIndicesRow = 0;\n  const csrOffset: number[] = new Array(denseRows).fill(0);\n\n  for (let i = 0; i < indicesCount; ++i) {\n    // indices is a 2d tensor with shape of [N, rank]\n    const row = indices[i * rank];\n    if (row < 0) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsNegativeIndexErrorMessage(i, row));\n    }\n    if (row >= denseRows) {\n      throw new Error(\n          backend_util.getSparseFillEmptyRowsOutOfRangeIndexErrorMessage(\n              i, row, denseRows));\n    }\n    ++csrOffset[row];\n    rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n    lastIndicesRow = row;\n  }\n\n  let allRowsFull = true;\n  for (let row = 0; row < denseRows; ++row) {\n    // csrOffset here describes the number of elements in this dense row\n    const rowEmpty = (csrOffset[row] === 0);\n    emptyRowIndicator[row] = rowEmpty;\n    allRowsFull = allRowsFull && !rowEmpty;\n    // In filled version, each row has at least one element.\n    csrOffset[row] = Math.max(csrOffset[row], 1);\n    // Update csrOffset to represent the number of elements up to and\n    // including denseRows + 1:\n    //  csrOffset[0] == #{elements of row 0}\n    //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n    //  ..\n    //  csrOffset[i] == starting index for elements in row i + 1.\n    if (row > 0) {\n      csrOffset[row] += csrOffset[row - 1];\n    }\n  }\n\n  if (allRowsFull && rowsAreOrdered) {\n    const outputIndices: TypedArray = indices;\n    const outputValues: TypedArray = values;\n    for (let i = 0; i < indicesCount; ++i) {\n      reverseIndexMap[i] = i;\n    }\n    return [\n      outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  } else {\n    const fullIndicesCount = csrOffset[denseRows - 1];\n    const outputIndices =\n        util.getArrayFromDType(indicesDType, fullIndicesCount * rank) as\n        TypedArray;\n    const outputValues =\n        util.getArrayFromDType(valuesDType, fullIndicesCount) as TypedArray;\n    const filledCount: number[] = new Array(denseRows).fill(0);\n\n    // Fill in values for rows that are not missing\n    for (let i = 0; i < indicesCount; ++i) {\n      // indices is a 2d tensor with shape of [N, rank]\n      const row = indices[i * rank];\n      const offset = filledCount[row];\n      const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n      filledCount[row]++;  // Increment the filled count for this row.\n      for (let j = 0; j < rank; ++j) {\n        // indices and outputIndices are 2d tensors with shape of [N, rank]\n        outputIndices[outputI * rank + j] = indices[i * rank + j];\n      }\n      outputValues[outputI] = values[i];\n      // We'll need this reverse index map to backprop correctly.\n      reverseIndexMap[i] = outputI;\n    }\n\n    // Fill in values for rows that are missing\n    for (let row = 0; row < denseRows; ++row) {\n      const rowCount = filledCount[row];\n      if (rowCount === 0) {  // We haven't filled this row\n        const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n        // Remaining index values were set to zero already.\n        // Just need to set the row index in the right location.\n        // outputIndices is a 2d tensor with shape of [N, rank]\n        outputIndices[startingIndex * rank + 0] = row;\n        for (let col = 1; col < rank; ++col) {\n          outputIndices[startingIndex * rank + col] = 0;\n        }\n        outputValues[startingIndex] = defaultValue;\n      }\n    }\n    return [\n      outputIndices, [fullIndicesCount, rank], outputValues, emptyRowIndicator,\n      reverseIndexMap\n    ];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}