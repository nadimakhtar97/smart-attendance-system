{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function avgPool3D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode,\n    dataFormat\n  } = attrs;\n  assertNotComplex(x, 'avgPool3d');\n  const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, dataFormat);\n  const xValues = backend.data.get(x.dataId).values;\n  const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const avgPool3DConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,SAAR,EAAoDC,YAApD,EAAoHC,IAApH,QAA+H,uBAA/H;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,MAAR,QAAqB,qBAArB;AAEA,OAAM,SAAUC,SAAV,CAAoBC,IAApB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,cAAD;AAAaC,WAAb;AAAsBC,OAAtB;AAA2BC,mBAA3B;AAA4CC;AAA5C,MAA0DN,KAAhE;AAEAN,kBAAgB,CAACO,CAAD,EAAI,WAAJ,CAAhB;AAEA,QAAMM,QAAQ,GAAGf,YAAY,CAACgB,iBAAb,CACbP,CAAC,CAACQ,KADW,EACwCP,UADxC,EACoDC,OADpD,EAEb;AAAE;AAFW,IAEMC,GAFN,EAEWC,eAFX,EAE4BC,UAF5B,CAAjB;AAIA,QAAMI,OAAO,GAAGX,OAAO,CAACY,IAAR,CAAaC,GAAb,CAAiBX,CAAC,CAACY,MAAnB,EAA2BC,MAA3C;AACA,QAAMC,MAAM,GAAGpB,MAAM,CACjBe,OADiB,EACRT,CAAC,CAACQ,KADM,EACCR,CAAC,CAACe,KADH,EACUvB,IAAI,CAACwB,cAAL,CAAoBhB,CAAC,CAACQ,KAAtB,CADV,EACwCF,QADxC,EACkD,KADlD,CAArB;AAGA,SAAOR,OAAO,CAACmB,cAAR,CAAuBH,MAAM,CAACN,KAA9B,EAAqC,SAArC,EAAgDM,MAAM,CAACD,MAAvD,CAAP;AACD;AAED,OAAO,MAAMK,eAAe,GAAiB;AAC3CC,YAAU,EAAE7B,SAD+B;AAE3C8B,aAAW,EAAE,KAF8B;AAG3CC,YAAU,EAAE1B;AAH+B,CAAtC","names":["AvgPool3D","backend_util","util","assertNotComplex","pool3d","avgPool3D","args","inputs","backend","attrs","x","filterSize","strides","pad","dimRoundingMode","dataFormat","convInfo","computePool3DInfo","shape","xValues","data","get","dataId","values","outBuf","dtype","computeStrides","makeTensorInfo","avgPool3DConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/AvgPool3D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AvgPool3D, AvgPool3DAttrs, AvgPool3DInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {pool3d} from '../utils/pool_utils';\n\nexport function avgPool3D(args: {\n  inputs: AvgPool3DInputs,\n  backend: MathBackendCPU,\n  attrs: AvgPool3DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {filterSize, strides, pad, dimRoundingMode, dataFormat} = attrs;\n\n  assertNotComplex(x, 'avgPool3d');\n\n  const convInfo = backend_util.computePool3DInfo(\n      x.shape as [number, number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode, dataFormat);\n\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = pool3d(\n      xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n\n  return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\n\nexport const avgPool3DConfig: KernelConfig = {\n  kernelName: AvgPool3D,\n  backendName: 'cpu',\n  kernelFunc: avgPool3D as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}