{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  assertNotComplex([x, filter], 'conv2d');\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const y = new TensorBuffer(convInfo.outShape, x.dtype);\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n  const xVals = backend.data.get(x.dataId).values;\n  const wVals = backend.data.get(filter.dataId).values;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] += xVal * wVals[wOffset3 + d2];\n              }\n\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport const conv2DConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D\n};","map":{"version":3,"mappings":"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","names":["backend_util","Conv2D","TensorBuffer","util","assertNotComplex","conv2D","args","inputs","backend","attrs","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","filterHeight","filterWidth","dilationHeight","dilationWidth","padLeft","padInfo","left","padTop","top","isChannelsLast","y","outShape","dtype","xStrides","computeStrides","filterStrides","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","xVals","data","get","dataId","values","wVals","yVals","b","batchSize","xOffset1","yOffset1","yR","outHeight","yOffset2","xRCorner","strideHeight","wR","xR","inHeight","wOffset1","xOffset2","yC","outWidth","yOffset3","xCCorner","strideWidth","wC","xC","inWidth","wOffset2","xOffset3","wOffset3","d1","inChannels","xVal","d2","outChannels","makeTensorInfo","conv2DConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Conv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2D, Conv2DAttrs, Conv2DInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2D(\n    args: {inputs: Conv2DInputs, backend: MathBackendCPU, attrs: Conv2DAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dataFormat, dilations, dimRoundingMode} = attrs;\n\n  assertNotComplex([x, filter], 'conv2d');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n\n  const filterHeight = convInfo.filterHeight;\n  const filterWidth = convInfo.filterWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const padLeft = convInfo.padInfo.left;\n  const padTop = convInfo.padInfo.top;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n\n  const y = new TensorBuffer(convInfo.outShape, x.dtype as 'float32');\n\n  const xStrides = util.computeStrides(x.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const xBatchStride = xStrides[0];\n  const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n  const xColStride = isChannelsLast ? xStrides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n  const yBatchStride = y.strides[0];\n  const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n  const yColStride = isChannelsLast ? y.strides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const wVals = backend.data.get(filter.dataId).values as TypedArray;\n  const yVals = y.values;\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    const xOffset1 = b * xBatchStride;\n    const yOffset1 = b * yBatchStride;\n    for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n      const yOffset2 = yOffset1 + yR * yRowStride;\n      const xRCorner = yR * convInfo.strideHeight - padTop;\n      for (let wR = 0; wR < filterHeight; ++wR) {\n        const xR = xRCorner + wR * dilationHeight;\n        if (xR < 0 || xR >= convInfo.inHeight) {\n          continue;\n        }\n        const wOffset1 = wR * filterStrides[0];\n        const xOffset2 = xOffset1 + xR * xRowStride;\n        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n          const yOffset3 = yOffset2 + yC * yColStride;\n          const xCCorner = yC * convInfo.strideWidth - padLeft;\n          for (let wC = 0; wC < filterWidth; ++wC) {\n            const xC = xCCorner + wC * dilationWidth;\n            if (xC < 0 || xC >= convInfo.inWidth) {\n              continue;\n            }\n            const wOffset2 = wOffset1 + wC * filterStrides[1];\n            const xOffset3 = xOffset2 + xC * xColStride;\n            let wOffset3 = wOffset2;\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n              const xVal = xVals[xOffset3 + d1 * xChannelStride];\n              for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                yVals[yOffset3 + d2 * yChannelStride] +=\n                    xVal * wVals[wOffset3 + d2];\n              }\n              wOffset3 += convInfo.outChannels;\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\n\nexport const conv2DConfig: KernelConfig = {\n  kernelName: Conv2D,\n  backendName: 'cpu',\n  kernelFunc: conv2D as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}