{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode,\n    filterShape\n  } = attrs;\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  const {\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth\n  } = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values;\n  const dyVals = backend.data.get(dy.dataId).values;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n\n                if (isChannelsLast) {\n                  dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n                } else {\n                  dotProd += xBuf.get(b, d1, xR, xC) * dyBuf.get(b, d2, yR, yC);\n                }\n              }\n            }\n          }\n\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport const conv2DBackpropFilterConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,oBAAtB,EAA6HC,YAA7H,QAAwK,uBAAxK;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAUC,oBAAV,CAA+BC,IAA/B,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC;AAAJ,MAAUJ,MAAhB;AACA,QAAM;AAACK,WAAD;AAAUC,OAAV;AAAeC,cAAf;AAA2BC,mBAA3B;AAA4CC;AAA5C,MAA2DP,KAAjE;AAEAL,kBAAgB,CAAC,CAACM,CAAD,EAAIC,EAAJ,CAAD,EAAU,sBAAV,CAAhB;AAEA,QAAMM,WAAW,GAAGhB,YAAY,CAACiB,uBAAb,CAAqCJ,UAArC,CAApB;AACA,QAAMK,QAAQ,GAAGlB,YAAY,CAACmB,iBAAb,CACbV,CAAC,CAACW,KADW,EACgCL,WADhC,EAC6CJ,OAD7C,EAEb;AAAE;AAFW,IAEMC,GAFN,EAEWE,eAFX,EAE4B;AAAM;AAFlC,IAGbE,WAHa,CAAjB;AAKA,QAAM;AAACK,gBAAD;AAAeC,eAAf;AAA4BC,gBAA5B;AAA0CC;AAA1C,MAAyDN,QAA/D;AACA,QAAMO,cAAc,GAAGP,QAAQ,CAACL,UAAT,KAAwB,cAA/C;AACA,QAAMa,EAAE,GAAG,IAAIxB,YAAJ,CAAiBgB,QAAQ,CAACH,WAA1B,EAAuC,SAAvC,CAAX;AAEA,QAAMY,OAAO,GAAGT,QAAQ,CAACU,OAAT,CAAiBC,IAAjC;AACA,QAAMC,MAAM,GAAGZ,QAAQ,CAACU,OAAT,CAAiBG,GAAhC;AACA,QAAMC,KAAK,GAAGzB,OAAO,CAAC0B,IAAR,CAAaC,GAAb,CAAiBzB,CAAC,CAAC0B,MAAnB,EAA2BC,MAAzC;AACA,QAAMC,MAAM,GAAG9B,OAAO,CAAC0B,IAAR,CAAaC,GAAb,CAAiBxB,EAAE,CAACyB,MAApB,EAA4BC,MAA3C;AAEA,QAAME,IAAI,GAAG,IAAIpC,YAAJ,CAAiBO,CAAC,CAACW,KAAnB,EAA0BX,CAAC,CAAC8B,KAA5B,EAAmCP,KAAnC,CAAb;AACA,QAAMQ,KAAK,GAAG,IAAItC,YAAJ,CAAiBQ,EAAE,CAACU,KAApB,EAA2BV,EAAE,CAAC6B,KAA9B,EAAqCF,MAArC,CAAd;;AAEA,OAAK,IAAII,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGlB,YAAtB,EAAoC,EAAEkB,EAAtC,EAA0C;AACxC,UAAMC,KAAK,GAAGC,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,IAAL,CAAU,CAACf,MAAM,GAAGW,EAAV,IAAgBpB,YAA1B,CAAZ,CAAd;AACA,UAAMyB,KAAK,GAAGH,IAAI,CAACI,GAAL,CACV7B,QAAQ,CAAC8B,SADC,EACU,CAAC9B,QAAQ,CAAC+B,QAAT,GAAoBnB,MAApB,GAA6BW,EAA9B,IAAoCpB,YAD9C,CAAd;;AAGA,SAAK,IAAI6B,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAG1B,WAAtB,EAAmC,EAAE0B,EAArC,EAAyC;AACvC,YAAMC,KAAK,GAAGR,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYD,IAAI,CAACE,IAAL,CAAU,CAAClB,OAAO,GAAGuB,EAAX,IAAiB5B,WAA3B,CAAZ,CAAd;AACA,YAAM8B,KAAK,GAAGT,IAAI,CAACI,GAAL,CACV7B,QAAQ,CAACmC,QADC,EACS,CAACnC,QAAQ,CAACoC,OAAT,GAAmB3B,OAAnB,GAA6BuB,EAA9B,IAAoC5B,WAD7C,CAAd;;AAGA,WAAK,IAAIiC,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGrC,QAAQ,CAACsC,UAA/B,EAA2C,EAAED,EAA7C,EAAiD;AAC/C,aAAK,IAAIE,EAAE,GAAG,CAAd,EAAiBA,EAAE,GAAGvC,QAAQ,CAACwC,WAA/B,EAA4C,EAAED,EAA9C,EAAkD;AAChD,cAAIE,OAAO,GAAG,CAAd;;AACA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG1C,QAAQ,CAAC2C,SAA7B,EAAwC,EAAED,CAA1C,EAA6C;AAC3C,iBAAK,IAAIE,EAAE,GAAGpB,KAAd,EAAqBoB,EAAE,GAAGhB,KAA1B,EAAiC,EAAEgB,EAAnC,EAAuC;AACrC,oBAAMC,EAAE,GAAGtB,EAAE,GAAGqB,EAAE,GAAGzC,YAAV,GAAyBS,MAApC;;AACA,mBAAK,IAAIkC,EAAE,GAAGb,KAAd,EAAqBa,EAAE,GAAGZ,KAA1B,EAAiC,EAAEY,EAAnC,EAAuC;AACrC,sBAAMC,EAAE,GAAGf,EAAE,GAAGc,EAAE,GAAG1C,WAAV,GAAwBK,OAAnC;;AACA,oBAAIF,cAAJ,EAAoB;AAClBkC,yBAAO,IAAKrB,IAAI,CAACJ,GAAL,CAAS0B,CAAT,EAAYG,EAAZ,EAAgBE,EAAhB,EAAoBV,EAApB,IACPf,KAAK,CAACN,GAAN,CAAU0B,CAAV,EAAaE,EAAb,EAAiBE,EAAjB,EAAqBP,EAArB,CADL;AAED,iBAHD,MAGO;AACLE,yBAAO,IAAKrB,IAAI,CAACJ,GAAL,CAAS0B,CAAT,EAAYL,EAAZ,EAAgBQ,EAAhB,EAAoBE,EAApB,IACPzB,KAAK,CAACN,GAAN,CAAU0B,CAAV,EAAaH,EAAb,EAAiBK,EAAjB,EAAqBE,EAArB,CADL;AAED;AACF;AACF;AACF;;AACDtC,YAAE,CAACwC,GAAH,CAAOP,OAAP,EAAgBlB,EAAhB,EAAoBS,EAApB,EAAwBK,EAAxB,EAA4BE,EAA5B;AACD;AACF;AACF;AACF;;AAED,SAAOlD,OAAO,CAAC4D,cAAR,CAAuBzC,EAAE,CAACN,KAA1B,EAAiCM,EAAE,CAACa,KAApC,EAA2Cb,EAAE,CAACU,MAA9C,CAAP;AACD;AAED,OAAO,MAAMgC,0BAA0B,GAAiB;AACtDC,YAAU,EAAEpE,oBAD0C;AAEtDqE,aAAW,EAAE,KAFyC;AAGtDC,YAAU,EAAEnE;AAH0C,CAAjD","names":["backend_util","Conv2DBackpropFilter","TensorBuffer","assertNotComplex","conv2DBackpropFilter","args","inputs","backend","attrs","x","dy","strides","pad","dataFormat","dimRoundingMode","filterShape","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","strideHeight","strideWidth","filterHeight","filterWidth","isChannelsLast","dW","leftPad","padInfo","left","topPad","top","xVals","data","get","dataId","values","dyVals","xBuf","dtype","dyBuf","wR","yRMin","Math","max","ceil","yRMax","min","outHeight","inHeight","wC","yCMin","yCMax","outWidth","inWidth","d1","inChannels","d2","outChannels","dotProd","b","batchSize","yR","xR","yC","xC","set","makeTensorInfo","conv2DBackpropFilterConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Conv2DBackpropFilter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropFilter, Conv2DBackpropFilterAttrs, Conv2DBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropFilter(args: {\n  inputs: Conv2DBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, pad, dataFormat, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'conv2dBackpropFilter');\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      1 /* dilations */, pad, dimRoundingMode, false /* depthwise */,\n      $dataFormat);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n  const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n        for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n          let dotProd = 0;\n          for (let b = 0; b < convInfo.batchSize; ++b) {\n            for (let yR = yRMin; yR < yRMax; ++yR) {\n              const xR = wR + yR * strideHeight - topPad;\n              for (let yC = yCMin; yC < yCMax; ++yC) {\n                const xC = wC + yC * strideWidth - leftPad;\n                if (isChannelsLast) {\n                  dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                      (dyBuf.get(b, yR, yC, d2) as number);\n                } else {\n                  dotProd += (xBuf.get(b, d1, xR, xC) as number) *\n                      (dyBuf.get(b, d2, yR, yC) as number);\n                }\n              }\n            }\n          }\n          dW.set(dotProd, wR, wC, d1, d2);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const conv2DBackpropFilterConfig: KernelConfig = {\n  kernelName: Conv2DBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropFilter as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}