{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU\n} = shared;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, ceilImplCPU, concatImplCPU, equalImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherNdImplCPU, gatherV2ImplCPU, greaterEqualImplCPU, greaterImplCPU, lessEqualImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, notEqualImplCPU, prodImplCPU, sigmoidImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, sparseSegmentReductionImplCPU, sqrtImplCPU, stridedSliceImplCPU, stringNGramsImplCPU, stringSplitImplCPU, stringToHashBucketFastImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU };","map":{"version":3,"mappings":"AACA;;;;;;;;;;;;;;;;AAiBA;AACA;AACA;AACA,OAAO,KAAKA,MAAZ,MAAwB,0CAAxB;AAQA,MAAM;AACJC,SAAO,EAAEC,UADL;AAEJC,cAAY,EAAEC,eAFV;AAGJC,oBAAkB,EAAEC,qBAHhB;AAIJC,UAAQ,EAAEC,WAJN;AAKJC,YAAU,EAAEC,aALR;AAMJC,WAAS,EAAEC,YANP;AAOJC,SAAO,EAAEC,UAPL;AAQJC,WAAS,EAAEC,YARP;AASJC,WAAS,EAAEC,YATP;AAUJC,cAAY,EAAEC,eAVV;AAWJC,cAAY,EAAEC,eAXV;AAYJC,aAAW,EAAEC,cAZT;AAaJC,kBAAgB,EAAEC,mBAbd;AAcJC,UAAQ,EAAEC,WAdN;AAeJC,eAAa,EAAEC,gBAfX;AAgBJC,cAAY,EAAEC,eAhBV;AAiBJC,SAAO,EAAEC,UAjBL;AAkBJC,SAAO,EAAEC,UAlBL;AAmBJC,aAAW,EAAEC,cAnBT;AAoBJC,aAAW,EAAEC,cApBT;AAqBJC,cAAY,EAAEC,eArBV;AAsBJC,SAAO,EAAEC,UAtBL;AAuBJC,cAAY,EAAEC,eAvBV;AAwBJC,UAAQ,EAAEC,WAxBN;AAyBJC,WAAS,EAAEC,YAzBP;AA0BJC,WAAS,EAAEC,YA1BP;AA2BJC,aAAW,EAAEC,cA3BT;AA4BJC,eAAa,EAAEC,gBA5BX;AA6BJC,WAAS,EAAEC,YA7BP;AA8BJC,yBAAuB,EAAEC,0BA9BrB;AA+BJC,mBAAiB,EAAEC,oBA/Bf;AAgCJC,4BAA0B,EAAEC,6BAhCxB;AAiCJC,UAAQ,EAAEC,WAjCN;AAkCJC,kBAAgB,EAAEC,mBAlCd;AAmCJC,kBAAgB,EAAEC,mBAnCd;AAoCJC,iBAAe,EAAEC,kBApCb;AAqCJC,4BAA0B,EAAEC,6BArCxB;AAsCJC,SAAO,EAAEC,UAtCL;AAuCJC,UAAQ,EAAEC,WAvCN;AAwCJC,UAAQ,EAAEC,WAxCN;AAyCJC,eAAa,EAAEC,gBAzCX;AA0CJC,YAAU,EAAEC;AA1CR,IA2CFpF,MA3CJ;AA6CA,SACEE,UADF,EAEEE,eAFF,EAGEE,qBAHF,EAIEE,WAJF,EAKEE,aALF,EAMEE,YANF,EAOEE,UAPF,EAQEE,YARF,EASEE,YATF,EAUEE,eAVF,EAWEE,eAXF,EAYEI,mBAZF,EAaEF,cAbF,EAcEM,gBAdF,EAeEF,WAfF,EAgBEI,eAhBF,EAiBEE,UAjBF,EAkBEE,UAlBF,EAmBEE,cAnBF,EAoBEE,cApBF,EAqBEE,eArBF,EAsBEE,UAtBF,EAuBEE,eAvBF,EAwBEE,WAxBF,EAyBEM,cAzBF,EA0BEE,gBA1BF,EA2BEE,YA3BF,EA4BEE,0BA5BF,EA6BEE,oBA7BF,EA8BEE,6BA9BF,EA+BEE,WA/BF,EAgCEE,mBAhCF,EAiCEE,mBAjCF,EAkCEE,kBAlCF,EAmCEE,6BAnCF,EAoCEE,UApCF,EAqCE1B,YArCF,EAsCEE,YAtCF,EAuCE0B,WAvCF,EAwCEE,WAxCF,EAyCEE,gBAzCF,EA0CEE,aA1CF","names":["shared","addImpl","addImplCPU","bincountImpl","bincountImplCPU","bincountReduceImpl","bincountReduceImplCPU","ceilImpl","ceilImplCPU","concatImpl","concatImplCPU","equalImpl","equalImplCPU","expImpl","expImplCPU","expm1Impl","expm1ImplCPU","floorImpl","floorImplCPU","gatherNdImpl","gatherNdImplCPU","gatherV2Impl","gatherV2ImplCPU","greaterImpl","greaterImplCPU","greaterEqualImpl","greaterEqualImplCPU","lessImpl","lessImplCPU","lessEqualImpl","lessEqualImplCPU","linSpaceImpl","linSpaceImplCPU","logImpl","logImplCPU","maxImpl","maxImplCPU","maximumImpl","maximumImplCPU","minimumImpl","minimumImplCPU","multiplyImpl","multiplyImplCPU","negImpl","negImplCPU","notEqualImpl","notEqualImplCPU","prodImpl","prodImplCPU","rangeImpl","rangeImplCPU","rsqrtImpl","rsqrtImplCPU","sigmoidImpl","sigmoidImplCPU","simpleAbsImpl","simpleAbsImplCPU","sliceImpl","sliceImplCPU","sparseFillEmptyRowsImpl","sparseFillEmptyRowsImplCPU","sparseReshapeImpl","sparseReshapeImplCPU","sparseSegmentReductionImpl","sparseSegmentReductionImplCPU","sqrtImpl","sqrtImplCPU","stridedSliceImpl","stridedSliceImplCPU","stringNGramsImpl","stringNGramsImplCPU","stringSplitImpl","stringSplitImplCPU","stringToHashBucketFastImpl","stringToHashBucketFastImplCPU","subImpl","subImplCPU","tileImpl","tileImplCPU","topKImpl","topKImplCPU","transposeImpl","transposeImplCPU","uniqueImpl","uniqueImplCPU"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernel_utils/shared.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleBinaryKernelImpl} from '@tensorflow/tfjs-backend-cpu/dist/shared';\n// tslint:disable-next-line: no-imports-from-dist\nimport {SimpleUnaryImpl} from '@tensorflow/tfjs-backend-cpu/dist/utils/unary_types';\n\nexport type SimpleBinaryKernelImplCPU = SimpleBinaryKernelImpl;\nexport type SimpleUnaryKernelImplCPU = SimpleUnaryImpl;\nconst {\n  addImpl: addImplCPU,\n  bincountImpl: bincountImplCPU,\n  bincountReduceImpl: bincountReduceImplCPU,\n  ceilImpl: ceilImplCPU,\n  concatImpl: concatImplCPU,\n  equalImpl: equalImplCPU,\n  expImpl: expImplCPU,\n  expm1Impl: expm1ImplCPU,\n  floorImpl: floorImplCPU,\n  gatherNdImpl: gatherNdImplCPU,\n  gatherV2Impl: gatherV2ImplCPU,\n  greaterImpl: greaterImplCPU,\n  greaterEqualImpl: greaterEqualImplCPU,\n  lessImpl: lessImplCPU,\n  lessEqualImpl: lessEqualImplCPU,\n  linSpaceImpl: linSpaceImplCPU,\n  logImpl: logImplCPU,\n  maxImpl: maxImplCPU,\n  maximumImpl: maximumImplCPU,\n  minimumImpl: minimumImplCPU,\n  multiplyImpl: multiplyImplCPU,\n  negImpl: negImplCPU,\n  notEqualImpl: notEqualImplCPU,\n  prodImpl: prodImplCPU,\n  rangeImpl: rangeImplCPU,\n  rsqrtImpl: rsqrtImplCPU,\n  sigmoidImpl: sigmoidImplCPU,\n  simpleAbsImpl: simpleAbsImplCPU,\n  sliceImpl: sliceImplCPU,\n  sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU,\n  sparseReshapeImpl: sparseReshapeImplCPU,\n  sparseSegmentReductionImpl: sparseSegmentReductionImplCPU,\n  sqrtImpl: sqrtImplCPU,\n  stridedSliceImpl: stridedSliceImplCPU,\n  stringNGramsImpl: stringNGramsImplCPU,\n  stringSplitImpl: stringSplitImplCPU,\n  stringToHashBucketFastImpl: stringToHashBucketFastImplCPU,\n  subImpl: subImplCPU,\n  tileImpl: tileImplCPU,\n  topKImpl: topKImplCPU,\n  transposeImpl: transposeImplCPU,\n  uniqueImpl: uniqueImplCPU,\n} = shared;\n\nexport {\n  addImplCPU,\n  bincountImplCPU,\n  bincountReduceImplCPU,\n  ceilImplCPU,\n  concatImplCPU,\n  equalImplCPU,\n  expImplCPU,\n  expm1ImplCPU,\n  floorImplCPU,\n  gatherNdImplCPU,\n  gatherV2ImplCPU,\n  greaterEqualImplCPU,\n  greaterImplCPU,\n  lessEqualImplCPU,\n  lessImplCPU,\n  linSpaceImplCPU,\n  logImplCPU,\n  maxImplCPU,\n  maximumImplCPU,\n  minimumImplCPU,\n  multiplyImplCPU,\n  negImplCPU,\n  notEqualImplCPU,\n  prodImplCPU,\n  sigmoidImplCPU,\n  simpleAbsImplCPU,\n  sliceImplCPU,\n  sparseFillEmptyRowsImplCPU,\n  sparseReshapeImplCPU,\n  sparseSegmentReductionImplCPU,\n  sqrtImplCPU,\n  stridedSliceImplCPU,\n  stringNGramsImplCPU,\n  stringSplitImplCPU,\n  stringToHashBucketFastImplCPU,\n  subImplCPU,\n  rangeImplCPU,\n  rsqrtImplCPU,\n  tileImplCPU,\n  topKImplCPU,\n  transposeImplCPU,\n  uniqueImplCPU,\n};\n"]},"metadata":{},"sourceType":"module"}