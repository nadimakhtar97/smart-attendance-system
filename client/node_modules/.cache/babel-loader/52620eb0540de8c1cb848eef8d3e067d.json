{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Conv2D } from '../kernel_names';\nimport { conv2DBackpropFilter } from '../ops/conv2d_backprop_filter';\nimport { conv2DBackpropInput } from '../ops/conv2d_backprop_input';\nimport * as conv_util from '../ops/conv_util';\nimport * as util from '../util';\nexport const conv2DGradConfig = {\n  kernelName: Conv2D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x4D, $filter] = saved;\n    const {\n      dilations,\n      strides,\n      pad,\n      dataFormat\n    } = attrs;\n    util.assert(conv_util.tupleValuesAreOne(dilations), () => 'Error in gradient of conv2D: dilation rates greater than 1 ' + `are not yet supported in gradients. Got dilations '${dilations}'`);\n    return {\n      x: () => conv2DBackpropInput(x4D.shape, dy, $filter, strides, pad, dataFormat),\n      filter: () => conv2DBackpropFilter(x4D, dy, $filter.shape, strides, pad, dataFormat)\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAkC,iBAAlC;AAEA,SAAQC,oBAAR,QAAmC,+BAAnC;AACA,SAAQC,mBAAR,QAAkC,8BAAlC;AACA,OAAO,KAAKC,SAAZ,MAA2B,kBAA3B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,OAAO,MAAMC,gBAAgB,GAAe;AAC1CC,YAAU,EAAEN,MAD8B;AAE1CO,cAAY,EAAE,CAAC,GAAD,EAAM,QAAN,CAF4B;AAG1CC,UAAQ,EAAE,CAACC,EAAD,EAAeC,KAAf,EAAgCC,KAAhC,KAAuD;AAC/D,UAAM,CAACC,GAAD,EAAMC,OAAN,IAAiBH,KAAvB;AACA,UAAM;AAACI,eAAD;AAAYC,aAAZ;AAAqBC,SAArB;AAA0BC;AAA1B,QAAwCN,KAA9C;AAEAP,QAAI,CAACc,MAAL,CACIf,SAAS,CAACgB,iBAAV,CAA4BL,SAA5B,CADJ,EAEI,MAAM,gEACF,sDAAsDA,SAAS,GAHvE;AAKA,WAAO;AACLM,OAAC,EAAE,MACClB,mBAAmB,CAACU,GAAG,CAACS,KAAL,EAAYZ,EAAZ,EAAgBI,OAAhB,EAAyBE,OAAzB,EAAkCC,GAAlC,EAAuCC,UAAvC,CAFlB;AAGLK,YAAM,EAAE,MACJrB,oBAAoB,CAACW,GAAD,EAAMH,EAAN,EAAUI,OAAO,CAACQ,KAAlB,EAAyBN,OAAzB,EAAkCC,GAAlC,EAAuCC,UAAvC;AAJnB,KAAP;AAMD;AAlByC,CAArC","names":["Conv2D","conv2DBackpropFilter","conv2DBackpropInput","conv_util","util","conv2DGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x4D","$filter","dilations","strides","pad","dataFormat","assert","tupleValuesAreOne","x","shape","filter"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/Conv2D_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Conv2D, Conv2DAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {conv2DBackpropFilter} from '../ops/conv2d_backprop_filter';\nimport {conv2DBackpropInput} from '../ops/conv2d_backprop_input';\nimport * as conv_util from '../ops/conv_util';\nimport {Tensor, Tensor4D} from '../tensor';\nimport * as util from '../util';\n\nexport const conv2DGradConfig: GradConfig = {\n  kernelName: Conv2D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor4D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x4D, $filter] = saved as [Tensor4D, Tensor4D];\n    const {dilations, strides, pad, dataFormat} = attrs as {} as Conv2DAttrs;\n\n    util.assert(\n        conv_util.tupleValuesAreOne(dilations),\n        () => 'Error in gradient of conv2D: dilation rates greater than 1 ' +\n            `are not yet supported in gradients. Got dilations '${dilations}'`);\n\n    return {\n      x: () =>\n          conv2DBackpropInput(x4D.shape, dy, $filter, strides, pad, dataFormat),\n      filter: () =>\n          conv2DBackpropFilter(x4D, dy, $filter.shape, strides, pad, dataFormat)\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}