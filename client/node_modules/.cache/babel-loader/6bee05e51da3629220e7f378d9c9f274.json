{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPool3DGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { checkPadOnDimRoundingMode } from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of a 3d avg pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\n\nfunction avgPool3dGrad_(dy, input, filterSize, strides, pad, dimRoundingMode) {\n  const $dy = convertToTensor(dy, 'dy', 'avgPool3dGrad');\n  const $input = convertToTensor(input, 'input', 'avgPool3dGrad');\n  let dy5D = $dy;\n  let input5D = $input;\n  let reshapedTo5D = false;\n\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]]);\n  }\n\n  util.assert(dy5D.rank === 5, () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ` + `${dy5D.rank}.`);\n  util.assert(input5D.rank === 5, () => `Error in avgPool3dGrad: input must be rank 5 but got rank ` + `${input5D.rank}.`);\n  checkPadOnDimRoundingMode('avgPool3dGrad', pad, dimRoundingMode);\n  const inputs = {\n    dy: dy5D,\n    input: input5D\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(AvgPool3DGrad, inputs, attrs);\n\n  if (reshapedTo5D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]);\n  }\n\n  return res;\n}\n\nexport const avgPool3dGrad = op({\n  avgPool3dGrad_\n});","map":{"version":3,"mappings":"AACA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,aAAR,QAAqE,iBAArE;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,yBAAR,QAAwC,aAAxC;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;AAoBA,SAASC,cAAT,CACIC,EADJ,EACsBC,KADtB,EAEIC,UAFJ,EAGIC,OAHJ,EAG8CC,GAH9C,EAIIC,eAJJ,EAI4C;AAC1C,QAAMC,GAAG,GAAGZ,eAAe,CAACM,EAAD,EAAK,IAAL,EAAW,eAAX,CAA3B;AACA,QAAMO,MAAM,GAAGb,eAAe,CAACO,KAAD,EAAQ,OAAR,EAAiB,eAAjB,CAA9B;AAEA,MAAIO,IAAI,GAAGF,GAAX;AACA,MAAIG,OAAO,GAAGF,MAAd;AACA,MAAIG,YAAY,GAAG,KAAnB;;AAEA,MAAIH,MAAM,CAACI,IAAP,KAAgB,CAApB,EAAuB;AACrBD,gBAAY,GAAG,IAAf;AACAF,QAAI,GAAGV,OAAO,CACVQ,GADU,EACL,CAAC,CAAD,EAAIA,GAAG,CAACM,KAAJ,CAAU,CAAV,CAAJ,EAAkBN,GAAG,CAACM,KAAJ,CAAU,CAAV,CAAlB,EAAgCN,GAAG,CAACM,KAAJ,CAAU,CAAV,CAAhC,EAA8CN,GAAG,CAACM,KAAJ,CAAU,CAAV,CAA9C,CADK,CAAd;AAEAH,WAAO,GAAGX,OAAO,CAACS,MAAD,EAAS,CACxB,CADwB,EACrBA,MAAM,CAACK,KAAP,CAAa,CAAb,CADqB,EACJL,MAAM,CAACK,KAAP,CAAa,CAAb,CADI,EACaL,MAAM,CAACK,KAAP,CAAa,CAAb,CADb,EAC8BL,MAAM,CAACK,KAAP,CAAa,CAAb,CAD9B,CAAT,CAAjB;AAGD;;AAEDjB,MAAI,CAACkB,MAAL,CACIL,IAAI,CAACG,IAAL,KAAc,CADlB,EAEI,MAAM,4DACF,GAAGH,IAAI,CAACG,IAAI,GAHpB;AAIAhB,MAAI,CAACkB,MAAL,CACIJ,OAAO,CAACE,IAAR,KAAiB,CADrB,EAEI,MAAM,+DACF,GAAGF,OAAO,CAACE,IAAI,GAHvB;AAIAf,2BAAyB,CAAC,eAAD,EAAkBQ,GAAlB,EAAuBC,eAAvB,CAAzB;AACA,QAAMS,MAAM,GAAwB;AAACd,MAAE,EAAEQ,IAAL;AAAWP,SAAK,EAAEQ;AAAlB,GAApC;AACA,QAAMM,KAAK,GAAuB;AAACb,cAAD;AAAaC,WAAb;AAAsBC,OAAtB;AAA2BC;AAA3B,GAAlC,CA3B0C,CA6B1C;;AACA,QAAMW,GAAG,GAAGxB,MAAM,CAACyB,SAAP,CACIxB,aADJ,EACmBqB,MADnB,EAEIC,KAFJ,CAAZ;;AAIA,MAAIL,YAAJ,EAAkB;AAChB,WAAOZ,OAAO,CACHkB,GADG,EACE,CAACA,GAAG,CAACJ,KAAJ,CAAU,CAAV,CAAD,EAAeI,GAAG,CAACJ,KAAJ,CAAU,CAAV,CAAf,EAA6BI,GAAG,CAACJ,KAAJ,CAAU,CAAV,CAA7B,EAA2CI,GAAG,CAACJ,KAAJ,CAAU,CAAV,CAA3C,CADF,CAAd;AAGD;;AAED,SAAOI,GAAP;AACD;;AAED,OAAO,MAAME,aAAa,GAAGrB,EAAE,CAAC;AAACE;AAAD,CAAD,CAAxB","names":["ENGINE","AvgPool3DGrad","convertToTensor","util","checkPadOnDimRoundingMode","op","reshape","avgPool3dGrad_","dy","input","filterSize","strides","pad","dimRoundingMode","$dy","$input","dy5D","input5D","reshapedTo5D","rank","shape","assert","inputs","attrs","res","runKernel","avgPool3dGrad"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/avg_pool_3d_grad.ts"],"sourcesContent":["\n/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {AvgPool3DGrad, AvgPool3DGradAttrs, AvgPool3DGradInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor4D, Tensor5D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {checkPadOnDimRoundingMode} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the backprop of a 3d avg pool.\n *\n * @param dy The dy error, of rank 5 of shape\n *     [batchSize, depth, height, width, channels].\n * assumed.\n * @param input The original input image, of rank 5 or rank4 of shape\n *     [batchSize, depth, height, width, channels].\n * @param filterSize The filter size:\n *     `[filterDepth, filterHeight, filterWidth]`.\n *     `filterSize` is a single number,\n *     then `filterDepth == filterHeight == filterWidth`.\n * @param strides The strides of the pooling:\n *     `[strideDepth, strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad A string from: 'same', 'valid'. The type of padding algorithm\n *     used in the forward prop of the op.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n */\nfunction avgPool3dGrad_<T extends Tensor4D|Tensor5D>(\n    dy: T|TensorLike, input: T|TensorLike,\n    filterSize: [number, number, number]|number,\n    strides: [number, number, number]|number, pad: 'valid'|'same'|number,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $dy = convertToTensor(dy, 'dy', 'avgPool3dGrad');\n  const $input = convertToTensor(input, 'input', 'avgPool3dGrad');\n\n  let dy5D = $dy as Tensor5D;\n  let input5D = $input as Tensor5D;\n  let reshapedTo5D = false;\n\n  if ($input.rank === 4) {\n    reshapedTo5D = true;\n    dy5D = reshape(\n        $dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2], $dy.shape[3]]);\n    input5D = reshape($input, [\n      1, $input.shape[0], $input.shape[1], $input.shape[2], $input.shape[3]\n    ]);\n  }\n\n  util.assert(\n      dy5D.rank === 5,\n      () => `Error in avgPool3dGrad: dy must be rank 5 but got rank ` +\n          `${dy5D.rank}.`);\n  util.assert(\n      input5D.rank === 5,\n      () => `Error in avgPool3dGrad: input must be rank 5 but got rank ` +\n          `${input5D.rank}.`);\n  checkPadOnDimRoundingMode('avgPool3dGrad', pad, dimRoundingMode);\n  const inputs: AvgPool3DGradInputs = {dy: dy5D, input: input5D};\n  const attrs: AvgPool3DGradAttrs = {filterSize, strides, pad, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  AvgPool3DGrad, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo5D) {\n    return reshape(\n               res, [res.shape[1], res.shape[2], res.shape[3], res.shape[4]]) as\n        T;\n  }\n\n  return res;\n}\n\nexport const avgPool3dGrad = op({avgPool3dGrad_});\n"]},"metadata":{},"sourceType":"module"}