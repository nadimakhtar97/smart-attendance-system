{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as util from './util';\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\n\nexport function getFilteredNodesXToY(tape, xs, y) {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX = {};\n  const nodesFromX = {};\n\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n      let anyInputFromX = false;\n\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  } // Backward pass to find all of the nodes and Tensors that lead to y.\n\n\n  const tensorsLeadToY = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs; // If any of the outputs lead to y, mark all of the inputs as leading to y.\n\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n\n        break;\n      }\n    }\n  } // Return the paths that come from x and lead to y.\n\n\n  const filteredTape = [];\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs = {};\n\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      } // Copy the node and overwrite inputsAndArgs to the pruned version.\n\n\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\n\nexport function backpropagateGradients(tensorAccumulatedGradientMap, filteredTape, tidy, add) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n    const dys = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(`Cannot compute gradient: gradient function not found ` + `for ${node.kernelName}.`);\n    } // Backprop dy through this node and accumulate gradients over the inputs.\n\n\n    const inputGradients = node.gradient(dys);\n\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(`Cannot backprop through input ${inputName}. ` + `Available gradients found: ${Object.keys(inputGradients)}.`);\n      } // Call the gradient function.\n\n\n      const dx = tidy(() => inputGradients[inputName]());\n\n      if (dx.dtype !== 'float32') {\n        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n\n      const x = node.inputs[inputName];\n\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(`Error in gradient for op ${node.kernelName}. The gradient of input ` + `'${inputName}' has shape '${dx.shape}', which does not match ` + `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,OAAO,KAAKA,IAAZ,MAAsB,QAAtB;AAgBA;;;;;;;;;AAQA,OAAM,SAAUC,oBAAV,CACFC,IADE,EACgBC,EADhB,EAC8BC,CAD9B,EACuC;AAC3C;AACA;AACA,QAAMC,YAAY,GAAkC,EAApD;AACA,QAAMC,UAAU,GAAgC,EAAhD;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,EAAE,CAACK,MAAvB,EAA+BD,CAAC,EAAhC,EAAoC;AAClCF,gBAAY,CAACF,EAAE,CAACI,CAAD,CAAF,CAAME,EAAP,CAAZ,GAAyB,IAAzB;AACD;;AAED,OAAK,IAAIF,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAMG,IAAI,GAAGR,IAAI,CAACK,CAAD,CAAjB;AACA,UAAMI,UAAU,GAAGD,IAAI,CAACE,MAAxB;;AACA,SAAK,MAAMC,SAAX,IAAwBF,UAAxB,EAAoC;AAClC,YAAMG,KAAK,GAAGH,UAAU,CAACE,SAAD,CAAxB;AAEA,UAAIE,aAAa,GAAG,KAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGb,EAAE,CAACK,MAAvB,EAA+BQ,CAAC,EAAhC,EAAoC;AAClC,YAAIX,YAAY,CAACS,KAAK,CAACL,EAAP,CAAhB,EAA4B;AAC1BC,cAAI,CAACO,OAAL,CAAaC,OAAb,CAAqBC,MAAM,IAAId,YAAY,CAACc,MAAM,CAACV,EAAR,CAAZ,GAA0B,IAAzD;AACAM,uBAAa,GAAG,IAAhB;AACAT,oBAAU,CAACI,IAAI,CAACD,EAAN,CAAV,GAAsB,IAAtB;AACA;AACD;AACF;;AAED,UAAIM,aAAJ,EAAmB;AACjB;AACD;AACF;AACF,GA7B0C,CA+B3C;;;AACA,QAAMK,cAAc,GAAkC,EAAtD;AACAA,gBAAc,CAAChB,CAAC,CAACK,EAAH,CAAd,GAAuB,IAAvB;AACA,QAAMY,QAAQ,GAAgC,EAA9C;;AAEA,OAAK,IAAId,CAAC,GAAGL,IAAI,CAACM,MAAL,GAAc,CAA3B,EAA8BD,CAAC,IAAI,CAAnC,EAAsCA,CAAC,EAAvC,EAA2C;AACzC,UAAMG,IAAI,GAAGR,IAAI,CAACK,CAAD,CAAjB;AACA,UAAMI,UAAU,GAAGD,IAAI,CAACE,MAAxB,CAFyC,CAIzC;;AACA,SAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,IAAI,CAACO,OAAL,CAAaT,MAAjC,EAAyCQ,CAAC,EAA1C,EAA8C;AAC5C,UAAII,cAAc,CAACV,IAAI,CAACO,OAAL,CAAaD,CAAb,EAAgBP,EAAjB,CAAlB,EAAwC;AACtC,aAAK,MAAMI,SAAX,IAAwBF,UAAxB,EAAoC;AAClCS,wBAAc,CAACT,UAAU,CAACE,SAAD,CAAV,CAAsBJ,EAAvB,CAAd,GAA2C,IAA3C;AACAY,kBAAQ,CAACX,IAAI,CAACD,EAAN,CAAR,GAAoB,IAApB;AACD;;AACD;AACD;AACF;AACF,GAlD0C,CAoD3C;;;AACA,QAAMa,YAAY,GAAe,EAAjC;;AACA,OAAK,IAAIf,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACM,MAAzB,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAMG,IAAI,GAAGR,IAAI,CAACK,CAAD,CAAjB;;AAEA,QAAID,UAAU,CAACI,IAAI,CAACD,EAAN,CAAV,IAAuBY,QAAQ,CAACX,IAAI,CAACD,EAAN,CAAnC,EAA8C;AAC5C;AACA,YAAMc,YAAY,GAAkC,EAApD;;AACA,WAAK,MAAMV,SAAX,IAAwBH,IAAI,CAACE,MAA7B,EAAqC;AACnC,cAAMY,SAAS,GAAGd,IAAI,CAACE,MAAL,CAAYC,SAAZ,CAAlB;;AACA,YAAIR,YAAY,CAACmB,SAAS,CAACf,EAAX,CAAhB,EAAgC;AAC9Bc,sBAAY,CAACV,SAAD,CAAZ,GAA0BW,SAA1B;AACD;AACF,OAR2C,CAU5C;;;AACA,YAAMC,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBjB,IAAlB,CAAnB;AACAe,gBAAU,CAACb,MAAX,GAAoBW,YAApB;AACAE,gBAAU,CAACR,OAAX,GAAqBP,IAAI,CAACO,OAA1B;AAEAK,kBAAY,CAACM,IAAb,CAAkBH,UAAlB;AACD;AACF;;AAED,SAAOH,YAAP;AACD;AAED;;;;;;;;AAOA,OAAM,SAAUO,sBAAV,CACFC,4BADE,EAEFR,YAFE,EAEwBS,IAFxB,EAGFC,GAHE,EAGmC;AACvC;AACA,OAAK,IAAIzB,CAAC,GAAGe,YAAY,CAACd,MAAb,GAAsB,CAAnC,EAAsCD,CAAC,IAAI,CAA3C,EAA8CA,CAAC,EAA/C,EAAmD;AACjD,UAAMG,IAAI,GAAGY,YAAY,CAACf,CAAD,CAAzB;AAEA,UAAM0B,GAAG,GAAa,EAAtB;AACAvB,QAAI,CAACO,OAAL,CAAaC,OAAb,CAAqBgB,CAAC,IAAG;AACvB,YAAMC,UAAU,GAAGL,4BAA4B,CAACI,CAAC,CAACzB,EAAH,CAA/C;;AACA,UAAI0B,UAAU,IAAI,IAAlB,EAAwB;AACtBF,WAAG,CAACL,IAAJ,CAASO,UAAT;AACD,OAFD,MAEO;AACL;AACA;AACAF,WAAG,CAACL,IAAJ,CAAS,IAAT;AACD;AACF,KATD;;AAWA,QAAIlB,IAAI,CAAC0B,QAAL,IAAiB,IAArB,EAA2B;AACzB,YAAM,IAAIC,KAAJ,CACF,0DACA,OAAO3B,IAAI,CAAC4B,UAAU,GAFpB,CAAN;AAGD,KAnBgD,CAqBjD;;;AACA,UAAMC,cAAc,GAAG7B,IAAI,CAAC0B,QAAL,CAAcH,GAAd,CAAvB;;AAEA,SAAK,MAAMpB,SAAX,IAAwBH,IAAI,CAACE,MAA7B,EAAqC;AACnC,UAAI,EAAEC,SAAS,IAAI0B,cAAf,CAAJ,EAAoC;AAClC,cAAM,IAAIF,KAAJ,CACF,iCAAiCxB,SAAS,IAA1C,GACA,8BAA8Ba,MAAM,CAACc,IAAP,CAAYD,cAAZ,CAA2B,GAFvD,CAAN;AAGD,OALkC,CAOnC;;;AACA,YAAME,EAAE,GAAGV,IAAI,CAAC,MAAMQ,cAAc,CAAC1B,SAAD,CAAd,EAAP,CAAf;;AACA,UAAI4B,EAAE,CAACC,KAAH,KAAa,SAAjB,EAA4B;AAC1B,cAAM,IAAIL,KAAJ,CACF,4BACI3B,IAAI,CAAC4B,UAAU,0BADnB,GAEA,GAAGzB,SAAS,wCAAwC4B,EAAE,CAACC,KAAK,GAH1D,CAAN;AAID;;AACD,YAAMC,CAAC,GAAGjC,IAAI,CAACE,MAAL,CAAYC,SAAZ,CAAV;;AACA,UAAI,CAACb,IAAI,CAAC4C,WAAL,CAAiBH,EAAE,CAACI,KAApB,EAA2BF,CAAC,CAACE,KAA7B,CAAL,EAA0C;AACxC,cAAM,IAAIR,KAAJ,CACF,4BACI3B,IAAI,CAAC4B,UAAU,0BADnB,GAEA,IAAIzB,SAAS,gBAAgB4B,EAAE,CAACI,KAAK,0BAFrC,GAGA,2BAA2BF,CAAC,CAACE,KAAK,GAJhC,CAAN;AAKD;;AAED,UAAIf,4BAA4B,CAACa,CAAC,CAAClC,EAAH,CAA5B,IAAsC,IAA1C,EAAgD;AAC9CqB,oCAA4B,CAACa,CAAC,CAAClC,EAAH,CAA5B,GAAqCgC,EAArC;AACD,OAFD,MAEO;AACL,cAAMK,WAAW,GAAGhB,4BAA4B,CAACa,CAAC,CAAClC,EAAH,CAAhD;AACAqB,oCAA4B,CAACa,CAAC,CAAClC,EAAH,CAA5B,GAAqCuB,GAAG,CAACc,WAAD,EAAcL,EAAd,CAAxC;AACAK,mBAAW,CAACC,OAAZ;AACD;AACF;AACF;AACF","names":["util","getFilteredNodesXToY","tape","xs","y","tensorsFromX","nodesFromX","i","length","id","node","nodeInputs","inputs","inputName","input","anyInputFromX","j","outputs","forEach","output","tensorsLeadToY","nodesToY","filteredTape","prunedInputs","nodeInput","prunedNode","Object","assign","push","backpropagateGradients","tensorAccumulatedGradientMap","tidy","add","dys","o","gradTensor","gradient","Error","kernelName","inputGradients","keys","dx","dtype","x","arraysEqual","shape","curGradient","dispose"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/tape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport * as util from './util';\n\nexport interface TapeNode {\n  id: number;\n  kernelName: string;\n  outputs: Tensor[];\n  inputs: NamedTensorMap;\n  // Optional params, defined only for ops with gradient impl.\n  gradient?: (dys: Tensor[]) => NamedGradientMap;\n  saved?: Tensor[];\n}\n\nexport type NamedGradientMap = {\n  [inputName: string]: () => Tensor;\n};\n\n/**\n * Computes a list of TapeNodes that connect x to y, filtering everything else\n * out and preserving the order of the original tape elements.\n *\n * @param tape The tape elements to filter.\n * @param xs The input Tensors.\n * @param y The output Tensor.\n */\nexport function getFilteredNodesXToY(\n    tape: TapeNode[], xs: Tensor[], y: Tensor): TapeNode[] {\n  // Forward pass to compute all the nodes and Tensors that are transitively a\n  // function of x.\n  const tensorsFromX: {[tensorId: number]: boolean} = {};\n  const nodesFromX: {[nodeId: number]: boolean} = {};\n  for (let i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n    for (const inputName in nodeInputs) {\n      const input = nodeInputs[inputName];\n\n      let anyInputFromX = false;\n      for (let j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          node.outputs.forEach(output => tensorsFromX[output.id] = true);\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n\n  // Backward pass to find all of the nodes and Tensors that lead to y.\n  const tensorsLeadToY: {[tensorId: number]: boolean} = {};\n  tensorsLeadToY[y.id] = true;\n  const nodesToY: {[nodeId: number]: boolean} = {};\n\n  for (let i = tape.length - 1; i >= 0; i--) {\n    const node = tape[i];\n    const nodeInputs = node.inputs;\n\n    // If any of the outputs lead to y, mark all of the inputs as leading to y.\n    for (let j = 0; j < node.outputs.length; j++) {\n      if (tensorsLeadToY[node.outputs[j].id]) {\n        for (const inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n        break;\n      }\n    }\n  }\n\n  // Return the paths that come from x and lead to y.\n  const filteredTape: TapeNode[] = [];\n  for (let i = 0; i < tape.length; i++) {\n    const node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      // Prune the inputs from the node that aren't a function of x.\n      const prunedInputs: {[inputName: string]: Tensor} = {};\n      for (const inputName in node.inputs) {\n        const nodeInput = node.inputs[inputName];\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n\n      // Copy the node and overwrite inputsAndArgs to the pruned version.\n      const prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.outputs = node.outputs;\n\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n\n/**\n * Backpropagate gradients through the filtered TapeNodes.\n *\n * @param tensorAccumulatedGradientMap A map of Tensor to its gradient. This map\n * is mutated by this method.\n * @param filteredTape The filtered TapeNodes to backprop through.\n */\nexport function backpropagateGradients(\n    tensorAccumulatedGradientMap: {[tensorId: number]: Tensor},\n    filteredTape: TapeNode[], tidy: (f: Function) => Tensor,\n    add: (a: Tensor, b: Tensor) => Tensor) {\n  // Walk the tape backward and keep a map of Tensor to its gradient.\n  for (let i = filteredTape.length - 1; i >= 0; i--) {\n    const node = filteredTape[i];\n\n    const dys: Tensor[] = [];\n    node.outputs.forEach(o => {\n      const gradTensor = tensorAccumulatedGradientMap[o.id];\n      if (gradTensor != null) {\n        dys.push(gradTensor);\n      } else {\n        // This particular output is not in the back-propagation subgraph, so it\n        // does not affect the final output, thus we put null for its dy.\n        dys.push(null);\n      }\n    });\n\n    if (node.gradient == null) {\n      throw new Error(\n          `Cannot compute gradient: gradient function not found ` +\n          `for ${node.kernelName}.`);\n    }\n\n    // Backprop dy through this node and accumulate gradients over the inputs.\n    const inputGradients = node.gradient(dys);\n\n    for (const inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(\n            `Cannot backprop through input ${inputName}. ` +\n            `Available gradients found: ${Object.keys(inputGradients)}.`);\n      }\n\n      // Call the gradient function.\n      const dx = tidy(() => inputGradients[inputName]());\n      if (dx.dtype !== 'float32') {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `${inputName} must have 'float32' dtype, but has '${dx.dtype}'`);\n      }\n      const x = node.inputs[inputName];\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(\n            `Error in gradient for op ${\n                node.kernelName}. The gradient of input ` +\n            `'${inputName}' has shape '${dx.shape}', which does not match ` +\n            `the shape of the input '${x.shape}'`);\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        const curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = add(curGradient, dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}