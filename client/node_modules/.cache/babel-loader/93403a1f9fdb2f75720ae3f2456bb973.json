{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial } from '@tensorflow/tfjs-core';\nimport { MultinomialProgram } from '../multinomial_gpu';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    logits\n  } = inputs;\n  const {\n    numSamples,\n    seed,\n    normalized\n  } = attrs;\n  const probs = normalized ? logits : softmax({\n    inputs: {\n      logits\n    },\n    backend,\n    attrs: {\n      dim: logits.shape.length - 1\n    }\n  });\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n\n  return res;\n}\nexport const multinomialConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,WAAlC,QAAqG,uBAArG;AAGA,SAAQC,kBAAR,QAAiC,oBAAjC;AAEA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAUC,WAAV,CAAsBC,IAAtB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAWH,MAAjB;AACA,QAAM;AAACI,cAAD;AAAaC,QAAb;AAAmBC;AAAnB,MAAiCJ,KAAvC;AAEA,QAAMK,KAAK,GAAGD,UAAU,GACpBH,MADoB,GAEpBN,OAAO,CACH;AAACG,UAAM,EAAE;AAACG;AAAD,KAAT;AAAmBF,WAAnB;AAA4BC,SAAK,EAAE;AAACM,SAAG,EAAEL,MAAM,CAACM,KAAP,CAAaC,MAAb,GAAsB;AAA5B;AAAnC,GADG,CAFX;AAIA,QAAMC,SAAS,GAAGJ,KAAK,CAACE,KAAN,CAAY,CAAZ,CAAlB;AACA,QAAMG,WAAW,GAAGL,KAAK,CAACE,KAAN,CAAY,CAAZ,CAApB;AACA,QAAMI,OAAO,GAAG,IAAIjB,kBAAJ,CAAuBe,SAAvB,EAAkCC,WAAlC,EAA+CR,UAA/C,CAAhB;AACA,QAAMU,YAAY,GAAG,CAAC,CAACT,IAAD,CAAD,CAArB;AACA,QAAMU,GAAG,GAAGd,OAAO,CAACe,eAAR,CAAwBH,OAAxB,EAAiC,CAACN,KAAD,CAAjC,EAA0C,OAA1C,EAAmDO,YAAnD,CAAZ;;AACA,MAAI,CAACR,UAAL,EAAiB;AACfL,WAAO,CAACgB,6BAAR,CAAsCV,KAAtC;AACD;;AACD,SAAOQ,GAAP;AACD;AAED,OAAO,MAAMG,iBAAiB,GAAiB;AAC7CC,YAAU,EAAExB,WADiC;AAE7CyB,aAAW,EAAE,OAFgC;AAG7CC,YAAU,EAAEvB;AAHiC,CAAxC","names":["Multinomial","MultinomialProgram","softmax","multinomial","args","inputs","backend","attrs","logits","numSamples","seed","normalized","probs","dim","shape","length","batchSize","numOutcomes","program","customValues","res","runWebGLProgram","disposeIntermediateTensorInfo","multinomialConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Multinomial.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Multinomial, MultinomialAttrs, MultinomialInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MultinomialProgram} from '../multinomial_gpu';\n\nimport {softmax} from './Softmax';\n\nexport function multinomial(args: {\n  inputs: MultinomialInputs,\n  backend: MathBackendWebGL,\n  attrs: MultinomialAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {logits} = inputs;\n  const {numSamples, seed, normalized} = attrs;\n\n  const probs = normalized ?\n      logits :\n      softmax(\n          {inputs: {logits}, backend, attrs: {dim: logits.shape.length - 1}});\n  const batchSize = probs.shape[0];\n  const numOutcomes = probs.shape[1];\n  const program = new MultinomialProgram(batchSize, numOutcomes, numSamples);\n  const customValues = [[seed]];\n  const res = backend.runWebGLProgram(program, [probs], 'int32', customValues);\n  if (!normalized) {\n    backend.disposeIntermediateTensorInfo(probs);\n  }\n  return res;\n}\n\nexport const multinomialConfig: KernelConfig = {\n  kernelName: Multinomial,\n  backendName: 'webgl',\n  kernelFunc: multinomial as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}