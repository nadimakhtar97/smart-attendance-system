{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, sumOutType, UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { SegmentOpProgram } from '../segment_gpu';\nimport { range } from './Range';\nimport { reshape } from './Reshape';\nimport { tile } from './Tile';\nimport { transpose } from './Transpose';\nexport function unsortedSegmentSum(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    segmentIds\n  } = inputs;\n  const {\n    numSegments\n  } = attrs;\n  const xRank = x.shape.length;\n  const toDispose = [];\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n\n  if (permutation != null) {\n    permutedX = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutation\n      }\n    });\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D = reshape({\n    inputs: {\n      x: permutedX\n    },\n    backend,\n    attrs: {\n      shape: [-1, inSize]\n    }\n  });\n  toDispose.push(a2D);\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute = (x, segOpType, segmentIds, dtype, numSegments) => {\n    const batchSize = x.shape[0];\n    const inSize = x.shape[1];\n    const windowSize = backend_util.segment_util.segOpComputeOptimalWindowSize(inSize, numSegments);\n    const segOpInfo = {\n      windowSize,\n      inSize,\n      batchSize,\n      numSegments\n    };\n    const program = new SegmentOpProgram(segOpInfo, segOpType);\n    const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n    toDispose.push(output); // No need to run another GPGPU program.\n\n    if (output.shape[1] === numSegments) {\n      return output;\n    }\n\n    const rangeInfo = range({\n      backend,\n      attrs: {\n        start: 0,\n        stop: numSegments,\n        step: 1,\n        dtype: 'float32'\n      }\n    });\n    const tileInfo = tile({\n      inputs: {\n        x: rangeInfo\n      },\n      backend,\n      attrs: {\n        reps: [inSize / windowSize]\n      }\n    });\n    toDispose.push(rangeInfo);\n    toDispose.push(tileInfo);\n    const result = segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n    return result;\n  };\n\n  const segOpResult = segOpCompute(a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n  const reshaped = reshape({\n    inputs: {\n      x: segOpResult\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  let result = reshaped;\n\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({\n      inputs: {\n        x: result\n      },\n      backend,\n      attrs: {\n        perm\n      }\n    });\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const unsortedSegmentSumConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum\n};","map":{"version":3,"mappings":"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","names":["backend_util","sumOutType","UnsortedSegmentSum","util","SegmentOpProgram","range","reshape","tile","transpose","unsortedSegmentSum","args","inputs","backend","attrs","x","segmentIds","numSegments","xRank","shape","length","toDispose","axis","permutation","getAxesPermutation","permutedX","perm","push","getInnerMostAxes","outShape","segment_util","computeOutShape","inSize","sizeFromShape","a2D","outputDType","dtype","segOpCompute","segOpType","batchSize","windowSize","segOpComputeOptimalWindowSize","segOpInfo","program","output","compileAndRun","rangeInfo","start","stop","step","tileInfo","reps","result","segOpResult","reshaped","getUndoAxesPermutation","forEach","t","disposeIntermediateTensorInfo","unsortedSegmentSumConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/UnsortedSegmentSum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, KernelConfig, KernelFunc, sumOutType, TensorInfo, UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {SegmentOpProgram} from '../segment_gpu';\n\nimport {range} from './Range';\nimport {reshape} from './Reshape';\nimport {tile} from './Tile';\nimport {transpose} from './Transpose';\n\nexport function unsortedSegmentSum(args: {\n  inputs: UnsortedSegmentSumInputs,\n  backend: MathBackendWebGL,\n  attrs: UnsortedSegmentSumAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, segmentIds} = inputs;\n  const {numSegments} = attrs;\n\n  const xRank = x.shape.length;\n\n  const toDispose = [];\n\n  let axis = 0;\n  const permutation = backend_util.getAxesPermutation([axis], xRank);\n  let permutedX = x;\n  if (permutation != null) {\n    permutedX = transpose({inputs: {x}, backend, attrs: {perm: permutation}});\n    toDispose.push(permutedX);\n    axis = backend_util.getInnerMostAxes(1, xRank)[0];\n  }\n\n  const outShape = backend_util.segment_util.computeOutShape(\n      permutedX.shape, axis, numSegments);\n  const inSize = util.sizeFromShape([permutedX.shape[axis]]);\n  const a2D =\n      reshape({inputs: {x: permutedX}, backend, attrs: {shape: [-1, inSize]}});\n  toDispose.push(a2D);\n\n  const outputDType = sumOutType(x.dtype);\n\n  const segOpCompute =\n      (x: TensorInfo, segOpType: 'unsortedSegmentSum', segmentIds: TensorInfo,\n       dtype: DataType, numSegments: number): TensorInfo => {\n        const batchSize = x.shape[0];\n        const inSize = x.shape[1];\n        const windowSize =\n            backend_util.segment_util.segOpComputeOptimalWindowSize(\n                inSize, numSegments);\n        const segOpInfo = {windowSize, inSize, batchSize, numSegments};\n        const program = new SegmentOpProgram(segOpInfo, segOpType);\n        const output = backend.compileAndRun(program, [x, segmentIds], dtype);\n        toDispose.push(output);\n        // No need to run another GPGPU program.\n        if (output.shape[1] === numSegments) {\n          return output;\n        }\n        const rangeInfo = range({\n          backend,\n          attrs: {start: 0, stop: numSegments, step: 1, dtype: 'float32'}\n        });\n        const tileInfo = tile({\n          inputs: {x: rangeInfo},\n          backend,\n          attrs: {reps: [inSize / windowSize]}\n        });\n\n        toDispose.push(rangeInfo);\n        toDispose.push(tileInfo);\n\n        const result =\n            segOpCompute(output, segOpType, tileInfo, dtype, numSegments);\n        return result;\n      };\n\n  const segOpResult = segOpCompute(\n      a2D, 'unsortedSegmentSum', segmentIds, outputDType, numSegments);\n\n  const reshaped =\n      reshape({inputs: {x: segOpResult}, backend, attrs: {shape: outShape}});\n\n  let result = reshaped;\n  if (permutation != null) {\n    toDispose.push(reshaped);\n    const perm = backend_util.getUndoAxesPermutation(permutation);\n    result = transpose({inputs: {x: result}, backend, attrs: {perm}});\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\n\nexport const unsortedSegmentSumConfig: KernelConfig = {\n  kernelName: UnsortedSegmentSum,\n  backendName: 'webgl',\n  kernelFunc: unsortedSegmentSum as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}