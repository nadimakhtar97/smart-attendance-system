{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from './buffer';\nimport { op } from './operation';\nimport { RandGamma } from './rand_util';\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\n\nfunction randomGamma_(shape, alpha) {\n  let beta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let dtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'float32';\n  let seed = arguments.length > 4 ? arguments[4] : undefined;\n\n  if (beta == null) {\n    beta = 1;\n  }\n\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n\n  const rgamma = new RandGamma(alpha, beta, dtype, seed);\n  const res = buffer(shape, dtype);\n\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n\n  return res.toTensor();\n}\n\nexport const randomGamma = op({\n  randomGamma_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAoBA,SAAQA,MAAR,QAAqB,UAArB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;AAgBA,SAASC,YAAT,CACIC,KADJ,EACwBC,KADxB,EAEuD;AAAA,MADhBC,IACgB,uEADT,CACS;AAAA,MAAnDC,KAAmD,uEAAxB,SAAwB;AAAA,MAAbC,IAAa;;AACrD,MAAIF,IAAI,IAAI,IAAZ,EAAkB;AAChBA,QAAI,GAAG,CAAP;AACD;;AACD,MAAIC,KAAK,IAAI,IAAb,EAAmB;AACjBA,SAAK,GAAG,SAAR;AACD;;AACD,MAAIA,KAAK,KAAK,SAAV,IAAuBA,KAAK,KAAK,OAArC,EAA8C;AAC5C,UAAM,IAAIE,KAAJ,CAAU,yBAAyBF,KAAK,EAAxC,CAAN;AACD;;AACD,QAAMG,MAAM,GAAG,IAAIR,SAAJ,CAAcG,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EAAkCC,IAAlC,CAAf;AACA,QAAMG,GAAG,GAAGX,MAAM,CAACI,KAAD,EAAQG,KAAR,CAAlB;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,GAAG,CAACE,MAAJ,CAAWC,MAA/B,EAAuCF,CAAC,EAAxC,EAA4C;AAC1CD,OAAG,CAACE,MAAJ,CAAWD,CAAX,IAAgBF,MAAM,CAACK,SAAP,EAAhB;AACD;;AACD,SAAOJ,GAAG,CAACK,QAAJ,EAAP;AACD;;AAED,OAAO,MAAMC,WAAW,GAAGhB,EAAE,CAAC;AAACE;AAAD,CAAD,CAAtB","names":["buffer","op","RandGamma","randomGamma_","shape","alpha","beta","dtype","seed","Error","rgamma","res","i","values","length","nextValue","toTensor","randomGamma"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/random_gamma.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {Rank, ShapeMap} from '../types';\n\nimport {buffer} from './buffer';\nimport {op} from './operation';\nimport {RandGamma} from './rand_util';\n\n/**\n * Creates a `tf.Tensor` with values sampled from a gamma distribution.\n *\n * ```js\n * tf.randomGamma([2, 2], 1).print();\n * ```\n *\n * @param shape An array of integers defining the output tensor shape.\n * @param alpha The shape parameter of the gamma distribution.\n * @param beta The inverse scale parameter of the gamma distribution. Defaults\n *     to 1.\n * @param dtype The data type of the output. Defaults to float32.\n * @param seed The seed for the random number generator.\n *\n * @doc {heading: 'Tensors', subheading: 'Random'}\n */\nfunction randomGamma_<R extends Rank>(\n    shape: ShapeMap[R], alpha: number, beta = 1,\n    dtype: 'float32'|'int32' = 'float32', seed?: number): Tensor<R> {\n  if (beta == null) {\n    beta = 1;\n  }\n  if (dtype == null) {\n    dtype = 'float32';\n  }\n  if (dtype !== 'float32' && dtype !== 'int32') {\n    throw new Error(`Unsupported data type ${dtype}`);\n  }\n  const rgamma = new RandGamma(alpha, beta, dtype, seed);\n  const res = buffer(shape, dtype);\n  for (let i = 0; i < res.values.length; i++) {\n    res.values[i] = rgamma.nextValue();\n  }\n  return res.toTensor();\n}\n\nexport const randomGamma = op({randomGamma_});\n"]},"metadata":{},"sourceType":"module"}