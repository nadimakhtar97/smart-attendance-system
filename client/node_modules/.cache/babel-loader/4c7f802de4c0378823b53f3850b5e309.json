{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { padV2 } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport const spaceToBatchND = args => {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    paddings\n  } = attrs;\n  util.assert(x.shape.length <= 4, () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' + 'implemented yet');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const completePaddings = [[0, 0]];\n  completePaddings.push(...paddings);\n\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n  const paddedX = padV2({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      paddings: completePaddings,\n      constantValue: 0\n    }\n  });\n  const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n  const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n  const reshapedPaddedX = reshape({\n    inputs: {\n      x: paddedX\n    },\n    backend,\n    attrs: {\n      shape: reshapedPaddedShape\n    }\n  });\n  const paddedXT = transpose({\n    inputs: {\n      x: reshapedPaddedX\n    },\n    backend,\n    attrs: {\n      perm: permutedReshapedPaddedPermutation\n    }\n  });\n  const result = reshape({\n    inputs: {\n      x: paddedXT\n    },\n    backend,\n    attrs: {\n      shape: flattenShape\n    }\n  });\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n};\nexport const spaceToBatchNDConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND\n};","map":{"version":3,"mappings":"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","names":["backend_util","SpaceToBatchND","util","padV2","reshape","transpose","spaceToBatchND","args","inputs","backend","attrs","x","blockShape","paddings","assert","shape","length","prod","reduce","a","b","completePaddings","push","i","toDispose","paddedX","constantValue","reshapedPaddedShape","getReshaped","permutedReshapedPaddedPermutation","getPermuted","flattenShape","getReshapedPermuted","reshapedPaddedX","paddedXT","perm","result","forEach","t","disposeIntermediateTensorInfo","spaceToBatchNDConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/SpaceToBatchND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SpaceToBatchND, SpaceToBatchNDAttrs, SpaceToBatchNDInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {padV2} from './PadV2';\nimport {reshape} from './Reshape';\nimport {transpose} from './Transpose';\n\nexport const spaceToBatchND = (args: {\n  inputs: SpaceToBatchNDInputs,\n  backend: MathBackendWebGL,\n  attrs: SpaceToBatchNDAttrs\n}): TensorInfo => {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, paddings} = attrs;\n\n  util.assert(\n      x.shape.length <= 4,\n      () => 'spaceToBatchND for rank > 4 with a WebGL backend not ' +\n          'implemented yet');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const completePaddings: Array<[number, number]> = [[0, 0]];\n  completePaddings.push(...paddings as Array<[number, number]>);\n  for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n    completePaddings.push([0, 0]);\n  }\n\n  const toDispose = [];\n\n  const paddedX = padV2({\n    inputs: {x},\n    backend,\n    attrs: {paddings: completePaddings, constantValue: 0}\n  });\n\n  const reshapedPaddedShape =\n      backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n\n  const permutedReshapedPaddedPermutation = backend_util.getPermuted(\n      reshapedPaddedShape.length, blockShape.length, false);\n\n  const flattenShape =\n      backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n\n  const reshapedPaddedX = reshape(\n      {inputs: {x: paddedX}, backend, attrs: {shape: reshapedPaddedShape}});\n\n  const paddedXT = transpose({\n    inputs: {x: reshapedPaddedX},\n    backend,\n    attrs: {perm: permutedReshapedPaddedPermutation}\n  });\n\n  const result =\n      reshape({inputs: {x: paddedXT}, backend, attrs: {shape: flattenShape}});\n\n  toDispose.push(paddedX);\n  toDispose.push(reshapedPaddedX);\n  toDispose.push(paddedXT);\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n};\n\nexport const spaceToBatchNDConfig: KernelConfig = {\n  kernelName: SpaceToBatchND,\n  backendName: 'webgl',\n  kernelFunc: spaceToBatchND as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}