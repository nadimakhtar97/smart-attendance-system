{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\n\nclass StringNGramsOp {\n  constructor(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  getPadWidth(nGramWidth) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  getNumNGrams(length, nGramWidth) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, length + 2 * padWidth - nGramWidth + 1);\n  }\n\n  createNGrams(data, splitIndex, output, outputStartIndex, numNGrams, nGramWidth) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding = Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex = splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth); // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n\n      let nGramSize = 0; // Size of the left padding.\n\n      nGramSize += leftPadding * this.leftPad.length; // Size of the tokens.\n\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      } // Size of the right padding.\n\n\n      nGramSize += rightPadding * this.rightPad.length; // Size of the separators.\n\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length; // Build the nGram.\n\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n      let nextNGramIndex = 0;\n\n      const appendToNGram = str => str.forEach(value => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      } // Only output first numTokens - 1 pairs of data and separator\n\n\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      } // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n\n\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n\n        appendToNGram(this.rightPad);\n      }\n    }\n  } // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n\n\n  compute(data, splits) {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && splits[i] <= inputDataSize;\n\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${prevSplit}, ${inputDataSize}]`);\n        }\n\n        prevSplit = splits[i];\n      }\n\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize); // If there is no data or size, return an empty ragged tensor.\n\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty = new Array(inputDataSize);\n\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach(nGramWidth => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach(nGramWidth => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      }); // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i]; // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n\n        if (dataLength === 0) {\n          continue;\n        } // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n\n\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n\n    return [nGrams, nGramsSplits];\n  }\n\n}\n\nexport function stringNGramsImpl(data, dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences) {\n  return new StringNGramsOp(separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences).compute(data, dataSplits);\n}","map":{"version":3,"mappings":"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","names":["util","StringNGramsOp","constructor","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","encodeString","preserveShort","getPadWidth","nGramWidth","Math","min","getNumNGrams","length","max","createNGrams","data","splitIndex","output","outputStartIndex","numNGrams","nGramIndex","leftPadding","rightPadding","numTokens","dataStartIndex","nGramSize","n","numSeparators","Uint8Array","nGram","nextNGramIndex","appendToNGram","str","forEach","value","compute","splits","inputDataSize","splitsSize","prevSplit","Error","i","validSplits","numBatchItems","nGramsSplits","getArrayFromDType","empty","Array","nGrams","outputStartIdx","dataLength","stringNGramsImpl","dataSplits"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/StringNGrams_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {util} from '@tensorflow/tfjs-core';\n\n/**\n * The StringNGramsOp class creates ngrams from ragged string data.\n * The constructor contains all attributes related to the operation such as\n * padding widths and strings, and the compute function can be used to\n * compute the ngrams for different ragged tensor inputs.\n */\nclass StringNGramsOp {\n  private separator: Uint8Array;\n  private nGramWidths: number[];\n  private padWidth: number;\n  private leftPad: Uint8Array;\n  private rightPad: Uint8Array;\n  private preserveShort: boolean;\n\n  constructor(\n      separator: string, nGramWidths: number[], leftPad: string,\n      rightPad: string, padWidth: number, preserveShortSequences: boolean) {\n    this.separator = util.encodeString(separator);\n    this.nGramWidths = nGramWidths;\n    this.leftPad = util.encodeString(leftPad);\n    this.rightPad = util.encodeString(rightPad);\n    this.padWidth = padWidth;\n    this.preserveShort = preserveShortSequences;\n  }\n\n  private getPadWidth(nGramWidth: number) {\n    // Ngrams can be padded with either a fixed pad width or a dynamic pad\n    // width depending on the 'padWidth' arg, but in no case should the padding\n    // ever be wider than 'nGramWidth' - 1.\n    return Math.min(\n        this.padWidth < 0 ? nGramWidth - 1 : this.padWidth, nGramWidth - 1);\n  }\n\n  private getNumNGrams(length: number, nGramWidth: number) {\n    const padWidth = this.getPadWidth(nGramWidth);\n    return Math.max(0, ((length + 2 * padWidth) - nGramWidth) + 1);\n  }\n\n  private createNGrams(\n      data: Uint8Array[], splitIndex: number, output: Uint8Array[],\n      outputStartIndex: number, numNGrams: number, nGramWidth: number) {\n    for (let nGramIndex = 0; nGramIndex < numNGrams; ++nGramIndex) {\n      const padWidth = this.getPadWidth(nGramWidth);\n      const leftPadding = Math.max(0, padWidth - nGramIndex);\n      const rightPadding =\n          Math.max(0, padWidth - (numNGrams - (nGramIndex + 1)));\n      const numTokens = nGramWidth - (leftPadding + rightPadding);\n      const dataStartIndex =\n          splitIndex + (leftPadding > 0 ? 0 : nGramIndex - padWidth);\n\n      // Calculate the total expected size of the nGram so we can reserve the\n      // correct amount of space in the string.\n      let nGramSize = 0;\n      // Size of the left padding.\n      nGramSize += leftPadding * this.leftPad.length;\n      // Size of the tokens.\n      for (let n = 0; n < numTokens; ++n) {\n        nGramSize += data[dataStartIndex + n].length;\n      }\n      // Size of the right padding.\n      nGramSize += rightPadding * this.rightPad.length;\n      // Size of the separators.\n      const numSeparators = leftPadding + rightPadding + numTokens - 1;\n      nGramSize += numSeparators * this.separator.length;\n\n      // Build the nGram.\n      output[outputStartIndex + nGramIndex] = new Uint8Array(nGramSize);\n      const nGram = output[outputStartIndex + nGramIndex];\n\n      let nextNGramIndex = 0;\n      const appendToNGram = (str: Uint8Array) =>\n          str.forEach((value) => nGram[nextNGramIndex++] = value);\n\n      for (let n = 0; n < leftPadding; ++n) {\n        appendToNGram(this.leftPad);\n        appendToNGram(this.separator);\n      }\n      // Only output first numTokens - 1 pairs of data and separator\n      for (let n = 0; n < numTokens - 1; ++n) {\n        appendToNGram(data[dataStartIndex + n]);\n        appendToNGram(this.separator);\n      }\n      // Handle case when there are no tokens or no right padding as these\n      // can result in consecutive separators.\n      if (numTokens > 0) {\n        // If we have tokens, then output last and then pair each separator\n        // with the right padding that follows, to ensure nGram ends either with\n        // the token or with the right pad.\n        appendToNGram(data[dataStartIndex + numTokens - 1]);\n        for (let n = 0; n < rightPadding; ++n) {\n          appendToNGram(this.separator);\n          appendToNGram(this.rightPad);\n        }\n      } else {\n        // If we don't have tokens, then the last item inserted into the nGram\n        // has been the separator from the left padding loop above. Hence,\n        // output right pad and separator and make sure to finish with a\n        // padding, not a separator.\n        for (let n = 0; n < rightPadding - 1; ++n) {\n          appendToNGram(this.rightPad);\n          appendToNGram(this.separator);\n        }\n        appendToNGram(this.rightPad);\n      }\n    }\n  }\n\n  // Data and splits together form the definition of the ragged tensor,\n  // where data is 1 dimensional and contains the values of the tensor\n  // and splits denotes the indices at which each row starts.\n  public compute(data: Uint8Array[], splits: Int32Array):\n      [Uint8Array[], Int32Array] {\n    // Validate that the splits are valid indices into data, only if there are\n    // splits specified.\n    const inputDataSize = data.length;\n    const splitsSize = splits.length;\n    if (splitsSize > 0) {\n      let prevSplit = splits[0];\n      if (prevSplit !== 0) {\n        throw new Error(`First split value must be 0, got ${prevSplit}`);\n      }\n      for (let i = 1; i < splitsSize; ++i) {\n        let validSplits = splits[i] >= prevSplit;\n        validSplits = validSplits && (splits[i] <= inputDataSize);\n        if (!validSplits) {\n          throw new Error(`Invalid split value ${splits[i]}, must be in [${\n              prevSplit}, ${inputDataSize}]`);\n        }\n        prevSplit = splits[i];\n      }\n      if (prevSplit !== inputDataSize) {\n        throw new Error(`Last split value must be data size. Expected ${\n            inputDataSize}, got ${prevSplit}`);\n      }\n    }\n\n    const numBatchItems = splitsSize - 1;\n    const nGramsSplits = util.getArrayFromDType('int32', splitsSize);\n    // If there is no data or size, return an empty ragged tensor.\n    if (inputDataSize === 0 || splitsSize === 0) {\n      const empty: Uint8Array[] = new Array(inputDataSize);\n      for (let i = 0; i <= numBatchItems; ++i) {\n        nGramsSplits[i] = 0;\n      }\n      return [empty, nGramsSplits];\n    }\n\n    nGramsSplits[0] = 0;\n    for (let i = 1; i <= numBatchItems; ++i) {\n      const length = splits[i] - splits[i - 1];\n      let numNGrams = 0;\n      this.nGramWidths.forEach((nGramWidth) => {\n        numNGrams += this.getNumNGrams(length, nGramWidth);\n      });\n      if (this.preserveShort && length > 0 && numNGrams === 0) {\n        numNGrams = 1;\n      }\n      nGramsSplits[i] = nGramsSplits[i - 1] + numNGrams;\n    }\n\n    const nGrams: Uint8Array[] = new Array(nGramsSplits[numBatchItems]);\n\n    for (let i = 0; i < numBatchItems; ++i) {\n      const splitIndex = splits[i];\n      let outputStartIdx = nGramsSplits[i];\n      this.nGramWidths.forEach((nGramWidth) => {\n        const length = splits[i + 1] - splits[i];\n        const numNGrams = this.getNumNGrams(length, nGramWidth);\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n        outputStartIdx += numNGrams;\n      });\n      // If we're preserving short sequences, check to see if no sequence was\n      // generated by comparing the current output start idx to the original\n      // one (nGramSplitsdata). If no ngrams were generated, then they will\n      // be equal (since we increment outputStartIdx by numNGrams every\n      // time we create a set of ngrams.)\n      if (this.preserveShort && outputStartIdx === nGramsSplits[i]) {\n        const dataLength = splits[i + 1] - splits[i];\n        // One legitimate reason to not have any ngrams when this.preserveShort\n        // is true is if the sequence itself is empty. In that case, move on.\n        if (dataLength === 0) {\n          continue;\n        }\n        // We don't have to worry about dynamic padding sizes here: if padding\n        // was dynamic, every sequence would have had sufficient padding to\n        // generate at least one nGram.\n        const nGramWidth = dataLength + 2 * this.padWidth;\n        const numNGrams = 1;\n        this.createNGrams(\n            data, splitIndex, nGrams, outputStartIdx, numNGrams, nGramWidth);\n      }\n    }\n    return [nGrams, nGramsSplits];\n  }\n}\n\nexport function stringNGramsImpl(\n    data: Uint8Array[], dataSplits: Int32Array, separator: string,\n    nGramWidths: number[], leftPad: string, rightPad: string, padWidth: number,\n    preserveShortSequences: boolean): [Uint8Array[], Int32Array] {\n  return new StringNGramsOp(\n             separator, nGramWidths, leftPad, rightPad, padWidth,\n             preserveShortSequences)\n      .compute(data, dataSplits);\n}\n"]},"metadata":{},"sourceType":"module"}