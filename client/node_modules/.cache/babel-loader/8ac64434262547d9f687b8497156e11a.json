{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/** Utility functions related to user-defined metadata. */\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\n\nexport function checkUserDefinedMetadata(userDefinedMetadata, modelName) {\n  let checkSize = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n  if (userDefinedMetadata == null || typeof userDefinedMetadata !== 'object' || Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype || !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error('User-defined metadata is expected to be a JSON object, but is not.');\n  }\n\n  if (checkSize) {\n    const out = JSON.stringify(userDefinedMetadata);\n\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(`User-defined metadata of model \"${modelName}\" is too large in ` + `size (length=${out.length} when serialized). It is not ` + `recommended to store such large objects in user-defined metadata. ` + `Please make sure its serialized length is <= ` + `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n    }\n  }\n}\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\n\nexport function plainObjectCheck(x) {\n  if (x === null) {\n    // Note: typeof `null` is 'object', and `null` is valid in JSON.\n    return true;\n  } else if (typeof x === 'object') {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      // `x` is a JavaScript object and its prototype is Object.\n      const keys = Object.keys(x);\n\n      for (const key of keys) {\n        if (typeof key !== 'string') {\n          // JSON keys must be strings.\n          return false;\n        }\n\n        if (!plainObjectCheck(x[key])) {\n          // Recursive call.\n          return false;\n        }\n      }\n\n      return true;\n    } else {\n      // `x` is a JavaScript object but its prototype is not Object.\n      if (Array.isArray(x)) {\n        // `x` is a JavaScript array.\n        for (const item of x) {\n          if (!plainObjectCheck(item)) {\n            // Recursive call.\n            return false;\n          }\n        }\n\n        return true;\n      } else {\n        // `x` is a JavaScript object and its prototype is not Object,\n        // and it's not an Array. I.e., it's a complex object such as\n        // `Error` and `Date`.\n        return false;\n      }\n    }\n  } else {\n    // `x` is not a JavaScript object or `null`.\n    const xType = typeof x;\n    return xType === 'string' || xType === 'number' || xType === 'boolean';\n  }\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAUA;AAEA;AACA;AACA;AACA,OAAO,MAAMA,2CAA2C,GAAG,IAAI,IAAJ,GAAW,IAA/D;AAEP;;;;;;;;;;;;;AAYA,OAAM,SAAUC,wBAAV,CACFC,mBADE,EACuBC,SADvB,EAC2D;AAAA,MAAjBC,SAAiB,uEAAL,KAAK;;AAC/D,MAAIF,mBAAmB,IAAI,IAAvB,IACA,OAAOA,mBAAP,KAA+B,QAD/B,IAEAG,MAAM,CAACC,cAAP,CAAsBJ,mBAAtB,MAA+CG,MAAM,CAACE,SAFtD,IAGA,CAACC,gBAAgB,CAACN,mBAAD,CAHrB,EAG4C;AAC1C,UAAM,IAAIO,KAAJ,CACF,oEADE,CAAN;AAED;;AAED,MAAIL,SAAJ,EAAe;AACb,UAAMM,GAAG,GAAGC,IAAI,CAACC,SAAL,CAAeV,mBAAf,CAAZ;;AACA,QAAIQ,GAAG,CAACG,MAAJ,GAAab,2CAAjB,EAA8D;AAC5Dc,aAAO,CAACC,IAAR,CACI,mCAAmCZ,SAAS,oBAA5C,GACA,gBAAgBO,GAAG,CAACG,MAAM,+BAD1B,GAEA,oEAFA,GAGA,+CAHA,GAIA,GAAGb,2CAA2C,GALlD;AAMD;AACF;AACF;AAED;;;;;;;;;;AAUA;;AACA,OAAM,SAAUQ,gBAAV,CAA2BQ,CAA3B,EAAiC;AACrC,MAAIA,CAAC,KAAK,IAAV,EAAgB;AACd;AACA,WAAO,IAAP;AACD,GAHD,MAGO,IAAI,OAAOA,CAAP,KAAa,QAAjB,EAA2B;AAChC,QAAIX,MAAM,CAACC,cAAP,CAAsBU,CAAtB,MAA6BX,MAAM,CAACE,SAAxC,EAAmD;AACjD;AACA,YAAMU,IAAI,GAAGZ,MAAM,CAACY,IAAP,CAAYD,CAAZ,CAAb;;AACA,WAAK,MAAME,GAAX,IAAkBD,IAAlB,EAAwB;AACtB,YAAI,OAAOC,GAAP,KAAe,QAAnB,EAA6B;AAC3B;AACA,iBAAO,KAAP;AACD;;AACD,YAAI,CAACV,gBAAgB,CAACQ,CAAC,CAACE,GAAD,CAAF,CAArB,EAA+B;AAAG;AAChC,iBAAO,KAAP;AACD;AACF;;AACD,aAAO,IAAP;AACD,KAbD,MAaO;AACL;AACA,UAAIC,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AACpB;AACA,aAAK,MAAMK,IAAX,IAAmBL,CAAnB,EAAsB;AACpB,cAAI,CAACR,gBAAgB,CAACa,IAAD,CAArB,EAA6B;AAAG;AAC9B,mBAAO,KAAP;AACD;AACF;;AACD,eAAO,IAAP;AACD,OARD,MAQO;AACL;AACA;AACA;AACA,eAAO,KAAP;AACD;AACF;AACF,GA/BM,MA+BA;AACL;AACA,UAAMC,KAAK,GAAG,OAAON,CAArB;AACA,WAAOM,KAAK,KAAK,QAAV,IAAsBA,KAAK,KAAK,QAAhC,IAA4CA,KAAK,KAAK,SAA7D;AACD;AACF","names":["MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH","checkUserDefinedMetadata","userDefinedMetadata","modelName","checkSize","Object","getPrototypeOf","prototype","plainObjectCheck","Error","out","JSON","stringify","length","console","warn","x","keys","key","Array","isArray","item","xType"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/user_defined_metadata.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/** Utility functions related to user-defined metadata. */\n\n// Maximum recommended serialized size for user-defined metadata.\n// Beyond this limit, a warning message will be printed during model loading and\n// saving.\nexport const MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH = 1 * 1024 * 1024;\n\n/**\n * Check validity of user-defined metadata.\n *\n * @param userDefinedMetadata\n * @param modelName Name of the model that the user-defined metadata belongs to.\n *   Used during construction of error messages.\n * @param checkSize Whether to check the size of the metadata is under\n *   recommended limit. Default: `false`. If `true`, will try stringify the\n *   JSON object and print a console warning if the serialzied size is above the\n *   limit.\n * @throws Error if `userDefinedMetadata` is not a plain JSON object.\n */\nexport function checkUserDefinedMetadata(\n    userDefinedMetadata: {}, modelName: string, checkSize = false): void {\n  if (userDefinedMetadata == null ||\n      typeof userDefinedMetadata !== 'object' ||\n      Object.getPrototypeOf(userDefinedMetadata) !== Object.prototype ||\n      !plainObjectCheck(userDefinedMetadata)) {\n    throw new Error(\n        'User-defined metadata is expected to be a JSON object, but is not.');\n  }\n\n  if (checkSize) {\n    const out = JSON.stringify(userDefinedMetadata);\n    if (out.length > MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH) {\n      console.warn(\n          `User-defined metadata of model \"${modelName}\" is too large in ` +\n          `size (length=${out.length} when serialized). It is not ` +\n          `recommended to store such large objects in user-defined metadata. ` +\n          `Please make sure its serialized length is <= ` +\n          `${MAX_USER_DEFINED_METADATA_SERIALIZED_LENGTH}.`);\n    }\n  }\n}\n\n/**\n * Check if an input is plain JSON object or any valid subfield of it.\n *\n * @param x The input to be checked.\n * @param assertObject Whether to assert `x` is a JSON object, i.e., reject\n *   cases of arrays and primitives.\n * @return Returns `true` if and only if `x` is a plain JSON object,\n *   a JSON-valid primitive including string, number, boolean and null,\n *   or an array of the said types.\n */\n// tslint:disable-next-line:no-any\nexport function plainObjectCheck(x: any): boolean {\n  if (x === null) {\n    // Note: typeof `null` is 'object', and `null` is valid in JSON.\n    return true;\n  } else if (typeof x === 'object') {\n    if (Object.getPrototypeOf(x) === Object.prototype) {\n      // `x` is a JavaScript object and its prototype is Object.\n      const keys = Object.keys(x);\n      for (const key of keys) {\n        if (typeof key !== 'string') {\n          // JSON keys must be strings.\n          return false;\n        }\n        if (!plainObjectCheck(x[key])) {  // Recursive call.\n          return false;\n        }\n      }\n      return true;\n    } else {\n      // `x` is a JavaScript object but its prototype is not Object.\n      if (Array.isArray(x)) {\n        // `x` is a JavaScript array.\n        for (const item of x) {\n          if (!plainObjectCheck(item)) {  // Recursive call.\n            return false;\n          }\n        }\n        return true;\n      } else {\n        // `x` is a JavaScript object and its prototype is not Object,\n        // and it's not an Array. I.e., it's a complex object such as\n        // `Error` and `Date`.\n        return false;\n      }\n    }\n  } else {\n    // `x` is not a JavaScript object or `null`.\n    const xType = typeof x;\n    return xType === 'string' || xType === 'number' || xType === 'boolean';\n  }\n}\n"]},"metadata":{},"sourceType":"module"}