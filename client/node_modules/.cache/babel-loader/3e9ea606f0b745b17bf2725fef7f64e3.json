{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from './environment';\nimport * as util from './util';\nexport class Profiler {\n  constructor(backendTimer, logger) {\n    this.backendTimer = backendTimer;\n    this.logger = logger;\n\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName, inputs, f) {\n    let outputs;\n\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n\n    let timer;\n    const start = util.now();\n\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n\n      for (const output of outputs) {\n        output.dataSync();\n      }\n\n      timer = Promise.resolve({\n        kernelMs: util.now() - start\n      });\n    }\n\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i]; // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(timing => timing.getExtraProfileInfo != null ? timing.getExtraProfileInfo() : '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile) {\n    const {\n      kernelName,\n      outputs,\n      timeMs,\n      inputs,\n      extraInfo\n    } = kernelProfile;\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(kernelName, result, valueContainer[0], valueContainer[1], inputs, valueContainer[2]);\n      });\n    });\n  }\n\n}\nexport function checkComputationForErrors(vals, dtype, kernelName) {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i];\n\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n\n  return false;\n}\nexport class Logger {\n  logKernelProfile(name, result, vals, timeMs, inputs, extraInfo) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) : timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription += `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(`%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${inputShapesDescription}\\t%c${extraInfo}`, 'font-weight:bold', 'color:red', 'color:blue', 'color: orange', 'color: green', 'color: steelblue');\n  }\n\n}","map":{"version":3,"mappings":"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","names":["env","util","Profiler","constructor","backendTimer","logger","Logger","profileKernel","kernelName","inputs","f","outputs","holdResultWrapperFn","timer","start","now","timerAvailable","time","output","dataSync","Promise","resolve","kernelMs","getBool","i","length","data","then","tensorVals","checkComputationForErrors","dtype","kernelProfile","timeMs","timing","extraInfo","getExtraProfileInfo","logKernelProfile","forEach","result","all","valueContainer","vals","num","isNaN","isFinite","console","warn","name","rightPad","paddedName","rank","size","shape","toString","inputShapesDescription","input","inputShape","inputRank","log"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/profiler.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BackendTimer, BackendTimingInfo} from './backends/backend';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {NamedTensorMap} from './tensor_types';\nimport {DataType, DataTypeMap, TypedArray} from './types';\nimport * as util from './util';\n\nexport type KernelProfile = {\n  kernelName: string,\n  outputs: Tensor[],\n  inputs: NamedTensorMap,\n  timeMs: Promise<number|{error: string}>,\n  extraInfo: Promise<string>\n};\n\nexport class Profiler {\n  constructor(private backendTimer: BackendTimer, private logger?: Logger) {\n    if (logger == null) {\n      this.logger = new Logger();\n    }\n  }\n\n  profileKernel(kernelName: string, inputs: NamedTensorMap, f: () => Tensor[]):\n      KernelProfile {\n    let outputs: Tensor[];\n    const holdResultWrapperFn = () => {\n      outputs = f();\n    };\n    let timer: Promise<BackendTimingInfo>;\n    const start = util.now();\n    if (this.backendTimer.timerAvailable()) {\n      timer = this.backendTimer.time(holdResultWrapperFn);\n    } else {\n      holdResultWrapperFn();\n      for (const output of outputs) {\n        output.dataSync();\n      }\n      timer = Promise.resolve({kernelMs: util.now() - start});\n    }\n    if (env().getBool('CHECK_COMPUTATION_FOR_ERRORS')) {\n      for (let i = 0; i < outputs.length; i++) {\n        const output = outputs[i];\n        // Dangling promise here because we don't want to propagate up\n        // asynchronicity.\n        output.data().then(tensorVals => {\n          checkComputationForErrors(tensorVals, output.dtype, kernelName);\n        });\n      }\n    }\n\n    const kernelProfile = {\n      kernelName,\n      outputs,\n      inputs,\n      timeMs: timer.then(timing => timing.kernelMs),\n      extraInfo: timer.then(\n          timing => timing.getExtraProfileInfo != null ?\n              timing.getExtraProfileInfo() :\n              '')\n    };\n    return kernelProfile;\n  }\n\n  logKernelProfile(kernelProfile: KernelProfile): void {\n    const {kernelName, outputs, timeMs, inputs, extraInfo} = kernelProfile;\n\n    outputs.forEach(result => {\n      Promise.all([result.data(), timeMs, extraInfo]).then(valueContainer => {\n        this.logger.logKernelProfile(\n            kernelName, result, valueContainer[0], valueContainer[1], inputs,\n            valueContainer[2]);\n      });\n    });\n  }\n}\n\nexport function checkComputationForErrors<D extends DataType>(\n    vals: DataTypeMap[D], dtype: D, kernelName: string): boolean {\n  if (dtype !== 'float32') {\n    // Only floating point computations will generate NaN values\n    return false;\n  }\n  for (let i = 0; i < vals.length; i++) {\n    const num = vals[i] as number;\n    if (isNaN(num) || !isFinite(num)) {\n      // Throwing custom exception so behavior is testable.\n      console.warn(`Found ${num} in the result of '${kernelName}'`);\n      return true;\n    }\n  }\n  return false;\n}\n\nexport class Logger {\n  logKernelProfile(\n      name: string, result: Tensor, vals: TypedArray,\n      timeMs: number|{error: string}, inputs: NamedTensorMap,\n      extraInfo?: string) {\n    const time = typeof timeMs === 'number' ? util.rightPad(`${timeMs}ms`, 9) :\n                                              timeMs['error'];\n    const paddedName = util.rightPad(name, 25);\n    const rank = result.rank;\n    const size = result.size;\n    const shape = util.rightPad(result.shape.toString(), 14);\n    let inputShapesDescription = '';\n\n    for (const name in inputs) {\n      const input = inputs[name];\n      if (input != null) {\n        // The input might be a non-tensor (e.g HTMLImageElement), in which case\n        // we claim the output shape as input shape.\n        const inputShape = input.shape || result.shape;\n        const inputRank = inputShape.length;\n        inputShapesDescription +=\n            `${name}: ${inputRank}D ${inputRank > 0 ? inputShape : ''} `;\n      }\n    }\n\n    console.log(\n        `%c${paddedName}\\t%c${time}\\t%c${rank}D ${shape}\\t%c${size}\\t%c${\n            inputShapesDescription}\\t%c${extraInfo}`,\n        'font-weight:bold', 'color:red', 'color:blue', 'color: orange',\n        'color: green', 'color: steelblue');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}