{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedConv2D, util } from '@tensorflow/tfjs-core';\nimport { Conv2DProgram } from '../conv_gpu';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nimport { conv2dByMatMul, conv2dWithIm2Row } from './Conv2D_impl';\nimport { reshape } from './Reshape';\nexport function fusedConv2d(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false\n  /* depthwise */\n  , $dataFormat);\n  let out;\n  const intermediates = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 && convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 && convInfo.strideHeight === 1 && convInfo.strideWidth === 1 && (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation = activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n    const inputs = [x, filter];\n\n    if (bias) {\n      inputs.push(bias);\n    }\n\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return outReshaped;\n}\nexport const fusedConv2DConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d\n};","map":{"version":3,"mappings":"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","names":["backend_util","env","FusedConv2D","util","Conv2DProgram","mapActivationToShaderProgram","conv2dByMatMul","conv2dWithIm2Row","reshape","fusedConv2d","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","shape","out","intermediates","filterHeight","filterWidth","dilationHeight","dilationWidth","strideHeight","strideWidth","padInfo","type","getBool","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","fusedActivation","program","push","$leakyreluAlpha","makeTensorInfo","createScalarValue","runWebGLProgram","outReshaped","outShape","forEach","t","disposeIntermediateTensorInfo","fusedConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/FusedConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedConv2D, FusedConv2DAttrs, FusedConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Conv2DProgram} from '../conv_gpu';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nimport {conv2dByMatMul, conv2dWithIm2Row} from './Conv2D_impl';\nimport {reshape} from './Reshape';\n\nexport function fusedConv2d(args: {\n  inputs: FusedConv2DInputs,\n  attrs: FusedConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, dilations, pad,\n      dimRoundingMode, false /* depthwise */, $dataFormat);\n  let out: TensorInfo;\n  const intermediates: TensorInfo[] = [];\n\n  if (convInfo.filterHeight === 1 && convInfo.filterWidth === 1 &&\n      convInfo.dilationHeight === 1 && convInfo.dilationWidth === 1 &&\n      convInfo.strideHeight === 1 && convInfo.strideWidth === 1 &&\n      (convInfo.padInfo.type === 'SAME' || convInfo.padInfo.type === 'VALID')) {\n    out = conv2dByMatMul({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else if (env().getBool('WEBGL_CONV_IM2COL') && x.shape[0] === 1) {\n    out = conv2dWithIm2Row({\n      x,\n      filter,\n      convInfo,\n      backend,\n      bias,\n      activation,\n      preluActivationWeights,\n      leakyreluAlpha\n    });\n  } else {\n    const hasBias = bias != null;\n    const hasPreluActivationWeights = preluActivationWeights != null;\n    const hasLeakyreluAlpha = activation === 'leakyrelu';\n    const fusedActivation =\n        activation ? mapActivationToShaderProgram(activation, false) : null;\n    const program = new Conv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n    const inputs: TensorInfo[] = [x, filter];\n    if (bias) {\n      inputs.push(bias);\n    }\n    if (preluActivationWeights) {\n      inputs.push(preluActivationWeights);\n    }\n    if (hasLeakyreluAlpha) {\n      const $leakyreluAlpha = backend.makeTensorInfo(\n          [], 'float32',\n          util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n      inputs.push($leakyreluAlpha);\n      intermediates.push($leakyreluAlpha);\n    }\n    out = backend.runWebGLProgram(program, inputs, 'float32');\n  }\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n\n  intermediates.push(out);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return outReshaped;\n}\n\nexport const fusedConv2DConfig: KernelConfig = {\n  kernelName: FusedConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedConv2d as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}