{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '../environment'; // We are wrapping this within an object so it can be stubbed by Jasmine.\n\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\nlet systemFetch; // These getters and setters are for testing so we don't export a mutable\n// variable.\n\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch() {\n  return systemFetch;\n}\nexport class PlatformNode {\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util'); // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path, requestInits) {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n\n    return systemFetch(path, requestInits);\n  }\n\n  now() {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text, encoding) {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(`Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n\n    return this.textEncoder.encode(text);\n  }\n\n  decode(bytes, encoding) {\n    if (bytes.length === 0) {\n      return '';\n    }\n\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n\n}\n\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,GAAR,QAAkB,gBAAlB,C,CAGA;;AACA,OAAO,MAAMC,YAAY,GAAG;AAC1B;AACAC,aAAW,EAAE,MAAMC,OAAO,CAAC,YAAD;AAFA,CAArB;AAMP,IAAIC,WAAJ,C,CACA;AACA;;AACA,OAAM,SAAUC,gBAAV,GAA0B;AAC9BD,aAAW,GAAG,IAAd;AACD;AACD,OAAM,SAAUE,cAAV,CAAyBC,OAAzB,EAAyC;AAC7CH,aAAW,GAAGG,OAAd;AACD;AACD,OAAM,SAAUC,cAAV,GAAwB;AAC5B,SAAOJ,WAAP;AACD;AAED,OAAM,MAAOK,YAAP,CAAmB;AAKvBC;AACE;AACA,SAAKC,IAAL,GAAYR,OAAO,CAAC,MAAD,CAAnB,CAFF,CAGE;AACA;;AACA,SAAKS,WAAL,GAAmB,IAAI,KAAKD,IAAL,CAAUE,WAAd,EAAnB;AACD;;AAEDC,OAAK,CAACC,IAAD,EAAeC,YAAf,EAAyC;AAC5C,QAAIhB,GAAG,GAAGiB,MAAN,CAAaH,KAAb,IAAsB,IAA1B,EAAgC;AAC9B,aAAOd,GAAG,GAAGiB,MAAN,CAAaH,KAAb,CAAmBC,IAAnB,EAAyBC,YAAzB,CAAP;AACD;;AAED,QAAIZ,WAAW,IAAI,IAAnB,EAAyB;AACvBA,iBAAW,GAAGH,YAAY,CAACC,WAAb,EAAd;AACD;;AACD,WAAOE,WAAW,CAACW,IAAD,EAAOC,YAAP,CAAlB;AACD;;AAEDE,KAAG;AACD,UAAMC,IAAI,GAAGC,OAAO,CAACC,MAAR,EAAb;AACA,WAAOF,IAAI,CAAC,CAAD,CAAJ,GAAU,IAAV,GAAiBA,IAAI,CAAC,CAAD,CAAJ,GAAU,OAAlC;AACD;;AAEDG,QAAM,CAACC,IAAD,EAAeC,QAAf,EAA+B;AACnC,QAAIA,QAAQ,KAAK,OAAb,IAAwBA,QAAQ,KAAK,MAAzC,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CACF,sDAAsDD,QAAQ,EAD5D,CAAN;AAED;;AACD,WAAO,KAAKZ,WAAL,CAAiBU,MAAjB,CAAwBC,IAAxB,CAAP;AACD;;AACDG,QAAM,CAACC,KAAD,EAAoBH,QAApB,EAAoC;AACxC,QAAIG,KAAK,CAACC,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO,EAAP;AACD;;AACD,WAAO,IAAI,KAAKjB,IAAL,CAAUkB,WAAd,CAA0BL,QAA1B,EAAoCE,MAApC,CAA2CC,KAA3C,CAAP;AACD;;AAzCsB;;AA4CzB,IAAI3B,GAAG,GAAG8B,GAAN,CAAU,SAAV,KAAwB,CAAC9B,GAAG,GAAG8B,GAAN,CAAU,YAAV,CAA7B,EAAsD;AACpD9B,KAAG,GAAG+B,WAAN,CAAkB,MAAlB,EAA0B,IAAItB,YAAJ,EAA1B;AACD","names":["env","getNodeFetch","importFetch","require","systemFetch","resetSystemFetch","setSystemFetch","fetchFn","getSystemFetch","PlatformNode","constructor","util","textEncoder","TextEncoder","fetch","path","requestInits","global","now","time","process","hrtime","encode","text","encoding","Error","decode","bytes","length","TextDecoder","get","setPlatform"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/platforms/platform_node.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {env} from '../environment';\nimport {Platform} from './platform';\n\n// We are wrapping this within an object so it can be stubbed by Jasmine.\nexport const getNodeFetch = {\n  // tslint:disable-next-line:no-require-imports\n  importFetch: () => require('node-fetch')\n};\n\ntype FetchFn = (url: string, init?: RequestInit) => Promise<Response>;\nlet systemFetch: FetchFn;\n// These getters and setters are for testing so we don't export a mutable\n// variable.\nexport function resetSystemFetch() {\n  systemFetch = null;\n}\nexport function setSystemFetch(fetchFn: FetchFn) {\n  systemFetch = fetchFn;\n}\nexport function getSystemFetch(): FetchFn {\n  return systemFetch;\n}\n\nexport class PlatformNode implements Platform {\n  private textEncoder: TextEncoder;\n  // tslint:disable-next-line:no-any\n  util: any;\n\n  constructor() {\n    // tslint:disable-next-line:no-require-imports\n    this.util = require('util');\n    // According to the spec, the built-in encoder can do only UTF-8 encoding.\n    // https://developer.mozilla.org/en-US/docs/Web/API/TextEncoder/TextEncoder\n    this.textEncoder = new this.util.TextEncoder();\n  }\n\n  fetch(path: string, requestInits?: RequestInit): Promise<Response> {\n    if (env().global.fetch != null) {\n      return env().global.fetch(path, requestInits);\n    }\n\n    if (systemFetch == null) {\n      systemFetch = getNodeFetch.importFetch();\n    }\n    return systemFetch(path, requestInits);\n  }\n\n  now(): number {\n    const time = process.hrtime();\n    return time[0] * 1000 + time[1] / 1000000;\n  }\n\n  encode(text: string, encoding: string): Uint8Array {\n    if (encoding !== 'utf-8' && encoding !== 'utf8') {\n      throw new Error(\n          `Node built-in encoder only supports utf-8, but got ${encoding}`);\n    }\n    return this.textEncoder.encode(text);\n  }\n  decode(bytes: Uint8Array, encoding: string): string {\n    if (bytes.length === 0) {\n      return '';\n    }\n    return new this.util.TextDecoder(encoding).decode(bytes);\n  }\n}\n\nif (env().get('IS_NODE') && !env().get('IS_BROWSER')) {\n  env().setPlatform('node', new PlatformNode());\n}\n"]},"metadata":{},"sourceType":"module"}