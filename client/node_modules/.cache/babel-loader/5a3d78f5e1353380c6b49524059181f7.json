{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function sparseToDense(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    sparseIndices,\n    sparseValues,\n    defaultValue\n  } = inputs;\n  const {\n    outputShape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n  const outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\nexport const sparseToDenseConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAgDC,aAAhD,QAAyH,uBAAzH;AAGA,SAAQC,WAAR,QAA0B,gBAA1B;AAEA,OAAM,SAAUC,aAAV,CAAwBC,IAAxB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,iBAAD;AAAgBC,gBAAhB;AAA8BC;AAA9B,MAA8CL,MAApD;AACA,QAAM;AAACM;AAAD,MAAgBJ,KAAtB;AAEA,QAAM;AAACK,aAAD;AAAYC,cAAZ;AAAwBC,aAAxB;AAAmCC,WAAnC;AAA4CC;AAA5C,MACFhB,YAAY,CAACiB,eAAb,CAA6BR,YAA7B,EAA2CD,aAA3C,EAA0DG,WAA1D,CADJ;AAEA,QAAMO,cAAc,GAAG,KAAvB;AAEA,QAAMC,UAAU,GAAGb,OAAO,CAACc,UAAR,CAAmBZ,aAAnB,CAAnB;AACA,QAAMa,UAAU,GAAGf,OAAO,CAACc,UAAR,CAAmBX,YAAnB,CAAnB;AACA,QAAMa,aAAa,GACfhB,OAAO,CAACiB,IAAR,CAAaC,GAAb,CAAiBd,YAAY,CAACe,MAA9B,EAAsCC,MAAtC,CAA6C,CAA7C,CADJ;AAGA,QAAMC,MAAM,GAAGzB,WAAW,CACtBiB,UADsB,EACVE,UADU,EACEV,WADF,EACeK,UADf,EAC2BF,SAD3B,EACsCD,UADtC,EAEtBD,SAFsB,EAEXG,OAFW,EAEFO,aAFE,EAEaJ,cAFb,CAA1B;AAIA,SAAOZ,OAAO,CAACsB,cAAR,CAAuBjB,WAAvB,EAAoCgB,MAAM,CAACE,KAA3C,EAAkDF,MAAM,CAACD,MAAzD,CAAP;AACD;AAED,OAAO,MAAMI,mBAAmB,GAAiB;AAC/CC,YAAU,EAAE9B,aADmC;AAE/C+B,aAAW,EAAE,KAFkC;AAG/CC,YAAU,EAAE9B;AAHmC,CAA1C","names":["backend_util","SparseToDense","scatterImpl","sparseToDense","args","inputs","backend","attrs","sparseIndices","sparseValues","defaultValue","outputShape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","sumDupeIndices","indicesBuf","bufferSync","updatesBuf","$defaultValue","data","get","dataId","values","outBuf","makeTensorInfo","dtype","sparseToDenseConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/SparseToDense.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, SparseToDense, SparseToDenseAttrs, SparseToDenseInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {scatterImpl} from './Scatter_impl';\n\nexport function sparseToDense(args: {\n  inputs: SparseToDenseInputs,\n  backend: MathBackendCPU,\n  attrs: SparseToDenseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {sparseIndices, sparseValues, defaultValue} = inputs;\n  const {outputShape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n  const sumDupeIndices = false;\n\n  const indicesBuf = backend.bufferSync(sparseIndices);\n  const updatesBuf = backend.bufferSync(sparseValues);\n  const $defaultValue =\n      backend.data.get(defaultValue.dataId).values[0] as number;\n\n  const outBuf = scatterImpl(\n      indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates,\n      sliceRank, strides, $defaultValue, sumDupeIndices);\n\n  return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\n\nexport const sparseToDenseConfig: KernelConfig = {\n  kernelName: SparseToDense,\n  backendName: 'cpu',\n  kernelFunc: sparseToDense as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}