{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeBilinear(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  assertNotComplex(images, 'resizeBilinear');\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values;\n  const result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n  const effectiveInputSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n  const effectiveOutputSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow;\n\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset = b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset = b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol;\n\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], 'float32', result);\n}\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear\n};","map":{"version":3,"mappings":"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","names":["ResizeBilinear","util","assertNotComplex","resizeBilinear","args","inputs","backend","attrs","images","alignCorners","halfPixelCenters","size","imagesStrides","computeStrides","shape","newHeight","newWidth","batch","oldHeight","oldWidth","numChannels","xValues","data","get","dataId","values","result","Float32Array","sizeFromShape","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","b","r","sourceFracRow","sourceRowFloor","Math","max","floor","rowFrac","sourceRowCeil","min","ceil","topRowOffset","botRowOffset","c","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","d","topLeft","bottomLeft","topRight","bottomRight","top","bottom","newValue","makeTensorInfo","resizeBilinearConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/ResizeBilinear.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendCPU,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  assertNotComplex(images, 'resizeBilinear');\n\n  const imagesStrides = util.computeStrides(images.shape);\n  const [newHeight, newWidth] = size;\n\n  const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n  const xValues = backend.data.get(images.dataId).values as TypedArray;\n  const result = new Float32Array(\n      util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n\n  const effectiveInputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n    (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n  ];\n\n  const effectiveOutputSize: [number, number] = [\n    (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n    (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n  ];\n  let outputIdx = 0;\n  const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n  const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n  for (let b = 0; b < batch; b++) {\n    for (let r = 0; r < newHeight; r++) {\n      let sourceFracRow: number;\n      if (halfPixelCenters) {\n        sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n      } else {\n        sourceFracRow = effectiveRowSizeRatio * r;\n      }\n\n      const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n      const rowFrac = sourceFracRow - sourceRowFloor;\n      const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n      const topRowOffset =\n          b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n      const botRowOffset =\n          b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n      for (let c = 0; c < newWidth; c++) {\n        let sourceFracCol: number;\n        if (halfPixelCenters) {\n          sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n        } else {\n          sourceFracCol = effectiveColSizeRatio * c;\n        }\n        const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n        const colFrac = sourceFracCol - sourceColFloor;\n        const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n        const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n        const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n        const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n        const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n        for (let d = 0; d < numChannels; d++) {\n          // Begin shader.\n\n          // Compute the fractional index of the source.\n          const topLeft = xValues[topLeftOffest + d];\n          const bottomLeft = xValues[botLeftOffset + d];\n          const topRight = xValues[topRightOffset + d];\n          const bottomRight = xValues[botRightOffest + d];\n\n          const top = topLeft + (topRight - topLeft) * colFrac;\n          const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n          const newValue = top + (bottom - top) * rowFrac;\n\n          result[outputIdx++] = newValue;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(\n      [batch, newHeight, newWidth, numChannels], 'float32', result);\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'cpu',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}