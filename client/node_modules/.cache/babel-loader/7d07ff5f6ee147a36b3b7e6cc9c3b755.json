{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    inputShape,\n    strides,\n    pad,\n    dataFormat,\n    dimRoundingMode\n  } = attrs;\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode, false, $dataFormat);\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const fltValues = backend.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          let dotProd = 0;\n\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n\n          const dxOffset = xBatchStride * b + xRowStride * xR + xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv2DBackpropInputConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput\n};","map":{"version":3,"mappings":"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","names":["backend_util","Conv2DBackpropInput","TensorBuffer","util","assertNotComplex","conv2DBackpropInput","args","inputs","backend","attrs","dy","filter","inputShape","strides","pad","dataFormat","dimRoundingMode","filterStrides","computeStrides","shape","dyStrides","$dataFormat","convertConv2DDataFormat","convInfo","computeConv2DInfo","dx","inShape","dxValues","values","dyValues","data","get","dataId","fltValues","fltS0","fltS1","fltS2","batchSize","filterHeight","filterWidth","inChannels","inHeight","inWidth","outChannels","outHeight","outWidth","strideHeight","strideWidth","topPad","padInfo","top","leftPad","left","isChannelsLast","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","b","d1","xR","xRCorner","xRMin","Math","max","ceil","yRMax","min","xC","xCCorner","xCMin","yCMax","dotProd","yR","wR","yC","wC","dyOffset","fltOffset","d2","pixel","weight","dxOffset","makeTensorInfo","dtype","conv2DBackpropInputConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Conv2DBackpropInput.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Conv2DBackpropInput, Conv2DBackpropInputAttrs, Conv2DBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function conv2DBackpropInput(args: {\n  inputs: Conv2DBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: Conv2DBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {inputShape, strides, pad, dataFormat, dimRoundingMode} = attrs;\n\n  assertNotComplex([dy, filter], 'conv2dBackpropInput');\n\n  const filterStrides = util.computeStrides(filter.shape);\n  const dyStrides = util.computeStrides(dy.shape);\n\n  let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  $dataFormat = convInfo.dataFormat;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n\n  const isChannelsLast = $dataFormat === 'channelsLast';\n  const xBatchStride = dx.strides[0];\n  const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n  const xColStride = isChannelsLast ? dx.strides[2] : 1;\n  const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n  const yBatchStride = dyStrides[0];\n  const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n  const yColStride = isChannelsLast ? dyStrides[2] : 1;\n  const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset =\n                  yBatchStride * b + yRowStride * yR + yColStride * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let d2 = 0; d2 < outChannels; ++d2) {\n                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                const weight = fltValues[fltOffset + d2];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          const dxOffset = xBatchStride * b + xRowStride * xR +\n              xColStride * xC + xChannelStride * d1;\n          dxValues[dxOffset] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const conv2DBackpropInputConfig: KernelConfig = {\n  kernelName: Conv2DBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: conv2DBackpropInput as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}