{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { TensorArray } from '../../executor/tensor_array';\nimport { fromTensor, reserve, scatter, split } from '../../executor/tensor_list';\nimport { cloneTensor, getParamValue, getTensor } from './utils';\nexport const executeOp = async (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf':\n      {\n        const thenFunc = getParamValue('thenBranch', node, tensorMap, context);\n        const elseFunc = getParamValue('elseBranch', node, tensorMap, context);\n        const cond = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context);\n        const condValue = await cond.data();\n\n        if (condValue[0]) {\n          return context.functionMap[thenFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        } else {\n          return context.functionMap[elseFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        }\n      }\n\n    case 'While':\n    case 'StatelessWhile':\n      {\n        const bodyFunc = getParamValue('body', node, tensorMap, context);\n        const condFunc = getParamValue('cond', node, tensorMap, context);\n        const args = getParamValue('args', node, tensorMap, context); // Calculate the condition of the loop\n\n        const condResult = await context.functionMap[condFunc].executeFunctionAsync(args, context.tensorArrayMap, context.tensorListMap);\n        const argIds = args.map(tensor => tensor.id);\n        let condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function\n\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n        let result = args;\n\n        while (condValue[0]) {\n          // Record the previous result for intermediate tensor tracking\n          const origResult = result; // Execution the body of the loop\n\n          result = await context.functionMap[bodyFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          const resultIds = result.map(tensor => tensor.id); // Dispose the intermediate tensor for body function that is not global\n          // kept, not input/output of the body function\n\n          origResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          }); // Recalcuate the condition of the loop using the latest results.\n\n          const condResult = await context.functionMap[condFunc].executeFunctionAsync(result, context.tensorArrayMap, context.tensorListMap);\n          condValue = await condResult[0].data(); // Dispose the intermediate tensors for condition function\n\n          condResult.forEach(tensor => {\n            if (!tensor.kept && argIds.indexOf(tensor.id) === -1 && resultIds.indexOf(tensor.id) === -1) {\n              tensor.dispose();\n            }\n          });\n        }\n\n        return result;\n      }\n\n    case 'LoopCond':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        return [cloneTensor(pred)];\n      }\n\n    case 'Switch':\n      {\n        const pred = getParamValue('pred', node, tensorMap, context);\n        let data = getParamValue('data', node, tensorMap, context);\n\n        if (!data.kept) {\n          data = cloneTensor(data);\n        } // Outputs nodes :0 => false, :1 => true\n\n\n        return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n      }\n\n    case 'Merge':\n      {\n        const inputName = node.inputNames.find(name => getTensor(name, tensorMap, context) !== undefined);\n\n        if (inputName) {\n          const data = getTensor(inputName, tensorMap, context);\n          return [cloneTensor(data)];\n        }\n\n        return undefined;\n      }\n\n    case 'Enter':\n      {\n        const frameId = getParamValue('frameName', node, tensorMap, context);\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.enterFrame(frameId);\n        return [cloneTensor(data)];\n      }\n\n    case 'Exit':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.exitFrame();\n        return [cloneTensor(data)];\n      }\n\n    case 'NextIteration':\n      {\n        const data = getParamValue('tensor', node, tensorMap, context);\n        context.nextIteration();\n        return [cloneTensor(data)];\n      }\n\n    case 'TensorArrayV3':\n      {\n        const size = getParamValue('size', node, tensorMap, context);\n        const dtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const dynamicSize = getParamValue('dynamicSize', node, tensorMap, context);\n        const clearAfterRead = getParamValue('clearAfterRead', node, tensorMap, context);\n        const identicalElementShapes = getParamValue('identicalElementShapes', node, tensorMap, context);\n        const name = getParamValue('name', node, tensorMap, context);\n        const tensorArray = new TensorArray(name, dtype, size, elementShape, identicalElementShapes, dynamicSize, clearAfterRead);\n        context.addTensorArray(tensorArray);\n        return [tensorArray.idTensor, scalar(1.0)];\n      }\n\n    case 'TensorArrayWriteV3':\n      {\n        const id = getParamValue('tensorArrayId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const writeTensorArray = context.getTensorArray(id.id);\n        writeTensorArray.write(index, writeTensor);\n        return [writeTensorArray.idTensor];\n      }\n\n    case 'TensorArrayReadV3':\n      {\n        const readId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const readTensorArray = context.getTensorArray(readId.id);\n        return [readTensorArray.read(readIndex)];\n      }\n\n    case 'TensorArrayGatherV3':\n      {\n        const gatherId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const gatherDtype = getParamValue('dtype', node, tensorMap, context);\n        const gatherTensorArray = context.getTensorArray(gatherId.id);\n        return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n      }\n\n    case 'TensorArrayScatterV3':\n      {\n        const scatterId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const scatterTensorArray = context.getTensorArray(scatterId.id);\n        scatterTensorArray.scatter(scatterIndices, scatterTensor);\n        return [scatterTensorArray.idTensor];\n      }\n\n    case 'TensorArrayConcatV3':\n      {\n        const concatId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const concatTensorArray = context.getTensorArray(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        return [concatTensorArray.concat(concatDtype)];\n      }\n\n    case 'TensorArraySplitV3':\n      {\n        const splitId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const splitTensorArray = context.getTensorArray(splitId.id);\n        splitTensorArray.split(lengths, splitTensor);\n        return [splitTensorArray.idTensor];\n      }\n\n    case 'TensorArraySizeV3':\n      {\n        const sizeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const sizeTensorArray = context.getTensorArray(sizeId.id);\n        return [scalar(sizeTensorArray.size(), 'int32')];\n      }\n\n    case 'TensorArrayCloseV3':\n      {\n        const closeId = getParamValue('tensorArrayId', node, tensorMap, context);\n        const closeTensorArray = context.getTensorArray(closeId.id);\n        closeTensorArray.clearAndClose();\n        return [closeTensorArray.idTensor];\n      }\n\n    case 'TensorListSetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const index = getParamValue('index', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.setItem(index, writeTensor);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListGetItem':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const readIndex = getParamValue('index', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.getItem(readIndex, elementShape, elementDType)];\n      }\n\n    case 'TensorListScatterV2':\n    case 'TensorListScatter':\n      {\n        const scatterIndices = getParamValue('indices', node, tensorMap, context);\n        const scatterTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = scatter(scatterTensor, scatterIndices, elementShape, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListReserve':\n    case 'EmptyTensorList':\n      {\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        let numElementsParam;\n\n        if (node.op === 'TensorListReserve') {\n          numElementsParam = 'numElements';\n        } else {\n          numElementsParam = 'maxNumElements';\n        }\n\n        const numElements = getParamValue(numElementsParam, node, tensorMap, context);\n        const tensorList = reserve(elementShape, elementDtype, numElements);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListGather':\n      {\n        const gatherId = getParamValue('tensorListId', node, tensorMap, context);\n        const gatherIndices = getParamValue('indices', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(gatherId.id);\n        return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n      }\n\n    case 'TensorListStack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const numElements = getParamValue('numElements', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.stack(elementShape, elementDtype, numElements)];\n      }\n\n    case 'TensorListFromTensor':\n      {\n        const tensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDtype = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = fromTensor(tensor, elementShape, elementDtype);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListConcat':\n      {\n        const concatId = getParamValue('tensorListId', node, tensorMap, context);\n        const tensorList = context.getTensorList(concatId.id);\n        const concatDtype = getParamValue('dtype', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        return [tensorList.concat(concatDtype, elementShape)];\n      }\n\n    case 'TensorListPushBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const writeTensor = getParamValue('tensor', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        tensorList.pushBack(writeTensor);\n        return [tensorList.idTensor];\n      }\n\n    case 'TensorListPopBack':\n      {\n        const idTensor = getParamValue('tensorListId', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const elementDType = getParamValue('elementDType', node, tensorMap, context);\n        const tensorList = context.getTensorList(idTensor.id);\n        return [tensorList.popBack(elementShape, elementDType)];\n      }\n\n    case 'TensorListSplit':\n      {\n        const splitTensor = getParamValue('tensor', node, tensorMap, context);\n        const elementShape = getParamValue('elementShape', node, tensorMap, context);\n        const lengths = getParamValue('lengths', node, tensorMap, context);\n        const tensorList = split(splitTensor, lengths, elementShape);\n        context.addTensorList(tensorList);\n        return [tensorList.idTensor];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'control';","map":{"version":3,"mappings":"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","names":["scalar","TensorArray","fromTensor","reserve","scatter","split","cloneTensor","getParamValue","getTensor","executeOp","node","tensorMap","context","op","thenFunc","elseFunc","cond","args","condValue","data","functionMap","executeFunctionAsync","tensorArrayMap","tensorListMap","bodyFunc","condFunc","condResult","argIds","map","tensor","id","forEach","kept","indexOf","dispose","result","origResult","resultIds","pred","undefined","inputName","inputNames","find","name","frameId","enterFrame","exitFrame","nextIteration","size","dtype","elementShape","dynamicSize","clearAfterRead","identicalElementShapes","tensorArray","addTensorArray","idTensor","index","writeTensor","writeTensorArray","getTensorArray","write","readId","readIndex","readTensorArray","read","gatherId","gatherIndices","gatherDtype","gatherTensorArray","gather","scatterId","scatterIndices","scatterTensor","scatterTensorArray","concatId","concatTensorArray","concatDtype","concat","splitId","splitTensor","lengths","splitTensorArray","sizeId","sizeTensorArray","closeId","closeTensorArray","clearAndClose","tensorList","getTensorList","setItem","elementDType","getItem","numElements","addTensorList","elementDtype","numElementsParam","stack","pushBack","popBack","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/control_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, scalar, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {TensorArray} from '../../executor/tensor_array';\nimport {fromTensor, reserve, scatter, split} from '../../executor/tensor_list';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {cloneTensor, getParamValue, getTensor} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'If':\n    case 'StatelessIf': {\n      const thenFunc =\n          getParamValue('thenBranch', node, tensorMap, context) as string;\n      const elseFunc =\n          getParamValue('elseBranch', node, tensorMap, context) as string;\n      const cond = getParamValue('cond', node, tensorMap, context) as Tensor;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n      const condValue = await cond.data();\n      if (condValue[0]) {\n        return context.functionMap[thenFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      } else {\n        return context.functionMap[elseFunc].executeFunctionAsync(\n            args, context.tensorArrayMap, context.tensorListMap);\n      }\n    }\n    case 'While':\n    case 'StatelessWhile': {\n      const bodyFunc =\n          getParamValue('body', node, tensorMap, context) as string;\n      const condFunc =\n          getParamValue('cond', node, tensorMap, context) as string;\n      const args = getParamValue('args', node, tensorMap, context) as Tensor[];\n\n      // Calculate the condition of the loop\n      const condResult =\n          (await context.functionMap[condFunc].executeFunctionAsync(\n              args, context.tensorArrayMap, context.tensorListMap));\n      const argIds = args.map(tensor => tensor.id);\n      let condValue = await condResult[0].data();\n      // Dispose the intermediate tensors for condition function\n      condResult.forEach(tensor => {\n        if (!tensor.kept && argIds.indexOf(tensor.id) === -1) {\n          tensor.dispose();\n        }\n      });\n\n      let result: Tensor[] = args;\n\n      while (condValue[0]) {\n        // Record the previous result for intermediate tensor tracking\n        const origResult = result;\n        // Execution the body of the loop\n        result = await context.functionMap[bodyFunc].executeFunctionAsync(\n            result, context.tensorArrayMap, context.tensorListMap);\n        const resultIds = result.map(tensor => tensor.id);\n\n        // Dispose the intermediate tensor for body function that is not global\n        // kept, not input/output of the body function\n        origResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n\n        // Recalcuate the condition of the loop using the latest results.\n        const condResult =\n            (await context.functionMap[condFunc].executeFunctionAsync(\n                result, context.tensorArrayMap, context.tensorListMap));\n        condValue = await condResult[0].data();\n        // Dispose the intermediate tensors for condition function\n        condResult.forEach(tensor => {\n          if (!tensor.kept && argIds.indexOf(tensor.id) === -1 &&\n              resultIds.indexOf(tensor.id) === -1) {\n            tensor.dispose();\n          }\n        });\n      }\n      return result;\n    }\n    case 'LoopCond': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      return [cloneTensor(pred)];\n    }\n    case 'Switch': {\n      const pred = getParamValue('pred', node, tensorMap, context) as Tensor;\n      let data = getParamValue('data', node, tensorMap, context) as Tensor;\n      if (!data.kept) {\n        data = cloneTensor(data);\n      }\n      // Outputs nodes :0 => false, :1 => true\n      return (await pred.data())[0] ? [undefined, data] : [data, undefined];\n    }\n    case 'Merge': {\n      const inputName = node.inputNames.find(\n          name => getTensor(name, tensorMap, context) !== undefined);\n      if (inputName) {\n        const data = getTensor(inputName, tensorMap, context);\n        return [cloneTensor(data)];\n      }\n      return undefined;\n    }\n    case 'Enter': {\n      const frameId =\n          getParamValue('frameName', node, tensorMap, context) as string;\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.enterFrame(frameId);\n      return [cloneTensor(data)];\n    }\n    case 'Exit': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.exitFrame();\n      return [cloneTensor(data)];\n    }\n    case 'NextIteration': {\n      const data = getParamValue('tensor', node, tensorMap, context) as Tensor;\n      context.nextIteration();\n      return [cloneTensor(data)];\n    }\n    case 'TensorArrayV3': {\n      const size = getParamValue('size', node, tensorMap, context) as number;\n      const dtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const dynamicSize =\n          getParamValue('dynamicSize', node, tensorMap, context) as boolean;\n      const clearAfterRead =\n          getParamValue('clearAfterRead', node, tensorMap, context) as boolean;\n      const identicalElementShapes =\n          getParamValue('identicalElementShapes', node, tensorMap, context) as\n          boolean;\n      const name = getParamValue('name', node, tensorMap, context) as string;\n      const tensorArray = new TensorArray(\n          name, dtype, size, elementShape, identicalElementShapes, dynamicSize,\n          clearAfterRead);\n      context.addTensorArray(tensorArray);\n      return [tensorArray.idTensor, scalar(1.0)];\n    }\n    case 'TensorArrayWriteV3': {\n      const id =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const writeTensorArray = context.getTensorArray(id.id);\n      writeTensorArray.write(index, writeTensor);\n      return [writeTensorArray.idTensor];\n    }\n    case 'TensorArrayReadV3': {\n      const readId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const readTensorArray = context.getTensorArray(readId.id);\n      return [readTensorArray.read(readIndex)];\n    }\n    case 'TensorArrayGatherV3': {\n      const gatherId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const gatherDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const gatherTensorArray = context.getTensorArray(gatherId.id);\n      return [gatherTensorArray.gather(gatherIndices, gatherDtype)];\n    }\n    case 'TensorArrayScatterV3': {\n      const scatterId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const scatterTensorArray = context.getTensorArray(scatterId.id);\n      scatterTensorArray.scatter(scatterIndices, scatterTensor);\n      return [scatterTensorArray.idTensor];\n    }\n    case 'TensorArrayConcatV3': {\n      const concatId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const concatTensorArray = context.getTensorArray(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      return [concatTensorArray.concat(concatDtype)];\n    }\n    case 'TensorArraySplitV3': {\n      const splitId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n      const splitTensorArray = context.getTensorArray(splitId.id);\n      splitTensorArray.split(lengths, splitTensor);\n      return [splitTensorArray.idTensor];\n    }\n    case 'TensorArraySizeV3': {\n      const sizeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const sizeTensorArray = context.getTensorArray(sizeId.id);\n      return [scalar(sizeTensorArray.size(), 'int32')];\n    }\n    case 'TensorArrayCloseV3': {\n      const closeId =\n          getParamValue('tensorArrayId', node, tensorMap, context) as Tensor;\n      const closeTensorArray = context.getTensorArray(closeId.id);\n      closeTensorArray.clearAndClose();\n      return [closeTensorArray.idTensor];\n    }\n    case 'TensorListSetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const index = getParamValue('index', node, tensorMap, context) as number;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.setItem(index, writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGetItem': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const readIndex =\n          getParamValue('index', node, tensorMap, context) as number;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.getItem(readIndex, elementShape, elementDType)];\n    }\n    case 'TensorListScatterV2':\n    case 'TensorListScatter': {\n      const scatterIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const scatterTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList =\n          scatter(scatterTensor, scatterIndices, elementShape, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListReserve':\n    case 'EmptyTensorList': {\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      let numElementsParam;\n\n      if (node.op === 'TensorListReserve') {\n        numElementsParam = 'numElements';\n      } else {\n        numElementsParam = 'maxNumElements';\n      }\n\n      const numElements =\n          getParamValue(numElementsParam, node, tensorMap, context) as number;\n\n      const tensorList = reserve(elementShape, elementDtype, numElements);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListGather': {\n      const gatherId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const gatherIndices =\n          getParamValue('indices', node, tensorMap, context) as number[];\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(gatherId.id);\n      return [tensorList.gather(gatherIndices, elementDtype, elementShape)];\n    }\n    case 'TensorListStack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const numElements =\n          getParamValue('numElements', node, tensorMap, context) as number;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.stack(elementShape, elementDtype, numElements)];\n    }\n    case 'TensorListFromTensor': {\n      const tensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDtype =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = fromTensor(tensor, elementShape, elementDtype);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListConcat': {\n      const concatId =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(concatId.id);\n      const concatDtype =\n          getParamValue('dtype', node, tensorMap, context) as DataType;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      return [tensorList.concat(concatDtype, elementShape)];\n    }\n    case 'TensorListPushBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const writeTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const tensorList = context.getTensorList(idTensor.id);\n      tensorList.pushBack(writeTensor);\n      return [tensorList.idTensor];\n    }\n    case 'TensorListPopBack': {\n      const idTensor =\n          getParamValue('tensorListId', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const elementDType =\n          getParamValue('elementDType', node, tensorMap, context) as DataType;\n      const tensorList = context.getTensorList(idTensor.id);\n      return [tensorList.popBack(elementShape, elementDType)];\n    }\n    case 'TensorListSplit': {\n      const splitTensor =\n          getParamValue('tensor', node, tensorMap, context) as Tensor;\n      const elementShape =\n          getParamValue('elementShape', node, tensorMap, context) as number[];\n      const lengths =\n          getParamValue('lengths', node, tensorMap, context) as number[];\n\n      const tensorList = split(splitTensor, lengths, elementShape);\n      context.addTensorList(tensorList);\n      return [tensorList.idTensor];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'control';\n"]},"metadata":{},"sourceType":"module"}