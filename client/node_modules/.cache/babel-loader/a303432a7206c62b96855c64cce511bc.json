{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolPositions } from '../utils/pool_utils';\nexport function maxPoolGrad(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    input,\n    output\n  } = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {\n    filterSize,\n    strides,\n    pad,\n    dimRoundingMode\n  } = attrs;\n  const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1\n  /* dilations */\n  , pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values;\n  const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx = buffer(x.shape, 'float32');\n  const dyData = backend.data.get(dy.dataId).values;\n  const dyBuf = buffer(dy.shape, 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n\n            if (dyR < 0 || dyR >= convInfo.outHeight || Math.floor(dyR) !== dyR) {\n              continue;\n            }\n\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n\n              if (dyC < 0 || dyC >= convInfo.outWidth || Math.floor(dyC) !== dyC) {\n                continue;\n              }\n\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 - maxPosBuf.get(b, dyR, dyC, d);\n              const curPos = wR * effectiveFilterWidth + wC;\n              const mask = maxPos === curPos ? 1 : 0;\n\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPoolGradConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad\n};","map":{"version":3,"mappings":"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","names":["backend_util","buffer","MaxPoolGrad","assertNotComplex","maxPoolPositions","maxPoolGrad","args","inputs","backend","attrs","dy","input","output","x","filterSize","strides","pad","dimRoundingMode","convInfo","computePool2DInfo","shape","xValues","data","get","dataId","values","maxPosBuf","outShape","dtype","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padLeft","padInfo","left","padTop","top","dx","dyData","dyBuf","b","batchSize","d","inChannels","dxR","inHeight","dxC","inWidth","dyRCorner","dyCCorner","dotProd","wR","dyR","outHeight","Math","floor","wC","dyC","outWidth","maxPos","curPos","mask","pixel","set","makeTensorInfo","maxPoolGradConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/MaxPoolGrad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {backend_util, buffer, KernelConfig, KernelFunc, MaxPoolGrad, MaxPoolGradAttrs, MaxPoolGradInputs, Rank, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {maxPoolPositions} from '../utils/pool_utils';\n\nexport function maxPoolGrad(args: {\n  inputs: MaxPoolGradInputs,\n  backend: MathBackendCPU,\n  attrs: MaxPoolGradAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, input, output} = inputs;\n  const x = input;\n  assertNotComplex([input, output], 'maxPoolGrad');\n  const {filterSize, strides, pad, dimRoundingMode} = attrs;\n\n  const convInfo = backend_util.computePool2DInfo(\n      x.shape as [number, number, number, number], filterSize, strides,\n      1 /* dilations */, pad, dimRoundingMode);\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const maxPosBuf = buffer(\n      convInfo.outShape, x.dtype,\n      maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n  const strideHeight = convInfo.strideHeight;\n  const strideWidth = convInfo.strideWidth;\n  const dilationHeight = convInfo.dilationHeight;\n  const dilationWidth = convInfo.dilationWidth;\n  const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n  const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n  const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n  const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n  const dx =\n      buffer<Rank.R4>(x.shape as [number, number, number, number], 'float32');\n\n  const dyData = backend.data.get(dy.dataId).values as Float32Array;\n  const dyBuf = buffer<Rank.R4>(\n      dy.shape as [number, number, number, number], 'float32', dyData);\n\n  for (let b = 0; b < convInfo.batchSize; ++b) {\n    for (let d = 0; d < convInfo.inChannels; ++d) {\n      for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n        for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n          // Shader code begins.\n          const dyRCorner = dxR - padTop;\n          const dyCCorner = dxC - padLeft;\n          let dotProd = 0;\n          for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n            const dyR = (dyRCorner + wR) / strideHeight;\n            if (dyR < 0 || dyR >= convInfo.outHeight ||\n                Math.floor(dyR) !== dyR) {\n              continue;\n            }\n            for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n              const dyC = (dyCCorner + wC) / strideWidth;\n              if (dyC < 0 || dyC >= convInfo.outWidth ||\n                  Math.floor(dyC) !== dyC) {\n                continue;\n              }\n              const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                  (maxPosBuf.get(b, dyR, dyC, d) as number);\n              const curPos = wR * effectiveFilterWidth + wC;\n\n              const mask = maxPos === curPos ? 1 : 0;\n              if (mask === 0) {\n                continue;\n              }\n\n              const pixel = dyBuf.get(b, dyR, dyC, d);\n              dotProd += pixel * mask;\n            }\n          }\n          dx.set(dotProd, b, dxR, dxC, d);\n        }\n      }\n    }\n  }\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const maxPoolGradConfig: KernelConfig = {\n  kernelName: MaxPoolGrad,\n  backendName: 'cpu',\n  kernelFunc: maxPoolGrad as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}