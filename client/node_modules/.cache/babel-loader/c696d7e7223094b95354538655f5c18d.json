{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nexport class GrowingRingBuffer extends RingBuffer {\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n\n  isFull() {\n    return false;\n  }\n\n  push(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n\n    super.push(value);\n  }\n\n  unshift(value) {\n    if (super.isFull()) {\n      this.expand();\n    }\n\n    super.unshift(value);\n  }\n  /**\n   * Doubles the capacity of the buffer.\n   */\n\n\n  expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array(newCapacity);\n    const len = this.length(); // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,UAAR,QAAyB,eAAzB;AAEA,OAAM,MAAOC,iBAAP,SAAoCD,UAApC,CAAiD;AAGrD;;;AAGAE;AACE,UAAMD,iBAAiB,CAACE,gBAAxB;AACD;;AAEDC,QAAM;AACJ,WAAO,KAAP;AACD;;AAEDC,MAAI,CAACC,KAAD,EAAS;AACX,QAAI,MAAMF,MAAN,EAAJ,EAAoB;AAClB,WAAKG,MAAL;AACD;;AACD,UAAMF,IAAN,CAAWC,KAAX;AACD;;AAEDE,SAAO,CAACF,KAAD,EAAS;AACd,QAAI,MAAMF,MAAN,EAAJ,EAAoB;AAClB,WAAKG,MAAL;AACD;;AACD,UAAMC,OAAN,CAAcF,KAAd;AACD;AAED;;;;;AAGQC,QAAM;AACZ,UAAME,WAAW,GAAG,KAAKC,QAAL,GAAgB,CAApC;AACA,UAAMC,OAAO,GAAG,IAAIC,KAAJ,CAAaH,WAAb,CAAhB;AACA,UAAMI,GAAG,GAAG,KAAKC,MAAL,EAAZ,CAHY,CAKZ;AACA;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,GAApB,EAAyBE,CAAC,EAA1B,EAA8B;AAC5BJ,aAAO,CAACI,CAAD,CAAP,GAAa,KAAKC,GAAL,CAAS,KAAKC,IAAL,CAAU,KAAKC,KAAL,GAAaH,CAAvB,CAAT,CAAb;AACD;;AAED,SAAKI,IAAL,GAAYR,OAAZ;AACA,SAAKD,QAAL,GAAgBD,WAAhB;AACA,SAAKW,eAAL,GAAuB,IAAI,KAAKV,QAAhC;AACA,SAAKQ,KAAL,GAAa,CAAb;AACA,SAAKG,GAAL,GAAWR,GAAX;AACD;;AA/CoD;AACtCZ,qCAAmB,EAAnB","names":["RingBuffer","GrowingRingBuffer","constructor","INITIAL_CAPACITY","isFull","push","value","expand","unshift","newCapacity","capacity","newData","Array","len","length","i","get","wrap","begin","data","doubledCapacity","end"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-data/src/util/growing_ring_buffer.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {RingBuffer} from './ring_buffer';\n\nexport class GrowingRingBuffer<T> extends RingBuffer<T> {\n  private static INITIAL_CAPACITY = 32;\n\n  /**\n   * Constructs a `GrowingRingBuffer`.\n   */\n  constructor() {\n    super(GrowingRingBuffer.INITIAL_CAPACITY);\n  }\n\n  isFull() {\n    return false;\n  }\n\n  push(value: T) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.push(value);\n  }\n\n  unshift(value: T) {\n    if (super.isFull()) {\n      this.expand();\n    }\n    super.unshift(value);\n  }\n\n  /**\n   * Doubles the capacity of the buffer.\n   */\n  private expand() {\n    const newCapacity = this.capacity * 2;\n    const newData = new Array<T>(newCapacity);\n    const len = this.length();\n\n    // Rotate the buffer to start at index 0 again, since we can't just\n    // allocate more space at the end.\n    for (let i = 0; i < len; i++) {\n      newData[i] = this.get(this.wrap(this.begin + i));\n    }\n\n    this.data = newData;\n    this.capacity = newCapacity;\n    this.doubledCapacity = 2 * this.capacity;\n    this.begin = 0;\n    this.end = len;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}