{"ast":null,"code":"var _jsxFileName = \"/home/nadimakhtar97/smart-attendance-system/client/src/Components/WebCam/WebCam.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef, useCallback } from 'react';\nimport Webcam from \"react-webcam\";\nimport styles from \"../WebCam/WebCam.module.css\";\nimport * as tf from '@tensorflow/tfjs';\nimport axios from 'axios';\nimport { Button, Box, Image, Flex, Text, CircularProgress, Center, VStack } from '@chakra-ui/react';\nimport draw from '../Utilities';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction WebCam() {\n  _s();\n\n  const [image, setImage] = useState('');\n  const [progress, setProgress] = useState(true);\n  const [clicked, setClicked] = useState(false);\n  const videoConstraints = {\n    width: 720,\n    height: 360,\n    facingMode: \"user\"\n  };\n  const webcamRef = useRef(null);\n  const capture = useCallback(async () => {\n    setClicked(true);\n\n    try {\n      const imageSrc = webcamRef.current.getScreenshot();\n      setImage(imageSrc);\n      const response = await axios.post('http://localhost:5000/img', {\n        \"base64image\": imageSrc\n      });\n      let tempProgress = false;\n      setProgress(tempProgress);\n      console.log(response);\n    } catch (error) {\n      console.error(\"This is an error\", error);\n    }\n  }, [webcamRef]);\n  return /*#__PURE__*/_jsxDEV(Flex, {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    alignContent: \"space-between\",\n    direction: \"column\",\n    children: [/*#__PURE__*/_jsxDEV(Webcam, {\n      className: styles.cam,\n      mirrored: true,\n      ref: webcamRef,\n      screenshotFormat: \"image/jpeg\",\n      screenshotQuality: 1,\n      height: 360,\n      width: 720,\n      videoConstraints: videoConstraints\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      size: \"md\",\n      width: \"40%\",\n      m: \"20px\",\n      colorScheme: \"blue\",\n      onClick: () => {\n        capture();\n      },\n      children: /*#__PURE__*/_jsxDEV(Text, {\n        children: \"Capture\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 101\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), progress && clicked ? /*#__PURE__*/_jsxDEV(VStack, {\n      children: [/*#__PURE__*/_jsxDEV(Center, {\n        m: \"20px\",\n        children: /*#__PURE__*/_jsxDEV(Text, {\n          children: \"Please wait face recognition is under process\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 25\n      }, this), /*#__PURE__*/_jsxDEV(Center, {\n        children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n          isIndeterminate: true,\n          color: \"blue.300\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 21\n    }, this) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n}\n\n_s(WebCam, \"/wHZ2nZSSAmRoa+kXjocYbpTUyw=\");\n\n_c = WebCam;\nexport default WebCam;\n\nvar _c;\n\n$RefreshReg$(_c, \"WebCam\");","map":{"version":3,"sources":["/home/nadimakhtar97/smart-attendance-system/client/src/Components/WebCam/WebCam.js"],"names":["React","useState","useRef","useCallback","Webcam","styles","tf","axios","Button","Box","Image","Flex","Text","CircularProgress","Center","VStack","draw","WebCam","image","setImage","progress","setProgress","clicked","setClicked","videoConstraints","width","height","facingMode","webcamRef","capture","imageSrc","current","getScreenshot","response","post","tempProgress","console","log","error","cam"],"mappings":"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","sourcesContent":["import React, { useState, useRef, useCallback } from 'react'\nimport Webcam from \"react-webcam\";\nimport styles from \"../WebCam/WebCam.module.css\";\nimport * as tf from '@tensorflow/tfjs';\nimport axios from 'axios'\nimport { Button, Box, Image, Flex, Text, CircularProgress, Center, VStack } from '@chakra-ui/react'\nimport draw from '../Utilities'\n\nfunction WebCam() {\n\n    const [image, setImage] = useState('')\n    const [progress, setProgress] = useState(true)\n    const [clicked, setClicked] = useState(false)\n    const videoConstraints = {\n        width: 720,\n        height: 360,\n        facingMode: \"user\"\n    };\n\n    const webcamRef = useRef(null);\n\n    const capture = useCallback(\n        async () => {\n            setClicked(true)\n            try {\n                const imageSrc = webcamRef.current.getScreenshot();\n                setImage(imageSrc);\n                const response = await axios.post('http://localhost:5000/img', { \"base64image\": imageSrc })\n                let tempProgress = false;\n                setProgress(tempProgress);\n                console.log(response);\n            }\n            catch (error) {\n                console.error(\"This is an error\",error)\n            }\n\n        },\n        [webcamRef]\n    );\n    return (\n        <Flex justifyContent='center' alignItems='center' alignContent='space-between' direction='column'>\n            <Webcam\n                className={styles.cam}\n                mirrored={true}\n                ref={webcamRef}\n                screenshotFormat=\"image/jpeg\"\n                screenshotQuality={1}\n                height={360}\n                width={720}\n                videoConstraints={videoConstraints}\n            ></Webcam>\n            <Button size='md' width='40%' m='20px' colorScheme='blue' onClick={() => { capture() }}><Text>Capture</Text></Button>\n            {\n                (progress && clicked) ? (\n                    <VStack>\n                        <Center m='20px'>\n                            <Text>Please wait face recognition is under process</Text>\n                        </Center>\n                        <Center>\n                            <CircularProgress isIndeterminate color='blue.300' />\n                        </Center>\n                    </VStack>\n\n                ) : null\n            }\n\n            {/* {image ? <Box>\n                <Image src={image}/>\n            </Box> : null} */}\n        </Flex>\n\n    )\n}\n\nexport default WebCam"]},"metadata":{},"sourceType":"module"}