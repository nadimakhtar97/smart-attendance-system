{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let result = depthwiseConv2dNative({\n    inputs: {\n      x,\n      filter\n    },\n    backend,\n    attrs: {\n      strides,\n      pad,\n      dataFormat,\n      dilations,\n      dimRoundingMode\n    }\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({\n      inputs: {\n        a: result,\n        b: bias\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,oBAAR,QAAgI,uBAAhI;AAGA,SAAQC,eAAR,QAA8B,sBAA9B;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,qBAAR,QAAoC,yBAApC;AAEA,OAAM,SAAUC,oBAAV,CAA+BC,IAA/B,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC,UAAJ;AAAYC,QAAZ;AAAkBC;AAAlB,MAA4CN,MAAlD;AACA,QAAM;AACJO,WADI;AAEJC,OAFI;AAGJC,cAHI;AAIJC,aAJI;AAKJC,mBALI;AAMJC,cANI;AAOJC;AAPI,MAQFX,KARJ;AAUA,MAAIY,MAAM,GAAGjB,qBAAqB,CAAC;AACjCG,UAAM,EAAE;AAACG,OAAD;AAAIC;AAAJ,KADyB;AAEjCH,WAFiC;AAGjCC,SAAK,EAAE;AAACK,aAAD;AAAUC,SAAV;AAAeC,gBAAf;AAA2BC,eAA3B;AAAsCC;AAAtC;AAH0B,GAAD,CAAlC;;AAMA,MAAIN,IAAJ,EAAU;AACR,UAAMU,SAAS,GAAGD,MAAlB;AACAA,UAAM,GAAGlB,GAAG,CAAC;AAACI,YAAM,EAAE;AAACgB,SAAC,EAAEF,MAAJ;AAAYG,SAAC,EAAEZ;AAAf,OAAT;AAA+BJ;AAA/B,KAAD,CAAZ;AACAA,WAAO,CAACiB,6BAAR,CAAsCH,SAAtC;AACD;;AACD,MAAIH,UAAJ,EAAgB;AACd,UAAMG,SAAS,GAAGD,MAAlB;AACAA,UAAM,GAAGnB,eAAe,CACpBM,OADoB,EACXa,MADW,EACHF,UADG,EACSN,sBADT,EACiCO,cADjC,CAAxB;AAEAZ,WAAO,CAACiB,6BAAR,CAAsCH,SAAtC;AACD;;AAED,SAAOD,MAAP;AACD;AAED,OAAO,MAAMK,0BAA0B,GAAiB;AACtDC,YAAU,EAAE1B,oBAD0C;AAEtD2B,aAAW,EAAE,KAFyC;AAGtDC,YAAU,EAAExB;AAH0C,CAAjD","names":["FusedDepthwiseConv2D","applyActivation","add","depthwiseConv2dNative","fusedDepthwiseConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","result","oldResult","a","b","disposeIntermediateTensorInfo","fusedDepthwiseConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/FusedDepthwiseConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\nimport {add} from './Add';\nimport {depthwiseConv2dNative} from './DepthwiseConv2dNative';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  backend: MathBackendCPU,\n  attrs: FusedDepthwiseConv2DAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n\n  let result = depthwiseConv2dNative({\n    inputs: {x, filter},\n    backend,\n    attrs: {strides, pad, dataFormat, dilations, dimRoundingMode}\n  });\n\n  if (bias) {\n    const oldResult = result;\n    result = add({inputs: {a: result, b: bias}, backend}) as TensorInfo;\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n  if (activation) {\n    const oldResult = result;\n    result = applyActivation(\n        backend, result, activation, preluActivationWeights, leakyreluAlpha);\n    backend.disposeIntermediateTensorInfo(oldResult);\n  }\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'cpu',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}