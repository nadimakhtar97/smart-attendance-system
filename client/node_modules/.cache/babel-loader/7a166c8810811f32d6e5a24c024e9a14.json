{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* original source: keras/regularizers.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { abs, add, serialization, sum, tidy, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n\nfunction assertObjectArgs(args) {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(`Argument to L1L2 regularizer's constructor is expected to be an ` + `object, but received: ${args}`);\n  }\n}\n/**\n * Regularizer base class.\n */\n\n\nexport class Regularizer extends serialization.Serializable {}\nexport class L1L2 extends Regularizer {\n  constructor(args) {\n    super();\n    assertObjectArgs(args);\n    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = this.l1 !== 0;\n    this.hasL2 = this.l2 !== 0;\n  }\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n\n\n  apply(x) {\n    return tidy(() => {\n      let regularization = zeros([1]);\n\n      if (this.hasL1) {\n        regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n      }\n\n      if (this.hasL2) {\n        regularization = add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n      }\n\n      return tfc.reshape(regularization, []);\n    });\n  }\n\n  getConfig() {\n    return {\n      'l1': this.l1,\n      'l2': this.l2\n    };\n  }\n  /** @nocollapse */\n\n\n  static fromConfig(cls, config) {\n    return new cls({\n      l1: config['l1'],\n      l2: config['l2']\n    });\n  }\n\n}\n/** @nocollapse */\n\nL1L2.className = 'L1L2';\nserialization.registerClass(L1L2);\nexport function l1(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l1: args != null ? args.l1 : null,\n    l2: 0\n  });\n}\nexport function l2(args) {\n  assertObjectArgs(args);\n  return new L1L2({\n    l2: args != null ? args.l2 : null,\n    l1: 0\n  });\n} // Maps the JavaScript-like identifier keys to the corresponding keras symbols.\n\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'l1l2': 'L1L2'\n};\nexport function serializeRegularizer(constraint) {\n  return serializeKerasObject(constraint);\n}\nexport function deserializeRegularizer(config) {\n  let customObjects = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'regularizer');\n}\nexport function getRegularizer(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n\n  if (typeof identifier === 'string') {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    const config = {\n      className,\n      config: {}\n    };\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}","map":{"version":3,"mappings":"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","names":["tfc","abs","add","serialization","sum","tidy","zeros","K","deserializeKerasObject","serializeKerasObject","assertObjectArgs","args","Error","Regularizer","Serializable","L1L2","constructor","l1","l2","hasL1","hasL2","apply","x","regularization","mul","square","reshape","getConfig","fromConfig","cls","config","registerClass","REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeRegularizer","constraint","deserializeRegularizer","customObjects","SerializationMap","getMap","classNameMap","getRegularizer","identifier","className"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/regularizers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* original source: keras/regularizers.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {abs, add, Scalar, serialization, sum, Tensor, tidy, zeros} from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport {deserializeKerasObject, serializeKerasObject} from './utils/generic_utils';\n\nfunction assertObjectArgs(args: L1Args|L2Args|L1L2Args): void {\n  if (args != null && typeof args !== 'object') {\n    throw new Error(\n        `Argument to L1L2 regularizer's constructor is expected to be an ` +\n        `object, but received: ${args}`);\n  }\n}\n\n/**\n * Regularizer base class.\n */\nexport abstract class Regularizer extends serialization.Serializable {\n  abstract apply(x: Tensor): Scalar;\n}\n\nexport interface L1L2Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1?: number;\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2?: number;\n}\n\nexport interface L1Args {\n  /** L1 regularization rate. Defaults to 0.01. */\n  l1: number;\n}\n\nexport interface L2Args {\n  /** L2 regularization rate. Defaults to 0.01. */\n  l2: number;\n}\n\nexport class L1L2 extends Regularizer {\n  /** @nocollapse */\n  static className = 'L1L2';\n\n  private readonly l1: number;\n  private readonly l2: number;\n  private readonly hasL1: boolean;\n  private readonly hasL2: boolean;\n  constructor(args?: L1L2Args) {\n    super();\n\n    assertObjectArgs(args);\n\n    this.l1 = args == null || args.l1 == null ? 0.01 : args.l1;\n    this.l2 = args == null || args.l2 == null ? 0.01 : args.l2;\n    this.hasL1 = this.l1 !== 0;\n    this.hasL2 = this.l2 !== 0;\n  }\n\n  /**\n   * Porting note: Renamed from __call__.\n   * @param x Variable of which to calculate the regularization score.\n   */\n  apply(x: Tensor): Scalar {\n    return tidy(() => {\n      let regularization: Tensor = zeros([1]);\n      if (this.hasL1) {\n        regularization = add(regularization, sum(tfc.mul(this.l1, abs(x))));\n      }\n      if (this.hasL2) {\n        regularization =\n            add(regularization, sum(tfc.mul(this.l2, K.square(x))));\n      }\n      return tfc.reshape(regularization, []);\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    return {'l1': this.l1, 'l2': this.l2};\n  }\n\n  /** @nocollapse */\n  static fromConfig<T extends serialization.Serializable>(\n      cls: serialization.SerializableConstructor<T>,\n      config: serialization.ConfigDict): T {\n    return new cls({l1: config['l1'] as number, l2: config['l2'] as number});\n  }\n}\nserialization.registerClass(L1L2);\n\nexport function l1(args?: L1Args) {\n  assertObjectArgs(args);\n  return new L1L2({l1: args != null ? args.l1 : null, l2: 0});\n}\n\nexport function l2(args: L2Args) {\n  assertObjectArgs(args);\n  return new L1L2({l2: args != null ? args.l2 : null, l1: 0});\n}\n\n/** @docinline */\nexport type RegularizerIdentifier = 'l1l2'|string;\n\n// Maps the JavaScript-like identifier keys to the corresponding keras symbols.\nexport const REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP:\n    {[identifier in RegularizerIdentifier]: string} = {\n      'l1l2': 'L1L2'\n    };\n\nexport function serializeRegularizer(constraint: Regularizer):\n    serialization.ConfigDictValue {\n  return serializeKerasObject(constraint);\n}\n\nexport function deserializeRegularizer(\n    config: serialization.ConfigDict,\n    customObjects: serialization.ConfigDict = {}): Regularizer {\n  return deserializeKerasObject(\n      config, serialization.SerializationMap.getMap().classNameMap,\n      customObjects, 'regularizer');\n}\n\nexport function getRegularizer(identifier: RegularizerIdentifier|\n                               serialization.ConfigDict|\n                               Regularizer): Regularizer {\n  if (identifier == null) {\n    return null;\n  }\n  if (typeof identifier === 'string') {\n    const className = identifier in REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n        REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n        identifier;\n    const config = {className, config: {}};\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}