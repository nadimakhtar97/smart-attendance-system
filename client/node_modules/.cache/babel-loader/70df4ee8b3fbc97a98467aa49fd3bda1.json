{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { LogicalAnd } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assertAndGetBroadcastShape } from './broadcast_util';\nimport { op } from './operation';\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\n\nfunction logicalAnd_(a, b) {\n  const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n  const inputs = {\n    a: $a,\n    b: $b\n  };\n  return ENGINE.runKernel(LogicalAnd, inputs);\n}\n\nexport const logicalAnd = op({\n  logicalAnd_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,UAAR,QAA2C,iBAA3C;AAGA,SAAQC,eAAR,QAA8B,oBAA9B;AAGA,SAAQC,0BAAR,QAAyC,kBAAzC;AACA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;AAeA,SAASC,WAAT,CACIC,CADJ,EAC0BC,CAD1B,EAC8C;AAC5C,QAAMC,EAAE,GAAGN,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,YAAT,EAAuB,MAAvB,CAA1B;AACA,QAAMG,EAAE,GAAGP,eAAe,CAACK,CAAD,EAAI,GAAJ,EAAS,YAAT,EAAuB,MAAvB,CAA1B;AACAJ,4BAA0B,CAACK,EAAE,CAACE,KAAJ,EAAWD,EAAE,CAACC,KAAd,CAA1B;AAEA,QAAMC,MAAM,GAAqB;AAACL,KAAC,EAAEE,EAAJ;AAAQD,KAAC,EAAEE;AAAX,GAAjC;AAEA,SAAOT,MAAM,CAACY,SAAP,CAAiBX,UAAjB,EAA6BU,MAA7B,CAAP;AACD;;AAED,OAAO,MAAME,UAAU,GAAGT,EAAE,CAAC;AAACC;AAAD,CAAD,CAArB","names":["ENGINE","LogicalAnd","convertToTensor","assertAndGetBroadcastShape","op","logicalAnd_","a","b","$a","$b","shape","inputs","runKernel","logicalAnd"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/logical_and.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {LogicalAnd, LogicalAndInputs} from '../kernel_names';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {assertAndGetBroadcastShape} from './broadcast_util';\nimport {op} from './operation';\n\n/**\n * Returns the truth value of `a AND b` element-wise. Supports broadcasting.\n *\n * ```js\n * const a = tf.tensor1d([false, false, true, true], 'bool');\n * const b = tf.tensor1d([false, true, false, true], 'bool');\n *\n * a.logicalAnd(b).print();\n * ```\n *\n * @param a The first input tensor. Must be of dtype bool.\n * @param b The second input tensor. Must be of dtype bool.\n *\n * @doc {heading: 'Operations', subheading: 'Logical'}\n */\nfunction logicalAnd_<T extends Tensor>(\n    a: Tensor|TensorLike, b: Tensor|TensorLike): T {\n  const $a = convertToTensor(a, 'a', 'logicalAnd', 'bool');\n  const $b = convertToTensor(b, 'b', 'logicalAnd', 'bool');\n  assertAndGetBroadcastShape($a.shape, $b.shape);\n\n  const inputs: LogicalAndInputs = {a: $a, b: $b};\n\n  return ENGINE.runKernel(LogicalAnd, inputs as {} as NamedTensorMap);\n}\n\nexport const logicalAnd = op({logicalAnd_});\n"]},"metadata":{},"sourceType":"module"}