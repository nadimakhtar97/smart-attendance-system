{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { add } from '../add';\nimport { Reduction } from '../loss_ops_utils';\nimport { minimum } from '../minimum';\nimport { mul } from '../mul';\nimport { op } from '../operation';\nimport { scalar } from '../scalar';\nimport { square } from '../square';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n/**\n * Computes the huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\n\nfunction huberLoss_(labels, predictions, weights) {\n  let delta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1.0;\n  let reduction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Reduction.SUM_BY_NONZERO_WEIGHTS;\n  const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n  let $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'huberLoss');\n  }\n\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n  const deltaScalar = scalar(delta);\n  const error = abs(sub($predictions, $labels));\n  const quadratic = minimum(error, deltaScalar);\n  const linear = sub(error, quadratic);\n  const losses = add(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const huberLoss = op({\n  huberLoss_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAR,QAA8B,uBAA9B;AAEA,SAAQC,iBAAR,QAAgC,YAAhC;AACA,SAAQC,GAAR,QAAkB,QAAlB;AACA,SAAQC,GAAR,QAAkB,QAAlB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,GAAR,QAAkB,QAAlB;AACA,SAAQC,EAAR,QAAiB,cAAjB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAAQC,GAAR,QAAkB,QAAlB;AAEA,SAAQC,mBAAR,QAAkC,yBAAlC;AAEA;;;;;;;;;;;;;;;;;AAgBA,SAASC,UAAT,CACIC,MADJ,EAC0BC,WAD1B,EAEIC,OAFJ,EAGgD;AAAA,MADfC,KACe,uEADP,GACO;AAAA,MAA5CC,SAA4C,uEAAhCb,SAAS,CAACc,sBAAsB;AAC9C,QAAMC,OAAO,GAAGnB,eAAe,CAACa,MAAD,EAAS,QAAT,EAAmB,WAAnB,CAA/B;AACA,QAAMO,YAAY,GAAGpB,eAAe,CAACc,WAAD,EAAc,aAAd,EAA6B,WAA7B,CAApC;AACA,MAAIO,QAAQ,GAAW,IAAvB;;AACA,MAAIN,OAAO,IAAI,IAAf,EAAqB;AACnBM,YAAQ,GAAGrB,eAAe,CAACe,OAAD,EAAU,SAAV,EAAqB,WAArB,CAA1B;AACD;;AACDd,mBAAiB,CAACkB,OAAO,CAACG,KAAT,EAAgBF,YAAY,CAACE,KAA7B,EAAoC,sBAApC,CAAjB;AAEA,QAAMC,WAAW,GAAGf,MAAM,CAACQ,KAAD,CAA1B;AACA,QAAMQ,KAAK,GAAGtB,GAAG,CAACQ,GAAG,CAACU,YAAD,EAAeD,OAAf,CAAJ,CAAjB;AACA,QAAMM,SAAS,GAAGpB,OAAO,CAACmB,KAAD,EAAQD,WAAR,CAAzB;AACA,QAAMG,MAAM,GAAGhB,GAAG,CAACc,KAAD,EAAQC,SAAR,CAAlB;AAEA,QAAME,MAAM,GACRxB,GAAG,CAACG,GAAG,CAACE,MAAM,CAAC,GAAD,CAAP,EAAcC,MAAM,CAACgB,SAAD,CAApB,CAAJ,EAAsCnB,GAAG,CAACiB,WAAD,EAAcG,MAAd,CAAzC,CADP;AAEA,SAAOf,mBAAmB,CAACgB,MAAD,EAASN,QAAT,EAAmBJ,SAAnB,CAA1B;AACD;;AACD,OAAO,MAAMW,SAAS,GAAGrB,EAAE,CAAC;AAACK;AAAD,CAAD,CAApB","names":["convertToTensor","assertShapesMatch","abs","add","Reduction","minimum","mul","op","scalar","square","sub","computeWeightedLoss","huberLoss_","labels","predictions","weights","delta","reduction","SUM_BY_NONZERO_WEIGHTS","$labels","$predictions","$weights","shape","deltaScalar","error","quadratic","linear","losses","huberLoss"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/losses/huber_loss.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {add} from '../add';\nimport {Reduction} from '../loss_ops_utils';\nimport {minimum} from '../minimum';\nimport {mul} from '../mul';\nimport {op} from '../operation';\nimport {scalar} from '../scalar';\nimport {square} from '../square';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\n/**\n * Computes the huber loss between two tensors.\n *\n * @param labels The ground truth output tensor, same dimensions as\n *    'predictions'.\n * @param predictions The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param delta Point where huber loss changes from quadratic to linear.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`.\n *\n * @doc {heading: 'Training', subheading: 'Losses', namespace: 'losses'}\n */\nfunction huberLoss_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, predictions: T|TensorLike,\n    weights?: Tensor|TensorLike, delta = 1.0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  const $labels = convertToTensor(labels, 'labels', 'huberLoss');\n  const $predictions = convertToTensor(predictions, 'predictions', 'huberLoss');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'huberLoss');\n  }\n  assertShapesMatch($labels.shape, $predictions.shape, 'Error in huberLoss: ');\n\n  const deltaScalar = scalar(delta);\n  const error = abs(sub($predictions, $labels));\n  const quadratic = minimum(error, deltaScalar);\n  const linear = sub(error, quadratic);\n\n  const losses =\n      add(mul(scalar(0.5), square(quadratic)), mul(deltaScalar, linear));\n  return computeWeightedLoss(losses, $weights, reduction);\n}\nexport const huberLoss = op({huberLoss_});\n"]},"metadata":{},"sourceType":"module"}