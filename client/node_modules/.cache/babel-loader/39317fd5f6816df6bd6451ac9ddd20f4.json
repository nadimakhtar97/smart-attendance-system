{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { loadWeightsAsArrayBuffer } from './weights_loader';\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest {\n  constructor(path, loadOptions) {\n    this.DEFAULT_METHOD = 'POST';\n\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(typeof loadOptions.fetchFunc === 'function', () => 'Must pass a function that matches the signature of ' + '`fetch` (see ' + 'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(path != null && path.length > 0, () => 'URL path for http must not be null, undefined or ' + 'empty.');\n\n    if (Array.isArray(path)) {\n      assert(path.length === 2, () => 'URL paths for http must have a length of 2, ' + `(actual length is ${path.length}).`);\n    }\n\n    this.path = path;\n\n    if (loadOptions.requestInit != null && loadOptions.requestInit.body != null) {\n      throw new Error('requestInit is expected to have no pre-existing body, but has one.');\n    }\n\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserHTTPRequest.save() does not support saving model topology ' + 'in binary formats yet.');\n    }\n\n    const init = Object.assign({\n      method: this.DEFAULT_METHOD\n    }, this.requestInit);\n    init.body = new FormData();\n    const weightsManifest = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs\n    }];\n    const modelTopologyAndWeightManifest = getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n    init.body.append('model.json', new Blob([JSON.stringify(modelTopologyAndWeightManifest)], {\n      type: JSON_TYPE\n    }), 'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append('model.weights.bin', new Blob([modelArtifacts.weightData], {\n        type: OCTET_STREAM_MIME_TYPE\n      }), 'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response]\n      };\n    } else {\n      throw new Error(`BrowserHTTPRequest.save() failed due to HTTP response status ` + `${response.status}.`);\n    }\n  }\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n\n\n  async load() {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(`Request to ${this.path} failed with status code ` + `${modelConfigRequest.status}. Please verify this URL points to ` + `the model JSON of the model to load.`);\n    }\n\n    let modelJSON;\n\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`; // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' + 'Support for .pb models have been removed in TensorFlow.js 1.0 ' + 'in favor of .json models. You can re-convert your Python ' + 'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' + 'or you can convert your.pb models with the \\'pb2json\\'' + 'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' + 'JSON for this request.';\n      }\n\n      throw new Error(message);\n    } // We do not allow both modelTopology and weightsManifest to be missing.\n\n\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(`The JSON from HTTP path ${this.path} contains neither model ` + `topology or manifest for weights.`);\n    }\n\n    return getModelArtifactsForJSON(modelJSON, weightsManifest => this.loadWeights(weightsManifest));\n  }\n\n  async loadWeights(weightsManifest) {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n    const weightSpecs = [];\n\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n    }\n\n    const fetchURLs = [];\n    const urlPromises = [];\n\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...(await Promise.all(urlPromises)));\n    }\n\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n\n}\nHTTPRequest.URL_SCHEME_REGEX = /^https?:\\/\\//;\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\n\nexport function parseUrl(url) {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix = lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\nexport function isHTTPScheme(url) {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\nexport const httpRouter = (url, loadOptions) => {\n  if (typeof fetch === 'undefined' && (loadOptions == null || loadOptions.fetchFunc == null)) {\n    // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n    // an environment that is not the browser or node they have to setup a\n    // global fetch polyfill.\n    return null;\n  } else {\n    let isHTTP = true;\n\n    if (Array.isArray(url)) {\n      isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n    } else {\n      isHTTP = isHTTPScheme(url);\n    }\n\n    if (isHTTP) {\n      return http(url, loadOptions);\n    }\n  }\n\n  return null;\n};\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\nexport function http(path, loadOptions) {\n  return new HTTPRequest(path, loadOptions);\n}\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\n\nexport function browserHTTPRequest(path, loadOptions) {\n  return http(path, loadOptions);\n}","map":{"version":3,"mappings":"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","names":["env","assert","concatenateArrayBuffers","getModelArtifactsForJSON","getModelArtifactsInfoForJSON","getModelJSONForModelArtifacts","IORouterRegistry","loadWeightsAsArrayBuffer","OCTET_STREAM_MIME_TYPE","JSON_TYPE","HTTPRequest","constructor","path","loadOptions","weightPathPrefix","onProgress","weightUrlConverter","fetchFunc","fetch","platform","length","Array","isArray","requestInit","body","Error","save","modelArtifacts","modelTopology","ArrayBuffer","init","Object","assign","method","DEFAULT_METHOD","FormData","weightsManifest","paths","weights","weightSpecs","modelTopologyAndWeightManifest","append","Blob","JSON","stringify","type","weightData","response","ok","modelArtifactsInfo","responses","status","load","modelConfigRequest","modelJSON","json","e","message","endsWith","loadWeights","weightPath","prefix","suffix","parseUrl","pathPrefix","entry","push","fetchURLs","urlPromises","weightsGroup","Promise","all","buffers","url","lastSlash","lastIndexOf","lastSearchParam","substring","isHTTPScheme","match","URL_SCHEME_REGEX","httpRouter","isHTTP","every","urlItem","http","registerSaveRouter","registerLoadRouter","browserHTTPRequest"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/io/http.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * IOHandler implementations based on HTTP requests in the web browser.\n *\n * Uses [`fetch`](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API).\n */\n\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {concatenateArrayBuffers, getModelArtifactsForJSON, getModelArtifactsInfoForJSON, getModelJSONForModelArtifacts} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, LoadOptions, ModelArtifacts, ModelJSON, OnProgressCallback, SaveResult, WeightsManifestConfig, WeightsManifestEntry} from './types';\nimport {loadWeightsAsArrayBuffer} from './weights_loader';\n\nconst OCTET_STREAM_MIME_TYPE = 'application/octet-stream';\nconst JSON_TYPE = 'application/json';\nexport class HTTPRequest implements IOHandler {\n  protected readonly path: string;\n  protected readonly requestInit: RequestInit;\n\n  private readonly fetch: Function;\n  private readonly weightUrlConverter: (weightName: string) => Promise<string>;\n\n  readonly DEFAULT_METHOD = 'POST';\n\n  static readonly URL_SCHEME_REGEX = /^https?:\\/\\//;\n\n  private readonly weightPathPrefix: string;\n  private readonly onProgress: OnProgressCallback;\n\n  constructor(path: string, loadOptions?: LoadOptions) {\n    if (loadOptions == null) {\n      loadOptions = {};\n    }\n    this.weightPathPrefix = loadOptions.weightPathPrefix;\n    this.onProgress = loadOptions.onProgress;\n    this.weightUrlConverter = loadOptions.weightUrlConverter;\n\n    if (loadOptions.fetchFunc != null) {\n      assert(\n          typeof loadOptions.fetchFunc === 'function',\n          () => 'Must pass a function that matches the signature of ' +\n              '`fetch` (see ' +\n              'https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)');\n      this.fetch = loadOptions.fetchFunc;\n    } else {\n      this.fetch = env().platform.fetch;\n    }\n\n    assert(\n        path != null && path.length > 0,\n        () => 'URL path for http must not be null, undefined or ' +\n            'empty.');\n\n    if (Array.isArray(path)) {\n      assert(\n          path.length === 2,\n          () => 'URL paths for http must have a length of 2, ' +\n              `(actual length is ${path.length}).`);\n    }\n    this.path = path;\n\n    if (loadOptions.requestInit != null &&\n        loadOptions.requestInit.body != null) {\n      throw new Error(\n          'requestInit is expected to have no pre-existing body, but has one.');\n    }\n    this.requestInit = loadOptions.requestInit || {};\n  }\n\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserHTTPRequest.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    }\n\n    const init = Object.assign({method: this.DEFAULT_METHOD}, this.requestInit);\n    init.body = new FormData();\n\n    const weightsManifest: WeightsManifestConfig = [{\n      paths: ['./model.weights.bin'],\n      weights: modelArtifacts.weightSpecs,\n    }];\n    const modelTopologyAndWeightManifest: ModelJSON =\n        getModelJSONForModelArtifacts(modelArtifacts, weightsManifest);\n\n    init.body.append(\n        'model.json',\n        new Blob(\n            [JSON.stringify(modelTopologyAndWeightManifest)],\n            {type: JSON_TYPE}),\n        'model.json');\n\n    if (modelArtifacts.weightData != null) {\n      init.body.append(\n          'model.weights.bin',\n          new Blob([modelArtifacts.weightData], {type: OCTET_STREAM_MIME_TYPE}),\n          'model.weights.bin');\n    }\n\n    const response = await this.fetch(this.path, init);\n\n    if (response.ok) {\n      return {\n        modelArtifactsInfo: getModelArtifactsInfoForJSON(modelArtifacts),\n        responses: [response],\n      };\n    } else {\n      throw new Error(\n          `BrowserHTTPRequest.save() failed due to HTTP response status ` +\n          `${response.status}.`);\n    }\n  }\n\n  /**\n   * Load model artifacts via HTTP request(s).\n   *\n   * See the documentation to `tf.io.http` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model artifacts (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const modelConfigRequest = await this.fetch(this.path, this.requestInit);\n\n    if (!modelConfigRequest.ok) {\n      throw new Error(\n          `Request to ${this.path} failed with status code ` +\n          `${modelConfigRequest.status}. Please verify this URL points to ` +\n          `the model JSON of the model to load.`);\n    }\n    let modelJSON: ModelJSON;\n    try {\n      modelJSON = await modelConfigRequest.json();\n    } catch (e) {\n      let message = `Failed to parse model JSON of response from ${this.path}.`;\n      // TODO(nsthorat): Remove this after some time when we're comfortable that\n      // .pb files are mostly gone.\n      if (this.path.endsWith('.pb')) {\n        message += ' Your path contains a .pb file extension. ' +\n            'Support for .pb models have been removed in TensorFlow.js 1.0 ' +\n            'in favor of .json models. You can re-convert your Python ' +\n            'TensorFlow model using the TensorFlow.js 1.0 conversion scripts ' +\n            'or you can convert your.pb models with the \\'pb2json\\'' +\n            'NPM script in the tensorflow/tfjs-converter repository.';\n      } else {\n        message += ' Please make sure the server is serving valid ' +\n            'JSON for this request.';\n      }\n      throw new Error(message);\n    }\n\n    // We do not allow both modelTopology and weightsManifest to be missing.\n    const modelTopology = modelJSON.modelTopology;\n    const weightsManifest = modelJSON.weightsManifest;\n    if (modelTopology == null && weightsManifest == null) {\n      throw new Error(\n          `The JSON from HTTP path ${this.path} contains neither model ` +\n          `topology or manifest for weights.`);\n    }\n\n    return getModelArtifactsForJSON(\n        modelJSON, (weightsManifest) => this.loadWeights(weightsManifest));\n  }\n\n  private async loadWeights(weightsManifest: WeightsManifestConfig):\n      Promise<[WeightsManifestEntry[], ArrayBuffer]> {\n    const weightPath = Array.isArray(this.path) ? this.path[1] : this.path;\n    const [prefix, suffix] = parseUrl(weightPath);\n    const pathPrefix = this.weightPathPrefix || prefix;\n\n    const weightSpecs = [];\n    for (const entry of weightsManifest) {\n      weightSpecs.push(...entry.weights);\n    }\n\n    const fetchURLs: string[] = [];\n    const urlPromises: Array<Promise<string>> = [];\n    for (const weightsGroup of weightsManifest) {\n      for (const path of weightsGroup.paths) {\n        if (this.weightUrlConverter != null) {\n          urlPromises.push(this.weightUrlConverter(path));\n        } else {\n          fetchURLs.push(pathPrefix + path + suffix);\n        }\n      }\n    }\n\n    if (this.weightUrlConverter) {\n      fetchURLs.push(...await Promise.all(urlPromises));\n    }\n\n    const buffers = await loadWeightsAsArrayBuffer(fetchURLs, {\n      requestInit: this.requestInit,\n      fetchFunc: this.fetch,\n      onProgress: this.onProgress\n    });\n    return [weightSpecs, concatenateArrayBuffers(buffers)];\n  }\n}\n\n/**\n * Extract the prefix and suffix of the url, where the prefix is the path before\n * the last file, and suffix is the search params after the last file.\n * ```\n * const url = 'http://tfhub.dev/model/1/tensorflowjs_model.pb?tfjs-format=file'\n * [prefix, suffix] = parseUrl(url)\n * // prefix = 'http://tfhub.dev/model/1/'\n * // suffix = '?tfjs-format=file'\n * ```\n * @param url the model url to be parsed.\n */\nexport function parseUrl(url: string): [string, string] {\n  const lastSlash = url.lastIndexOf('/');\n  const lastSearchParam = url.lastIndexOf('?');\n  const prefix = url.substring(0, lastSlash);\n  const suffix =\n      lastSearchParam > lastSlash ? url.substring(lastSearchParam) : '';\n  return [prefix + '/', suffix];\n}\n\nexport function isHTTPScheme(url: string): boolean {\n  return url.match(HTTPRequest.URL_SCHEME_REGEX) != null;\n}\n\nexport const httpRouter: IORouter =\n    (url: string, loadOptions?: LoadOptions) => {\n      if (typeof fetch === 'undefined' &&\n          (loadOptions == null || loadOptions.fetchFunc == null)) {\n        // `http` uses `fetch` or `node-fetch`, if one wants to use it in\n        // an environment that is not the browser or node they have to setup a\n        // global fetch polyfill.\n        return null;\n      } else {\n        let isHTTP = true;\n        if (Array.isArray(url)) {\n          isHTTP = url.every(urlItem => isHTTPScheme(urlItem));\n        } else {\n          isHTTP = isHTTPScheme(url);\n        }\n        if (isHTTP) {\n          return http(url, loadOptions);\n        }\n      }\n      return null;\n    };\nIORouterRegistry.registerSaveRouter(httpRouter);\nIORouterRegistry.registerLoadRouter(httpRouter);\n\n/**\n * Creates an IOHandler subtype that sends model artifacts to HTTP server.\n *\n * An HTTP request of the `multipart/form-data` mime type will be sent to the\n * `path` URL. The form data includes artifacts that represent the topology\n * and/or weights of the model. In the case of Keras-style `tf.Model`, two\n * blobs (files) exist in form-data:\n *   - A JSON file consisting of `modelTopology` and `weightsManifest`.\n *   - A binary weights file consisting of the concatenated weight values.\n * These files are in the same format as the one generated by\n * [tfjs_converter](https://js.tensorflow.org/tutorials/import-keras.html).\n *\n * The following code snippet exemplifies the client-side code that uses this\n * function:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save(tf.io.http(\n *     'http://model-server:5000/upload', {requestInit: {method: 'PUT'}}));\n * console.log(saveResult);\n * ```\n *\n * If the default `POST` method is to be used, without any custom parameters\n * such as headers, you can simply pass an HTTP or HTTPS URL to `model.save`:\n *\n * ```js\n * const saveResult = await model.save('http://model-server:5000/upload');\n * ```\n *\n * The following GitHub Gist\n * https://gist.github.com/dsmilkov/1b6046fd6132d7408d5257b0976f7864\n * implements a server based on [flask](https://github.com/pallets/flask) that\n * can receive the request. Upon receiving the model artifacts via the requst,\n * this particular server reconsistutes instances of [Keras\n * Models](https://keras.io/models/model/) in memory.\n *\n *\n * @param path A URL path to the model.\n *   Can be an absolute HTTP path (e.g.,\n *   'http://localhost:8000/model-upload)') or a relative path (e.g.,\n *   './model-upload').\n * @param requestInit Request configurations to be used when sending\n *    HTTP request to server using `fetch`. It can contain fields such as\n *    `method`, `credentials`, `headers`, `mode`, etc. See\n *    https://developer.mozilla.org/en-US/docs/Web/API/Request/Request\n *    for more information. `requestInit` must not have a body, because the\n * body will be set by TensorFlow.js. File blobs representing the model\n * topology (filename: 'model.json') and the weights of the model (filename:\n * 'model.weights.bin') will be appended to the body. If `requestInit` has a\n * `body`, an Error will be thrown.\n * @param loadOptions Optional configuration for the loading. It includes the\n *   following fields:\n *   - weightPathPrefix Optional, this specifies the path prefix for weight\n *     files, by default this is calculated from the path param.\n *   - fetchFunc Optional, custom `fetch` function. E.g., in Node.js,\n *     the `fetch` from node-fetch can be used here.\n *   - onProgress Optional, progress callback function, fired periodically\n *     before the load is completed.\n * @returns An instance of `IOHandler`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Loading',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nexport function http(path: string, loadOptions?: LoadOptions): IOHandler {\n  return new HTTPRequest(path, loadOptions);\n}\n\n/**\n * Deprecated. Use `tf.io.http`.\n * @param path\n * @param loadOptions\n */\nexport function browserHTTPRequest(\n    path: string, loadOptions?: LoadOptions): IOHandler {\n  return http(path, loadOptions);\n}\n"]},"metadata":{},"sourceType":"module"}