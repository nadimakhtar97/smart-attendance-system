{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, env, upcastType } from '@tensorflow/tfjs-core';\nimport { AddNProgram } from '../addn_gpu';\nimport { AddNPackedProgram } from '../addn_packed_gpu';\nimport { identity } from './Identity';\nexport function addN(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const tensors = inputs;\n\n  if (tensors.length === 1) {\n    return identity({\n      inputs: {\n        x: tensors[0]\n      },\n      backend\n    });\n  } // Limit the number of uploaded textures for optimization.\n\n\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({\n      inputs: tensors.slice(0, midIndex),\n      backend\n    });\n    const rightSide = addN({\n      inputs: tensors.slice(midIndex),\n      backend\n    });\n    return addN({\n      inputs: [leftSide, rightSide],\n      backend\n    });\n  }\n\n  const dtype = tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape); // We can make sure shapes are identical in op level.\n\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ? new AddNPackedProgram(tensors[0].shape, shapes) : new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\nexport const addNConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAR,EAA0BC,GAA1B,EAAqEC,UAArE,QAAsF,uBAAtF;AAEA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,iBAAR,QAAgC,oBAAhC;AAEA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAUC,IAAV,CAAeC,IAAf,EAAoE;AAExE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AAEA,QAAMG,OAAO,GAAGF,MAAhB;;AACA,MAAIE,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACxB,WAAON,QAAQ,CAAC;AAACG,YAAM,EAAE;AAACI,SAAC,EAAEF,OAAO,CAAC,CAAD;AAAX,OAAT;AAA0BD;AAA1B,KAAD,CAAf;AACD,GAPuE,CASxE;;;AACA,MAAIC,OAAO,CAACC,MAAR,GAAiBV,GAAG,GAAGY,GAAN,CAAU,8BAAV,CAArB,EAAgE;AAC9D,UAAMC,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWN,OAAO,CAACC,MAAR,GAAiB,CAA5B,CAAjB;AACA,UAAMM,QAAQ,GAAGX,IAAI,CAAC;AAACE,YAAM,EAAEE,OAAO,CAACQ,KAAR,CAAc,CAAd,EAAiBJ,QAAjB,CAAT;AAAqCL;AAArC,KAAD,CAArB;AACA,UAAMU,SAAS,GAAGb,IAAI,CAAC;AAACE,YAAM,EAAEE,OAAO,CAACQ,KAAR,CAAcJ,QAAd,CAAT;AAAkCL;AAAlC,KAAD,CAAtB;AACA,WAAOH,IAAI,CAAC;AAACE,YAAM,EAAE,CAACS,QAAD,EAAWE,SAAX,CAAT;AAAgCV;AAAhC,KAAD,CAAX;AACD;;AAED,QAAMW,KAAK,GACPV,OAAO,CAACW,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACF,KAAnB,EAA0BG,MAA1B,CAAiC,CAACC,EAAD,EAAKC,EAAL,KAAYvB,UAAU,CAACsB,EAAD,EAAKC,EAAL,CAAvD,CADJ;AAEA,QAAMC,MAAM,GAAGhB,OAAO,CAACW,GAAR,CAAYC,CAAC,IAAIA,CAAC,CAACK,KAAnB,CAAf,CAnBwE,CAoBxE;;AACA,QAAMC,WAAW,GAAG3B,GAAG,GAAG4B,OAAN,CAAc,YAAd,CAApB;AACA,QAAMC,OAAO,GAAGF,WAAW,GACvB,IAAIxB,iBAAJ,CAAsBM,OAAO,CAAC,CAAD,CAAP,CAAWiB,KAAjC,EAAwCD,MAAxC,CADuB,GAEvB,IAAIvB,WAAJ,CAAgBO,OAAO,CAAC,CAAD,CAAP,CAAWiB,KAA3B,EAAkCD,MAAlC,CAFJ;AAGA,SAAOjB,OAAO,CAACsB,eAAR,CAAwBD,OAAxB,EAAiCpB,OAAjC,EAA0CU,KAA1C,CAAP;AACD;AAED,OAAO,MAAMY,UAAU,GAAiB;AACtCC,YAAU,EAAEjC,IAD0B;AAEtCkC,aAAW,EAAE,OAFyB;AAGtCC,YAAU,EAAE7B;AAH0B,CAAjC","names":["AddN","env","upcastType","AddNProgram","AddNPackedProgram","identity","addN","args","inputs","backend","tensors","length","x","get","midIndex","Math","floor","leftSide","slice","rightSide","dtype","map","t","reduce","d1","d2","shapes","shape","usePackedOp","getBool","program","runWebGLProgram","addNConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/AddN.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {AddN, AddNInputs, env, KernelConfig, KernelFunc, TensorInfo, upcastType} from '@tensorflow/tfjs-core';\n\nimport {AddNProgram} from '../addn_gpu';\nimport {AddNPackedProgram} from '../addn_packed_gpu';\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\nexport function addN(args: {inputs: AddNInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n\n  const tensors = inputs;\n  if (tensors.length === 1) {\n    return identity({inputs: {x: tensors[0]}, backend});\n  }\n\n  // Limit the number of uploaded textures for optimization.\n  if (tensors.length > env().get('WEBGL_MAX_TEXTURES_IN_SHADER')) {\n    const midIndex = Math.floor(tensors.length / 2);\n    const leftSide = addN({inputs: tensors.slice(0, midIndex), backend});\n    const rightSide = addN({inputs: tensors.slice(midIndex), backend});\n    return addN({inputs: [leftSide, rightSide], backend});\n  }\n\n  const dtype =\n      tensors.map(t => t.dtype).reduce((d1, d2) => upcastType(d1, d2));\n  const shapes = tensors.map(t => t.shape);\n  // We can make sure shapes are identical in op level.\n  const usePackedOp = env().getBool('WEBGL_PACK');\n  const program = usePackedOp ?\n      new AddNPackedProgram(tensors[0].shape, shapes) :\n      new AddNProgram(tensors[0].shape, shapes);\n  return backend.runWebGLProgram(program, tensors, dtype);\n}\n\nexport const addNConfig: KernelConfig = {\n  kernelName: AddN,\n  backendName: 'webgl',\n  kernelFunc: addN as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}