{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GatherV2 } from '../kernel_names';\nimport { getUndoAxesPermutation } from '../ops/axis_util';\nimport { reshape } from '../ops/reshape';\nimport { transpose } from '../ops/transpose';\nimport { unsortedSegmentSum } from '../ops/unsorted_segment_sum';\nimport { parseAxisParam } from '../util';\nexport const gatherGradConfig = {\n  kernelName: GatherV2,\n  inputsToSave: ['x', 'indices'],\n  gradFunc: (dy, saved, attrs) => {\n    const [x, indices] = saved;\n    const {\n      axis\n    } = attrs;\n    const parsedAxis = parseAxisParam(axis, x.shape)[0];\n\n    const derX = () => {\n      const paramsShape = x.shape;\n      const indicesSize = indices.size;\n      const outerShape = paramsShape.slice(0, parsedAxis);\n      const outerDims = outerShape.length;\n      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n      const innerDims = innerShape.length;\n      const outerAxesIndices = arrayRange(0, outerDims);\n      const innerAxesIndices = arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n      const values = reshape(dy, valuesShape);\n      const reshapedIndices = reshape(indices, [indicesSize]);\n      const transposeDims = arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n      const valuesTranspose = transpose(values, transposeDims);\n      let paramsGrad = unsortedSegmentSum(valuesTranspose, reshapedIndices, x.shape[parsedAxis]);\n      const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n      paramsGrad = transpose(paramsGrad, invertTransposeDims);\n      return paramsGrad;\n    };\n\n    return {\n      x: derX,\n      indices: () => indices\n    };\n  }\n};\n\nfunction arrayRange(start, stop) {\n  const result = [];\n\n  for (let i = start; i < stop; ++i) {\n    result.push(i);\n  }\n\n  return result;\n}\n\nfunction arrayConcat(arrays) {\n  const result = [];\n\n  for (let i = 0; i < arrays.length; ++i) {\n    for (let j = 0; j < arrays[i].length; ++j) {\n      result.push(arrays[i][j]);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"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","names":["GatherV2","getUndoAxesPermutation","reshape","transpose","unsortedSegmentSum","parseAxisParam","gatherGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","x","indices","axis","parsedAxis","shape","derX","paramsShape","indicesSize","size","outerShape","slice","outerDims","length","innerShape","innerDims","outerAxesIndices","arrayRange","innerAxesIndices","valuesShape","arrayConcat","values","reshapedIndices","transposeDims","valuesTranspose","paramsGrad","invertTransposeDims","start","stop","result","i","push","arrays","j"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/GatherV2_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GatherV2, GatherV2Attrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {getUndoAxesPermutation} from '../ops/axis_util';\nimport {reshape} from '../ops/reshape';\nimport {transpose} from '../ops/transpose';\nimport {unsortedSegmentSum} from '../ops/unsorted_segment_sum';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {parseAxisParam} from '../util';\n\nexport const gatherGradConfig: GradConfig = {\n  kernelName: GatherV2,\n  inputsToSave: ['x', 'indices'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [x, indices] = saved;\n    const {axis} = attrs as {} as GatherV2Attrs;\n\n    const parsedAxis = parseAxisParam(axis, x.shape)[0];\n\n    const derX = () => {\n      const paramsShape = x.shape;\n      const indicesSize = indices.size;\n\n      const outerShape = paramsShape.slice(0, parsedAxis);\n      const outerDims = outerShape.length;\n      const innerShape = paramsShape.slice(axis, paramsShape.length).slice(1);\n      const innerDims = innerShape.length;\n\n      const outerAxesIndices = arrayRange(0, outerDims);\n      const innerAxesIndices =\n          arrayRange(outerDims + 1, outerDims + 1 + innerDims);\n\n      const valuesShape = arrayConcat([outerShape, [indicesSize], innerShape]);\n\n      const values = reshape(dy, valuesShape);\n      const reshapedIndices = reshape(indices, [indicesSize]);\n\n      const transposeDims =\n          arrayConcat([[outerDims], outerAxesIndices, innerAxesIndices]);\n      const valuesTranspose = transpose(values, transposeDims);\n      let paramsGrad = unsortedSegmentSum(\n          valuesTranspose, reshapedIndices as Tensor1D, x.shape[parsedAxis]);\n\n      const invertTransposeDims = getUndoAxesPermutation(transposeDims);\n      paramsGrad = transpose(paramsGrad, invertTransposeDims);\n\n      return paramsGrad;\n    };\n    return {x: derX, indices: () => indices};\n  }\n};\n\nfunction arrayRange(start: number, stop: number): number[] {\n  const result = [];\n  for (let i = start; i < stop; ++i) {\n    result.push(i);\n  }\n  return result;\n}\n\nfunction arrayConcat(arrays: number[][]): number[] {\n  const result = [];\n  for (let i = 0; i < arrays.length; ++i) {\n    for (let j = 0; j < arrays[i].length; ++j) {\n      result.push(arrays[i][j]);\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}