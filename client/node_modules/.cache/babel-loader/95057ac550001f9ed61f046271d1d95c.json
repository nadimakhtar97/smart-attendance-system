{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);\n  backend.incRef(x.dataId);\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAlC,EAAoFC,IAApF,QAA+F,uBAA/F;AAIA,OAAM,SAAUC,OAAV,CACFC,IADE,EAEuE;AAE3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI;AAAD,MAAUF,KAAhB;AAEA,QAAMG,KAAK,GAAGR,IAAI,CAACS,aAAL,CAAmBH,CAAC,CAACC,KAArB,CAAd;AACA,QAAMG,MAAM,GAAGV,IAAI,CAACW,sBAAL,CAA4BJ,KAA5B,EAAmCC,KAAnC,CAAf;AACA,QAAMI,MAAM,GAAGZ,IAAI,CAACS,aAAL,CAAmBC,MAAnB,CAAf;AAEAV,MAAI,CAACa,MAAL,CACIL,KAAK,KAAKI,MADd,EAEI,MAAM,kBAAkBF,MAAM,SAASE,MAAM,wBAAvC,GACF,UAAUN,CAAC,CAACC,KAAK,SAASC,KAAK,mCAD7B,GAEF,8CAJR;AAMAJ,SAAO,CAACU,MAAR,CAAeR,CAAC,CAACS,MAAjB;AAEA,QAAMC,KAAK,GAAGZ,OAAO,CAACa,IAAR,CAAaC,GAAb,CAAiBZ,CAAC,CAACS,MAAnB,CAAd;;AAEA,MAAIC,KAAK,CAACG,kBAAN,IAA4B,IAAhC,EAAsC;AACpC,UAAMC,IAAI,GAAGJ,KAAK,CAACG,kBAAN,CAAyBC,IAAtC;AACA,UAAMC,IAAI,GAAGL,KAAK,CAACG,kBAAN,CAAyBE,IAAtC;AAEAD,QAAI,CAACb,KAAL,GAAaG,MAAb;AACAW,QAAI,CAACd,KAAL,GAAaG,MAAb;AACD;;AAED,SAAO;AAACK,UAAM,EAAET,CAAC,CAACS,MAAX;AAAmBR,SAAK,EAAEG,MAA1B;AAAkCY,SAAK,EAAEhB,CAAC,CAACgB;AAA3C,GAAP;AACD;AAED,OAAO,MAAMC,aAAa,GAAiB;AACzCC,YAAU,EAAEzB,OAD6B;AAEzC0B,aAAW,EAAE,KAF4B;AAGzCC,YAAU,EAAEzB;AAH6B,CAApC","names":["Reshape","util","reshape","args","inputs","backend","attrs","x","shape","xSize","sizeFromShape","$shape","inferFromImplicitShape","$xSize","assert","incRef","dataId","xData","data","get","complexTensorInfos","real","imag","dtype","reshapeConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Reshape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function reshape(\n    args:\n        {inputs: ReshapeInputs, backend: MathBackendCPU, attrs: ReshapeAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  backend.incRef(x.dataId);\n\n  const xData = backend.data.get(x.dataId);\n\n  if (xData.complexTensorInfos != null) {\n    const real = xData.complexTensorInfos.real;\n    const imag = xData.complexTensorInfos.imag;\n\n    real.shape = $shape;\n    imag.shape = $shape;\n  }\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'cpu',\n  kernelFunc: reshape as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}