{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as seedrandom from 'seedrandom';\nimport { expectNumbersClose, testEpsilon } from '../test_util'; // https://en.wikipedia.org/wiki/Marsaglia_polar_method\n\nexport class MPRandGauss {\n  constructor(mean, stdDeviation, dtype, truncated, seed) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n  /** Returns next sample from a Gaussian distribution. */\n\n\n  nextValue() {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX, resultY;\n    let isValid = false;\n\n    while (!isValid) {\n      let v1, v2, s;\n\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n\n    return this.convertValue(resultX);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n\n\n  convertValue(value) {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n  /** Returns true if less than 2-standard-deviations from the mean. */\n\n\n  isValidTruncated(value) {\n    return value <= this.upper && value >= this.lower;\n  }\n\n} // Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\n\nexport class RandGamma {\n  constructor(alpha, beta, dtype, seed) {\n    this.alpha = alpha;\n    this.beta = 1 / beta; // convert rate to scale parameter\n\n    this.dtype = dtype;\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + 2 / 3;\n    } else {\n      this.d = alpha - 1 / 3;\n    }\n\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n  /** Returns next sample from a gamma distribution. */\n\n\n  nextValue() {\n    let x2, v0, v1, x, u, v;\n\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + this.c * x;\n      } while (v <= 0);\n\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - 0.331 * x2 * x2;\n      v1 = 0.5 * x2 + this.d * (1 - v + Math.log(v));\n      u = this.randu();\n\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n\n    v = 1 / this.beta * this.d * v;\n\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n\n\n  convertValue(value) {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n\n}\nexport class UniformRandom {\n  constructor() {\n    let min = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n    let max = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n    let dtype = arguments.length > 2 ? arguments[2] : undefined;\n    let seed = arguments.length > 3 ? arguments[3] : undefined;\n\n    /** Handles proper rounding for non floating point numbers. */\n    this.canReturnFloat = () => this.dtype == null || this.dtype === 'float32';\n\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n\n    if (seed == null) {\n      seed = Math.random();\n    }\n\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(`The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n\n    this.random = seedrandom.alea(seed);\n  }\n\n  convertValue(value) {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n\n}\nexport function jarqueBeraNormalityTest(values) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2)); // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n\n  const CHI_SQUARE_2DEG = 5.991;\n\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\nexport function expectArrayInMeanStdRange(actual, expectedMean, expectedStdDev, epsilon) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values) {\n  let sum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n\n  return sum / values.length;\n}\n\nfunction standardDeviation(values, mean) {\n  let squareDiffSum = 0;\n\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n\n  return 1 / n * sum4 / Math.pow(1 / n * sum2, 2);\n}\n\nfunction skewness(values) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n\n  return 1 / n * sum3 / Math.pow(1 / (n - 1) * sum2, 3 / 2);\n}","map":{"version":3,"mappings":"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","names":["seedrandom","expectNumbersClose","testEpsilon","MPRandGauss","constructor","mean","stdDeviation","dtype","truncated","seed","stdDev","nextVal","NaN","upper","lower","seedValue","Math","random","alea","toString","nextValue","isNaN","value","resultX","resultY","isValid","v1","v2","s","mul","sqrt","log","isValidTruncated","convertValue","round","RandGamma","alpha","beta","randu","randn","d","c","x2","v0","x","u","v","pow","UniformRandom","min","max","range","canReturnFloat","Error","jarqueBeraNormalityTest","values","n","length","skewness","k","kurtosis","jb","CHI_SQUARE_2DEG","expectArrayInMeanStdRange","actual","expectedMean","expectedStdDev","epsilon","actualMean","standardDeviation","sum","i","squareDiffSum","diff","valuesMean","sum2","sum4","sum3"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/rand_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as seedrandom from 'seedrandom';\n\nimport {expectNumbersClose, testEpsilon} from '../test_util';\nimport {TypedArray} from '../types';\n\nexport interface RandomBase {\n  nextValue(): number;\n}\n\nexport interface RandomGamma {\n  nextValue(): number;\n}\n\nexport interface RandNormalDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\nexport interface RandGammaDataTypes {\n  float32: Float32Array;\n  int32: Int32Array;\n}\n\n// https://en.wikipedia.org/wiki/Marsaglia_polar_method\nexport class MPRandGauss implements RandomBase {\n  private mean: number;\n  private stdDev: number;\n  private nextVal: number;\n  private dtype?: keyof RandNormalDataTypes;\n  private truncated?: boolean;\n  private upper?: number;\n  private lower?: number;\n  private random: seedrandom.prng;\n\n  constructor(\n      mean: number, stdDeviation: number, dtype?: keyof RandNormalDataTypes,\n      truncated?: boolean, seed?: number) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n    const seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n\n  /** Returns next sample from a Gaussian distribution. */\n  public nextValue(): number {\n    if (!isNaN(this.nextVal)) {\n      const value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    let resultX: number, resultY: number;\n    let isValid = false;\n    while (!isValid) {\n      let v1: number, v2: number, s: number;\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      const mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n    return this.convertValue(resultX);\n  }\n\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  /** Returns true if less than 2-standard-deviations from the mean. */\n  private isValidTruncated(value: number): boolean {\n    return value <= this.upper && value >= this.lower;\n  }\n}\n\n// Marsaglia, George, and Wai Wan Tsang. 2000. \"A Simple Method for Generating\n// Gamma Variables.\"\nexport class RandGamma implements RandomGamma {\n  private alpha: number;\n  private beta: number;\n  private d: number;\n  private c: number;\n  private dtype?: keyof RandGammaDataTypes;\n  private randu: seedrandom.prng;\n  private randn: MPRandGauss;\n\n  constructor(\n      alpha: number, beta: number, dtype: keyof RandGammaDataTypes,\n      seed?: number) {\n    this.alpha = alpha;\n    this.beta = 1 / beta;  // convert rate to scale parameter\n    this.dtype = dtype;\n\n    const seedValue = seed ? seed : Math.random();\n    this.randu = seedrandom.alea(seedValue.toString());\n    this.randn = new MPRandGauss(0, 1, dtype, false, this.randu());\n\n    if (alpha < 1) {\n      this.d = alpha + (2 / 3);\n    } else {\n      this.d = alpha - (1 / 3);\n    }\n    this.c = 1 / Math.sqrt(9 * this.d);\n  }\n\n  /** Returns next sample from a gamma distribution. */\n  public nextValue(): number {\n    let x2: number, v0: number, v1: number, x: number, u: number, v: number;\n    while (true) {\n      do {\n        x = this.randn.nextValue();\n        v = 1 + (this.c * x);\n      } while (v <= 0);\n      v *= v * v;\n      x2 = x * x;\n      v0 = 1 - (0.331 * x2 * x2);\n      v1 = (0.5 * x2) + (this.d * (1 - v + Math.log(v)));\n      u = this.randu();\n      if (u < v0 || Math.log(u) < v1) {\n        break;\n      }\n    }\n    v = (1 / this.beta) * this.d * v;\n    if (this.alpha < 1) {\n      v *= Math.pow(this.randu(), 1 / this.alpha);\n    }\n    return this.convertValue(v);\n  }\n  /** Handles proper rounding for non-floating-point numbers. */\n  private convertValue(value: number): number {\n    if (this.dtype === 'float32') {\n      return value;\n    }\n    return Math.round(value);\n  }\n}\n\nexport class UniformRandom implements RandomBase {\n  private min: number;\n  private range: number;\n  private random: seedrandom.prng;\n  private dtype?: keyof RandNormalDataTypes;\n\n  constructor(\n      min = 0, max = 1, dtype?: keyof RandNormalDataTypes,\n      seed?: string|number) {\n    this.min = min;\n    this.range = max - min;\n    this.dtype = dtype;\n    if (seed == null) {\n      seed = Math.random();\n    }\n    if (typeof seed === 'number') {\n      seed = seed.toString();\n    }\n\n    if (!this.canReturnFloat() && this.range <= 1) {\n      throw new Error(\n          `The difference between ${min} - ${max} <= 1 and dtype is not float`);\n    }\n    this.random = seedrandom.alea(seed);\n  }\n\n  /** Handles proper rounding for non floating point numbers. */\n  private canReturnFloat = () =>\n      (this.dtype == null || this.dtype === 'float32');\n\n  private convertValue(value: number): number {\n    if (this.canReturnFloat()) {\n      return value;\n    }\n    return Math.round(value);\n  }\n\n  nextValue() {\n    return this.convertValue(this.min + this.range * this.random());\n  }\n}\n\nexport function jarqueBeraNormalityTest(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Jarque%E2%80%93Bera_test\n  const n = values.length;\n  const s = skewness(values);\n  const k = kurtosis(values);\n  const jb = n / 6 * (Math.pow(s, 2) + 0.25 * Math.pow(k - 3, 2));\n  // JB test requires 2-degress of freedom from Chi-Square @ 0.95:\n  // http://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm\n  const CHI_SQUARE_2DEG = 5.991;\n  if (jb > CHI_SQUARE_2DEG) {\n    throw new Error(`Invalid p-value for JB: ${jb}`);\n  }\n}\n\nexport function expectArrayInMeanStdRange(\n    actual: TypedArray|number[], expectedMean: number, expectedStdDev: number,\n    epsilon?: number) {\n  if (epsilon == null) {\n    epsilon = testEpsilon();\n  }\n  const actualMean = mean(actual);\n  expectNumbersClose(actualMean, expectedMean, epsilon);\n  expectNumbersClose(\n      standardDeviation(actual, actualMean), expectedStdDev, epsilon);\n}\n\nfunction mean(values: TypedArray|number[]) {\n  let sum = 0;\n  for (let i = 0; i < values.length; i++) {\n    sum += values[i];\n  }\n  return sum / values.length;\n}\n\nfunction standardDeviation(values: TypedArray|number[], mean: number) {\n  let squareDiffSum = 0;\n  for (let i = 0; i < values.length; i++) {\n    const diff = values[i] - mean;\n    squareDiffSum += diff * diff;\n  }\n  return Math.sqrt(squareDiffSum / values.length);\n}\n\nfunction kurtosis(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Kurtosis\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum4 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum4 += Math.pow(v, 4);\n  }\n  return (1 / n) * sum4 / Math.pow((1 / n) * sum2, 2);\n}\n\nfunction skewness(values: TypedArray|number[]) {\n  // https://en.wikipedia.org/wiki/Skewness\n  const valuesMean = mean(values);\n  const n = values.length;\n  let sum2 = 0;\n  let sum3 = 0;\n  for (let i = 0; i < n; i++) {\n    const v = values[i] - valuesMean;\n    sum2 += Math.pow(v, 2);\n    sum3 += Math.pow(v, 3);\n  }\n  return (1 / n) * sum3 / Math.pow((1 / (n - 1)) * sum2, 3 / 2);\n}\n"]},"metadata":{},"sourceType":"module"}