{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { FFTProgram } from '../fft_gpu';\nimport { complex } from './Complex';\nimport { reshape } from './Reshape';\nexport function fftImpl(x, inverse, backend) {\n  const xData = backend.texData.get(x.dataId);\n  const inputSize = util.sizeFromShape(x.shape); // Collapse all outer dimensions to a single batch dimension.\n\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n  const input2D = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [batch, innerDimensionSize]\n    }\n  });\n  const xShape = input2D.shape;\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n  const inputs = [{\n    dataId: xData.complexTensorInfos.real.dataId,\n    dtype: xData.complexTensorInfos.real.dtype,\n    shape: xShape\n  }, {\n    dataId: xData.complexTensorInfos.imag.dataId,\n    dtype: xData.complexTensorInfos.imag.dtype,\n    shape: xShape\n  }];\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n  const complexOutput = complex({\n    inputs: {\n      real: realPart,\n      imag: imagPart\n    },\n    backend\n  });\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n  const complexOutputReshaped = reshape({\n    inputs: {\n      x: complexOutput\n    },\n    backend,\n    attrs: {\n      shape: x.shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAoBA,IAApB,QAA+B,uBAA/B;AAGA,SAAQC,UAAR,QAAyB,YAAzB;AAEA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAUC,OAAV,CACFC,CADE,EACaC,OADb,EAC+BC,OAD/B,EACwD;AAC5D,QAAMC,KAAK,GAAGD,OAAO,CAACE,OAAR,CAAgBC,GAAhB,CAAoBL,CAAC,CAACM,MAAtB,CAAd;AAEA,QAAMC,SAAS,GAAGZ,IAAI,CAACa,aAAL,CAAmBR,CAAC,CAACS,KAArB,CAAlB,CAH4D,CAI5D;;AACA,QAAMC,kBAAkB,GAAGV,CAAC,CAACS,KAAF,CAAQT,CAAC,CAACS,KAAF,CAAQE,MAAR,GAAiB,CAAzB,CAA3B;AACA,QAAMC,KAAK,GAAGL,SAAS,GAAGG,kBAA1B;AAEA,QAAMG,OAAO,GAAGf,OAAO,CACnB;AAACgB,UAAM,EAAE;AAACd;AAAD,KAAT;AAAcE,WAAd;AAAuBa,SAAK,EAAE;AAACN,WAAK,EAAE,CAACG,KAAD,EAAQF,kBAAR;AAAR;AAA9B,GADmB,CAAvB;AAGA,QAAMM,MAAM,GAAGH,OAAO,CAACJ,KAAvB;AACA,QAAMQ,WAAW,GAAG,IAAIrB,UAAJ,CAAe,MAAf,EAAuBoB,MAAvB,EAA+Bf,OAA/B,CAApB;AACA,QAAMiB,WAAW,GAAG,IAAItB,UAAJ,CAAe,MAAf,EAAuBoB,MAAvB,EAA+Bf,OAA/B,CAApB;AAEA,QAAMa,MAAM,GAAG,CACb;AACER,UAAM,EAAEH,KAAK,CAACgB,kBAAN,CAAyBC,IAAzB,CAA8Bd,MADxC;AAEEe,SAAK,EAAElB,KAAK,CAACgB,kBAAN,CAAyBC,IAAzB,CAA8BC,KAFvC;AAGEZ,SAAK,EAAEO;AAHT,GADa,EAMb;AACEV,UAAM,EAAEH,KAAK,CAACgB,kBAAN,CAAyBG,IAAzB,CAA8BhB,MADxC;AAEEe,SAAK,EAAElB,KAAK,CAACgB,kBAAN,CAAyBG,IAAzB,CAA8BD,KAFvC;AAGEZ,SAAK,EAAEO;AAHT,GANa,CAAf;AAaA,QAAMO,QAAQ,GAAGrB,OAAO,CAACsB,eAAR,CAAwBP,WAAxB,EAAqCH,MAArC,EAA6C,SAA7C,CAAjB;AACA,QAAMW,QAAQ,GAAGvB,OAAO,CAACsB,eAAR,CAAwBN,WAAxB,EAAqCJ,MAArC,EAA6C,SAA7C,CAAjB;AAEA,QAAMY,aAAa,GACf7B,OAAO,CAAC;AAACiB,UAAM,EAAE;AAACM,UAAI,EAAEG,QAAP;AAAiBD,UAAI,EAAEG;AAAvB,KAAT;AAA2CvB;AAA3C,GAAD,CADX;AAGAA,SAAO,CAACyB,6BAAR,CAAsCJ,QAAtC;AACArB,SAAO,CAACyB,6BAAR,CAAsCF,QAAtC;AAEA,QAAMG,qBAAqB,GACvB9B,OAAO,CAAC;AAACgB,UAAM,EAAE;AAACd,OAAC,EAAE0B;AAAJ,KAAT;AAA6BxB,WAA7B;AAAsCa,SAAK,EAAE;AAACN,WAAK,EAAET,CAAC,CAACS;AAAV;AAA7C,GAAD,CADX;AAGAP,SAAO,CAACyB,6BAAR,CAAsCd,OAAtC;AACAX,SAAO,CAACyB,6BAAR,CAAsCD,aAAtC;AACA,SAAOE,qBAAP;AACD","names":["util","FFTProgram","complex","reshape","fftImpl","x","inverse","backend","xData","texData","get","dataId","inputSize","sizeFromShape","shape","innerDimensionSize","length","batch","input2D","inputs","attrs","xShape","realProgram","imagProgram","complexTensorInfos","real","dtype","imag","realPart","runWebGLProgram","imagPart","complexOutput","disposeIntermediateTensorInfo","complexOutputReshaped"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/FFT_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {FFTProgram} from '../fft_gpu';\n\nimport {complex} from './Complex';\nimport {reshape} from './Reshape';\n\nexport function fftImpl(\n    x: TensorInfo, inverse: boolean, backend: MathBackendWebGL): TensorInfo {\n  const xData = backend.texData.get(x.dataId);\n\n  const inputSize = util.sizeFromShape(x.shape);\n  // Collapse all outer dimensions to a single batch dimension.\n  const innerDimensionSize = x.shape[x.shape.length - 1];\n  const batch = inputSize / innerDimensionSize;\n\n  const input2D = reshape(\n      {inputs: {x}, backend, attrs: {shape: [batch, innerDimensionSize]}});\n\n  const xShape = input2D.shape as [number, number];\n  const realProgram = new FFTProgram('real', xShape, inverse);\n  const imagProgram = new FFTProgram('imag', xShape, inverse);\n\n  const inputs = [\n    {\n      dataId: xData.complexTensorInfos.real.dataId,\n      dtype: xData.complexTensorInfos.real.dtype,\n      shape: xShape\n    },\n    {\n      dataId: xData.complexTensorInfos.imag.dataId,\n      dtype: xData.complexTensorInfos.imag.dtype,\n      shape: xShape\n    }\n  ];\n\n  const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n  const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n  const complexOutput =\n      complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n  backend.disposeIntermediateTensorInfo(realPart);\n  backend.disposeIntermediateTensorInfo(imagPart);\n\n  const complexOutputReshaped =\n      reshape({inputs: {x: complexOutput}, backend, attrs: {shape: x.shape}});\n\n  backend.disposeIntermediateTensorInfo(input2D);\n  backend.disposeIntermediateTensorInfo(complexOutput);\n  return complexOutputReshaped;\n}\n"]},"metadata":{},"sourceType":"module"}