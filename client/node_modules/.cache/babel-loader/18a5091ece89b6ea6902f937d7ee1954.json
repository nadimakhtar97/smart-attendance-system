{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getActivation, serializeActivation } from '../activations';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkInterpolationFormat, checkPaddingMode } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength, deconvLength, normalizeArray } from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv2DInput(x, dataFormat) {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]); // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\n\nexport function preprocessConv3DInput(x, dataFormat) {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]); // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1dWithBias(x, kernel, bias) {\n  let strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;\n  let padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  let dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  let dilationRate = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 1;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat); // Check the ranks of x, kernel and bias.\n\n    if (x.shape.length !== 3) {\n      throw new ValueError(`The input of a conv1dWithBias operation should be 3, but is ` + `${x.shape.length} instead.`);\n    }\n\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(`The kernel for a conv1dWithBias operation should be 3, but is ` + `${kernel.shape.length} instead`);\n    }\n\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(`The bias for a conv1dWithBias operation should be 1, but is ` + `${kernel.shape.length} instead`);\n    } // TODO(cais): Support CAUSAL padding mode.\n\n\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]); // NCW -> NWC.\n    }\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    let y = tfc.conv1d(x, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    return y;\n  });\n}\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\n\nexport function conv1d(x, kernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\n\nexport function conv2d(x, kernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1];\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\n\nexport function conv2dWithBiasActivation(x, kernel, bias) {\n  let strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1];\n  let padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  let dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  let dilationRate = arguments.length > 6 ? arguments[6] : undefined;\n  let activation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : null;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects input to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(`conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` + `but received ${x.rank}.`);\n    }\n\n    let y = preprocessConv2DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv1dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.fused.conv2d({\n      x: y,\n      filter: kernel,\n      strides: strides,\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\n\nexport function conv3d(x, kernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1, 1];\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\n\nexport function conv3dWithBias(x, kernel, bias) {\n  let strides = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [1, 1, 1];\n  let padding = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'valid';\n  let dataFormat = arguments.length > 5 ? arguments[5] : undefined;\n  let dilationRate = arguments.length > 6 ? arguments[6] : undefined;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects input to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(`conv3dWithBias expects kernel to be of rank 4 or 5, but received ` + `${x.rank}.`);\n    }\n\n    let y = preprocessConv3DInput(x, dataFormat);\n\n    if (padding === 'causal') {\n      throw new NotImplementedError('The support for CAUSAL padding mode in conv3dWithBias is not ' + 'implemented yet.');\n    }\n\n    y = tfc.conv3d(y, kernel, strides, padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n\n    return y;\n  });\n}\n/**\n * Abstract convolution layer.\n */\n\nexport class BaseConv extends Layer {\n  constructor(rank, args) {\n    super(args);\n    this.bias = null;\n    this.DEFAULT_KERNEL_INITIALIZER = 'glorotNormal';\n    this.DEFAULT_BIAS_INITIALIZER = 'zeros';\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(`Convolution layer for rank other than 1, 2, or 3 (${this.rank}) is ` + `not implemented yet.`);\n    }\n\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer = getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(args.dilationRate == null ? 1 : args.dilationRate, rank, 'dilationRate');\n\n    if (this.rank === 1 && Array.isArray(this.dilationRate) && this.dilationRate.length !== 1) {\n      throw new ValueError(`dilationRate must be a number or an array of a single number ` + `for 1D convolution, but received ` + `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(`dilationRate must be a number or array of two numbers for 2D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(`dilationRate must be a number or array of three numbers for 3D ` + `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  static verifyArgs(args) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert('kernelSize' in args, `required key 'kernelSize' not in config`);\n\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(`BaseConv expects config.kernelSize to be number or number[] with ` + `length 1, 2, or 3, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  getConfig() {\n    const config = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\n\nexport class Conv extends BaseConv {\n  constructor(rank, args) {\n    super(rank, args);\n    this.kernel = null;\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(`The channel dimension of the input should be defined. ` + `Found ${inputShape[channelAxis]}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n    this.kernel = this.addWeight('kernel', kernelShape, null, this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    }];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate, fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(inputs, this.kernel.read(), biasValue, this.strides[0], this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(inputs, this.kernel.read(), biasValue, this.strides, this.padding, this.dataFormat, this.dilationRate);\n        } else {\n          throw new NotImplementedError('convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace = [];\n    const space = this.dataFormat === 'channelsLast' ? inputShape.slice(1, inputShape.length - 1) : inputShape.slice(2);\n\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(space[i], this.kernelSize[i], this.padding, this.strides[i], typeof this.dilationRate === 'number' ? this.dilationRate : this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' || args.filters < 1) {\n      throw new ValueError(`Convolution layer expected config.filters to be a 'number' > 0 ` + `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n\n}\nexport class Conv2D extends Conv {\n  constructor(args) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(`Conv2D expects config.kernelSize to be number or number[] with ` + `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv2D.className = 'Conv2D';\nserialization.registerClass(Conv2D);\nexport class Conv3D extends Conv {\n  constructor(args) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) && (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(`Conv3D expects config.kernelSize to be number or` + ` [number, number, number], but received ${JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv3D.className = 'Conv3D';\nserialization.registerClass(Conv3D);\nexport class Conv2DTranspose extends Conv2D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 4\n    })];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv2DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError('Input should have rank 4; Received input shape: ' + JSON.stringify(inputShape));\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } // Set input spec.\n\n\n    this.inputSpec = [new InputSpec({\n      ndim: 4,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.shape.length !== 4) {\n        throw new ValueError(`Conv2DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1]; // Infer the dynamic output shape.\n\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding); // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n\n      const outputShape = [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n\n      let outputs = tfc.conv2dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let heightAxis;\n    let widthAxis;\n\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nConv2DTranspose.className = 'Conv2DTranspose';\nserialization.registerClass(Conv2DTranspose);\nexport class Conv3DTranspose extends Conv3D {\n  constructor(args) {\n    super(args);\n    this.inputSpec = [new InputSpec({\n      ndim: 5\n    })];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(`Conv3DTranspose currently supports only padding modes 'same' ` + `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 5) {\n      throw new ValueError('Input should have rank 5; Received input shape: ' + JSON.stringify(inputShape));\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError('The channel dimension of the inputs should be defined. ' + 'Found `None`.');\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n    this.kernel = this.addWeight('kernel', kernelShape, 'float32', this.kernelInitializer, this.kernelRegularizer, true, this.kernelConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } // Set input spec.\n\n\n    this.inputSpec = [new InputSpec({\n      ndim: 5,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n\n      if (input.shape.length !== 5) {\n        throw new ValueError(`Conv3DTranspose.call() expects input tensor to be rank-4, but ` + `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n      let hAxis;\n      let wAxis;\n      let dAxis;\n\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2]; // Infer the dynamic output shape.\n\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding); // Same as `conv2dTranspose`. We always assumes channelsLast.\n\n      const outputShape = [batchSize, outDepth, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n\n      let outputs = tfc.conv3dTranspose(input, this.kernel.read(), outputShape, this.strides, this.padding);\n\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n\n      if (this.bias !== null) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n    let channelAxis;\n    let depthAxis;\n    let heightAxis;\n    let widthAxis;\n\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] = deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] = deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] = deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nConv3DTranspose.className = 'Conv3DTranspose';\nserialization.registerClass(Conv3DTranspose);\nexport class SeparableConv extends Conv {\n  constructor(rank, config) {\n    super(rank, config);\n    this.DEFAULT_DEPTHWISE_INITIALIZER = 'glorotUniform';\n    this.DEFAULT_POINTWISE_INITIALIZER = 'glorotUniform';\n    this.depthwiseKernel = null;\n    this.pointwiseKernel = null;\n\n    if (config.filters == null) {\n      throw new ValueError('The `filters` configuration field is required by SeparableConv, ' + 'but is unspecified.');\n    }\n\n    if (config.kernelInitializer != null || config.kernelRegularizer != null || config.kernelConstraint != null) {\n      throw new ValueError('Fields kernelInitializer, kernelRegularizer and kernelConstraint ' + 'are invalid for SeparableConv2D. Use depthwiseInitializer, ' + 'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' + 'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n\n    if (config.padding != null && config.padding !== 'same' && config.padding !== 'valid') {\n      throw new ValueError(`SeparableConv${this.rank}D supports only padding modes: ` + `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(`Inputs to SeparableConv${this.rank}D should have rank ` + `${this.rank + 2}, but received input shape: ` + `${JSON.stringify(inputShape)}`);\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(`The channel dimension of the inputs should be defined, ` + `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, 'float32', this.depthwiseInitializer, this.depthwiseRegularizer, trainable, this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight('pointwise_kernel', pointwiseKernelShape, 'float32', this.pointwiseInitializer, this.pointwiseRegularizer, trainable, this.pointwiseConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [this.filters], 'float32', this.biasInitializer, this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec = [new InputSpec({\n      ndim: this.rank + 2,\n      axes: {\n        [channelAxis]: inputDim\n      }\n    })];\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let output;\n\n      if (this.rank === 1) {\n        throw new NotImplementedError('1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]); // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(inputs, this.depthwiseKernel.read(), this.pointwiseKernel.read(), this.strides, this.padding, this.dilationRate, 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]); // NHWC -> NCHW.\n      }\n\n      return output;\n    });\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] = serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] = serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] = serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nSeparableConv.className = 'SeparableConv';\nexport class SeparableConv2D extends SeparableConv {\n  constructor(args) {\n    super(2, args);\n  }\n\n}\n/** @nocollapse */\n\nSeparableConv2D.className = 'SeparableConv2D';\nserialization.registerClass(SeparableConv2D);\nexport class Conv1D extends Conv {\n  constructor(args) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{\n      ndim: 3\n    }];\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  static verifyArgs(args) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' && !generic_utils.checkArrayTypeAndLength(args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(`Conv1D expects config.kernelSize to be number or number[] with ` + `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n}\n/** @nocollapse */\n\nConv1D.className = 'Conv1D';\nserialization.registerClass(Conv1D);\nexport class Cropping2D extends Layer {\n  constructor(args) {\n    super(args);\n\n    if (typeof args.cropping === 'number') {\n      this.cropping = [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [[args.cropping[0], args.cropping[0]], [args.cropping[1], args.cropping[1]]];\n    } else {\n      this.cropping = args.cropping;\n    }\n\n    this.dataFormat = args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{\n      ndim: 4\n    }];\n  }\n\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], inputShape[2] - this.cropping[0][0] - this.cropping[0][1], inputShape[3] - this.cropping[1][0] - this.cropping[1][1]];\n    } else {\n      return [inputShape[0], inputShape[1] - this.cropping[0][0] - this.cropping[0][1], inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(inputs, this.cropping[0][0], inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(hSliced, this.cropping[1][0], inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig() {\n    const config = {\n      cropping: this.cropping,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nCropping2D.className = 'Cropping2D';\nserialization.registerClass(Cropping2D);\nexport class UpSampling2D extends Layer {\n  constructor(args) {\n    super(args);\n    this.DEFAULT_SIZE = [2, 2];\n    this.inputSpec = [{\n      ndim: 4\n    }];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat = args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation = args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  computeOutputShape(inputShape) {\n    if (this.dataFormat === 'channelsFirst') {\n      const height = inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height = inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs, kwargs) {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n        const resized = this.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ? tfc.image.resizeNearestNeighbor(input, [height, width]) : tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n\n  getConfig() {\n    const config = {\n      size: this.size,\n      dataFormat: this.dataFormat\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nUpSampling2D.className = 'UpSampling2D';\nserialization.registerClass(UpSampling2D);","map":{"version":3,"mappings":"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","names":["tfc","serialization","tidy","getActivation","serializeActivation","imageDataFormat","K","checkDataFormat","checkInterpolationFormat","checkPaddingMode","getConstraint","serializeConstraint","InputSpec","Layer","NotImplementedError","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","convOutputLength","deconvLength","normalizeArray","generic_utils","getExactlyOneShape","getExactlyOneTensor","preprocessConv2DInput","x","dataFormat","transpose","preprocessConv3DInput","conv1dWithBias","kernel","bias","strides","padding","dilationRate","shape","length","y","conv1d","biasAdd","conv2d","conv2dWithBiasActivation","activation","rank","fused","filter","pad","dilations","conv3d","conv3dWithBias","BaseConv","constructor","args","verifyArgs","assertPositiveInteger","kernelSize","useBias","biasInitializer","DEFAULT_BIAS_INITIALIZER","biasConstraint","biasRegularizer","activityRegularizer","Array","isArray","JSON","stringify","assert","checkArrayTypeAndLength","getConfig","config","baseConfig","Object","assign","Conv","filters","kernelInitializer","DEFAULT_KERNEL_INITIALIZER","kernelConstraint","kernelRegularizer","build","inputShape","channelAxis","inputDim","kernelShape","concat","addWeight","inputSpec","ndim","axes","built","call","inputs","kwargs","outputs","biasValue","read","fusedActivationName","mapActivationToFusedKernel","getClassName","apply","computeOutputShape","newSpace","space","slice","i","newDim","push","outputShape","Conv2D","registerClass","Conv3D","Conv2DTranspose","input","batchSize","hAxis","wAxis","height","width","kernelH","kernelW","strideH","strideW","outHeight","outWidth","conv2dTranspose","heightAxis","widthAxis","Conv3DTranspose","dAxis","depth","kernelD","strideD","outDepth","conv3dTranspose","depthAxis","SeparableConv","depthMultiplier","depthwiseInitializer","DEFAULT_DEPTHWISE_INITIALIZER","depthwiseRegularizer","depthwiseConstraint","pointwiseInitializer","DEFAULT_POINTWISE_INITIALIZER","pointwiseRegularizer","pointwiseConstraint","depthwiseKernelShape","pointwiseKernelShape","trainable","depthwiseKernel","pointwiseKernel","output","separableConv2d","SeparableConv2D","Conv1D","Cropping2D","cropping","undefined","hSliced","sliceAlongAxis","UpSampling2D","size","DEFAULT_SIZE","interpolation","resized","image","resizeNearestNeighbor","resizeBilinear"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/layers/convolutional.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {fused, serialization, Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D, Tensor5D, tidy} from '@tensorflow/tfjs-core';\n\nimport {Activation, getActivation, serializeActivation} from '../activations';\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat, checkInterpolationFormat, checkPaddingMode} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {InputSpec, Layer, LayerArgs} from '../engine/topology';\nimport {NotImplementedError, ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {ActivationIdentifier} from '../keras_format/activation_config';\nimport {DataFormat, InterpolationFormat, PaddingMode, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength, deconvLength, normalizeArray} from '../utils/conv_utils';\nimport * as generic_utils from '../utils/generic_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\n/**\n * Transpose and cast the input before the conv2d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv2DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  // TODO(cais): Cast type to float32 if not.\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 1]);  // NCHW -> NHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * Transpose and cast the input before the conv3d.\n * @param x Input image tensor.\n * @param dataFormat\n */\nexport function preprocessConv3DInput(\n    x: Tensor, dataFormat: DataFormat): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    if (dataFormat === 'channelsFirst') {\n      return tfc.transpose(x, [0, 2, 3, 4, 1]);  // NCDHW -> NDHWC.\n    } else {\n      return x;\n    }\n  });\n}\n\n/**\n * 1D-convolution with bias added.\n *\n * Porting Note: This function does not exist in the Python Keras backend.\n *   It is exactly the same as `conv2d`, except the added `bias`.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.\n * @param bias Bias, rank-3, of shape `[outDepth]`.\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    // Check the ranks of x, kernel and bias.\n    if (x.shape.length !== 3) {\n      throw new ValueError(\n          `The input of a conv1dWithBias operation should be 3, but is ` +\n          `${x.shape.length} instead.`);\n    }\n    if (kernel.shape.length !== 3) {\n      throw new ValueError(\n          `The kernel for a conv1dWithBias operation should be 3, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    if (bias != null && bias.shape.length !== 1) {\n      throw new ValueError(\n          `The bias for a conv1dWithBias operation should be 1, but is ` +\n          `${kernel.shape.length} instead`);\n    }\n    // TODO(cais): Support CAUSAL padding mode.\n    if (dataFormat === 'channelsFirst') {\n      x = tfc.transpose(x, [0, 2, 1]);  // NCW -> NWC.\n    }\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    let y: Tensor = tfc.conv1d(\n        x as Tensor2D | Tensor3D, kernel as Tensor3D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias);\n    }\n    return y;\n  });\n}\n\n/**\n * 1D-convolution.\n *\n * @param x Input tensor, rank-3, of shape `[batchSize, width, inChannels]`.\n * @param kernel Kernel, rank-3, of shape `[filterWidth, inDepth, outDepth]`.s\n * @param strides\n * @param padding Padding mode.\n * @param dataFormat Data format.\n * @param dilationRate\n * @returns The result of the 1D convolution.\n * @throws ValueError, if `x`, `kernel` or `bias` is not of the correct rank.\n */\nexport function conv1d(\n    x: Tensor, kernel: Tensor, strides = 1, padding = 'valid',\n    dataFormat?: DataFormat, dilationRate = 1): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv1dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 2D pooling.\n */\nexport function conv2d(\n    x: Tensor, kernel: Tensor, strides = [1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv2dWithBiasActivation(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 2D Convolution with an added bias and optional activation.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv2d`, except the added `bias`.\n */\nexport function conv2dWithBiasActivation(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat, dilationRate?: [number, number],\n    activation: fused.Activation = null): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 3 && x.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects input to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    if (kernel.rank !== 3 && kernel.rank !== 4) {\n      throw new ValueError(\n          `conv2dWithBiasActivation expects kernel to be of rank 3 or 4, ` +\n          `but received ${x.rank}.`);\n    }\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv1dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.fused.conv2d({\n      x: y as Tensor3D | Tensor4D,\n      filter: kernel as Tensor4D,\n      strides: strides as [number, number],\n      pad: padding === 'same' ? 'same' : 'valid',\n      dilations: dilationRate,\n      dataFormat: 'NHWC',\n      bias,\n      activation\n    });\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\n/**\n * 3D Convolution.\n * @param x\n * @param kernel kernel of the convolution.\n * @param strides strides array.\n * @param padding padding mode. Default to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param dilationRate dilation rate array.\n * @returns Result of the 3D convolution.\n */\nexport function conv3d(\n    x: Tensor, kernel: Tensor, strides = [1, 1, 1], padding = 'valid',\n    dataFormat?: DataFormat, dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    checkDataFormat(dataFormat);\n    return conv3dWithBias(\n        x, kernel, null, strides, padding, dataFormat, dilationRate);\n  });\n}\n\n/**\n * 3D Convolution with an added bias.\n * Note: This function does not exist in the Python Keras Backend. This function\n * is exactly the same as `conv3d`, except the added `bias`.\n */\nexport function conv3dWithBias(\n    x: Tensor, kernel: Tensor, bias: Tensor, strides = [1, 1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    if (x.rank !== 4 && x.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects input to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    if (kernel.rank !== 4 && kernel.rank !== 5) {\n      throw new ValueError(\n          `conv3dWithBias expects kernel to be of rank 4 or 5, but received ` +\n          `${x.rank}.`);\n    }\n    let y = preprocessConv3DInput(x, dataFormat);\n    if (padding === 'causal') {\n      throw new NotImplementedError(\n          'The support for CAUSAL padding mode in conv3dWithBias is not ' +\n          'implemented yet.');\n    }\n    y = tfc.conv3d(\n        y as Tensor4D | tfc.Tensor<tfc.Rank.R5>,\n        kernel as tfc.Tensor<tfc.Rank.R5>, strides as [number, number, number],\n        padding === 'same' ? 'same' : 'valid', 'NDHWC', dilationRate);\n    if (bias != null) {\n      y = K.biasAdd(y, bias as Tensor1D);\n    }\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 4, 1, 2, 3]);\n    }\n    return y;\n  });\n}\n\n/**\n * Base LayerConfig for depthwise and non-depthwise convolutional layers.\n */\nexport declare interface BaseConvLayerArgs extends LayerArgs {\n  /**\n   * The dimensions of the convolution window. If kernelSize is a number, the\n   * convolutional window will be square.\n   */\n  kernelSize: number|number[];\n\n  /**\n   * The strides of the convolution in each dimension. If strides is a number,\n   * strides in both dimensions are equal.\n   *\n   * Specifying any stride value != 1 is incompatible with specifying any\n   * `dilationRate` value != 1.\n   */\n  strides?: number|number[];\n\n  /**\n   * Padding mode.\n   */\n  padding?: PaddingMode;\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   *  `channels_first` corresponds to inputs with shape `(batch, channels,\n   * ...)`.\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n\n  /**\n   * The dilation rate to use for the dilated convolution in each dimension.\n   * Should be an integer or array of two or three integers.\n   *\n   * Currently, specifying any `dilationRate` value != 1 is incompatible with\n   * specifying any `strides` value != 1.\n   */\n  dilationRate?: number|[number]|[number, number]|[number, number, number];\n\n  /**\n   * Activation function of the layer.\n   *\n   * If you don't specify the activation, none is applied.\n   */\n  activation?: ActivationIdentifier;\n\n  /**\n   * Whether the layer uses a bias vector. Defaults to `true`.\n   */\n  useBias?: boolean;\n\n  /**\n   * Initializer for the convolutional kernel weights matrix.\n   */\n  kernelInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the bias vector.\n   */\n  biasInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the convolutional kernel weights.\n   */\n  kernelConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint for the bias vector.\n   */\n  biasConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regularizer function applied to the kernel weights matrix.\n   */\n  kernelRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the bias vector.\n   */\n  biasRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the activation.\n   */\n  activityRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\n/**\n * LayerConfig for non-depthwise convolutional layers.\n * Applies to non-depthwise convolution of all ranks (e.g, Conv1D, Conv2D,\n * Conv3D).\n */\nexport declare interface ConvLayerArgs extends BaseConvLayerArgs {\n  /**\n   * The dimensionality of the output space (i.e. the number of filters in the\n   * convolution).\n   */\n  filters: number;\n}\n\n/**\n * Abstract convolution layer.\n */\nexport abstract class BaseConv extends Layer {\n  protected readonly rank: number;\n  protected readonly kernelSize: number[];\n  protected readonly strides: number[];\n  protected readonly padding: PaddingMode;\n  protected readonly dataFormat: DataFormat;\n  protected readonly activation: Activation;\n  protected readonly useBias: boolean;\n  protected readonly dilationRate: number[];\n\n  // Bias-related members are here because all convolution subclasses use the\n  // same configuration parmeters to control bias.  Kernel-related members\n  // are in subclass `Conv` because some subclasses use different parameters to\n  // control kernel properties, for instance, `DepthwiseConv2D` uses\n  // `depthwiseInitializer` instead of `kernelInitializer`.\n  protected readonly biasInitializer?: Initializer;\n  protected readonly biasConstraint?: Constraint;\n  protected readonly biasRegularizer?: Regularizer;\n\n  protected bias: LayerVariable = null;\n\n  readonly DEFAULT_KERNEL_INITIALIZER: InitializerIdentifier = 'glorotNormal';\n  readonly DEFAULT_BIAS_INITIALIZER: InitializerIdentifier = 'zeros';\n\n  constructor(rank: number, args: BaseConvLayerArgs) {\n    super(args as LayerArgs);\n    BaseConv.verifyArgs(args);\n    this.rank = rank;\n    generic_utils.assertPositiveInteger(this.rank, 'rank');\n    if (this.rank !== 1 && this.rank !== 2 && this.rank !== 3) {\n      throw new NotImplementedError(\n          `Convolution layer for rank other than 1, 2, or 3 (${\n              this.rank}) is ` +\n          `not implemented yet.`);\n    }\n    this.kernelSize = normalizeArray(args.kernelSize, rank, 'kernelSize');\n    this.strides = normalizeArray(\n        args.strides == null ? 1 : args.strides, rank, 'strides');\n    this.padding = args.padding == null ? 'valid' : args.padding;\n    checkPaddingMode(this.padding);\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.activation = getActivation(args.activation);\n    this.useBias = args.useBias == null ? true : args.useBias;\n    this.biasInitializer =\n        getInitializer(args.biasInitializer || this.DEFAULT_BIAS_INITIALIZER);\n    this.biasConstraint = getConstraint(args.biasConstraint);\n    this.biasRegularizer = getRegularizer(args.biasRegularizer);\n    this.activityRegularizer = getRegularizer(args.activityRegularizer);\n    this.dilationRate = normalizeArray(\n        args.dilationRate == null ? 1 : args.dilationRate, rank,\n        'dilationRate');\n    if (this.rank === 1 &&\n        (Array.isArray(this.dilationRate) && this.dilationRate.length !== 1)) {\n      throw new ValueError(\n          `dilationRate must be a number or an array of a single number ` +\n          `for 1D convolution, but received ` +\n          `${JSON.stringify(this.dilationRate)}`);\n    } else if (this.rank === 2) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate = [this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 2) {\n        throw new ValueError(\n            `dilationRate must be a number or array of two numbers for 2D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    } else if (this.rank === 3) {\n      if (typeof this.dilationRate === 'number') {\n        this.dilationRate =\n            [this.dilationRate, this.dilationRate, this.dilationRate];\n      } else if (this.dilationRate.length !== 3) {\n        throw new ValueError(\n            `dilationRate must be a number or array of three numbers for 3D ` +\n            `convolution, but received ${JSON.stringify(this.dilationRate)}`);\n      }\n    }\n  }\n\n  protected static verifyArgs(args: BaseConvLayerArgs) {\n    // Check config.kernelSize type and shape.\n    generic_utils.assert(\n        'kernelSize' in args, `required key 'kernelSize' not in config`);\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 3)) {\n      throw new ValueError(\n          `BaseConv expects config.kernelSize to be number or number[] with ` +\n          `length 1, 2, or 3, but received ${\n              JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config: serialization.ConfigDict = {\n      kernelSize: this.kernelSize,\n      strides: this.strides,\n      padding: this.padding,\n      dataFormat: this.dataFormat,\n      dilationRate: this.dilationRate,\n      activation: serializeActivation(this.activation),\n      useBias: this.useBias,\n      biasInitializer: serializeInitializer(this.biasInitializer),\n      biasRegularizer: serializeRegularizer(this.biasRegularizer),\n      activityRegularizer: serializeRegularizer(this.activityRegularizer),\n      biasConstraint: serializeConstraint(this.biasConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\n\n/**\n * Abstract nD convolution layer.  Ancestor of convolution layers which reduce\n * across channels, i.e., Conv1D and Conv2D, but not DepthwiseConv2D.\n */\nexport abstract class Conv extends BaseConv {\n  protected readonly filters: number;\n\n  protected kernel: LayerVariable = null;\n\n  // Bias-related properties are stored in the superclass `BaseConv` because all\n  // convolution subclasses use the same configuration parameters to control\n  // bias. Kernel-related properties are defined here rather than in the\n  // superclass because some convolution subclasses use different names and\n  // configuration parameters for their internal kernel state.\n  protected readonly kernelInitializer?: Initializer;\n  protected readonly kernelConstraint?: Constraint;\n  protected readonly kernelRegularizer?: Regularizer;\n\n  constructor(rank: number, args: ConvLayerArgs) {\n    super(rank, args as BaseConvLayerArgs);\n    Conv.verifyArgs(args);\n    this.filters = args.filters;\n    generic_utils.assertPositiveInteger(this.filters, 'filters');\n    this.kernelInitializer = getInitializer(\n        args.kernelInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.kernelConstraint = getConstraint(args.kernelConstraint);\n    this.kernelRegularizer = getRegularizer(args.kernelRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          `The channel dimension of the input should be defined. ` +\n          `Found ${inputShape[channelAxis]}`);\n    }\n    const inputDim = inputShape[channelAxis];\n\n    const kernelShape = this.kernelSize.concat([inputDim, this.filters]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, null, this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    this.inputSpec = [{ndim: this.rank + 2, axes: {[channelAxis]: inputDim}}];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs: Tensor;\n      const biasValue = this.bias == null ? null : this.bias.read();\n      const fusedActivationName = generic_utils.mapActivationToFusedKernel(\n          this.activation.getClassName());\n\n      if (fusedActivationName != null && this.rank === 2) {\n        outputs = conv2dWithBiasActivation(\n            inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n            this.dataFormat, this.dilationRate as [number, number],\n            fusedActivationName);\n      } else {\n        if (this.rank === 1) {\n          outputs = conv1dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides[0],\n              this.padding, this.dataFormat, this.dilationRate[0]);\n        } else if (this.rank === 2) {\n          // TODO(cais): Move up to constructor.\n          outputs = conv2dWithBiasActivation(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number]);\n        } else if (this.rank === 3) {\n          outputs = conv3dWithBias(\n              inputs, this.kernel.read(), biasValue, this.strides, this.padding,\n              this.dataFormat, this.dilationRate as [number, number, number]);\n        } else {\n          throw new NotImplementedError(\n              'convolutions greater than 3D are not implemented yet.');\n        }\n\n        if (this.activation != null) {\n          outputs = this.activation.apply(outputs);\n        }\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const newSpace: number[] = [];\n    const space = (this.dataFormat === 'channelsLast') ?\n        inputShape.slice(1, inputShape.length - 1) :\n        inputShape.slice(2);\n    for (let i = 0; i < space.length; ++i) {\n      const newDim = convOutputLength(\n          space[i], this.kernelSize[i], this.padding, this.strides[i],\n          typeof this.dilationRate === 'number' ? this.dilationRate :\n                                                  this.dilationRate[i]);\n      newSpace.push(newDim);\n    }\n\n    let outputShape = [inputShape[0]];\n    if (this.dataFormat === 'channelsLast') {\n      outputShape = outputShape.concat(newSpace);\n      outputShape.push(this.filters);\n    } else {\n      outputShape.push(this.filters);\n      outputShape = outputShape.concat(newSpace);\n    }\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {\n      filters: this.filters,\n      kernelInitializer: serializeInitializer(this.kernelInitializer),\n      kernelRegularizer: serializeRegularizer(this.kernelRegularizer),\n      kernelConstraint: serializeConstraint(this.kernelConstraint)\n    };\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // Check config.filters type, shape, and value.\n    if (!('filters' in args) || typeof args.filters !== 'number' ||\n        args.filters < 1) {\n      throw new ValueError(\n          `Convolution layer expected config.filters to be a 'number' > 0 ` +\n          `but got ${JSON.stringify(args.filters)}`);\n    }\n  }\n}\n\nexport class Conv2D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv2D';\n  constructor(args: ConvLayerArgs) {\n    super(2, args);\n    Conv2D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if ((typeof args.kernelSize !== 'number') &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 2)) {\n      throw new ValueError(\n          `Conv2D expects config.kernelSize to be number or number[] with ` +\n          `length 1 or 2, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv2D);\n\nexport class Conv3D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv3D';\n  constructor(args: ConvLayerArgs) {\n    super(3, args);\n    Conv3D.verifyArgs(args);\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number') {\n      if (!(Array.isArray(args.kernelSize) &&\n            (args.kernelSize.length === 1 || args.kernelSize.length === 3))) {\n        throw new ValueError(\n            `Conv3D expects config.kernelSize to be number or` +\n            ` [number, number, number], but received ${\n                JSON.stringify(args.kernelSize)}.`);\n      }\n    }\n  }\n}\nserialization.registerClass(Conv3D);\n\nexport class Conv2DTranspose extends Conv2D {\n  /** @nocollapse */\n  static className = 'Conv2DTranspose';\n  inputSpec: InputSpec[];\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 4})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv2DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 4) {\n      throw new ValueError(\n          'Input should have rank 4; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 4, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 4) {\n        throw new ValueError(\n            `Conv2DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      if (this.dataFormat === 'channelsFirst') {\n        hAxis = 2;\n        wAxis = 3;\n      } else {\n        hAxis = 1;\n        wAxis = 2;\n      }\n\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelH = this.kernelSize[0];\n      const kernelW = this.kernelSize[1];\n      const strideH = this.strides[0];\n      const strideW = this.strides[1];\n\n      // Infer the dynamic output shape.\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Porting Note: We don't branch based on `this.dataFormat` here,\n      // because\n      //   the tjfs-core function `conv2dTranspose` called below always\n      //   assumes channelsLast.\n      const outputShape: [number, number, number, number] =\n          [batchSize, outHeight, outWidth, this.filters];\n\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n      }\n      let outputs = tfc.conv2dTranspose(\n          input as Tensor4D, this.kernel.read() as Tensor4D, outputShape,\n          this.strides as [number, number], this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 3, 1, 2]);\n      }\n\n      if (this.bias != null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor4D;\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs) as Tensor4D;\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    } else {\n      channelAxis = 3;\n      heightAxis = 1;\n      widthAxis = 2;\n    }\n\n    const kernelH = this.kernelSize[0];\n    const kernelW = this.kernelSize[1];\n    const strideH = this.strides[0];\n    const strideW = this.strides[1];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv2DTranspose);\n\nexport class Conv3DTranspose extends Conv3D {\n  /** @nocollapse */\n  static className = 'Conv3DTranspose';\n  inputSpec: InputSpec[];\n\n  constructor(args: ConvLayerArgs) {\n    super(args);\n    this.inputSpec = [new InputSpec({ndim: 5})];\n\n    if (this.padding !== 'same' && this.padding !== 'valid') {\n      throw new ValueError(\n          `Conv3DTranspose currently supports only padding modes 'same' ` +\n          `and 'valid', but received padding mode ${this.padding}`);\n    }\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length !== 5) {\n      throw new ValueError(\n          'Input should have rank 5; Received input shape: ' +\n          JSON.stringify(inputShape));\n    }\n\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null) {\n      throw new ValueError(\n          'The channel dimension of the inputs should be defined. ' +\n          'Found `None`.');\n    }\n    const inputDim = inputShape[channelAxis];\n    const kernelShape = this.kernelSize.concat([this.filters, inputDim]);\n\n    this.kernel = this.addWeight(\n        'kernel', kernelShape, 'float32', this.kernelInitializer,\n        this.kernelRegularizer, true, this.kernelConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    }\n\n    // Set input spec.\n    this.inputSpec =\n        [new InputSpec({ndim: 5, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy<tfc.Tensor5D>(() => {\n      let input = getExactlyOneTensor(inputs);\n      if (input.shape.length !== 5) {\n        throw new ValueError(\n            `Conv3DTranspose.call() expects input tensor to be rank-4, but ` +\n            `received a tensor of rank-${input.shape.length}`);\n      }\n\n      const inputShape = input.shape;\n      const batchSize = inputShape[0];\n\n      let hAxis: number;\n      let wAxis: number;\n      let dAxis: number;\n\n      if (this.dataFormat === 'channelsFirst') {\n        dAxis = 2;\n        hAxis = 3;\n        wAxis = 4;\n      } else {\n        dAxis = 1;\n        hAxis = 2;\n        wAxis = 3;\n      }\n\n      const depth = inputShape[dAxis];\n      const height = inputShape[hAxis];\n      const width = inputShape[wAxis];\n      const kernelD = this.kernelSize[0];\n      const kernelH = this.kernelSize[1];\n      const kernelW = this.kernelSize[2];\n      const strideD = this.strides[0];\n      const strideH = this.strides[1];\n      const strideW = this.strides[2];\n\n      // Infer the dynamic output shape.\n      const outDepth = deconvLength(depth, strideD, kernelD, this.padding);\n      const outHeight = deconvLength(height, strideH, kernelH, this.padding);\n      const outWidth = deconvLength(width, strideW, kernelW, this.padding);\n\n      // Same as `conv2dTranspose`. We always assumes channelsLast.\n      const outputShape: [number, number, number, number, number] =\n          [batchSize, outDepth, outHeight, outWidth, this.filters];\n      if (this.dataFormat !== 'channelsLast') {\n        input = tfc.transpose(input, [0, 2, 3, 4, 1]);\n      }\n      let outputs = tfc.conv3dTranspose(\n          input as Tensor5D, this.kernel.read() as Tensor5D, outputShape,\n          this.strides as [number, number, number],\n          this.padding as 'same' | 'valid');\n      if (this.dataFormat !== 'channelsLast') {\n        outputs = tfc.transpose(outputs, [0, 4, 1, 2, 3]);\n      }\n\n      if (this.bias !== null) {\n        outputs =\n            K.biasAdd(outputs, this.bias.read(), this.dataFormat) as Tensor5D;\n      }\n      if (this.activation !== null) {\n        outputs = this.activation.apply(outputs) as Tensor5D;\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const outputShape = inputShape.slice();\n\n    let channelAxis: number;\n    let depthAxis: number;\n    let heightAxis: number;\n    let widthAxis: number;\n    if (this.dataFormat === 'channelsFirst') {\n      channelAxis = 1;\n      depthAxis = 2;\n      heightAxis = 3;\n      widthAxis = 4;\n    } else {\n      channelAxis = 4;\n      depthAxis = 1;\n      heightAxis = 2;\n      widthAxis = 3;\n    }\n\n    const kernelD = this.kernelSize[0];\n    const kernelH = this.kernelSize[1];\n    const kernelW = this.kernelSize[2];\n    const strideD = this.strides[0];\n    const strideH = this.strides[1];\n    const strideW = this.strides[2];\n\n    outputShape[channelAxis] = this.filters;\n    outputShape[depthAxis] =\n        deconvLength(outputShape[depthAxis], strideD, kernelD, this.padding);\n    outputShape[heightAxis] =\n        deconvLength(outputShape[heightAxis], strideH, kernelH, this.padding);\n    outputShape[widthAxis] =\n        deconvLength(outputShape[widthAxis], strideW, kernelW, this.padding);\n    return outputShape;\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['dilationRate'];\n    return config;\n  }\n}\nserialization.registerClass(Conv3DTranspose);\n\nexport declare interface SeparableConvLayerArgs extends ConvLayerArgs {\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal\n   * to `filtersIn * depthMultiplier`. Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Initializer for the pointwise kernel matrix.\n   */\n  pointwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Regularizer function applied to the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Regularizer function applied to the pointwise kernel matrix.\n   */\n  pointwiseRegularizer?: RegularizerIdentifier|Regularizer;\n\n  /**\n   * Constraint function applied to the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Constraint function applied to the pointwise kernel matrix.\n   */\n  pointwiseConstraint?: ConstraintIdentifier|Constraint;\n}\n\nexport class SeparableConv extends Conv {\n  /** @nocollapse */\n  static className = 'SeparableConv';\n\n  readonly depthMultiplier: number;\n\n  protected readonly depthwiseInitializer?: Initializer;\n  protected readonly depthwiseRegularizer?: Regularizer;\n  protected readonly depthwiseConstraint?: Constraint;\n  protected readonly pointwiseInitializer?: Initializer;\n  protected readonly pointwiseRegularizer?: Regularizer;\n  protected readonly pointwiseConstraint?: Constraint;\n\n  readonly DEFAULT_DEPTHWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n  readonly DEFAULT_POINTWISE_INITIALIZER: InitializerIdentifier =\n      'glorotUniform';\n\n  protected depthwiseKernel: LayerVariable = null;\n  protected pointwiseKernel: LayerVariable = null;\n\n  constructor(rank: number, config?: SeparableConvLayerArgs) {\n    super(rank, config);\n\n    if (config.filters == null) {\n      throw new ValueError(\n          'The `filters` configuration field is required by SeparableConv, ' +\n          'but is unspecified.');\n    }\n    if (config.kernelInitializer != null || config.kernelRegularizer != null ||\n        config.kernelConstraint != null) {\n      throw new ValueError(\n          'Fields kernelInitializer, kernelRegularizer and kernelConstraint ' +\n          'are invalid for SeparableConv2D. Use depthwiseInitializer, ' +\n          'depthwiseRegularizer, depthwiseConstraint, pointwiseInitializer, ' +\n          'pointwiseRegularizer and pointwiseConstraint instead.');\n    }\n    if (config.padding != null && config.padding !== 'same' &&\n        config.padding !== 'valid') {\n      throw new ValueError(\n          `SeparableConv${this.rank}D supports only padding modes: ` +\n          `'same' and 'valid', but received ${JSON.stringify(config.padding)}`);\n    }\n\n    this.depthMultiplier =\n        config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_DEPTHWISE_INITIALIZER);\n    this.depthwiseRegularizer = getRegularizer(config.depthwiseRegularizer);\n    this.depthwiseConstraint = getConstraint(config.depthwiseConstraint);\n    this.pointwiseInitializer = getInitializer(\n        config.depthwiseInitializer || this.DEFAULT_POINTWISE_INITIALIZER);\n    this.pointwiseRegularizer = getRegularizer(config.pointwiseRegularizer);\n    this.pointwiseConstraint = getConstraint(config.pointwiseConstraint);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < this.rank + 2) {\n      throw new ValueError(\n          `Inputs to SeparableConv${this.rank}D should have rank ` +\n          `${this.rank + 2}, but received input shape: ` +\n          `${JSON.stringify(inputShape)}`);\n    }\n    const channelAxis =\n        this.dataFormat === 'channelsFirst' ? 1 : inputShape.length - 1;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          `The channel dimension of the inputs should be defined, ` +\n          `but found ${JSON.stringify(inputShape[channelAxis])}`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape =\n        this.kernelSize.concat([inputDim, this.depthMultiplier]);\n    const pointwiseKernelShape = [];\n    for (let i = 0; i < this.rank; ++i) {\n      pointwiseKernelShape.push(1);\n    }\n    pointwiseKernelShape.push(inputDim * this.depthMultiplier, this.filters);\n\n    const trainable = true;\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, 'float32',\n        this.depthwiseInitializer, this.depthwiseRegularizer, trainable,\n        this.depthwiseConstraint);\n    this.pointwiseKernel = this.addWeight(\n        'pointwise_kernel', pointwiseKernelShape, 'float32',\n        this.pointwiseInitializer, this.pointwiseRegularizer, trainable,\n        this.pointwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [this.filters], 'float32', this.biasInitializer,\n          this.biasRegularizer, trainable, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.inputSpec =\n        [new InputSpec({ndim: this.rank + 2, axes: {[channelAxis]: inputDim}})];\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      let output: Tensor;\n      if (this.rank === 1) {\n        throw new NotImplementedError(\n            '1D separable convolution is not implemented yet.');\n      } else if (this.rank === 2) {\n        if (this.dataFormat === 'channelsFirst') {\n          inputs = tfc.transpose(inputs, [0, 2, 3, 1]);  // NCHW -> NHWC.\n        }\n\n        output = tfc.separableConv2d(\n            inputs as Tensor4D, this.depthwiseKernel.read() as Tensor4D,\n            this.pointwiseKernel.read() as Tensor4D,\n            this.strides as [number, number], this.padding as 'same' | 'valid',\n            this.dilationRate as [number, number], 'NHWC');\n      }\n\n      if (this.useBias) {\n        output = K.biasAdd(output, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        output = this.activation.apply(output);\n      }\n\n      if (this.dataFormat === 'channelsFirst') {\n        output = tfc.transpose(output, [0, 3, 1, 2]);  // NHWC -> NCHW.\n      }\n      return output;\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['kernelInitializer'];\n    delete config['kernelRegularizer'];\n    delete config['kernelConstraint'];\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['pointwiseInitializer'] =\n        serializeInitializer(this.pointwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['pointwiseRegularizer'] =\n        serializeRegularizer(this.pointwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseConstraint);\n    config['pointwiseConstraint'] =\n        serializeConstraint(this.pointwiseConstraint);\n    return config;\n  }\n}\n\nexport class SeparableConv2D extends SeparableConv {\n  /** @nocollapse */\n  static className = 'SeparableConv2D';\n  constructor(args?: SeparableConvLayerArgs) {\n    super(2, args);\n  }\n}\nserialization.registerClass(SeparableConv2D);\n\nexport class Conv1D extends Conv {\n  /** @nocollapse */\n  static className = 'Conv1D';\n  constructor(args: ConvLayerArgs) {\n    super(1, args);\n    Conv1D.verifyArgs(args);\n    this.inputSpec = [{ndim: 3}];\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    delete config['rank'];\n    delete config['dataFormat'];\n    return config;\n  }\n\n  protected static verifyArgs(args: ConvLayerArgs) {\n    // config.kernelSize must be a number or array of numbers.\n    if (typeof args.kernelSize !== 'number' &&\n        !generic_utils.checkArrayTypeAndLength(\n            args.kernelSize, 'number', 1, 1)) {\n      throw new ValueError(\n          `Conv1D expects config.kernelSize to be number or number[] with ` +\n          `length 1, but received ${JSON.stringify(args.kernelSize)}.`);\n    }\n  }\n}\nserialization.registerClass(Conv1D);\n\nexport declare interface Cropping2DLayerArgs extends LayerArgs {\n  /**\n   * Dimension of the cropping along the width and the height.\n   * - If integer: the same symmetric cropping\n   *  is applied to width and height.\n   * - If list of 2 integers:\n   *   interpreted as two different\n   *   symmetric cropping values for height and width:\n   *   `[symmetric_height_crop, symmetric_width_crop]`.\n   * - If a list of 2 list of 2 integers:\n   *   interpreted as\n   *   `[[top_crop, bottom_crop], [left_crop, right_crop]]`\n   */\n  cropping: number|[number, number]|[[number, number], [number, number]];\n\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `channels_last` corresponds to inputs with shape\n   *   `(batch, ..., channels)`\n   *\n   * `channels_first` corresponds to inputs with shape\n   *   `(batch, channels, ...)`\n   *\n   * Defaults to `channels_last`.\n   */\n  dataFormat?: DataFormat;\n}\n\nexport class Cropping2D extends Layer {\n  /** @nocollapse */\n  static className = 'Cropping2D';\n  protected readonly cropping: [[number, number], [number, number]];\n  protected readonly dataFormat: DataFormat;\n\n  constructor(args: Cropping2DLayerArgs) {\n    super(args);\n    if (typeof args.cropping === 'number') {\n      this.cropping =\n          [[args.cropping, args.cropping], [args.cropping, args.cropping]];\n    } else if (typeof args.cropping[0] === 'number') {\n      this.cropping = [\n        [args.cropping[0], args.cropping[0]],\n        [args.cropping[1] as number, args.cropping[1] as number]\n      ];\n    } else {\n      this.cropping = args.cropping as [[number, number], [number, number]];\n    }\n    this.dataFormat =\n        args.dataFormat === undefined ? 'channelsLast' : args.dataFormat;\n    this.inputSpec = [{ndim: 4}];\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      return [\n        inputShape[0], inputShape[1],\n        inputShape[2] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[3] - this.cropping[1][0] - this.cropping[1][1]\n      ];\n    } else {\n      return [\n        inputShape[0],\n        inputShape[1] - this.cropping[0][0] - this.cropping[0][1],\n        inputShape[2] - this.cropping[1][0] - this.cropping[1][1], inputShape[3]\n      ];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n\n      if (this.dataFormat === 'channelsLast') {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[1] - this.cropping[0][0] - this.cropping[0][1], 2);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[2] - this.cropping[1][1] - this.cropping[1][0], 3);\n      } else {\n        const hSliced = K.sliceAlongAxis(\n            inputs, this.cropping[0][0],\n            inputs.shape[2] - this.cropping[0][0] - this.cropping[0][1], 3);\n        return K.sliceAlongAxis(\n            hSliced, this.cropping[1][0],\n            inputs.shape[3] - this.cropping[1][1] - this.cropping[1][0], 4);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {cropping: this.cropping, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(Cropping2D);\n\nexport declare interface UpSampling2DLayerArgs extends LayerArgs {\n  /**\n   * The upsampling factors for rows and columns.\n   *\n   * Defaults to `[2, 2]`.\n   */\n  size?: number[];\n  /**\n   * Format of the data, which determines the ordering of the dimensions in\n   * the inputs.\n   *\n   * `\"channelsLast\"` corresponds to inputs with shape\n   *   `[batch, ..., channels]`\n   *\n   *  `\"channelsFirst\"` corresponds to inputs with shape `[batch, channels,\n   * ...]`.\n   *\n   * Defaults to `\"channelsLast\"`.\n   */\n  dataFormat?: DataFormat;\n  /**\n   * The interpolation mechanism, one of `\"nearest\"` or `\"bilinear\"`, default\n   * to `\"nearest\"`.\n   */\n  interpolation?: InterpolationFormat;\n}\n\nexport class UpSampling2D extends Layer {\n  /** @nocollapse */\n  static className = 'UpSampling2D';\n  protected readonly DEFAULT_SIZE = [2, 2];\n  protected readonly size: number[];\n  protected readonly dataFormat: DataFormat;\n  protected readonly interpolation: InterpolationFormat;\n\n  constructor(args: UpSampling2DLayerArgs) {\n    super(args);\n    this.inputSpec = [{ndim: 4}];\n    this.size = args.size == null ? this.DEFAULT_SIZE : args.size;\n    this.dataFormat =\n        args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n    checkDataFormat(this.dataFormat);\n    this.interpolation =\n        args.interpolation == null ? 'nearest' : args.interpolation;\n    checkInterpolationFormat(this.interpolation);\n  }\n\n  computeOutputShape(inputShape: Shape): Shape {\n    if (this.dataFormat === 'channelsFirst') {\n      const height =\n          inputShape[2] == null ? null : this.size[0] * inputShape[2];\n      const width = inputShape[3] == null ? null : this.size[1] * inputShape[3];\n      return [inputShape[0], inputShape[1], height, width];\n    } else {\n      const height =\n          inputShape[1] == null ? null : this.size[0] * inputShape[1];\n      const width = inputShape[2] == null ? null : this.size[1] * inputShape[2];\n      return [inputShape[0], height, width, inputShape[3]];\n    }\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      let input = getExactlyOneTensor(inputs) as Tensor4D;\n      const inputShape = input.shape;\n\n      if (this.dataFormat === 'channelsFirst') {\n        input = tfc.transpose(input, [0, 2, 3, 1]);\n        const height = this.size[0] * inputShape[2];\n        const width = this.size[1] * inputShape[3];\n\n        const resized = this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n        return tfc.transpose(resized, [0, 3, 1, 2]);\n      } else {\n        const height = this.size[0] * inputShape[1];\n        const width = this.size[1] * inputShape[2];\n        return this.interpolation === 'nearest' ?\n            tfc.image.resizeNearestNeighbor(input, [height, width]) :\n            tfc.image.resizeBilinear(input, [height, width]);\n      }\n    });\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = {size: this.size, dataFormat: this.dataFormat};\n    const baseConfig = super.getConfig();\n    Object.assign(config, baseConfig);\n    return config;\n  }\n}\nserialization.registerClass(UpSampling2D);\n"]},"metadata":{},"sourceType":"module"}