{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n  const resultValues = new Float32Array(vals.length);\n\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n\n  return resultValues;\n}\nexport const abs = args => {\n  const {\n    x\n  } = args.inputs;\n  const cpuBackend = args.backend;\n  assertNotComplex(x, 'abs');\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values;\n  resultValues = simpleAbsImpl(values);\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\nexport const absConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,EAA8DC,IAA9D,QAAyE,uBAAzE;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAUC,aAAV,CAAwBC,IAAxB,EAAwC;AAC5C,QAAMC,YAAY,GAAG,IAAIC,YAAJ,CAAiBF,IAAI,CAACG,MAAtB,CAArB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,IAAI,CAACG,MAAzB,EAAiC,EAAEC,CAAnC,EAAsC;AACpCH,gBAAY,CAACG,CAAD,CAAZ,GAAkBC,IAAI,CAACC,GAAL,CAASN,IAAI,CAACI,CAAD,CAAb,CAAlB;AACD;;AACD,SAAOH,YAAP;AACD;AAED,OAAO,MAAMK,GAAG,GAAIC,IAAD,IAAuD;AACxE,QAAM;AAACC;AAAD,MAAMD,IAAI,CAACE,MAAjB;AACA,QAAMC,UAAU,GAAGH,IAAI,CAACI,OAAxB;AAEAb,kBAAgB,CAACU,CAAD,EAAI,KAAJ,CAAhB;AAEA,MAAIP,YAAY,GAAG,IAAIC,YAAJ,CAAiBL,IAAI,CAACe,aAAL,CAAmBJ,CAAC,CAACK,KAArB,CAAjB,CAAnB;AACA,QAAMC,MAAM,GAAGJ,UAAU,CAACK,IAAX,CAAgBC,GAAhB,CAAoBR,CAAC,CAACS,MAAtB,EAA8BH,MAA7C;AACAb,cAAY,GAAGF,aAAa,CAACe,MAAD,CAA5B;AAEA,SAAOJ,UAAU,CAACQ,UAAX,CAAsBjB,YAAtB,EAAoCO,CAAC,CAACK,KAAtC,EAA6CL,CAAC,CAACW,KAA/C,CAAP;AACD,CAXM;AAaP,OAAO,MAAMC,SAAS,GAAiB;AACrCC,YAAU,EAAEzB,GADyB;AAErC0B,aAAW,EAAE,KAFwB;AAGrCC,YAAU,EAAEjB;AAHyB,CAAhC","names":["Abs","util","assertNotComplex","simpleAbsImpl","vals","resultValues","Float32Array","length","i","Math","abs","args","x","inputs","cpuBackend","backend","sizeFromShape","shape","values","data","get","dataId","makeOutput","dtype","absConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Abs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, KernelConfig, KernelFunc, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function simpleAbsImpl(vals: TypedArray): Float32Array {\n  const resultValues = new Float32Array(vals.length);\n  for (let i = 0; i < vals.length; ++i) {\n    resultValues[i] = Math.abs(vals[i]);\n  }\n  return resultValues;\n}\n\nexport const abs = (args: {inputs: AbsInputs, backend: MathBackendCPU}) => {\n  const {x} = args.inputs;\n  const cpuBackend = args.backend;\n\n  assertNotComplex(x, 'abs');\n\n  let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n  resultValues = simpleAbsImpl(values);\n\n  return cpuBackend.makeOutput(resultValues, x.shape, x.dtype);\n};\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'cpu',\n  kernelFunc: abs as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}