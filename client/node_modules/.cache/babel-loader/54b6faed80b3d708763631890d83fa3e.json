{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as broadcast_util from './broadcast_util';\nimport { elu } from './elu';\nimport { leakyRelu } from './leaky_relu';\nimport { mul } from './mul';\nimport { prelu } from './prelu';\nimport { relu } from './relu';\nimport { relu6 } from './relu6';\nimport { reshape } from './reshape';\nimport { sigmoid } from './sigmoid';\nimport { step } from './step';\nimport { sum } from './sum'; // Returns gradient for fused activation.\n\nexport function getFusedDyActivation(dy, y, activation) {\n  if (activation == null || activation === 'linear') {\n    return dy;\n  }\n\n  if (activation === 'relu') {\n    return mul(dy, step(y));\n  }\n\n  throw new Error(`Cannot compute gradient for fused activation ${activation}.`);\n} // Returns gradient for fused bias.\n\nexport function getFusedBiasGradient(bias, dyActivation) {\n  let res = dyActivation;\n  const reduceAxes = broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n\n  if (reduceAxes.length > 0) {\n    res = sum(res, reduceAxes);\n  }\n\n  return reshape(res, bias.shape);\n}\nexport function applyActivation(x, activation, preluActivationWeights, leakyreluAlpha) {\n  if (activation === 'linear') {\n    return x;\n  } else if (activation === 'relu') {\n    return relu(x);\n  } else if (activation === 'elu') {\n    return elu(x);\n  } else if (activation === 'relu6') {\n    return relu6(x);\n  } else if (activation === 'prelu') {\n    return prelu(x, preluActivationWeights);\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation === 'sigmoid') {\n    return sigmoid(x);\n  }\n\n  throw new Error(`Unknown fused activation ${activation}.`);\n} // Whether we should call fused ops.\n\nexport const shouldFuse = (gradientDepth, activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,OAAO,KAAKA,cAAZ,MAAgC,kBAAhC;AACA,SAAQC,GAAR,QAAkB,OAAlB;AAEA,SAAQC,SAAR,QAAwB,cAAxB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,GAAR,QAAkB,OAAlB,C,CAEA;;AACA,OAAM,SAAUC,oBAAV,CACFC,EADE,EACUC,CADV,EACqBC,UADrB,EAC2C;AAC/C,MAAIA,UAAU,IAAI,IAAd,IAAsBA,UAAU,KAAK,QAAzC,EAAmD;AACjD,WAAOF,EAAP;AACD;;AACD,MAAIE,UAAU,KAAK,MAAnB,EAA2B;AACzB,WAAOX,GAAG,CAACS,EAAD,EAAKH,IAAI,CAACI,CAAD,CAAT,CAAV;AACD;;AACD,QAAM,IAAIE,KAAJ,CACF,gDAAgDD,UAAU,GADxD,CAAN;AAED,C,CAED;;AACA,OAAM,SAAUE,oBAAV,CACFC,IADE,EACYC,YADZ,EACgC;AACpC,MAAIC,GAAG,GAAGD,YAAV;AACA,QAAME,UAAU,GACZpB,cAAc,CAACqB,gBAAf,CAAgCJ,IAAI,CAACK,KAArC,EAA4CJ,YAAY,CAACI,KAAzD,CADJ;;AAEA,MAAIF,UAAU,CAACG,MAAX,GAAoB,CAAxB,EAA2B;AACzBJ,OAAG,GAAGT,GAAG,CAACS,GAAD,EAAMC,UAAN,CAAT;AACD;;AACD,SAAOb,OAAO,CAACY,GAAD,EAAMF,IAAI,CAACK,KAAX,CAAd;AACD;AAED,OAAM,SAAUE,eAAV,CACFC,CADE,EACSX,UADT,EACiCY,sBADjC,EAEFC,cAFE,EAEqB;AACzB,MAAIb,UAAU,KAAK,QAAnB,EAA6B;AAC3B,WAAOW,CAAP;AACD,GAFD,MAEO,IAAIX,UAAU,KAAK,MAAnB,EAA2B;AAChC,WAAOT,IAAI,CAACoB,CAAD,CAAX;AACD,GAFM,MAEA,IAAIX,UAAU,KAAK,KAAnB,EAA0B;AAC/B,WAAOb,GAAG,CAACwB,CAAD,CAAV;AACD,GAFM,MAEA,IAAIX,UAAU,KAAK,OAAnB,EAA4B;AACjC,WAAOR,KAAK,CAACmB,CAAD,CAAZ;AACD,GAFM,MAEA,IAAIX,UAAU,KAAK,OAAnB,EAA4B;AACjC,WAAOV,KAAK,CAACqB,CAAD,EAAIC,sBAAJ,CAAZ;AACD,GAFM,MAEA,IAAIZ,UAAU,KAAK,WAAnB,EAAgC;AACrC,WAAOZ,SAAS,CAACuB,CAAD,EAAIE,cAAJ,CAAhB;AACD,GAFM,MAEA,IAAIb,UAAU,KAAK,SAAnB,EAA8B;AACnC,WAAON,OAAO,CAACiB,CAAD,CAAd;AACD;;AACD,QAAM,IAAIV,KAAJ,CAAU,4BAA4BD,UAAU,GAAhD,CAAN;AACD,C,CAED;;AACA,OAAO,MAAMc,UAAU,GAAG,CAACC,aAAD,EAAwBf,UAAxB,KAAkD;AAC1E,QAAMgB,YAAY,GAAGD,aAAa,GAAG,CAArC;AACA,SAAO,CAACC,YAAD,IAAiBhB,UAAU,KAAK,QAAvC;AACD,CAHM","names":["broadcast_util","elu","leakyRelu","mul","prelu","relu","relu6","reshape","sigmoid","step","sum","getFusedDyActivation","dy","y","activation","Error","getFusedBiasGradient","bias","dyActivation","res","reduceAxes","getReductionAxes","shape","length","applyActivation","x","preluActivationWeights","leakyreluAlpha","shouldFuse","gradientDepth","gradientMode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/fused_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\n\nimport * as broadcast_util from './broadcast_util';\nimport {elu} from './elu';\nimport {Activation} from './fused_types';\nimport {leakyRelu} from './leaky_relu';\nimport {mul} from './mul';\nimport {prelu} from './prelu';\nimport {relu} from './relu';\nimport {relu6} from './relu6';\nimport {reshape} from './reshape';\nimport {sigmoid} from './sigmoid';\nimport {step} from './step';\nimport {sum} from './sum';\n\n// Returns gradient for fused activation.\nexport function getFusedDyActivation(\n    dy: Tensor, y: Tensor, activation: Activation): Tensor {\n  if (activation == null || activation === 'linear') {\n    return dy;\n  }\n  if (activation === 'relu') {\n    return mul(dy, step(y));\n  }\n  throw new Error(\n      `Cannot compute gradient for fused activation ${activation}.`);\n}\n\n// Returns gradient for fused bias.\nexport function getFusedBiasGradient(\n    bias: Tensor, dyActivation: Tensor): Tensor {\n  let res = dyActivation;\n  const reduceAxes =\n      broadcast_util.getReductionAxes(bias.shape, dyActivation.shape);\n  if (reduceAxes.length > 0) {\n    res = sum(res, reduceAxes);\n  }\n  return reshape(res, bias.shape);\n}\n\nexport function applyActivation(\n    x: Tensor, activation: Activation, preluActivationWeights?: Tensor,\n    leakyreluAlpha?: number): Tensor {\n  if (activation === 'linear') {\n    return x;\n  } else if (activation === 'relu') {\n    return relu(x);\n  } else if (activation === 'elu') {\n    return elu(x);\n  } else if (activation === 'relu6') {\n    return relu6(x);\n  } else if (activation === 'prelu') {\n    return prelu(x, preluActivationWeights);\n  } else if (activation === 'leakyrelu') {\n    return leakyRelu(x, leakyreluAlpha);\n  } else if (activation === 'sigmoid') {\n    return sigmoid(x);\n  }\n  throw new Error(`Unknown fused activation ${activation}.`);\n}\n\n// Whether we should call fused ops.\nexport const shouldFuse = (gradientDepth: number, activation: Activation) => {\n  const gradientMode = gradientDepth > 0;\n  return !gradientMode || activation === 'linear';\n};\n"]},"metadata":{},"sourceType":"module"}