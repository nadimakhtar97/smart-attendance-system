{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { TopK } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { op } from './operation';\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\n\nfunction topk_(x) {\n  let k = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  let sorted = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  const $x = convertToTensor(x, 'x', 'topk');\n\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n\n  const lastDim = $x.shape[$x.shape.length - 1];\n\n  if (k < 0) {\n    throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);\n  }\n\n  if (k > lastDim) {\n    throw new Error(`'k' passed to topk() must be <= the last dimension (${lastDim}) ` + `but got ${k}`);\n  }\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    k,\n    sorted\n  };\n  const [values, indices] = ENGINE.runKernel(TopK, inputs, attrs);\n  return {\n    values,\n    indices\n  };\n}\n\nexport const topk = op({\n  topk_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,IAAR,QAA0C,iBAA1C;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAGA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,SAASC,KAAT,CACIC,CADJ,EACyC;AAAA,MAApBC,CAAoB,uEAAhB,CAAgB;AAAA,MAAbC,MAAa,uEAAJ,IAAI;AACvC,QAAMC,EAAE,GAAGN,eAAe,CAACG,CAAD,EAAI,GAAJ,EAAS,MAAT,CAA1B;;AACA,MAAIG,EAAE,CAACC,IAAH,KAAY,CAAhB,EAAmB;AACjB,UAAM,IAAIC,KAAJ,CAAU,oDAAV,CAAN;AACD;;AACD,QAAMC,OAAO,GAAGH,EAAE,CAACI,KAAH,CAASJ,EAAE,CAACI,KAAH,CAASC,MAAT,GAAkB,CAA3B,CAAhB;;AAEA,MAAIP,CAAC,GAAG,CAAR,EAAW;AACT,UAAM,IAAII,KAAJ,CAAU,6CAA6CJ,CAAC,EAAxD,CAAN;AACD;;AAED,MAAIA,CAAC,GAAGK,OAAR,EAAiB;AACf,UAAM,IAAID,KAAJ,CACF,uDAAuDC,OAAO,IAA9D,GACA,WAAWL,CAAC,EAFV,CAAN;AAGD;;AAED,QAAMQ,MAAM,GAAe;AAACT,KAAC,EAAEG;AAAJ,GAA3B;AACA,QAAMO,KAAK,GAAc;AAACT,KAAD;AAAIC;AAAJ,GAAzB;AAEA,QAAM,CAACS,MAAD,EAASC,OAAT,IAAoBjB,MAAM,CAACkB,SAAP,CACtBjB,IADsB,EAChBa,MADgB,EACgBC,KADhB,CAA1B;AAGA,SAAO;AAACC,UAAD;AAASC;AAAT,GAAP;AACD;;AAED,OAAO,MAAME,IAAI,GAAGhB,EAAE,CAAC;AAACC;AAAD,CAAD,CAAf","names":["ENGINE","TopK","convertToTensor","op","topk_","x","k","sorted","$x","rank","Error","lastDim","shape","length","inputs","attrs","values","indices","runKernel","topk"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/topk.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {TopK, TopKAttrs, TopKInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {op} from './operation';\n\n/**\n * Finds the values and indices of the `k` largest entries along the last\n * dimension.\n *\n * If the input is a vector (rank=1), finds the k largest entries in the vector\n * and outputs their values and indices as vectors. Thus values[j] is the j-th\n * largest entry in input, and its index is indices[j].\n * For higher rank inputs, computes the top k entries along the last dimension.\n *\n * If two elements are equal, the lower-index element appears first.\n *\n * ```js\n * const a = tf.tensor2d([[1, 5], [4, 3]]);\n * const {values, indices} = tf.topk(a);\n * values.print();\n * indices.print();\n * ```\n * @param x 1-D or higher `tf.Tensor` with last dimension being at least `k`.\n * @param k Number of top elements to look for along the last dimension.\n * @param sorted If true, the resulting `k` elements will be sorted by the\n *     values in descending order.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nfunction topk_<T extends Tensor>(\n    x: T|TensorLike, k = 1, sorted = true): {values: T, indices: T} {\n  const $x = convertToTensor(x, 'x', 'topk');\n  if ($x.rank === 0) {\n    throw new Error('topk() expects the input to be of rank 1 or higher');\n  }\n  const lastDim = $x.shape[$x.shape.length - 1];\n\n  if (k < 0) {\n    throw new Error(`'k' passed to topk() must be >= 0 but got ${k}`);\n  }\n\n  if (k > lastDim) {\n    throw new Error(\n        `'k' passed to topk() must be <= the last dimension (${lastDim}) ` +\n        `but got ${k}`);\n  }\n\n  const inputs: TopKInputs = {x: $x};\n  const attrs: TopKAttrs = {k, sorted};\n\n  const [values, indices] = ENGINE.runKernel(\n      TopK, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n\n  return {values, indices} as {values: T, indices: T};\n}\n\nexport const topk = op({topk_});\n"]},"metadata":{},"sourceType":"module"}