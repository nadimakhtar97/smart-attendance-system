{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class MirrorPadProgram {\n  constructor(xShape, paddings, mode) {\n    this.variableNames = ['x'];\n    this.outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + xShape[i] + p[1]\n    /* afterPad */\n    );\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAOC,gBAAP,CAAuB;AAK3BC,cACIC,MADJ,EACsBC,QADtB,EAEIC,IAFJ,EAE+B;AAN/B,yBAAgB,CAAC,GAAD,CAAhB;AAOE,SAAKC,WAAL,GAAmBF,QAAQ,CAACG,GAAT,CACf,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD;AAAI;AAAL,MAAuBL,MAAM,CAACM,CAAD,CAA7B,GAAmCD,CAAC,CAAC,CAAD;AAAI;AADnC,KAAnB;AAEA,UAAME,IAAI,GAAGP,MAAM,CAACQ,MAApB;AACA,UAAMC,KAAK,GAAGZ,iBAAiB,CAACU,IAAD,CAA/B;AAEA,UAAMG,KAAK,GAAGT,QAAQ,CAACG,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAnB,EAAwBM,IAAxB,CAA6B,GAA7B,CAAd;AACA,UAAMC,GAAG,GAAGX,QAAQ,CAACG,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOL,MAAM,CAACM,CAAD,CAApC,EAAyCK,IAAzC,CAA8C,GAA9C,CAAZ;AACA,UAAME,cAAc,GAChB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,WAAxC,EAAqDC,KAArD,CAA2D,CAA3D,EAA8DP,IAA9D,CADJ;AAEA,UAAMQ,MAAM,GAAGb,IAAI,KAAK,SAAT,GAAqB,CAArB,GAAyB,CAAxC;;AAEA,QAAIK,IAAI,KAAK,CAAb,EAAgB;AACd,WAAKS,QAAL,GAAgB;sBACAN,KAAK;oBACPE,GAAG;;;;;wCAKiBG,MAAM;;4CAEFA,MAAM;;;;OAT5C;AAcA;AACD;;AACD,SAAKC,QAAL,GAAgB;QACZP,KAAK,YAAYA,KAAK,IAAIC,KAAK;QAC/BD,KAAK,UAAUA,KAAK,IAAIG,GAAG;;;UAGzBH,KAAK;8BACeF,IAAI;;iDAEeQ,MAAM;;qDAEFA,MAAM;;;UAGjDN,KAAK;yBACUI,cAAc;;KAdnC;AAiBD;;AArD0B","names":["getCoordsDataType","MirrorPadProgram","constructor","xShape","paddings","mode","outputShape","map","p","i","rank","length","dtype","start","join","end","unpackedCoords","slice","offset","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/mirror_pad_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class MirrorPadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      mode: 'reflect'|'symmetric') {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const dtype = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n    const offset = mode === 'reflect' ? 0 : 1;\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start) {\n            outC = start * 2 - outC - ${offset};\n          } else if(outC >= end) {\n            outC = (end - 1) * 2 - outC + ${offset};\n          }\n          setOutput(getX(outC - start));\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${dtype} start = ${dtype}(${start});\n      ${dtype} end = ${dtype}(${end});\n\n      void main() {\n        ${dtype} outC = getOutputCoords();\n        for (int i = 0; i < ${rank}; i++) {\n          if (outC[i] < start[i]) {\n            outC[i] = start[i] * 2 - outC[i] - ${offset};\n          } else if(outC[i] >= end[i]) {\n            outC[i] = (end[i] - 1) * 2 - outC[i] + ${offset};\n          }\n        }\n        ${dtype} coords = outC - start;\n        setOutput(getX(${unpackedCoords}));\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}