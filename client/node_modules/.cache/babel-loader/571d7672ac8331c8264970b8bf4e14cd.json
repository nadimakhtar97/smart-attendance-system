{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    a,\n    b,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    transposeA,\n    transposeB,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  let current;\n  let addRes;\n  let activationRes;\n  const intermediates = [];\n  const matMulRes = batchMatMul({\n    inputs: {\n      a,\n      b\n    },\n    attrs: {\n      transposeA,\n      transposeB\n    },\n    backend\n  });\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({\n      inputs: {\n        a: current,\n        b: bias\n      },\n      backend\n    });\n    intermediates.push(current);\n    current = addRes;\n  }\n\n  if (activation) {\n    activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\nexport const _fusedMatMulConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,QAAwG,uBAAxG;AAGA,SAAQC,eAAR,QAA8B,sBAA9B;AAEA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,WAAR,QAA0B,eAA1B;AAEA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC,KAAJ;AAAOC,QAAP;AAAaC;AAAb,MAAuCN,MAA7C;AACA,QAAM;AAACO,cAAD;AAAaC,cAAb;AAAyBC,cAAzB;AAAqCC;AAArC,MAAuDR,KAA7D;AAEA,MAAIS,OAAJ;AACA,MAAIC,MAAJ;AACA,MAAIC,aAAJ;AAEA,QAAMC,aAAa,GAAiB,EAApC;AAEA,QAAMC,SAAS,GACXlB,WAAW,CAAC;AAACG,UAAM,EAAE;AAACG,OAAD;AAAIC;AAAJ,KAAT;AAAiBF,SAAK,EAAE;AAACK,gBAAD;AAAaC;AAAb,KAAxB;AAAkDP;AAAlD,GAAD,CADf;AAEAU,SAAO,GAAGI,SAAV;;AAEA,MAAIV,IAAJ,EAAU;AACRO,UAAM,GAAGhB,GAAG,CAAC;AAACI,YAAM,EAAE;AAACG,SAAC,EAAEQ,OAAJ;AAAaP,SAAC,EAAEC;AAAhB,OAAT;AAAgCJ;AAAhC,KAAD,CAAZ;AACAa,iBAAa,CAACE,IAAd,CAAmBL,OAAnB;AACAA,WAAO,GAAGC,MAAV;AACD;;AACD,MAAIH,UAAJ,EAAgB;AACdI,iBAAa,GAAGlB,eAAe,CAC3BM,OAD2B,EAClBU,OADkB,EACTF,UADS,EACGH,sBADH,EAC2BI,cAD3B,CAA/B;AAEAI,iBAAa,CAACE,IAAd,CAAmBL,OAAnB;AACAA,WAAO,GAAGE,aAAV;AACD;;AAED,OAAK,MAAMI,CAAX,IAAgBH,aAAhB,EAA+B;AAC7Bb,WAAO,CAACiB,6BAAR,CAAsCD,CAAtC;AACD;;AAED,SAAON,OAAP;AACD;AAED,OAAO,MAAMQ,kBAAkB,GAAiB;AAC9CC,YAAU,EAAE1B,YADkC;AAE9C2B,aAAW,EAAE,KAFiC;AAG9CC,YAAU,EAAExB;AAHkC,CAAzC","names":["_FusedMatMul","applyActivation","add","batchMatMul","_fusedMatMul","args","inputs","backend","attrs","a","b","bias","preluActivationWeights","transposeA","transposeB","activation","leakyreluAlpha","current","addRes","activationRes","intermediates","matMulRes","push","i","disposeIntermediateTensorInfo","_fusedMatMulConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/_FusedMatMul.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {_FusedMatMul, _FusedMatMulAttrs, _FusedMatMulInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {applyActivation} from '../utils/fused_utils';\n\nimport {add} from './Add';\nimport {batchMatMul} from './BatchMatMul';\n\nexport function _fusedMatMul(args: {\n  inputs: _FusedMatMulInputs,\n  attrs: _FusedMatMulAttrs,\n  backend: MathBackendCPU\n}) {\n  const {inputs, backend, attrs} = args;\n  const {a, b, bias, preluActivationWeights} = inputs;\n  const {transposeA, transposeB, activation, leakyreluAlpha} = attrs;\n\n  let current;\n  let addRes;\n  let activationRes;\n\n  const intermediates: TensorInfo[] = [];\n\n  const matMulRes =\n      batchMatMul({inputs: {a, b}, attrs: {transposeA, transposeB}, backend});\n  current = matMulRes;\n\n  if (bias) {\n    addRes = add({inputs: {a: current, b: bias}, backend}) as TensorInfo;\n    intermediates.push(current);\n    current = addRes;\n  }\n  if (activation) {\n    activationRes = applyActivation(\n        backend, current, activation, preluActivationWeights, leakyreluAlpha);\n    intermediates.push(current);\n    current = activationRes;\n  }\n\n  for (const i of intermediates) {\n    backend.disposeIntermediateTensorInfo(i);\n  }\n\n  return current;\n}\n\nexport const _fusedMatMulConfig: KernelConfig = {\n  kernelName: _FusedMatMul,\n  backendName: 'cpu',\n  kernelFunc: _fusedMatMul as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}