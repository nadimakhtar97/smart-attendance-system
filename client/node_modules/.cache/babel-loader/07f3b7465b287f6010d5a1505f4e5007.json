{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { DepthwiseConv2dNative } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Depthwise 2D convolution.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction depthwiseConv2d_(x, filter, strides, pad) {\n  let dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NHWC';\n  let dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  let dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, () => `Error in depthwiseConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);\n  util.assert($filter.rank === 4, () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);\n  util.assert(x4D.shape[3] === $filter.shape[2], () => `Error in depthwiseConv2d: number of input channels ` + `(${x4D.shape[3]}) must match the inChannels dimension in ` + `filter ${$filter.shape[2]}.`);\n  conv_util.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);\n  const inputs = {\n    x: x4D,\n    filter: $filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(DepthwiseConv2dNative, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const depthwiseConv2d = op({\n  depthwiseConv2d_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,qBAAR,QAA6F,iBAA7F;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,SAASC,gBAAT,CACIC,CADJ,EACqBC,MADrB,EAEIC,OAFJ,EAGIC,GAHJ,EAM4C;AAAA,MAFxCC,UAEwC,uEAFZ,MAEY;AAAA,MADxCC,SACwC,uEADH,CAAC,CAAD,EAAI,CAAJ,CACG;AAAA,MAAxCC,eAAwC;AAC1C,QAAMC,EAAE,GAAGb,eAAe,CAACM,CAAD,EAAI,GAAJ,EAAS,iBAAT,EAA4B,SAA5B,CAA1B;AACA,QAAMQ,OAAO,GACTd,eAAe,CAACO,MAAD,EAAS,QAAT,EAAmB,iBAAnB,EAAsC,SAAtC,CADnB;AAGA,MAAIQ,GAAG,GAAGF,EAAV;AACA,MAAIG,YAAY,GAAG,KAAnB;;AACA,MAAIH,EAAE,CAACI,IAAH,KAAY,CAAhB,EAAmB;AACjBD,gBAAY,GAAG,IAAf;AACAD,OAAG,GAAGX,OAAO,CAACS,EAAD,EAAK,CAAC,CAAD,EAAIA,EAAE,CAACK,KAAH,CAAS,CAAT,CAAJ,EAAiBL,EAAE,CAACK,KAAH,CAAS,CAAT,CAAjB,EAA8BL,EAAE,CAACK,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAb;AACD;;AACDjB,MAAI,CAACkB,MAAL,CACIJ,GAAG,CAACE,IAAJ,KAAa,CADjB,EAEI,MAAM,6DACF,QAAQF,GAAG,CAACE,IAAI,GAHxB;AAIAhB,MAAI,CAACkB,MAAL,CACIL,OAAO,CAACG,IAAR,KAAiB,CADrB,EAEI,MAAM,mEACF,GAAGH,OAAO,CAACG,IAAI,GAHvB;AAIAhB,MAAI,CAACkB,MAAL,CACIJ,GAAG,CAACG,KAAJ,CAAU,CAAV,MAAiBJ,OAAO,CAACI,KAAR,CAAc,CAAd,CADrB,EAEI,MAAM,wDACF,IAAIH,GAAG,CAACG,KAAJ,CAAU,CAAV,CAAY,2CADd,GAEF,UAAUJ,OAAO,CAACI,KAAR,CAAc,CAAd,CAAgB,GAJlC;AAKAhB,WAAS,CAACkB,yBAAV,CAAoC,iBAApC,EAAuDX,GAAvD,EAA4DG,eAA5D;AACA,QAAMS,MAAM,GAAgC;AAACf,KAAC,EAAES,GAAJ;AAASR,UAAM,EAAEO;AAAjB,GAA5C;AACA,QAAMQ,KAAK,GACP;AAACd,WAAD;AAAUC,OAAV;AAAeC,cAAf;AAA2BC,aAA3B;AAAsCC;AAAtC,GADJ,CA1B0C,CA6B1C;;AACA,QAAMW,GAAG,GAAGzB,MAAM,CAAC0B,SAAP,CACIzB,qBADJ,EAC2BsB,MAD3B,EAEIC,KAFJ,CAAZ;;AAIA,MAAIN,YAAJ,EAAkB;AAChB,WAAOZ,OAAO,CAACmB,GAAD,EAAM,CAACA,GAAG,CAACL,KAAJ,CAAU,CAAV,CAAD,EAAeK,GAAG,CAACL,KAAJ,CAAU,CAAV,CAAf,EAA6BK,GAAG,CAACL,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD;;AACD,SAAOK,GAAP;AACD;;AAED,OAAO,MAAME,eAAe,GAAGtB,EAAE,CAAC;AAACE;AAAD,CAAD,CAA1B","names":["ENGINE","DepthwiseConv2dNative","convertToTensor","util","conv_util","op","reshape","depthwiseConv2d_","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$x","$filter","x4D","reshapedTo4D","rank","shape","assert","checkPadOnDimRoundingMode","inputs","attrs","res","runKernel","depthwiseConv2d"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/depthwise_conv2d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Depthwise 2D convolution.\n *\n * Given a 4D `input` array and a `filter` array of shape\n * `[filterHeight, filterWidth, inChannels, channelMultiplier]` containing\n * `inChannels` convolutional filters of depth 1, this op applies a\n * different filter to each input channel (expanding from 1 channel to\n * `channelMultiplier` channels for each), then concatenates the results\n * together. The output has `inChannels * channelMultiplier` channels.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/depthwise_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction depthwiseConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'depthwiseConv2d', 'float32');\n  const $filter =\n      convertToTensor(filter, 'filter', 'depthwiseConv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in depthwiseConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in depthwiseConv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  util.assert(\n      x4D.shape[3] === $filter.shape[2],\n      () => `Error in depthwiseConv2d: number of input channels ` +\n          `(${x4D.shape[3]}) must match the inChannels dimension in ` +\n          `filter ${$filter.shape[2]}.`);\n  conv_util.checkPadOnDimRoundingMode('depthwiseConv2d', pad, dimRoundingMode);\n  const inputs: DepthwiseConv2dNativeInputs = {x: x4D, filter: $filter};\n  const attrs: DepthwiseConv2dNativeAttrs =\n      {strides, pad, dataFormat, dilations, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  DepthwiseConv2dNative, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const depthwiseConv2d = op({depthwiseConv2d_});\n"]},"metadata":{},"sourceType":"module"}