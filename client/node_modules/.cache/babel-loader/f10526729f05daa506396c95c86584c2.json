{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class TileProgram {\n  constructor(aShape, reps) {\n    this.variableNames = ['A'];\n    const outputShape = new Array(aShape.length);\n\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n\n}\n\nfunction getSourceCoords(aShape) {\n  const rank = aShape.length;\n\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n  const sourceCoords = [];\n\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n\n  return sourceCoords.join();\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAOC,WAAP,CAAkB;AAMtBC,cAAYC,MAAZ,EAA8BC,IAA9B,EAA4C;AAL5C,yBAAgB,CAAC,GAAD,CAAhB;AAME,UAAMC,WAAW,GAAa,IAAIC,KAAJ,CAAUH,MAAM,CAACI,MAAjB,CAA9B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACE,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AAC3CH,iBAAW,CAACG,CAAD,CAAX,GAAiBL,MAAM,CAACK,CAAD,CAAN,GAAYJ,IAAI,CAACI,CAAD,CAAjC;AACD;;AACD,SAAKH,WAAL,GAAmBA,WAAnB;AACA,SAAKI,IAAL,GAAYJ,WAAW,CAACE,MAAxB;AACA,UAAMG,KAAK,GAAGV,iBAAiB,CAAC,KAAKS,IAAN,CAA/B;AACA,UAAME,YAAY,GAAGC,eAAe,CAACT,MAAD,CAApC;AAEA,SAAKU,QAAL,GAAgB;;UAEVH,KAAK;yBACUC,YAAY;;KAHjC;AAMD;;AAtBqB;;AAyBxB,SAASC,eAAT,CAAyBT,MAAzB,EAAyC;AACvC,QAAMM,IAAI,GAAGN,MAAM,CAACI,MAApB;;AACA,MAAIE,IAAI,GAAG,CAAX,EAAc;AACZ,UAAMK,KAAK,CAAC,iBAAiBL,IAAI,uBAAtB,CAAX;AACD;;AACD,MAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,WAAO,eAAeN,MAAM,CAAC,CAAD,CAAG,GAA/B;AACD;;AAED,QAAMY,aAAa,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,SAAvB,EAAkC,SAAlC,EAA6C,SAA7C,CAAtB;AAEA,QAAMJ,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,MAAM,CAACI,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtCG,gBAAY,CAACK,IAAb,CAAkB,QAAQD,aAAa,CAACP,CAAD,CAAG,KAAKL,MAAM,CAACK,CAAD,CAAG,GAAxD;AACD;;AACD,SAAOG,YAAY,CAACM,IAAb,EAAP;AACD","names":["getCoordsDataType","TileProgram","constructor","aShape","reps","outputShape","Array","length","i","rank","dtype","sourceCoords","getSourceCoords","userCode","Error","currentCoords","push","join"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/tile_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TileProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n\n  constructor(aShape: number[], reps: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[i] * reps[i];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    const dtype = getCoordsDataType(this.rank);\n    const sourceCoords = getSourceCoords(aShape);\n\n    this.userCode = `\n      void main() {\n        ${dtype} resRC = getOutputCoords();\n        setOutput(getA(${sourceCoords}));\n      }\n    `;\n  }\n}\n\nfunction getSourceCoords(aShape: number[]): string {\n  const rank = aShape.length;\n  if (rank > 5) {\n    throw Error(`Tile for rank ${rank} is not yet supported`);\n  }\n  if (rank === 1) {\n    return `imod(resRC, ${aShape[0]})`;\n  }\n\n  const currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w', 'resRC.u'];\n\n  const sourceCoords = [];\n  for (let i = 0; i < aShape.length; i++) {\n    sourceCoords.push(`imod(${currentCoords[i]}, ${aShape[i]})`);\n  }\n  return sourceCoords.join();\n}\n"]},"metadata":{},"sourceType":"module"}