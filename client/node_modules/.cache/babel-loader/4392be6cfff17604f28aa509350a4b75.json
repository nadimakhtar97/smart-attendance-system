{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, isInt } from '../util';\nimport { op } from './operation';\n/**\n * Computes the sum along segments of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\n * const numSegments = 3;\n *\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n * ```\n * @param x The `tf.Tensor` that will be summed along its segments.\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\n * dimension along the `axis`.  Maps each element of `x` to a segment.\n * @param numSegments The number of distinct `segmentIds`.\n *\n * @doc {heading: 'Operations', subheading: 'Segment'}\n */\n\nfunction unsortedSegmentSum_(x, segmentIds, numSegments) {\n  const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');\n  const $segmentIds = convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');\n  assert(isInt(numSegments), () => 'numSegments must be of dtype int');\n  const inputs = {\n    x: $x,\n    segmentIds: $segmentIds\n  };\n  const attrs = {\n    numSegments\n  };\n  return ENGINE.runKernel(UnsortedSegmentSum, inputs, attrs);\n}\n\nexport const unsortedSegmentSum = op({\n  unsortedSegmentSum_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,kBAAR,QAAoF,iBAApF;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,SAAQC,MAAR,EAAgBC,KAAhB,QAA4B,SAA5B;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,SAASC,mBAAT,CACIC,CADJ,EACqBC,UADrB,EACsDC,WADtD,EACyE;AACvE,QAAMC,EAAE,GAAGR,eAAe,CAACK,CAAD,EAAI,GAAJ,EAAS,oBAAT,CAA1B;AACA,QAAMI,WAAW,GACbT,eAAe,CAACM,UAAD,EAAa,YAAb,EAA2B,oBAA3B,EAAiD,OAAjD,CADnB;AAEAL,QAAM,CAACC,KAAK,CAACK,WAAD,CAAN,EAAqB,MAAM,kCAA3B,CAAN;AAEA,QAAMG,MAAM,GAA6B;AAACL,KAAC,EAAEG,EAAJ;AAAQF,cAAU,EAAEG;AAApB,GAAzC;AACA,QAAME,KAAK,GAA4B;AAACJ;AAAD,GAAvC;AAEA,SAAOT,MAAM,CAACc,SAAP,CACHb,kBADG,EACiBW,MADjB,EAEHC,KAFG,CAAP;AAGD;;AAED,OAAO,MAAME,kBAAkB,GAAGV,EAAE,CAAC;AAACC;AAAD,CAAD,CAA7B","names":["ENGINE","UnsortedSegmentSum","convertToTensor","assert","isInt","op","unsortedSegmentSum_","x","segmentIds","numSegments","$x","$segmentIds","inputs","attrs","runKernel","unsortedSegmentSum"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/unsorted_segment_sum.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {UnsortedSegmentSum, UnsortedSegmentSumAttrs, UnsortedSegmentSumInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor1D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, isInt} from '../util';\n\nimport {op} from './operation';\n\n/**\n * Computes the sum along segments of a `tf.Tensor`.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const segmentIds = tf.tensor1d([1, 2, 0, 1], 'int32');\n * const numSegments = 3;\n *\n * x.unsortedSegmentSum(segmentIds, numSegments).print()\n * //or tf.unsortedSegmentSum(x, segmentIds, numSegments)\n * ```\n * @param x The `tf.Tensor` that will be summed along its segments.\n * @param segmentIds A `tf.Tensor1D` whose rank is equal to the rank of `x`'s\n * dimension along the `axis`.  Maps each element of `x` to a segment.\n * @param numSegments The number of distinct `segmentIds`.\n *\n * @doc {heading: 'Operations', subheading: 'Segment'}\n */\nfunction unsortedSegmentSum_<T extends Tensor>(\n    x: T|TensorLike, segmentIds: Tensor1D|TensorLike, numSegments: number): T {\n  const $x = convertToTensor(x, 'x', 'unsortedSegmentSum');\n  const $segmentIds =\n      convertToTensor(segmentIds, 'segmentIds', 'unsortedSegmentSum', 'int32');\n  assert(isInt(numSegments), () => 'numSegments must be of dtype int');\n\n  const inputs: UnsortedSegmentSumInputs = {x: $x, segmentIds: $segmentIds};\n  const attrs: UnsortedSegmentSumAttrs = {numSegments};\n\n  return ENGINE.runKernel(\n      UnsortedSegmentSum, inputs as {} as NamedTensorMap,\n      attrs as {} as NamedAttrMap);\n}\n\nexport const unsortedSegmentSum = op({unsortedSegmentSum_});\n"]},"metadata":{},"sourceType":"module"}