{"ast":null,"code":"var _jsxFileName = \"/home/nadimakhtar97/smart-attendance-system/client/src/Components/StudentRegister/StudentRegisterThree.js\",\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useState, useRef } from 'react';\nimport { Formik, Form } from 'formik';\nimport Webcam from \"react-webcam\";\nimport FormikControl from '../FormikControl/FormikControl';\nimport * as Yup from 'yup';\nimport { Button, Center, Flex, Box, Image, VStack, Heading, CircularProgress } from '@chakra-ui/react';\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StudentRegisterThree(props) {\n  _s();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [result, setResult] = useState();\n  const webcamRef = useRef(null);\n  const [image, setImage] = useState([]);\n\n  function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  const validationSchema = Yup.object({\n    studentImage: Yup.string().required('student image is required')\n  });\n  const videoConstraints = {\n    width: 720,\n    height: 360,\n    facingMode: \"user\"\n  };\n  const capture = useCallback(async () => {\n    try {\n      setIsLoading(true);\n      const imageSrc = [];\n\n      for (let i = 0; i < 100; i++) {\n        imageSrc.push(webcamRef.current.getScreenshot());\n        await sleep(100);\n      }\n\n      setImage(imageSrc);\n      const response = axios.post('http://localhost:5000/img', {\n        \"base64Images\": imageSrc,\n        \"rollNo\": props.data.rollNo\n      });\n      console.log(response);\n      setResult( /*#__PURE__*/_jsxDEV(Heading, {\n        size: \"md\",\n        children: \"Image capturing process has been completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 27\n      }, this));\n      setIsLoading(false);\n    } catch (error) {\n      setIsLoading(false);\n      console.log(error);\n    }\n  }, [webcamRef]);\n\n  const handleSubmit = values => {\n    props.next(values, true);\n    setResult( /*#__PURE__*/_jsxDEV(Link, {\n      to: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 19\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(Formik, {\n    initialValues: props.data,\n    onSubmit: handleSubmit,\n    children: formik => {\n      return /*#__PURE__*/_jsxDEV(Center, {\n        children: /*#__PURE__*/_jsxDEV(Form, {\n          style: {\n            \"width\": \"40vw\",\n            \"marginTop\": \"100px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(Flex, {\n            direction: \"column\",\n            alignItems: \"center\",\n            children: [/*#__PURE__*/_jsxDEV(Webcam, {\n              mirrored: true,\n              ref: webcamRef,\n              screenshotFormat: \"image/jpeg\",\n              screenshotQuality: 1,\n              height: 360,\n              width: 720,\n              videoConstraints: videoConstraints\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              size: \"md\",\n              width: \"30%\",\n              mt: \"40px\",\n              colorScheme: \"twitter\",\n              onClick: () => {\n                capture();\n              },\n              children: \"Capture\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Box, {\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => props.prev(formik.values),\n                size: \"md\",\n                width: \"fit-content\",\n                mt: \"30px\",\n                mr: \"20px\",\n                colorScheme: \"twitter\",\n                type: \"button\",\n                children: \"Back\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                size: \"md\",\n                width: \"fit-content\",\n                mt: \"30px\",\n                colorScheme: \"twitter\",\n                type: \"submit\",\n                children: \"Submit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this), isLoading ? /*#__PURE__*/_jsxDEV(VStack, {\n            children: [/*#__PURE__*/_jsxDEV(Center, {\n              m: \"20px\",\n              children: /*#__PURE__*/_jsxDEV(Heading, {\n                size: \"md\",\n                children: \"Please wait !! image capturing is in process\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 45\n            }, this), /*#__PURE__*/_jsxDEV(Center, {\n              children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n                isIndeterminate: true,\n                color: \"twitter.500\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 49\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 45\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 41\n          }, this) : /*#__PURE__*/_jsxDEV(Center, {\n            mt: \"20px\",\n            children: \"Image capturing process is complete you can submit the form.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 41\n          }, this), !isLoading ? /*#__PURE__*/_jsxDEV(Center, {\n            mt: \"20px\",\n            children: result\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 47\n          }, this) : null]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 25\n      }, this);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StudentRegisterThree, \"x4e/F50l0+DVSpP09n3AYDXGGTs=\");\n\n_c = StudentRegisterThree;\nexport default StudentRegisterThree;\n\nvar _c;\n\n$RefreshReg$(_c, \"StudentRegisterThree\");","map":{"version":3,"sources":["/home/nadimakhtar97/smart-attendance-system/client/src/Components/StudentRegister/StudentRegisterThree.js"],"names":["React","useCallback","useState","useRef","Formik","Form","Webcam","FormikControl","Yup","Button","Center","Flex","Box","Image","VStack","Heading","CircularProgress","axios","Link","StudentRegisterThree","props","isLoading","setIsLoading","result","setResult","webcamRef","image","setImage","sleep","ms","Promise","resolve","setTimeout","validationSchema","object","studentImage","string","required","videoConstraints","width","height","facingMode","capture","imageSrc","i","push","current","getScreenshot","response","post","data","rollNo","console","log","error","handleSubmit","values","next","formik","prev"],"mappings":"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","sourcesContent":["import React, { useCallback, useState, useRef } from 'react';\nimport { Formik, Form } from 'formik'\nimport Webcam from \"react-webcam\";\nimport FormikControl from '../FormikControl/FormikControl'\nimport * as Yup from 'yup'\nimport { Button, Center, Flex, Box, Image, VStack, Heading, CircularProgress } from '@chakra-ui/react'\nimport axios from 'axios';\nimport { Link } from 'react-router-dom';\n\n\nfunction StudentRegisterThree(props) {\n\n    const [isLoading, setIsLoading] = useState(false)\n    const [result, setResult] = useState()\n    const webcamRef = useRef(null);\n    const [image, setImage] = useState([])\n\n    function sleep(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n\n\n\n\n    const validationSchema = Yup.object({\n        studentImage: Yup.string().required('student image is required')\n    })\n\n\n    const videoConstraints = {\n        width: 720,\n        height: 360,\n        facingMode: \"user\"\n    };\n\n    const capture = useCallback(\n\n        async () => {\n            try {\n                setIsLoading(true)\n                const imageSrc = []\n                for (let i = 0; i < 100; i++) {\n                    imageSrc.push(webcamRef.current.getScreenshot())\n                    await sleep(100)\n                }\n                setImage(imageSrc);\n                const response = axios.post('http://localhost:5000/img', { \"base64Images\": imageSrc, \"rollNo\": props.data.rollNo })\n                console.log(response)\n                setResult(<Heading size='md'>Image capturing process has been completed</Heading>)\n                setIsLoading(false);\n\n            } catch (error) {\n                setIsLoading(false);\n                console.log(error)\n            }\n\n        },\n        [webcamRef]\n    );\n\n\n    const handleSubmit = values => {\n        props.next(values, true)\n        setResult(<Link to=''></Link>)\n    }\n\n    return (\n        <Formik initialValues={props.data} onSubmit={handleSubmit}>\n            {\n                (formik) => {\n                    return (\n                        <Center>\n                            <Form style={{ \"width\": \"40vw\", \"marginTop\": \"100px\" }}>\n                                <Flex direction='column' alignItems='center'>\n                                    <Webcam\n                                        mirrored={true}\n                                        ref={webcamRef}\n                                        screenshotFormat=\"image/jpeg\"\n                                        screenshotQuality={1}\n                                        height={360}\n                                        width={720}\n                                        videoConstraints={videoConstraints}\n                                    ></Webcam>\n                                    <Button size='md' width='30%' mt='40px' colorScheme='twitter' onClick={() => { capture() }}>Capture</Button>\n                                    <Box>\n                                        <Button onClick={() => props.prev(formik.values)} size='md' width='fit-content' mt=\"30px\" mr='20px' colorScheme=\"twitter\" type=\"button\">Back</Button>\n                                        <Button size='md' width='fit-content' mt=\"30px\" colorScheme=\"twitter\" type='submit'>Submit</Button>\n                                    </Box>\n                                </Flex>\n                                {\n                                    isLoading ? (\n                                        <VStack>\n                                            <Center m='20px'>\n                                                <Heading size='md'>Please wait !! image capturing is in process</Heading>\n                                            </Center>\n                                            <Center>\n                                                <CircularProgress isIndeterminate color='twitter.500' />\n                                            </Center>\n                                        </VStack>\n\n                                    ) : <Center mt='20px'>\n                                        Image capturing process is complete you can submit the form.\n                                    </Center>\n                                }\n\n                                {!isLoading ? <Center mt='20px'>\n                                    {result}\n                                </Center> : null}\n\n\n                            </Form>\n                        </Center>\n                    )\n                }\n            }\n        </Formik>\n    )\n}\n\nexport default StudentRegisterThree"]},"metadata":{},"sourceType":"module"}