{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nimport { packedReshape } from '../kernel_utils/reshape';\nimport { isReshapeFree } from '../webgl_util';\nexport function reshape(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const webglBackend = backend;\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n  util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` + `shape (${x.shape}) has ${xSize} elements. The new shape and old ` + `shape must have the same number of elements.`);\n  const xTexData = webglBackend.texData.get(x.dataId);\n\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) && !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n  return {\n    dataId: x.dataId,\n    shape: $shape,\n    dtype: x.dtype\n  };\n}\nexport const reshapeConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAlC,EAAoFC,IAApF,QAA+F,uBAA/F;AAGA,SAAQC,aAAR,QAA4B,yBAA5B;AACA,SAAQC,aAAR,QAA4B,eAA5B;AAEA,OAAM,SAAUC,OAAV,CAAkBC,IAAlB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI;AAAD,MAAUF,KAAhB;AACA,QAAMG,YAAY,GAAGJ,OAArB;AAEA,QAAMK,KAAK,GAAGX,IAAI,CAACY,aAAL,CAAmBJ,CAAC,CAACC,KAArB,CAAd;AACA,QAAMI,MAAM,GAAGb,IAAI,CAACc,sBAAL,CAA4BL,KAA5B,EAAmCE,KAAnC,CAAf;AACA,QAAMI,MAAM,GAAGf,IAAI,CAACY,aAAL,CAAmBC,MAAnB,CAAf;AAEAb,MAAI,CAACgB,MAAL,CACIL,KAAK,KAAKI,MADd,EAEI,MAAM,kBAAkBF,MAAM,SAASE,MAAM,wBAAvC,GACF,UAAUP,CAAC,CAACC,KAAK,SAASE,KAAK,mCAD7B,GAEF,8CAJR;AAMA,QAAMM,QAAQ,GAAGP,YAAY,CAACQ,OAAb,CAAqBC,GAArB,CAAyBX,CAAC,CAACY,MAA3B,CAAjB;;AACA,MAAIH,QAAQ,CAACI,QAAT,IAAqB,CAACnB,aAAa,CAACM,CAAC,CAACC,KAAH,EAAUI,MAAV,CAAnC,IACA,EAAEI,QAAQ,CAACK,OAAT,KAAqB,IAArB,IAA6BpB,aAAa,CAACe,QAAQ,CAACR,KAAV,EAAiBI,MAAjB,CAA5C,CADJ,EAC2E;AACzE,WAAOZ,aAAa,CAACO,CAAD,EAAIK,MAAJ,EAAYH,YAAZ,CAApB;AACD;;AAEDA,cAAY,CAACa,MAAb,CAAoBf,CAAC,CAACY,MAAtB;AAEA,SAAO;AAACA,UAAM,EAAEZ,CAAC,CAACY,MAAX;AAAmBX,SAAK,EAAEI,MAA1B;AAAkCW,SAAK,EAAEhB,CAAC,CAACgB;AAA3C,GAAP;AACD;AAED,OAAO,MAAMC,aAAa,GAAiB;AACzCC,YAAU,EAAE3B,OAD6B;AAEzC4B,aAAW,EAAE,OAF4B;AAGzCC,YAAU,EAAEzB;AAH6B,CAApC","names":["Reshape","util","packedReshape","isReshapeFree","reshape","args","inputs","backend","attrs","x","shape","webglBackend","xSize","sizeFromShape","$shape","inferFromImplicitShape","$xSize","assert","xTexData","texData","get","dataId","isPacked","texture","incRef","dtype","reshapeConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Reshape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reshape, ReshapeAttrs, ReshapeInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {packedReshape} from '../kernel_utils/reshape';\nimport {isReshapeFree} from '../webgl_util';\n\nexport function reshape(args: {\n  inputs: ReshapeInputs,\n  backend: MathBackendWebGL,\n  attrs: ReshapeAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {shape} = attrs;\n  const webglBackend = backend;\n\n  const xSize = util.sizeFromShape(x.shape);\n  const $shape = util.inferFromImplicitShape(shape, xSize);\n  const $xSize = util.sizeFromShape($shape);\n\n  util.assert(\n      xSize === $xSize,\n      () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n          `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n          `shape must have the same number of elements.`);\n\n  const xTexData = webglBackend.texData.get(x.dataId);\n  if (xTexData.isPacked && !isReshapeFree(x.shape, $shape) &&\n      !(xTexData.texture !== null && isReshapeFree(xTexData.shape, $shape))) {\n    return packedReshape(x, $shape, webglBackend);\n  }\n\n  webglBackend.incRef(x.dataId);\n\n  return {dataId: x.dataId, shape: $shape, dtype: x.dtype};\n}\n\nexport const reshapeConfig: KernelConfig = {\n  kernelName: Reshape,\n  backendName: 'webgl',\n  kernelFunc: reshape as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}