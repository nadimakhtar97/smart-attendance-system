{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\n * allows inserting duplicate value, in which case, the element will be inserted\n * at the lowest index of the value.\n * @param arr The array to modify.\n * @param element The element to insert.\n * @param comparator Optional. If no comparator is specified, elements are\n * compared using array_util.defaultComparator, which is suitable for Strings\n * and Numbers in ascending arrays. If the array contains multiple instances of\n * the target value, the left-most instance will be returned. To provide a\n * comparator, it should take 2 arguments to compare and return a negative,\n * zero, or a positive number.\n */\nexport function binaryInsert(arr, element, comparator) {\n  const index = binarySearch(arr, element, comparator);\n  const insertionPoint = index < 0 ? -(index + 1) : index;\n  arr.splice(insertionPoint, 0, element);\n}\n/**\n * Searches the array for the target using binary search, returns the index\n * of the found element, or position to insert if element not found. If no\n * comparator is specified, elements are compared using array_\n * util.defaultComparator, which is suitable for Strings and Numbers in\n * ascending arrays. If the array contains multiple instances of the target\n * value, the left-most instance will be returned.\n * @param arr The array to be searched in.\n * @param target The target to be searched for.\n * @param comparator Should take 2 arguments to compare and return a negative,\n *    zero, or a positive number.\n * @return Lowest index of the target value if found, otherwise the insertion\n *    point where the target should be inserted, in the form of\n *    (-insertionPoint - 1).\n */\n\nexport function binarySearch(arr, target, comparator) {\n  return binarySearch_(arr, target, comparator || defaultComparator);\n}\n/**\n * Compares its two arguments for order.\n * @param a The first element to be compared.\n * @param b The second element to be compared.\n * @return A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\n\nfunction defaultComparator(a, b) {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction binarySearch_(arr, target, comparator) {\n  let left = 0;\n  let right = arr.length;\n  let middle = 0;\n  let found = false;\n\n  while (left < right) {\n    middle = left + (right - left >>> 1);\n    const compareResult = comparator(target, arr[middle]);\n\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle; // If compareResult is 0, the value is found. We record it is found,\n      // and then keep looking because there may be duplicate.\n\n      found = !compareResult;\n    }\n  }\n\n  return found ? left : -left - 1;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;AAaA,OAAM,SAAUA,YAAV,CACFC,GADE,EACQC,OADR,EACoBC,UADpB,EACuD;AAC3D,QAAMC,KAAK,GAAGC,YAAY,CAACJ,GAAD,EAAMC,OAAN,EAAeC,UAAf,CAA1B;AACA,QAAMG,cAAc,GAAGF,KAAK,GAAG,CAAR,GAAY,EAAEA,KAAK,GAAG,CAAV,CAAZ,GAA2BA,KAAlD;AACAH,KAAG,CAACM,MAAJ,CAAWD,cAAX,EAA2B,CAA3B,EAA8BJ,OAA9B;AACD;AAED;;;;;;;;;;;;;;;;AAeA,OAAM,SAAUG,YAAV,CACFJ,GADE,EACQO,MADR,EACmBL,UADnB,EACsD;AAC1D,SAAOM,aAAa,CAACR,GAAD,EAAMO,MAAN,EAAcL,UAAU,IAAIO,iBAA5B,CAApB;AACD;AAED;;;;;;;;AAOA,SAASA,iBAAT,CAA8BC,CAA9B,EAAoCC,CAApC,EAAwC;AACtC,SAAOD,CAAC,GAAGC,CAAJ,GAAQ,CAAR,GAAYD,CAAC,GAAGC,CAAJ,GAAQ,CAAC,CAAT,GAAa,CAAhC;AACD;;AAED,SAASH,aAAT,CACIR,GADJ,EACcO,MADd,EACyBL,UADzB,EAC2D;AACzD,MAAIU,IAAI,GAAG,CAAX;AACA,MAAIC,KAAK,GAAGb,GAAG,CAACc,MAAhB;AACA,MAAIC,MAAM,GAAG,CAAb;AACA,MAAIC,KAAK,GAAG,KAAZ;;AACA,SAAOJ,IAAI,GAAGC,KAAd,EAAqB;AACnBE,UAAM,GAAGH,IAAI,IAAKC,KAAK,GAAGD,IAAT,KAAmB,CAAvB,CAAb;AACA,UAAMK,aAAa,GAAGf,UAAU,CAACK,MAAD,EAASP,GAAG,CAACe,MAAD,CAAZ,CAAhC;;AACA,QAAIE,aAAa,GAAG,CAApB,EAAuB;AACrBL,UAAI,GAAGG,MAAM,GAAG,CAAhB;AACD,KAFD,MAEO;AACLF,WAAK,GAAGE,MAAR,CADK,CAEL;AACA;;AACAC,WAAK,GAAG,CAACC,aAAT;AACD;AACF;;AAED,SAAOD,KAAK,GAAGJ,IAAH,GAAU,CAACA,IAAD,GAAQ,CAA9B;AACD","names":["binaryInsert","arr","element","comparator","index","binarySearch","insertionPoint","splice","target","binarySearch_","defaultComparator","a","b","left","right","length","middle","found","compareResult"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/backends/non_max_suppression_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Inserts a value into a sorted array. This method allows duplicate, meaning it\n * allows inserting duplicate value, in which case, the element will be inserted\n * at the lowest index of the value.\n * @param arr The array to modify.\n * @param element The element to insert.\n * @param comparator Optional. If no comparator is specified, elements are\n * compared using array_util.defaultComparator, which is suitable for Strings\n * and Numbers in ascending arrays. If the array contains multiple instances of\n * the target value, the left-most instance will be returned. To provide a\n * comparator, it should take 2 arguments to compare and return a negative,\n * zero, or a positive number.\n */\nexport function binaryInsert<T>(\n    arr: T[], element: T, comparator?: (a: T, b: T) => number) {\n  const index = binarySearch(arr, element, comparator);\n  const insertionPoint = index < 0 ? -(index + 1) : index;\n  arr.splice(insertionPoint, 0, element);\n}\n\n/**\n * Searches the array for the target using binary search, returns the index\n * of the found element, or position to insert if element not found. If no\n * comparator is specified, elements are compared using array_\n * util.defaultComparator, which is suitable for Strings and Numbers in\n * ascending arrays. If the array contains multiple instances of the target\n * value, the left-most instance will be returned.\n * @param arr The array to be searched in.\n * @param target The target to be searched for.\n * @param comparator Should take 2 arguments to compare and return a negative,\n *    zero, or a positive number.\n * @return Lowest index of the target value if found, otherwise the insertion\n *    point where the target should be inserted, in the form of\n *    (-insertionPoint - 1).\n */\nexport function binarySearch<T>(\n    arr: T[], target: T, comparator?: (a: T, b: T) => number) {\n  return binarySearch_(arr, target, comparator || defaultComparator);\n}\n\n/**\n * Compares its two arguments for order.\n * @param a The first element to be compared.\n * @param b The second element to be compared.\n * @return A negative number, zero, or a positive number as the first\n *     argument is less than, equal to, or greater than the second.\n */\nfunction defaultComparator<T>(a: T, b: T): number {\n  return a > b ? 1 : a < b ? -1 : 0;\n}\n\nfunction binarySearch_<T>(\n    arr: T[], target: T, comparator: (a: T, b: T) => number) {\n  let left = 0;\n  let right = arr.length;\n  let middle = 0;\n  let found = false;\n  while (left < right) {\n    middle = left + ((right - left) >>> 1);\n    const compareResult = comparator(target, arr[middle]);\n    if (compareResult > 0) {\n      left = middle + 1;\n    } else {\n      right = middle;\n      // If compareResult is 0, the value is found. We record it is found,\n      // and then keep looking because there may be duplicate.\n      found = !compareResult;\n    }\n  }\n\n  return found ? left : -left - 1;\n}\n"]},"metadata":{},"sourceType":"module"}