{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction conv1d_(x, filter, stride, pad) {\n  let dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NWC';\n  let dilation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 1;\n  let dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  const $x = convertToTensor(x, 'x', 'conv1d');\n  const $filter = convertToTensor(filter, 'filter', 'conv1d');\n  let x3D = $x;\n  let reshapedTo3D = false;\n\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n  }\n\n  util.assert(x3D.rank === 3, () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n  util.assert($filter.rank === 3, () => `Error in conv1d: filter must be rank 3, but got rank ` + `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('conv1d', pad, dimRoundingMode);\n  util.assert(x3D.shape[2] === $filter.shape[1], () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` + `input depth for filter ${$filter.shape[1]}.`);\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(stride, dilation), () => 'Error in conv1D: Either stride or dilation must be 1. ' + `Got stride ${stride} and dilation '${dilation}'`);\n  util.assert(dataFormat === 'NWC', () => `Error in conv1d: got dataFormat of ${dataFormat} but only NWC is currently supported.`);\n  const filter4D = reshape($filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n  const input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n  const strides = [1, stride];\n  const dilations = [1, dilation];\n  const conv2dDataFormat = 'NHWC';\n  const res = conv2d(input4D, filter4D, strides, pad, conv2dDataFormat, dilations, dimRoundingMode);\n\n  if (reshapedTo3D) {\n    return reshape(res, [res.shape[2], res.shape[3]]);\n  }\n\n  return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]);\n}\n\nexport const conv1d = op({\n  conv1d_\n});","map":{"version":3,"mappings":"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","names":["convertToTensor","util","conv2d","conv_util","op","reshape","conv1d_","x","filter","stride","pad","dataFormat","dilation","dimRoundingMode","$x","$filter","x3D","reshapedTo3D","rank","shape","assert","checkPadOnDimRoundingMode","eitherStridesOrDilationsAreOne","filter4D","input4D","strides","dilations","conv2dDataFormat","res","conv1d"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/conv1d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor2D, Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {conv2d} from './conv2d';\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 1D convolution over the input x.\n *\n * @param x The input tensor, of rank 3 or rank 2, of shape\n *     `[batch, width, inChannels]`. If rank 2, batch of 1 is assumed.\n * @param filter The filter, rank 3, of shape\n *     `[filterWidth, inDepth, outDepth]`.\n * @param stride The number of entries by which the filter is moved right at\n *     each step.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat An optional string from \"NWC\", \"NCW\". Defaults to \"NWC\",\n *     the data is stored in the order of [batch, in_width, in_channels]. Only\n *     \"NWC\" is currently supported.\n * @param dilation The dilation rate in which we sample input values in\n *     atrous convolution. Defaults to `1`. If it is greater than 1, then\n *     stride must be `1`.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv1d_<T extends Tensor2D|Tensor3D>(\n    x: T|TensorLike, filter: Tensor3D|TensorLike, stride: number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NWC'|'NCW' = 'NWC', dilation = 1,\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv1d');\n  const $filter = convertToTensor(filter, 'filter', 'conv1d');\n\n  let x3D = $x as Tensor3D;\n  let reshapedTo3D = false;\n  if ($x.rank === 2) {\n    reshapedTo3D = true;\n    x3D = reshape($x, [1, $x.shape[0], $x.shape[1]]);\n  }\n\n  util.assert(\n      x3D.rank === 3,\n      () => `Error in conv1d: input must be rank 3, but got rank ${x3D.rank}.`);\n  util.assert(\n      $filter.rank === 3,\n      () => `Error in conv1d: filter must be rank 3, but got rank ` +\n          `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('conv1d', pad, dimRoundingMode);\n  util.assert(\n      x3D.shape[2] === $filter.shape[1],\n      () => `Error in conv1d: depth of input (${x3D.shape[2]}) must match ` +\n          `input depth for filter ${$filter.shape[1]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(stride, dilation),\n      () => 'Error in conv1D: Either stride or dilation must be 1. ' +\n          `Got stride ${stride} and dilation '${dilation}'`);\n  util.assert(\n      dataFormat === 'NWC',\n      () => `Error in conv1d: got dataFormat of ${\n          dataFormat} but only NWC is currently supported.`);\n\n  const filter4D = reshape(\n      $filter, [1, $filter.shape[0], $filter.shape[1], $filter.shape[2]]);\n  const input4D = reshape(x3D, [x3D.shape[0], 1, x3D.shape[1], x3D.shape[2]]);\n  const strides: [number, number] = [1, stride];\n  const dilations: [number, number] = [1, dilation];\n\n  const conv2dDataFormat = 'NHWC';\n\n  const res = conv2d(\n      (input4D as Tensor4D), (filter4D as Tensor4D), strides, pad,\n      conv2dDataFormat, dilations, dimRoundingMode);\n\n  if (reshapedTo3D) {\n    return reshape(res, [res.shape[2], res.shape[3]]) as T;\n  }\n\n  return reshape(res, [res.shape[0], res.shape[2], res.shape[3]]) as T;\n}\n\nexport const conv1d = op({conv1d_});\n"]},"metadata":{},"sourceType":"module"}