{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nexport class ResizeNearestNeighborProgram {\n  constructor(inputShape, newHeight, newWidth, alignCorners, halfPixelCenters) {\n    this.variableNames = ['A'];\n    this.outputShape = [];\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    const effectiveInSize = [alignCorners && newHeight > 1 ? oldHeight - 1 : oldHeight, alignCorners && newWidth > 1 ? oldWidth - 1 : oldWidth];\n    const effectiveOutSize = [alignCorners && newHeight > 1 ? newHeight - 1 : newHeight, alignCorners && newWidth > 1 ? newWidth - 1 : newWidth]; // When align corners is false, we rounds the value with floor.\n\n    const roundBase = alignCorners ? '0.5' : '0.0';\n    let sourceFracIndexRC;\n\n    if (halfPixelCenters) {\n      sourceFracIndexRC = `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` + `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAmBA,OAAM,MAAOA,4BAAP,CAAmC;AAKvCC,cACIC,UADJ,EACkDC,SADlD,EAEIC,QAFJ,EAEsBC,YAFtB,EAE6CC,gBAF7C,EAEsE;AANtE,yBAAgB,CAAC,GAAD,CAAhB;AACA,uBAAwB,EAAxB;AAME,UAAM,CAACC,KAAD,EAAQC,SAAR,EAAmBC,QAAnB,EAA6BC,KAA7B,IAAsCR,UAA5C;AACA,SAAKS,WAAL,GAAmB,CAACJ,KAAD,EAAQJ,SAAR,EAAmBC,QAAnB,EAA6BM,KAA7B,CAAnB;AAEA,UAAME,eAAe,GAAqB,CACvCP,YAAY,IAAIF,SAAS,GAAG,CAA7B,GAAkCK,SAAS,GAAG,CAA9C,GAAkDA,SADV,EAEvCH,YAAY,IAAID,QAAQ,GAAG,CAA5B,GAAiCK,QAAQ,GAAG,CAA5C,GAAgDA,QAFR,CAA1C;AAKA,UAAMI,gBAAgB,GAAqB,CACxCR,YAAY,IAAIF,SAAS,GAAG,CAA7B,GAAkCA,SAAS,GAAG,CAA9C,GAAkDA,SADT,EAExCE,YAAY,IAAID,QAAQ,GAAG,CAA5B,GAAiCA,QAAQ,GAAG,CAA5C,GAAgDA,QAFP,CAA3C,CAToE,CAcpE;;AACA,UAAMU,SAAS,GAAGT,YAAY,GAAG,KAAH,GAAW,KAAzC;AAEA,QAAIU,iBAAJ;;AACA,QAAIT,gBAAJ,EAAsB;AACpBS,uBAAiB,GACb,kEACA,cAFJ;AAGD,KAJD,MAIO;AACLA,uBAAiB,GAAG,6CAApB;AACD;;AACD,SAAKC,QAAL,GAAgB;;YAERJ,eAAe,CAAC,CAAD,CAAf,GAAqBC,gBAAgB,CAAC,CAAD,CAAG;YACxCD,eAAe,CAAC,CAAD,CAAf,GAAqBC,gBAAgB,CAAC,CAAD,CAAG;uCACbL,SAAS,OAAOC,QAAQ;;;;;;;;;mCAS5BM,iBAAiB;;;;8DAIUD,SAAS;;;;;KAjBnE;AAuBD;;AAvDsC","names":["ResizeNearestNeighborProgram","constructor","inputShape","newHeight","newWidth","alignCorners","halfPixelCenters","batch","oldHeight","oldWidth","depth","outputShape","effectiveInSize","effectiveOutSize","roundBase","sourceFracIndexRC","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/resize_nearest_neighbor_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class ResizeNearestNeighborProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      inputShape: [number, number, number, number], newHeight: number,\n      newWidth: number, alignCorners: boolean, halfPixelCenters: boolean) {\n    const [batch, oldHeight, oldWidth, depth] = inputShape;\n    this.outputShape = [batch, newHeight, newWidth, depth];\n\n    const effectiveInSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n      (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n\n    const effectiveOutSize: [number, number] = [\n      (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n      (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n\n    // When align corners is false, we rounds the value with floor.\n    const roundBase = alignCorners ? '0.5' : '0.0';\n\n    let sourceFracIndexRC: string;\n    if (halfPixelCenters) {\n      sourceFracIndexRC =\n          `max((vec2(yRC) + vec2(0.5)) * effectiveInputOverOutputRatioRC` +\n          `, vec2(0.0))`;\n    } else {\n      sourceFracIndexRC = `vec2(yRC) * effectiveInputOverOutputRatioRC`;\n    }\n    this.userCode = `\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\n          ${effectiveInSize[0] / effectiveOutSize[0]},\n          ${effectiveInSize[1] / effectiveOutSize[1]});\n      const vec2 inputShapeRC = vec2(${oldHeight}.0, ${oldWidth}.0);\n\n      void main() {\n        ivec4 coords = getOutputCoords();\n        int b = coords[0];\n        int d = coords[3];\n        ivec2 yRC = coords.yz;\n\n        // Fractional source index.\n        vec2 sourceFracIndexRC = ${sourceFracIndexRC};\n\n        // Compute the coordinators of nearest neighbor point.\n        ivec2 sourceNearestRC = ivec2(\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + ${roundBase})));\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\n\n        setOutput(newValue);\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}