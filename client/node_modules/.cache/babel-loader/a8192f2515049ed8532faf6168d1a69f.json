{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '../kernel_names';\nimport { add } from '../ops/add';\nimport { assertAndGetBroadcastShape, getReductionAxes } from '../ops/broadcast_util';\nimport { div } from '../ops/div';\nimport { mul } from '../ops/mul';\nimport { neg } from '../ops/neg';\nimport { reshape } from '../ops/reshape';\nimport { square } from '../ops/square';\nimport { sum } from '../ops/sum';\nexport const atan2GradConfig = {\n  kernelName: Atan2,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const d = add(square(a), square(b));\n      let res = mul(dy, div(b, d));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, a.shape);\n    };\n\n    const derB = () => {\n      const d = add(square(a), square(b));\n      let res = neg(mul(dy, div(a, d)));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n\n      return reshape(res, b.shape);\n    };\n\n    return {\n      a: derA,\n      b: derB\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,KAAR,QAAoB,iBAApB;AAEA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,0BAAR,EAAoCC,gBAApC,QAA2D,uBAA3D;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,GAAR,QAAkB,YAAlB;AAGA,OAAO,MAAMC,eAAe,GAAe;AACzCC,YAAU,EAAEX,KAD6B;AAEzCY,cAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAF2B;AAGzCC,UAAQ,EAAE,CAACC,EAAD,EAAaC,KAAb,KAAgC;AACxC,UAAM,CAACC,CAAD,EAAIC,CAAJ,IAASF,KAAf;AACA,UAAMG,QAAQ,GAAGhB,0BAA0B,CAACc,CAAC,CAACG,KAAH,EAAUF,CAAC,CAACE,KAAZ,CAA3C;;AAEA,UAAMC,IAAI,GAAG,MAAK;AAChB,YAAMC,CAAC,GAAGpB,GAAG,CAACO,MAAM,CAACQ,CAAD,CAAP,EAAYR,MAAM,CAACS,CAAD,CAAlB,CAAb;AACA,UAAIK,GAAG,GAAGjB,GAAG,CAACS,EAAD,EAAKV,GAAG,CAACa,CAAD,EAAII,CAAJ,CAAR,CAAb;AACA,YAAME,UAAU,GAAGpB,gBAAgB,CAACa,CAAC,CAACG,KAAH,EAAUD,QAAV,CAAnC;;AACA,UAAIK,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AACzBF,WAAG,GAAGb,GAAG,CAACa,GAAD,EAAMC,UAAN,CAAT;AACD;;AACD,aAAOhB,OAAO,CAACe,GAAD,EAAMN,CAAC,CAACG,KAAR,CAAd;AACD,KARD;;AASA,UAAMM,IAAI,GAAG,MAAK;AAChB,YAAMJ,CAAC,GAAGpB,GAAG,CAACO,MAAM,CAACQ,CAAD,CAAP,EAAYR,MAAM,CAACS,CAAD,CAAlB,CAAb;AACA,UAAIK,GAAG,GAAGhB,GAAG,CAACD,GAAG,CAACS,EAAD,EAAKV,GAAG,CAACY,CAAD,EAAIK,CAAJ,CAAR,CAAJ,CAAb;AACA,YAAME,UAAU,GAAGpB,gBAAgB,CAACc,CAAC,CAACE,KAAH,EAAUD,QAAV,CAAnC;;AACA,UAAIK,UAAU,CAACC,MAAX,GAAoB,CAAxB,EAA2B;AACzBF,WAAG,GAAGb,GAAG,CAACa,GAAD,EAAMC,UAAN,CAAT;AACD;;AACD,aAAOhB,OAAO,CAACe,GAAD,EAAML,CAAC,CAACE,KAAR,CAAd;AACD,KARD;;AASA,WAAO;AAACH,OAAC,EAAEI,IAAJ;AAAUH,OAAC,EAAEQ;AAAb,KAAP;AACD;AA1BwC,CAApC","names":["Atan2","add","assertAndGetBroadcastShape","getReductionAxes","div","mul","neg","reshape","square","sum","atan2GradConfig","kernelName","inputsToSave","gradFunc","dy","saved","a","b","outShape","shape","derA","d","res","reduceAxes","length","derB"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/Atan2_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Atan2} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {add} from '../ops/add';\nimport {assertAndGetBroadcastShape, getReductionAxes} from '../ops/broadcast_util';\nimport {div} from '../ops/div';\nimport {mul} from '../ops/mul';\nimport {neg} from '../ops/neg';\nimport {reshape} from '../ops/reshape';\nimport {square} from '../ops/square';\nimport {sum} from '../ops/sum';\nimport {Tensor} from '../tensor';\n\nexport const atan2GradConfig: GradConfig = {\n  kernelName: Atan2,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [a, b] = saved;\n    const outShape = assertAndGetBroadcastShape(a.shape, b.shape);\n\n    const derA = () => {\n      const d = add(square(a), square(b));\n      let res = mul(dy, div(b, d));\n      const reduceAxes = getReductionAxes(a.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, a.shape);\n    };\n    const derB = () => {\n      const d = add(square(a), square(b));\n      let res = neg(mul(dy, div(a, d)));\n      const reduceAxes = getReductionAxes(b.shape, outShape);\n      if (reduceAxes.length > 0) {\n        res = sum(res, reduceAxes);\n      }\n      return reshape(res, b.shape);\n    };\n    return {a: derA, b: derB};\n  }\n};\n"]},"metadata":{},"sourceType":"module"}