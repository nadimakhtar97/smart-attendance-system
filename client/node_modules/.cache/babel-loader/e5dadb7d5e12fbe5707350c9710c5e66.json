{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\nimport { ValueError } from '../errors';\n/**\n * Determine if a number is an integer.\n */\n\nexport function isInteger(x) {\n  return x === parseInt(x.toString(), 10);\n}\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\n\nexport function arrayProd(array, begin, end) {\n  if (begin == null) {\n    begin = 0;\n  }\n\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n\n  return prod;\n}\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\n\nexport function min(array) {\n  // same behavior as tf.min()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n\n  let min = Number.POSITIVE_INFINITY;\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n\n    if (value < min) {\n      min = value;\n    }\n  }\n\n  return min;\n}\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\n\nexport function max(array) {\n  // same behavior as tf.max()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n\n  let max = Number.NEGATIVE_INFINITY;\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n\n    if (value > max) {\n      max = value;\n    }\n  }\n\n  return max;\n}\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\n\nexport function sum(array) {\n  let sum = 0;\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    sum += value;\n  }\n\n  return sum;\n}\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\n\nexport function mean(array) {\n  return sum(array) / array.length;\n}\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\n\nexport function variance(array) {\n  const meanValue = mean(array);\n  const demeaned = array.map(value => value - meanValue);\n  let sumSquare = 0;\n\n  for (let i = 0; i < demeaned.length; i++) {\n    const value = demeaned[i];\n    sumSquare += value * value;\n  }\n\n  return sumSquare / array.length;\n}\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\n\nexport function median(array) {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\n\nexport function range(begin, end) {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n\n  const out = [];\n\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n\n  return out;\n}","map":{"version":3,"mappings":"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","names":["ValueError","isInteger","x","parseInt","toString","arrayProd","array","begin","end","length","prod","i","min","Number","NaN","POSITIVE_INFINITY","value","max","NEGATIVE_INFINITY","sum","mean","variance","meanValue","demeaned","map","sumSquare","median","arraySorted","slice","sort","a","b","lowIdx","Math","floor","highIdx","ceil","range","out","push"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/utils/math_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Math utility functions.\n *\n * This file contains some frequently used math function that operates on\n * number[] or Float32Array and return a number. Many of these functions are\n * not-so-thick wrappers around TF.js Core functions. But they offer the\n * convenience of\n * 1) not having to convert the inputs into Tensors,\n * 2) not having to convert the returned Tensors to numbers.\n */\n\nimport {ValueError} from '../errors';\n\nexport type ArrayTypes = Uint8Array|Int32Array|Float32Array;\n\n/**\n * Determine if a number is an integer.\n */\nexport function isInteger(x: number): boolean {\n  return x === parseInt(x.toString(), 10);\n}\n\n/**\n * Calculate the product of an array of numbers.\n * @param array The array to calculate the product over.\n * @param begin Beginning index, inclusive.\n * @param end Ending index, exclusive.\n * @return The product.\n */\nexport function arrayProd(\n    array: number[]|ArrayTypes, begin?: number, end?: number): number {\n  if (begin == null) {\n    begin = 0;\n  }\n  if (end == null) {\n    end = array.length;\n  }\n\n  let prod = 1;\n  for (let i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n  return prod;\n}\n\n/**\n * Compute minimum value.\n * @param array\n * @return minimum value.\n */\nexport function min(array: number[]|Float32Array): number {\n  // same behavior as tf.min()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let min = Number.POSITIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value < min) {\n      min = value;\n    }\n  }\n  return min;\n}\n\n/**\n * Compute maximum value.\n * @param array\n * @return maximum value\n */\nexport function max(array: number[]|Float32Array): number {\n  // same behavior as tf.max()\n  if (array.length === 0) {\n    return Number.NaN;\n  }\n  let max = Number.NEGATIVE_INFINITY;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    if (value > max) {\n      max = value;\n    }\n  }\n  return max;\n}\n\n/**\n * Compute sum of array.\n * @param array\n * @return The sum.\n */\nexport function sum(array: number[]|Float32Array): number {\n  let sum = 0;\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    sum += value;\n  }\n  return sum;\n}\n\n/**\n * Compute mean of array.\n * @param array\n * @return The mean.\n */\nexport function mean(array: number[]|Float32Array): number {\n  return sum(array) / array.length;\n}\n\n/**\n * Compute variance of array.\n * @param array\n * @return The variance.\n */\nexport function variance(array: number[]|Float32Array): number {\n  const meanValue = mean(array);\n  const demeaned = array.map((value: number) => value - meanValue);\n  let sumSquare = 0;\n  for (let i = 0; i < demeaned.length; i++) {\n    const value = demeaned[i];\n    sumSquare += value * value;\n  }\n  return sumSquare / array.length;\n}\n\n/**\n * Compute median of array.\n * @param array\n * @return The median value.\n */\nexport function median(array: number[]|Float32Array): number {\n  const arraySorted = array.slice().sort((a, b) => a - b);\n  const lowIdx = Math.floor((arraySorted.length - 1) / 2);\n  const highIdx = Math.ceil((arraySorted.length - 1) / 2);\n  if (lowIdx === highIdx) {\n    return arraySorted[lowIdx];\n  }\n  return (arraySorted[lowIdx] + arraySorted[highIdx]) / 2;\n}\n\n/**\n * Generate an array of integers in [begin, end).\n * @param begin Beginning integer, inclusive.\n * @param end Ending integer, exclusive.\n * @returns Range array.\n * @throws ValueError, iff `end` < `begin`.\n */\nexport function range(begin: number, end: number): number[] {\n  if (end < begin) {\n    throw new ValueError(`end (${end}) < begin (${begin}) is forbidden.`);\n  }\n  const out: number[] = [];\n  for (let i = begin; i < end; ++i) {\n    out.push(i);\n  }\n  return out;\n}\n"]},"metadata":{},"sourceType":"module"}