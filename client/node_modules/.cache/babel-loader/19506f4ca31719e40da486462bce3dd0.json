{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl(xBuf, reps) {\n  const newShape = new Array(xBuf.rank);\n\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n\n  const result = buffer(newShape, xBuf.dtype);\n\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n    const originalLoc = new Array(xBuf.rank);\n\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n    result.values[i] = xBuf.values[originalIndex];\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAmD,uBAAnD;AAEA;;;;;AAKA,OAAM,SAAUC,QAAV,CACFC,IADE,EAEFC,IAFE,EAEY;AAChB,QAAMC,QAAQ,GAAa,IAAIC,KAAJ,CAAUH,IAAI,CAACI,IAAf,CAA3B;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxCH,YAAQ,CAACG,CAAD,CAAR,GAAcL,IAAI,CAACO,KAAL,CAAWF,CAAX,IAAgBJ,IAAI,CAACI,CAAD,CAAlC;AACD;;AACD,QAAMG,MAAM,GAAGV,MAAM,CAACI,QAAD,EAAWF,IAAI,CAACS,KAAhB,CAArB;;AACA,OAAK,IAAIJ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGG,MAAM,CAACE,MAAP,CAAcJ,MAAlC,EAA0C,EAAED,CAA5C,EAA+C;AAC7C,UAAMM,MAAM,GAAGH,MAAM,CAACI,UAAP,CAAkBP,CAAlB,CAAf;AAEA,UAAMQ,WAAW,GAAa,IAAIV,KAAJ,CAAUH,IAAI,CAACI,IAAf,CAA9B;;AACA,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,WAAW,CAACP,MAAhC,EAAwCQ,CAAC,EAAzC,EAA6C;AAC3CD,iBAAW,CAACC,CAAD,CAAX,GAAiBH,MAAM,CAACG,CAAD,CAAN,GAAYd,IAAI,CAACO,KAAL,CAAWO,CAAX,CAA7B;AACD;;AAED,UAAMC,aAAa,GAAGf,IAAI,CAACgB,UAAL,CAAgBH,WAAhB,CAAtB;AAEAL,UAAM,CAACE,MAAP,CAAcL,CAAd,IAAmBL,IAAI,CAACU,MAAL,CAAYK,aAAZ,CAAnB;AACD;;AACD,SAAOP,MAAP;AACD","names":["buffer","tileImpl","xBuf","reps","newShape","Array","rank","i","length","shape","result","dtype","values","newLoc","indexToLoc","originalLoc","j","originalIndex","locToIndex"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Tile_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\n\nexport function tileImpl<R extends Rank>(\n    xBuf: TensorBuffer<R, DataType>,\n    reps: number[]): TensorBuffer<R, DataType> {\n  const newShape: number[] = new Array(xBuf.rank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = xBuf.shape[i] * reps[i];\n  }\n  const result = buffer(newShape, xBuf.dtype);\n  for (let i = 0; i < result.values.length; ++i) {\n    const newLoc = result.indexToLoc(i);\n\n    const originalLoc: number[] = new Array(xBuf.rank);\n    for (let j = 0; j < originalLoc.length; j++) {\n      originalLoc[j] = newLoc[j] % xBuf.shape[j];\n    }\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    result.values[i] = xBuf.values[originalIndex];\n  }\n  return result as TensorBuffer<R, DataType>;\n}\n"]},"metadata":{},"sourceType":"module"}