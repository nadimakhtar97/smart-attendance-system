{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { tensor1d } from './tensor1d';\nexport function enclosingPowerOfTwo(value) {\n  // Return 2**N for integer N such that 2**N >= value.\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\nexport function cosineWindow(windowLength, a, b) {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = 2.0 * Math.PI * i / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n\n  return tensor1d(newValues, 'float32');\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAUC,mBAAV,CAA8BC,KAA9B,EAA2C;AAC/C;AACA,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,GAAL,CAAS,CAAT,EAAYF,IAAI,CAACG,IAAL,CAAUH,IAAI,CAACI,GAAL,CAASL,KAAT,IAAkBC,IAAI,CAACI,GAAL,CAAS,GAAT,CAA5B,CAAZ,CAAX,CAAP;AACD;AAED,OAAM,SAAUC,YAAV,CACFC,YADE,EACoBC,CADpB,EAC+BC,CAD/B,EACwC;AAC5C,QAAMC,IAAI,GAAG,IAAIH,YAAY,GAAG,CAAhC;AACA,QAAMI,SAAS,GAAG,IAAIC,YAAJ,CAAiBL,YAAjB,CAAlB;;AACA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,YAApB,EAAkC,EAAEM,CAApC,EAAuC;AACrC,UAAMC,MAAM,GAAI,MAAMb,IAAI,CAACc,EAAX,GAAgBF,CAAjB,IAAuBN,YAAY,GAAGG,IAAf,GAAsB,CAA7C,CAAf;AACAC,aAAS,CAACE,CAAD,CAAT,GAAeL,CAAC,GAAGC,CAAC,GAAGR,IAAI,CAACe,GAAL,CAASF,MAAT,CAAvB;AACD;;AACD,SAAOhB,QAAQ,CAACa,SAAD,EAAY,SAAZ,CAAf;AACD","names":["tensor1d","enclosingPowerOfTwo","value","Math","floor","pow","ceil","log","cosineWindow","windowLength","a","b","even","newValues","Float32Array","i","cosArg","PI","cos"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/signal_ops_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D} from '../tensor';\nimport {tensor1d} from './tensor1d';\n\nexport function enclosingPowerOfTwo(value: number) {\n  // Return 2**N for integer N such that 2**N >= value.\n  return Math.floor(Math.pow(2, Math.ceil(Math.log(value) / Math.log(2.0))));\n}\n\nexport function cosineWindow(\n    windowLength: number, a: number, b: number): Tensor1D {\n  const even = 1 - windowLength % 2;\n  const newValues = new Float32Array(windowLength);\n  for (let i = 0; i < windowLength; ++i) {\n    const cosArg = (2.0 * Math.PI * i) / (windowLength + even - 1);\n    newValues[i] = a - b * Math.cos(cosArg);\n  }\n  return tensor1d(newValues, 'float32');\n}\n"]},"metadata":{},"sourceType":"module"}