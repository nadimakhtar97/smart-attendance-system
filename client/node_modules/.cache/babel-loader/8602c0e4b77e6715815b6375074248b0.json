{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Utilities related to persistent state in the backend.\n */\n\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\nexport function getNextUniqueTensorId() {\n  return _nextUniqueTensorId++;\n}\nconst _uidPrefixes = {};\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\n\nexport function getUid() {\n  let prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;AAUA;;;;AAIA;;;;;AAKA,IAAIA,mBAAmB,GAAG,CAA1B;AAEA,OAAM,SAAUC,qBAAV,GAA+B;AACnC,SAAOD,mBAAmB,EAA1B;AACD;AAED,MAAME,YAAY,GAA+B,EAAjD;AAEA;;;;;;AAKA,OAAM,SAAUC,MAAV,GAA4B;AAAA,MAAXC,MAAW,uEAAF,EAAE;;AAChC,MAAI,EAAEA,MAAM,IAAIF,YAAZ,CAAJ,EAA+B;AAC7BA,gBAAY,CAACE,MAAD,CAAZ,GAAuB,CAAvB;AACD;;AACDF,cAAY,CAACE,MAAD,CAAZ,IAAwB,CAAxB;AACA,SAAOA,MAAM,GAAGF,YAAY,CAACE,MAAD,CAAZ,CAAqBC,QAArB,EAAhB;AACD","names":["_nextUniqueTensorId","getNextUniqueTensorId","_uidPrefixes","getUid","prefix","toString"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/backend/state.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * Utilities related to persistent state in the backend.\n */\n\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\n\nexport function getNextUniqueTensorId(): number {\n  return _nextUniqueTensorId++;\n}\n\nconst _uidPrefixes: {[prefix: string]: number} = {};\n\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = ''): string {\n  if (!(prefix in _uidPrefixes)) {\n    _uidPrefixes[prefix] = 0;\n  }\n  _uidPrefixes[prefix] += 1;\n  return prefix + _uidPrefixes[prefix].toString();\n}\n"]},"metadata":{},"sourceType":"module"}