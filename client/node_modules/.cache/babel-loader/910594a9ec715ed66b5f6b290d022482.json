{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util, env } from '@tensorflow/tfjs-core';\nimport { GatherProgram } from '../gather_gpu';\nimport { gatherV2ImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    indices\n  } = inputs;\n  const {\n    axis,\n    batchDims\n  } = attrs;\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId);\n    const axisDim = x.shape[parsedAxis];\n\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(index <= axisDim - 1 && index >= 0, () => `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, batchDims);\n  const indicesSize = util.sizeFromShape(indices.shape);\n  const toDispose = [];\n  const flattenX = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize, shapeInfo.sliceSize]\n    }\n  });\n  const flattenIndex = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]\n    }\n  });\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n  const flattenOutputShape = [shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize, shapeInfo.sliceSize];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new GatherProgram(flattenX.shape, flattenOutputShape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: shapeInfo.outputShape\n    }\n  });\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\nexport const gatherV2Config = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2\n};","map":{"version":3,"mappings":"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","names":["backend_util","GatherV2","util","env","GatherProgram","gatherV2ImplCPU","reshape","gatherV2","args","inputs","backend","attrs","x","indices","axis","batchDims","parsedAxis","parseAxisParam","shape","get","indicesVals","readSync","dataId","axisDim","i","length","index","assert","shapeInfo","segment_util","collectGatherOpShapeInfo","indicesSize","sizeFromShape","toDispose","flattenX","batchSize","outerSize","dimSize","sliceSize","flattenIndex","push","flattenOutputShape","shouldExecuteOnCPU","dtype","indicesBuf","bufferSync","xBuf","outBuf","forEach","t","disposeIntermediateTensorInfo","makeTensorInfo","outputShape","values","program","res","runWebGLProgram","reshaped","gatherV2Config","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/GatherV2.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherV2, GatherV2Attrs, GatherV2Inputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util, env} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherProgram, GatherShape} from '../gather_gpu';\nimport {gatherV2ImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherV2(args: {\n  inputs: GatherV2Inputs,\n  backend: MathBackendWebGL,\n  attrs: GatherV2Attrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, indices} = inputs;\n  const {axis, batchDims} = attrs;\n\n  const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n  if (env().get('DEBUG')) {\n    // In debug mode, throw error when any index is out of bound.\n    // Otherwise, just fill out of bounds with zeroes.\n    const indicesVals = backend.readSync(indices.dataId) as TypedArray;\n    const axisDim = x.shape[parsedAxis];\n    for (let i = 0; i < indicesVals.length; ++i) {\n      const index = indicesVals[i];\n      util.assert(\n        index <= axisDim - 1 && index >= 0,\n        () =>\n          `GatherV2: the index value ${index} is not in [0, ${axisDim - 1}]`);\n    }\n  }\n\n  const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(\n      x, indices, parsedAxis, batchDims);\n\n  const indicesSize = util.sizeFromShape(indices.shape);\n\n  const toDispose = [];\n\n  const flattenX = reshape({\n    inputs: {x},\n    backend,\n    attrs: {\n      shape: [\n        shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n        shapeInfo.sliceSize\n      ]\n    }\n  });\n\n  const flattenIndex = reshape({\n    inputs: {x: indices},\n    backend,\n    attrs: {shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize]}\n  });\n\n  toDispose.push(flattenX);\n  toDispose.push(flattenIndex);\n\n  const flattenOutputShape = [\n    shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n    shapeInfo.sliceSize\n  ];\n\n  if (backend.shouldExecuteOnCPU([x, indices]) || x.dtype === 'string') {\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2ImplCPU(xBuf, indicesBuf, flattenOutputShape);\n\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n    return backend.makeTensorInfo(\n        shapeInfo.outputShape, outBuf.dtype, outBuf.values as TypedArray);\n  }\n\n  const program = new GatherProgram(flattenX.shape as GatherShape,\n                                    flattenOutputShape as GatherShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndex], flattenX.dtype);\n  toDispose.push(res);\n\n  const reshaped = reshape(\n      {inputs: {x: res}, backend, attrs: {shape: shapeInfo.outputShape}});\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return reshaped;\n}\n\nexport const gatherV2Config: KernelConfig = {\n  kernelName: GatherV2,\n  backendName: 'webgl',\n  kernelFunc: gatherV2 as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}