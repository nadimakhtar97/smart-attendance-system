{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherNdImpl(indicesData, paramsBuf, dtype, numSlices, sliceRank, sliceSize, strides, paramsShape, paramsSize) {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(`Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] = paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAA+D,uBAA/D;AAEA,OAAM,SAAUC,YAAV,CACFC,WADE,EACuBC,SADvB,EACmDC,KADnD,EAEFC,SAFE,EAEiBC,SAFjB,EAEoCC,SAFpC,EAEuDC,OAFvD,EAGFC,WAHE,EAGqBC,UAHrB,EAGuC;AAC3C,QAAMC,MAAM,GAAGX,MAAM,CAAC,CAACK,SAAD,EAAYE,SAAZ,CAAD,EAAyBH,KAAzB,CAArB;;AAEA,OAAK,IAAIQ,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,SAApB,EAA+BO,CAAC,EAAhC,EAAoC;AAClC,UAAMC,KAAK,GAAG,EAAd;AACA,QAAIC,YAAY,GAAG,CAAnB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGT,SAApB,EAA+BS,CAAC,EAAhC,EAAoC;AAClC,YAAMC,GAAG,GAAGd,WAAW,CAACU,CAAC,GAAGN,SAAJ,GAAgBS,CAAjB,CAAvB;AACAD,kBAAY,IAAIE,GAAG,GAAGR,OAAO,CAACO,CAAD,CAA7B;AACAF,WAAK,CAACI,IAAN,CAAWD,GAAX;AACD;;AACD,QAAIF,YAAY,GAAG,CAAf,IAAoBA,YAAY,IAAIJ,UAAU,GAAGH,SAArD,EAAgE;AAC9D,YAAM,IAAIW,KAAJ,CACF,oBAAoBL,KAAK,wBAAwBJ,WAAW,EAD1D,CAAN;AAED;;AAED,SAAK,IAAIU,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGZ,SAApB,EAA+BY,CAAC,EAAhC,EAAoC;AAClCR,YAAM,CAACS,MAAP,CAAcR,CAAC,GAAGL,SAAJ,GAAgBY,CAA9B,IACIhB,SAAS,CAACkB,GAAV,CAAc,GAAGlB,SAAS,CAACmB,UAAV,CAAqBR,YAAY,GAAGP,SAAf,GAA2BY,CAAhD,CAAjB,CADJ;AAED;AACF;;AAED,SAAOR,MAAP;AACD","names":["buffer","gatherNdImpl","indicesData","paramsBuf","dtype","numSlices","sliceRank","sliceSize","strides","paramsShape","paramsSize","outBuf","i","index","flattenIndex","j","dim","push","Error","k","values","get","indexToLoc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/GatherNd_Impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer, TypedArray} from '@tensorflow/tfjs-core';\n\nexport function gatherNdImpl<R extends Rank>(\n    indicesData: TypedArray, paramsBuf: TensorBuffer<R>, dtype: DataType,\n    numSlices: number, sliceRank: number, sliceSize: number, strides: number[],\n    paramsShape: number[], paramsSize: number): TensorBuffer<R> {\n  const outBuf = buffer([numSlices, sliceSize], dtype);\n\n  for (let i = 0; i < numSlices; i++) {\n    const index = [];\n    let flattenIndex = 0;\n    for (let j = 0; j < sliceRank; j++) {\n      const dim = indicesData[i * sliceRank + j];\n      flattenIndex += dim * strides[j];\n      index.push(dim);\n    }\n    if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n      throw new Error(\n          `Invalid indices: ${index} does not index into ${paramsShape}`);\n    }\n\n    for (let k = 0; k < sliceSize; k++) {\n      outBuf.values[i * sliceSize + k] =\n          paramsBuf.get(...paramsBuf.indexToLoc(flattenIndex * sliceSize + k));\n    }\n  }\n\n  return outBuf as TensorBuffer<R>;\n}\n"]},"metadata":{},"sourceType":"module"}