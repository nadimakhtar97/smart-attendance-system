{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base'; // Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\n\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\n\nexport class Environment {\n  // tslint:disable-next-line: no-any\n  constructor(global) {\n    this.global = global;\n    this.flags = {};\n    this.flagRegistry = {};\n    this.urlFlags = {}; // Jasmine spies on this in 'environment_test.ts'\n\n    this.getQueryParams = getQueryParams;\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName, platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(`Platform ${this.platformName} has already been set. ` + `Overwriting the platform with ${platformName}.`);\n      }\n    }\n\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(flagName, evaluationFn, setHook) {\n    this.flagRegistry[flagName] = {\n      evaluationFn,\n      setHook\n    }; // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName) {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n\n    if (isPromise(flagValue)) {\n      throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` + `Please use getAsync() instead.`);\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName) {\n    return this.get(flagName);\n  }\n\n  getBool(flagName) {\n    return this.get(flagName);\n  }\n\n  getFlags() {\n    return this.flags;\n  } // For backwards compatibility.\n\n\n  get features() {\n    return this.flags;\n  }\n\n  set(flagName, value) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n    }\n\n    this.flags[flagName] = value;\n\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  evaluateFlag(flagName) {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  populateURLFlags() {\n    if (typeof this.global === 'undefined' || typeof this.global.location === 'undefined' || typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = this.getQueryParams(this.global.location.search);\n\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':');\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n\n}\nexport function getQueryParams(queryString) {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, function (s) {\n    for (var _len = arguments.length, t = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      t[_key - 1] = arguments[_key];\n    }\n\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(params, name, value) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName, value) {\n  value = value.toLowerCase();\n\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+value}` === value) {\n    return +value;\n  }\n\n  throw new Error(`Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\n\n\nexport function env() {\n  return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n  ENV = environment;\n}","map":{"version":3,"mappings":"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","names":["isPromise","TENSORFLOWJS_FLAGS_PREFIX","Environment","constructor","global","getQueryParams","populateURLFlags","setPlatform","platformName","platform","env","getBool","console","warn","registerFlag","flagName","evaluationFn","setHook","flagRegistry","urlFlags","flagValue","set","getAsync","flags","evaluateFlag","get","Error","getNumber","getFlags","features","value","setFlags","Object","assign","reset","location","search","urlParams","keyValues","split","forEach","keyValue","key","parseValue","queryString","params","replace","s","t","decodeParam","join","name","decodeURIComponent","toLowerCase","ENV","setEnvironmentGlobal","environment"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/environment.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Platform} from './platforms/platform';\nimport {isPromise} from './util_base';\n\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n\ntype FlagValue = number|boolean;\ntype FlagEvaluationFn = (() => FlagValue)|(() => Promise<FlagValue>);\nexport type Flags = {\n  [featureName: string]: FlagValue\n};\nexport type FlagRegistryEntry = {\n  evaluationFn: FlagEvaluationFn;\n  setHook?: (value: FlagValue) => void;\n};\n\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n  private flags: Flags = {};\n  private flagRegistry: {[flagName: string]: FlagRegistryEntry} = {};\n\n  private urlFlags: Flags = {};\n\n  platformName: string;\n  platform: Platform;\n\n  // Jasmine spies on this in 'environment_test.ts'\n  getQueryParams = getQueryParams;\n\n  // tslint:disable-next-line: no-any\n  constructor(public global: any) {\n    this.populateURLFlags();\n  }\n\n  setPlatform(platformName: string, platform: Platform) {\n    if (this.platform != null) {\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Platform ${this.platformName} has already been set. ` +\n            `Overwriting the platform with ${platformName}.`);\n      }\n    }\n    this.platformName = platformName;\n    this.platform = platform;\n  }\n\n  registerFlag(\n      flagName: string, evaluationFn: FlagEvaluationFn,\n      setHook?: (value: FlagValue) => void) {\n    this.flagRegistry[flagName] = {evaluationFn, setHook};\n\n    // Override the flag value from the URL. This has to happen here because\n    // the environment is initialized before flags get registered.\n    if (this.urlFlags[flagName] != null) {\n      const flagValue = this.urlFlags[flagName];\n      if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n        console.warn(\n            `Setting feature override from URL ${flagName}: ${flagValue}.`);\n      }\n      this.set(flagName, flagValue);\n    }\n  }\n\n  async getAsync(flagName: string): Promise<FlagValue> {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    this.flags[flagName] = await this.evaluateFlag(flagName);\n    return this.flags[flagName];\n  }\n\n  get(flagName: string): FlagValue {\n    if (flagName in this.flags) {\n      return this.flags[flagName];\n    }\n\n    const flagValue = this.evaluateFlag(flagName);\n    if (isPromise(flagValue)) {\n      throw new Error(\n          `Flag ${flagName} cannot be synchronously evaluated. ` +\n          `Please use getAsync() instead.`);\n    }\n\n    this.flags[flagName] = flagValue;\n    return this.flags[flagName];\n  }\n\n  getNumber(flagName: string): number {\n    return this.get(flagName) as number;\n  }\n\n  getBool(flagName: string): boolean {\n    return this.get(flagName) as boolean;\n  }\n\n  getFlags(): Flags {\n    return this.flags;\n  }\n  // For backwards compatibility.\n  get features(): Flags {\n    return this.flags;\n  }\n\n  set(flagName: string, value: FlagValue): void {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot set flag ${flagName} as it has not been registered.`);\n    }\n    this.flags[flagName] = value;\n    if (this.flagRegistry[flagName].setHook != null) {\n      this.flagRegistry[flagName].setHook(value);\n    }\n  }\n\n  private evaluateFlag(flagName: string): FlagValue|Promise<FlagValue> {\n    if (this.flagRegistry[flagName] == null) {\n      throw new Error(\n          `Cannot evaluate flag '${flagName}': no evaluation function found.`);\n    }\n    return this.flagRegistry[flagName].evaluationFn();\n  }\n\n  setFlags(flags: Flags) {\n    this.flags = Object.assign({}, flags);\n  }\n\n  reset() {\n    this.flags = {};\n    this.urlFlags = {};\n    this.populateURLFlags();\n  }\n\n  private populateURLFlags(): void {\n    if (typeof this.global === 'undefined' ||\n        typeof this.global.location === 'undefined' ||\n        typeof this.global.location.search === 'undefined') {\n      return;\n    }\n\n    const urlParams = this.getQueryParams(this.global.location.search);\n    if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n      const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n      keyValues.forEach(keyValue => {\n        const [key, value] = keyValue.split(':') as [string, string];\n        this.urlFlags[key] = parseValue(key, value);\n      });\n    }\n  }\n}\n\nexport function getQueryParams(queryString: string): {[key: string]: string} {\n  const params = {};\n  queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n    decodeParam(params, t[0], t[1]);\n    return t.join('=');\n  });\n  return params;\n}\n\nfunction decodeParam(\n    params: {[key: string]: string}, name: string, value?: string) {\n  params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\n\nfunction parseValue(flagName: string, value: string): FlagValue {\n  value = value.toLowerCase();\n  if (value === 'true' || value === 'false') {\n    return value === 'true';\n  } else if (`${+ value}` === value) {\n    return +value;\n  }\n  throw new Error(\n      `Could not parse value flag value ${value} for flag ${flagName}.`);\n}\n\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n  return ENV;\n}\n\nexport let ENV: Environment = null;\nexport function setEnvironmentGlobal(environment: Environment) {\n  ENV = environment;\n}\n"]},"metadata":{},"sourceType":"module"}