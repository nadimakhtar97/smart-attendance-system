{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { keep, scalar, stack, tidy, unstack, util } from '@tensorflow/tfjs-core'; // tslint:disable-next-line: no-imports-from-dist\n\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\n\nexport class HashTable {\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(keyDType, valueDType) {\n    this.keyDType = keyDType;\n    this.valueDType = valueDType;\n    this.handle = scalar(0); // tslint:disable-next-line: no-any\n\n    this.tensorMap = new Map();\n    keep(this.handle);\n  }\n\n  get id() {\n    return this.handle.id;\n  }\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n\n\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n  /**\n   * The number of items in the hash table.\n   */\n\n\n  size() {\n    return this.tensorMap.size;\n  }\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n\n\n  tensorSize() {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n\n\n  async import(keys, values) {\n    this.checkKeyAndValueTensor(keys, values); // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n\n    const $keys = await keys.data(); // Clear the hashTable before inserting new values.\n\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    return tidy(() => {\n      const $values = unstack(values);\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n      util.assert(keysLength === valuesLength, () => `The number of elements doesn't match, keys has ` + `${keysLength} elements, the values has ${valuesLength} ` + `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n\n\n  async find(keys, defaultValue) {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n    const $keys = await keys.data();\n    return tidy(() => {\n      const result = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  } // tslint:disable-next-line: no-any\n\n\n  findWithDefault(key, defaultValue) {\n    const result = this.tensorMap.get(key);\n    return result != null ? result : defaultValue;\n  }\n\n  checkKeyAndValueTensor(key, value) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(`Expect key dtype ${this.keyDType}, but got ` + `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(`Expect value dtype ${this.valueDType}, but got ` + `${value.dtype}`);\n    }\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAkBA,IAAlB,EAAwBC,MAAxB,EAAgCC,KAAhC,EAA+CC,IAA/C,EAAqDC,OAArD,EAA8DC,IAA9D,QAAyE,uBAAzE,C,CACA;;AACA,OAAO,KAAKC,KAAZ,MAAuB,kDAAvB;AAEA;;;;AAGA,OAAM,MAAOC,SAAP,CAAgB;AAUpB;;;;;;AAMAC,cAAqBC,QAArB,EAAkDC,UAAlD,EAAsE;AAAjD;AAA6B;AAChD,SAAKC,MAAL,GAAcV,MAAM,CAAC,CAAD,CAApB,CADoE,CAEpE;;AACA,SAAKW,SAAL,GAAiB,IAAIC,GAAJ,EAAjB;AAEAb,QAAI,CAAC,KAAKW,MAAN,CAAJ;AACD;;AAhBK,MAAFG,EAAE;AACJ,WAAO,KAAKH,MAAL,CAAYG,EAAnB;AACD;AAgBD;;;;;AAGAC,eAAa;AACX,SAAKH,SAAL,CAAeI,OAAf,CAAuBC,KAAK,IAAIA,KAAK,CAACC,OAAN,EAAhC;AACA,SAAKN,SAAL,CAAeO,KAAf;AACA,SAAKR,MAAL,CAAYO,OAAZ;AACD;AAED;;;;;AAGAE,MAAI;AACF,WAAO,KAAKR,SAAL,CAAeQ,IAAtB;AACD;AAED;;;;;AAGAC,YAAU;AACR,WAAOf,KAAK,CAACL,MAAN,CAAa,KAAKmB,IAAL,EAAb,EAA0B,OAA1B,CAAP;AACD;AAED;;;;;;;AAKY,QAANE,MAAM,CAACC,IAAD,EAAeC,MAAf,EAA6B;AACvC,SAAKC,sBAAL,CAA4BF,IAA5B,EAAkCC,MAAlC,EADuC,CAGvC;AACA;;AACA,UAAME,KAAK,GAAG,MAAMH,IAAI,CAACI,IAAL,EAApB,CALuC,CAOvC;;AACA,SAAKf,SAAL,CAAeI,OAAf,CAAuBC,KAAK,IAAIA,KAAK,CAACC,OAAN,EAAhC;AACA,SAAKN,SAAL,CAAeO,KAAf;AAEA,WAAOhB,IAAI,CAAC,MAAK;AACf,YAAMyB,OAAO,GAAGxB,OAAO,CAACoB,MAAD,CAAvB;AAEA,YAAMK,UAAU,GAAGH,KAAK,CAACI,MAAzB;AACA,YAAMC,YAAY,GAAGH,OAAO,CAACE,MAA7B;AAEAzB,UAAI,CAAC2B,MAAL,CACIH,UAAU,KAAKE,YADnB,EAEI,MAAM,oDACF,GAAGF,UAAU,6BAA6BE,YAAY,GADpD,GAEF,WAJR;;AAMA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,UAApB,EAAgCI,CAAC,EAAjC,EAAqC;AACnC,cAAMC,GAAG,GAAGR,KAAK,CAACO,CAAD,CAAjB;AACA,cAAMhB,KAAK,GAAGW,OAAO,CAACK,CAAD,CAArB;AAEAjC,YAAI,CAACiB,KAAD,CAAJ;AACA,aAAKL,SAAL,CAAeuB,GAAf,CAAmBD,GAAnB,EAAwBjB,KAAxB;AACD;;AAED,aAAO,KAAKN,MAAZ;AACD,KArBU,CAAX;AAsBD;AAED;;;;;;;;;;;;;;;;;AAeU,QAAJyB,IAAI,CAACb,IAAD,EAAec,YAAf,EAAmC;AAC3C,SAAKZ,sBAAL,CAA4BF,IAA5B,EAAkCc,YAAlC;AAEA,UAAMX,KAAK,GAAG,MAAMH,IAAI,CAACI,IAAL,EAApB;AAEA,WAAOxB,IAAI,CAAC,MAAK;AACf,YAAMmC,MAAM,GAAa,EAAzB;;AAEA,WAAK,IAAIL,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,KAAK,CAACI,MAA1B,EAAkCG,CAAC,EAAnC,EAAuC;AACrC,cAAMC,GAAG,GAAGR,KAAK,CAACO,CAAD,CAAjB;AAEA,cAAMhB,KAAK,GAAG,KAAKsB,eAAL,CAAqBL,GAArB,EAA0BG,YAA1B,CAAd;AACAC,cAAM,CAACE,IAAP,CAAYvB,KAAZ;AACD;;AAED,aAAOf,KAAK,CAACoC,MAAD,CAAZ;AACD,KAXU,CAAX;AAYD,GAvHmB,CAyHpB;;;AACQC,iBAAe,CAACL,GAAD,EAAWG,YAAX,EAA+B;AACpD,UAAMC,MAAM,GAAG,KAAK1B,SAAL,CAAe6B,GAAf,CAAmBP,GAAnB,CAAf;AAEA,WAAOI,MAAM,IAAI,IAAV,GAAiBA,MAAjB,GAA0BD,YAAjC;AACD;;AAEOZ,wBAAsB,CAACS,GAAD,EAAcjB,KAAd,EAA2B;AACvD,QAAIiB,GAAG,CAACQ,KAAJ,KAAc,KAAKjC,QAAvB,EAAiC;AAC/B,YAAM,IAAIkC,KAAJ,CACF,oBAAoB,KAAKlC,QAAQ,YAAjC,GACA,GAAGyB,GAAG,CAACQ,KAAK,EAFV,CAAN;AAGD;;AAED,QAAIzB,KAAK,CAACyB,KAAN,KAAgB,KAAKhC,UAAzB,EAAqC;AACnC,YAAM,IAAIiC,KAAJ,CACF,sBAAsB,KAAKjC,UAAU,YAArC,GACA,GAAGO,KAAK,CAACyB,KAAK,EAFZ,CAAN;AAGD;AACF;;AA5ImB","names":["keep","scalar","stack","tidy","unstack","util","tfOps","HashTable","constructor","keyDType","valueDType","handle","tensorMap","Map","id","clearAndClose","forEach","value","dispose","clear","size","tensorSize","import","keys","values","checkKeyAndValueTensor","$keys","data","$values","keysLength","length","valuesLength","assert","i","key","set","find","defaultValue","result","findWithDefault","push","get","dtype","Error"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/executor/hash_table.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {DataType, keep, scalar, stack, Tensor, tidy, unstack, util} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\n/**\n * Hashtable contains a set of tensors, which can be accessed by key.\n */\nexport class HashTable {\n  readonly handle: Tensor;\n\n  // tslint:disable-next-line: no-any\n  private tensorMap: Map<any, Tensor>;\n\n  get id() {\n    return this.handle.id;\n  }\n\n  /**\n   * Constructor of HashTable. Creates a hash table.\n   *\n   * @param keyDType `dtype` of the table keys.\n   * @param valueDType `dtype` of the table values.\n   */\n  constructor(readonly keyDType: DataType, readonly valueDType: DataType) {\n    this.handle = scalar(0);\n    // tslint:disable-next-line: no-any\n    this.tensorMap = new Map<any, Tensor>();\n\n    keep(this.handle);\n  }\n\n  /**\n   * Dispose the tensors and handle and clear the hashtable.\n   */\n  clearAndClose() {\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n    this.handle.dispose();\n  }\n\n  /**\n   * The number of items in the hash table.\n   */\n  size(): number {\n    return this.tensorMap.size;\n  }\n\n  /**\n   * The number of items in the hash table as a rank-0 tensor.\n   */\n  tensorSize(): Tensor {\n    return tfOps.scalar(this.size(), 'int32');\n  }\n\n  /**\n   * Replaces the contents of the table with the specified keys and values.\n   * @param keys Keys to store in the hashtable.\n   * @param values Values to store in the hashtable.\n   */\n  async import(keys: Tensor, values: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, values);\n\n    // We only store the primitive values of the keys, this allows lookup\n    // to be O(1).\n    const $keys = await keys.data();\n\n    // Clear the hashTable before inserting new values.\n    this.tensorMap.forEach(value => value.dispose());\n    this.tensorMap.clear();\n\n    return tidy(() => {\n      const $values = unstack(values);\n\n      const keysLength = $keys.length;\n      const valuesLength = $values.length;\n\n      util.assert(\n          keysLength === valuesLength,\n          () => `The number of elements doesn't match, keys has ` +\n              `${keysLength} elements, the values has ${valuesLength} ` +\n              `elements.`);\n\n      for (let i = 0; i < keysLength; i++) {\n        const key = $keys[i];\n        const value = $values[i];\n\n        keep(value);\n        this.tensorMap.set(key, value);\n      }\n\n      return this.handle;\n    });\n  }\n\n  /**\n   * Looks up keys in a hash table, outputs the corresponding values.\n   *\n   * Performs batch lookups, for every element in the key tensor, `find`\n   * stacks the corresponding value into the return tensor.\n   *\n   * If an element is not present in the table, the given `defaultValue` is\n   * used.\n   *\n   * @param keys Keys to look up. Must have the same type as the keys of the\n   *     table.\n   * @param defaultValue The scalar `defaultValue` is the value output for keys\n   *     not present in the table. It must also be of the same type as the\n   *     table values.\n   */\n  async find(keys: Tensor, defaultValue: Tensor): Promise<Tensor> {\n    this.checkKeyAndValueTensor(keys, defaultValue);\n\n    const $keys = await keys.data();\n\n    return tidy(() => {\n      const result: Tensor[] = [];\n\n      for (let i = 0; i < $keys.length; i++) {\n        const key = $keys[i];\n\n        const value = this.findWithDefault(key, defaultValue);\n        result.push(value);\n      }\n\n      return stack(result);\n    });\n  }\n\n  // tslint:disable-next-line: no-any\n  private findWithDefault(key: any, defaultValue: Tensor): Tensor {\n    const result = this.tensorMap.get(key);\n\n    return result != null ? result : defaultValue;\n  }\n\n  private checkKeyAndValueTensor(key: Tensor, value: Tensor) {\n    if (key.dtype !== this.keyDType) {\n      throw new Error(\n          `Expect key dtype ${this.keyDType}, but got ` +\n          `${key.dtype}`);\n    }\n\n    if (value.dtype !== this.valueDType) {\n      throw new Error(\n          `Expect value dtype ${this.valueDType}, but got ` +\n          `${value.dtype}`);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}