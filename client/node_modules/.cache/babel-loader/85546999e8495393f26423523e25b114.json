{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../../tensor_util_env';\nimport { assertShapesMatch } from '../../util';\nimport { abs } from '../abs';\nimport { add } from '../add';\nimport { exp } from '../exp';\nimport { log1p } from '../log1p';\nimport { Reduction } from '../loss_ops_utils';\nimport { mul } from '../mul';\nimport { neg } from '../neg';\nimport { op } from '../operation';\nimport { relu } from '../relu';\nimport { scalar } from '../scalar';\nimport { sub } from '../sub';\nimport { computeWeightedLoss } from './compute_weighted_loss';\n\nfunction sigmoidCrossEntropyWithLogits_(labels, logits) {\n  const $labels = convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n  const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n  assertShapesMatch($labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n  /**\n   * Implementation Details:\n   *\n   * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n   *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n   *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n   *   = (1 - z) * x + log(1 + exp(-x))\n   *   = x - x * z + log(1 + exp(-x))\n   *\n   *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n   *     x - x * z + log(1 + exp(-x))\n   *   = log(exp(x)) - x * z + log(1 + exp(-x))\n   *   = - x * z + log(1 + exp(x))\n   *\n   * Hence, to ensure stability and avoid overflow, the implementation uses\n   * this equivalent formulation:\n   *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n   */\n\n  const maxOutput = relu($logits);\n  const outputXTarget = mul($logits, $labels);\n  const sigmoidOutput = log1p(exp(neg(abs($logits))));\n  return add(sub(maxOutput, outputXTarget), sigmoidOutput);\n}\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\n\n\nfunction sigmoidCrossEntropy_(multiClassLabels, logits, weights) {\n  let labelSmoothing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  let reduction = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : Reduction.SUM_BY_NONZERO_WEIGHTS;\n  let $multiClassLabels = convertToTensor(multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n  let $weights = null;\n\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n  }\n\n  assertShapesMatch($multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const half = scalar(0.5);\n    $multiClassLabels = add(mul($multiClassLabels, sub(one, labelSmoothingScalar)), mul(half, labelSmoothingScalar));\n  }\n\n  const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const sigmoidCrossEntropy = op({\n  sigmoidCrossEntropy_\n});","map":{"version":3,"mappings":"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","names":["convertToTensor","assertShapesMatch","abs","add","exp","log1p","Reduction","mul","neg","op","relu","scalar","sub","computeWeightedLoss","sigmoidCrossEntropyWithLogits_","labels","logits","$labels","$logits","shape","maxOutput","outputXTarget","sigmoidOutput","sigmoidCrossEntropy_","multiClassLabels","weights","labelSmoothing","reduction","SUM_BY_NONZERO_WEIGHTS","$multiClassLabels","$weights","labelSmoothingScalar","one","half","losses","sigmoidCrossEntropy"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/losses/sigmoid_cross_entropy.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../../tensor';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport {assertShapesMatch} from '../../util';\nimport {abs} from '../abs';\nimport {add} from '../add';\nimport {exp} from '../exp';\nimport {log1p} from '../log1p';\nimport {Reduction} from '../loss_ops_utils';\nimport {mul} from '../mul';\nimport {neg} from '../neg';\nimport {op} from '../operation';\nimport {relu} from '../relu';\nimport {scalar} from '../scalar';\nimport {sub} from '../sub';\n\nimport {computeWeightedLoss} from './compute_weighted_loss';\n\nfunction sigmoidCrossEntropyWithLogits_<T extends Tensor, O extends Tensor>(\n    labels: T|TensorLike, logits: T|TensorLike): O {\n  const $labels =\n      convertToTensor(labels, 'labels', 'sigmoidCrossEntropyWithLogits');\n  const $logits =\n      convertToTensor(logits, 'logits', 'sigmoidCrossEntropyWithLogits');\n  assertShapesMatch(\n      $labels.shape, $logits.shape, 'Error in sigmoidCrossEntropyWithLogits: ');\n\n  /**\n   * Implementation Details:\n   *\n   * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n   *     z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n   *   = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n   *   = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n   *   = (1 - z) * x + log(1 + exp(-x))\n   *   = x - x * z + log(1 + exp(-x))\n   *\n   *   For x < 0, to avoid overflow in exp(-x), we reformulate the above\n   *     x - x * z + log(1 + exp(-x))\n   *   = log(exp(x)) - x * z + log(1 + exp(-x))\n   *   = - x * z + log(1 + exp(x))\n   *\n   * Hence, to ensure stability and avoid overflow, the implementation uses\n   * this equivalent formulation:\n   *     max(x, 0) - x * z + log(1 + exp(-abs(x)))\n   */\n  const maxOutput = relu($logits);\n  const outputXTarget = mul($logits, $labels);\n  const sigmoidOutput = log1p(exp(neg(abs($logits))));\n\n  return add(sub(maxOutput, outputXTarget), sigmoidOutput);\n}\n\n/**\n * Computes the sigmoid cross entropy loss between two tensors.\n *\n * If labelSmoothing is nonzero, smooth the labels towards 1/2:\n *\n *   newMulticlassLabels = multiclassLabels * (1 - labelSmoothing)\n *                         + 0.5 * labelSmoothing\n *\n * @param multiClassLabels The ground truth output tensor of shape\n * [batch_size, num_classes], same dimensions as 'predictions'.\n * @param logits The predicted outputs.\n * @param weights Tensor whose rank is either 0, or the same rank as\n *    `labels`, and must be broadcastable to `labels` (i.e., all dimensions\n *    must be either `1`, or the same as the corresponding `losses`\n *    dimension).\n * @param labelSmoothing If greater than 0, then smooth the labels.\n * @param reduction Type of reduction to apply to loss. Should be of type\n *    `Reduction`\n *\n * @doc { heading: 'Training', subheading: 'Losses', namespace: 'losses' }\n */\nfunction sigmoidCrossEntropy_<T extends Tensor, O extends Tensor>(\n    multiClassLabels: T|TensorLike, logits: T|TensorLike,\n    weights?: Tensor|TensorLike, labelSmoothing = 0,\n    reduction = Reduction.SUM_BY_NONZERO_WEIGHTS): O {\n  let $multiClassLabels = convertToTensor(\n      multiClassLabels, 'multiClassLabels', 'sigmoidCrossEntropy');\n  const $logits = convertToTensor(logits, 'logits', 'sigmoidCrossEntropy');\n  let $weights: Tensor = null;\n  if (weights != null) {\n    $weights = convertToTensor(weights, 'weights', 'sigmoidCrossEntropy');\n  }\n  assertShapesMatch(\n      $multiClassLabels.shape, $logits.shape, 'Error in sigmoidCrossEntropy: ');\n\n  if (labelSmoothing > 0) {\n    const labelSmoothingScalar = scalar(labelSmoothing);\n    const one = scalar(1);\n    const half = scalar(0.5);\n\n    $multiClassLabels =\n        add(mul($multiClassLabels, sub(one, labelSmoothingScalar)),\n            mul(half, labelSmoothingScalar));\n  }\n  const losses = sigmoidCrossEntropyWithLogits_($multiClassLabels, $logits);\n\n  return computeWeightedLoss(losses, $weights, reduction);\n}\n\nexport const sigmoidCrossEntropy = op({sigmoidCrossEntropy_});\n"]},"metadata":{},"sourceType":"module"}