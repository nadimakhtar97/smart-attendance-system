{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { expandShapeToKeepDim } from './axis_util';\nimport { cast } from './cast';\nimport { mean } from './mean';\nimport { op } from './operation';\nimport { reshape } from './reshape';\nimport { square } from './square';\nimport { sub } from './sub';\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\n\nfunction moments_(x) {\n  let axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  let keepDims = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n\n  const devSquared = square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return {\n    mean: xMean,\n    variance\n  };\n}\n\nexport const moments = op({\n  moments_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAR,QAA8B,oBAA9B;AAEA,SAAQC,cAAR,QAA6B,SAA7B;AAEA,SAAQC,oBAAR,QAAmC,aAAnC;AACA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,MAAR,QAAqB,UAArB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AAEA;;;;;;;;;;;;;;;AAcA,SAASC,QAAT,CACIC,CADJ,EAEoB;AAAA,MADMC,IACN,uEAD8B,IAC9B;AAAA,MAAhBC,QAAgB,uEAAL,KAAK;AAClBF,GAAC,GAAGV,eAAe,CAACU,CAAD,EAAI,GAAJ,EAAS,SAAT,CAAnB;AACA,QAAMG,IAAI,GAAGZ,cAAc,CAACU,IAAD,EAAOD,CAAC,CAACI,KAAT,CAA3B;AACA,QAAMC,KAAK,GAAGX,IAAI,CAACM,CAAD,EAAIG,IAAJ,EAAUD,QAAV,CAAlB;AACA,MAAII,aAAa,GAAGD,KAAK,CAACD,KAA1B;;AACA,MAAI,CAACF,QAAL,EAAe;AACbI,iBAAa,GAAGd,oBAAoB,CAACa,KAAK,CAACD,KAAP,EAAcD,IAAd,CAApC;AACD;;AACD,QAAMI,UAAU,GACZV,MAAM,CAACC,GAAG,CAACL,IAAI,CAACO,CAAD,EAAI,SAAJ,CAAL,EAAqBJ,OAAO,CAACS,KAAD,EAAQC,aAAR,CAA5B,CAAJ,CADV;AAEA,QAAME,QAAQ,GAAGd,IAAI,CAACa,UAAD,EAAaJ,IAAb,EAAmBD,QAAnB,CAArB;AACA,SAAO;AAACR,QAAI,EAAEW,KAAP;AAAcG;AAAd,GAAP;AACD;;AAED,OAAO,MAAMC,OAAO,GAAGd,EAAE,CAAC;AAACI;AAAD,CAAD,CAAlB","names":["convertToTensor","parseAxisParam","expandShapeToKeepDim","cast","mean","op","reshape","square","sub","moments_","x","axis","keepDims","axes","shape","xMean","keepDimsShape","devSquared","variance","moments"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/moments.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {expandShapeToKeepDim} from './axis_util';\nimport {cast} from './cast';\nimport {mean} from './mean';\nimport {op} from './operation';\nimport {reshape} from './reshape';\nimport {square} from './square';\nimport {sub} from './sub';\n\n/**\n * Calculates the mean and variance of `x`. The mean and variance are\n * calculated by aggregating the contents of `x` across `axes`. If `x` is\n * 1-D and `axes = [0]` this is just the mean and variance of a vector.\n *\n * @param x The input tensor.\n * @param axis The dimension(s) along with to compute mean and\n *     variance. By default it reduces all dimensions.\n * @param keepDims If true, the moments have the same dimensionality as the\n *     input.\n * @return An object with two keys: `mean` and `variance`.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction moments_(\n    x: Tensor|TensorLike, axis: number|number[] = null,\n    keepDims = false): {mean: Tensor, variance: Tensor} {\n  x = convertToTensor(x, 'x', 'moments');\n  const axes = parseAxisParam(axis, x.shape);\n  const xMean = mean(x, axes, keepDims);\n  let keepDimsShape = xMean.shape;\n  if (!keepDims) {\n    keepDimsShape = expandShapeToKeepDim(xMean.shape, axes);\n  }\n  const devSquared =\n      square(sub(cast(x, 'float32'), reshape(xMean, keepDimsShape)));\n  const variance = mean(devSquared, axes, keepDims);\n  return {mean: xMean, variance};\n}\n\nexport const moments = op({moments_});\n"]},"metadata":{},"sourceType":"module"}