{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\n\nconst comparePair = (a, b) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\n\n\nfunction select(array, k) {\n  let left = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  let right = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : array.length - 1;\n\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    } // partition the elements between left and right around t\n\n\n    const t = array[k];\n    let i = left;\n    let j = right;\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    } // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n\n\n    if (j <= k) {\n      left = j + 1;\n    }\n\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n    let valAndInd = new Array(vals.length);\n    vals.forEach((value, index) => valAndInd[index] = {\n      value,\n      index\n    });\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n\n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  } // Reshape back to the original input shape, except that the last\n  // dimension is k.\n\n\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n  return [buffer(outputShape, xDtype, allTopKVals), buffer(outputShape, 'int32', allTopKIndices)];\n}","map":{"version":3,"mappings":"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","names":["buffer","util","comparePair","a","b","valueDiff","value","index","select","array","k","left","right","length","n","i","z","Math","log","s","exp","sd","sqrt","sign","newLeft","max","floor","newRight","min","t","j","swap","topKImpl","x","xShape","xDtype","sorted","lastDim","batch","size","allTopKVals","getTypedArrayFromDType","allTopKIndices","offset","vals","subarray","valAndInd","Array","forEach","slice","sort","outOffset","topKVals","topKIndices","outputShape"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/TopK_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/** An implementation of the TopK kernel shared between webgl and cpu. */\n\nimport {buffer, NumericDataType, Rank, ShapeMap, Tensor, TensorBuffer, TypedArray, util} from '@tensorflow/tfjs-core';\n\ntype Pair = {\n  value: number,\n  index: number\n};\n\nconst comparePair = (a: Pair, b: Pair) => {\n  const valueDiff = b.value - a.value;\n  return valueDiff === 0 ? a.index - b.index : valueDiff;\n};\n\n/**\n * Partitions array where all elements smaller than the (k+1) smallest element\n * are found to the left of it, and all larger to the right of it.\n * Based on the Floyd-Rivest Algorithm, ref:\n * https://en.wikipedia.org/wiki/Floyd%E2%80%93Rivest_algorithm\n * @param array: Array to partition\n * @param left: Left index for the interval\n * @param right: Right index for the interval\n * @param k: Desired index value, where array[k] is the (k+1)th smallest element\n *           when left = 0\n */\nfunction select(array: Pair[], k: number, left = 0, right = array.length - 1) {\n  while (right > left) {\n    // Use select recursively to sample a smaller set of size s\n    // the arbitrary constants 600 and 0.5 are used in the original\n    // version to minimize execution time.\n    if (right - left > 600) {\n      const n = right - left + 1;\n      const i = k - left + 1;\n      const z = Math.log(n);\n      const s = 0.5 * Math.exp(2 * z / 3);\n      const sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * Math.sign(i - n / 2);\n      const newLeft = Math.max(left, Math.floor(k - i * s / n + sd));\n      const newRight = Math.min(right, Math.floor(k + (n - i) * s / n + sd));\n      select(array, k, newLeft, newRight);\n    }\n    // partition the elements between left and right around t\n    const t = array[k];\n    let i = left;\n    let j = right;\n\n    util.swap(array, left, k);\n\n    if (comparePair(array[right], t) > 0) {\n      util.swap(array, left, right);\n    }\n    while (i < j) {\n      util.swap(array, i, j);\n      i++;\n      j--;\n      while (comparePair(array[i], t) < 0) {\n        i = i + 1;\n      }\n      while (comparePair(array[j], t) > 0) {\n        j = j - 1;\n      }\n    }\n    if (comparePair(array[left], t) === 0) {\n      util.swap(array, left, j);\n    } else {\n      j = j + 1;\n      util.swap(array, j, right);\n    }\n    // Adjust left and right towards the boundaries of the subset\n    // containing the (k - left + 1)th smallest element.\n    if (j <= k) {\n      left = j + 1;\n    }\n    if (k <= j) {\n      right = j - 1;\n    }\n  }\n}\n\nexport function topKImpl<T extends Tensor, R extends Rank>(\n    x: TypedArray, xShape: number[], xDtype: NumericDataType, k: number,\n    sorted: boolean):\n    [TensorBuffer<R, NumericDataType>, TensorBuffer<R, 'int32'>] {\n  // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n  const lastDim = xShape[xShape.length - 1];\n  const [batch, size] = [x.length / lastDim, lastDim];\n  const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n  const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = x.subarray(offset, offset + size);\n\n    let valAndInd: Pair[] = new Array(vals.length);\n    vals.forEach(\n        (value: number, index: number) => valAndInd[index] = {value, index});\n\n    if (k < valAndInd.length) {\n      select(valAndInd, k);\n      valAndInd = valAndInd.slice(0, k);\n    }\n\n    if (sorted) {\n      valAndInd.sort(comparePair);\n    }\n    \n    const outOffset = b * k;\n    const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n    const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n    for (let i = 0; i < k; i++) {\n      topKVals[i] = valAndInd[i].value;\n      topKIndices[i] = valAndInd[i].index;\n    }\n  }\n  // Reshape back to the original input shape, except that the last\n  // dimension is k.\n  const outputShape = xShape.slice();\n  outputShape[outputShape.length - 1] = k;\n\n  return [\n    buffer(outputShape as ShapeMap[R], xDtype, allTopKVals),\n    buffer(outputShape as ShapeMap[R], 'int32', allTopKIndices)\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}