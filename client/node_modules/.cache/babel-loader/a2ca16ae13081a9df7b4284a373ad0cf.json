{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    dy\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    filterShape\n  } = attrs;\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  const {\n    strideHeight,\n    strideWidth,\n    filterHeight,\n    filterWidth\n  } = convInfo;\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n  const xVals = backend.data.get(x.dataId).values;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n        let dotProd = 0;\n\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += xBuf.get(b, xR, xC, d1) * dyBuf.get(b, yR, yC, d2);\n            }\n          }\n        }\n\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter\n};","map":{"version":3,"mappings":"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","names":["backend_util","DepthwiseConv2dNativeBackpropFilter","TensorBuffer","assertNotComplex","depthwiseConv2dNativeBackpropFilter","args","inputs","backend","attrs","x","dy","strides","dilations","pad","dimRoundingMode","filterShape","convInfo","computeConv2DInfo","shape","strideHeight","strideWidth","filterHeight","filterWidth","dW","leftPad","padInfo","left","topPad","top","chMul","outChannels","inChannels","xVals","data","get","dataId","values","xBuf","dtype","dyVals","dyBuf","wR","yRMin","Math","max","ceil","yRMax","min","outHeight","inHeight","wC","yCMin","yCMax","outWidth","inWidth","d2","d1","trunc","dm","dotProd","b","batchSize","yR","xR","yC","xC","set","makeTensorInfo","depthwiseConv2dNativeBackpropFilterConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropFilter.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropFilter, DepthwiseConv2dNativeBackpropFilterAttrs, DepthwiseConv2dNativeBackpropFilterInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropFilter(args: {\n  inputs: DepthwiseConv2dNativeBackpropFilterInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropFilterAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x, dy} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, filterShape} = attrs;\n\n  assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number], filterShape, strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const {strideHeight, strideWidth, filterHeight, filterWidth} = convInfo;\n\n  const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n\n  const leftPad = convInfo.padInfo.left;\n  const topPad = convInfo.padInfo.top;\n  const chMul = convInfo.outChannels / convInfo.inChannels;\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n  const dyVals = backend.data.get(dy.dataId).values as TypedArray;\n  const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n  for (let wR = 0; wR < filterHeight; ++wR) {\n    const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n    const yRMax = Math.min(\n        convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n\n    for (let wC = 0; wC < filterWidth; ++wC) {\n      const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n      const yCMax = Math.min(\n          convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n\n      for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n        const d1 = Math.trunc(d2 / chMul);\n        const dm = d2 % chMul;\n\n        let dotProd = 0;\n        for (let b = 0; b < convInfo.batchSize; ++b) {\n          for (let yR = yRMin; yR < yRMax; ++yR) {\n            const xR = wR + yR * strideHeight - topPad;\n            for (let yC = yCMin; yC < yCMax; ++yC) {\n              const xC = wC + yC * strideWidth - leftPad;\n              dotProd += (xBuf.get(b, xR, xC, d1) as number) *\n                  (dyBuf.get(b, yR, yC, d2) as number);\n            }\n          }\n        }\n        dW.set(dotProd, wR, wC, d1, dm);\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\n\nexport const depthwiseConv2dNativeBackpropFilterConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropFilter,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropFilter as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}