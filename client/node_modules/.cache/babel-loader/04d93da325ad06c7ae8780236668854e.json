{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, Reverse, util } from '@tensorflow/tfjs-core';\nimport { ReverseProgram } from '../reverse_gpu';\nimport { ReversePackedProgram } from '../reverse_packed_gpu';\nimport { identity } from './Identity';\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  const xRank = x.shape.length;\n  const $dims = util.parseAxisParam(dims, x.shape);\n\n  if (xRank === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ? new ReversePackedProgram(x.shape, $dims) : new ReverseProgram(x.shape, $dims);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,EAAuCC,OAAvC,EAAyFC,IAAzF,QAAoG,uBAApG;AAGA,SAAQC,cAAR,QAA6B,gBAA7B;AACA,SAAQC,oBAAR,QAAmC,uBAAnC;AAEA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAUC,OAAV,CAAkBC,IAAlB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI;AAAD,MAASF,KAAf;AAEA,QAAMG,KAAK,GAAGF,CAAC,CAACG,KAAF,CAAQC,MAAtB;AAEA,QAAMC,KAAK,GAAGd,IAAI,CAACe,cAAL,CAAoBL,IAApB,EAA0BD,CAAC,CAACG,KAA5B,CAAd;;AACA,MAAID,KAAK,KAAK,CAAd,EAAiB;AACf,WAAOR,QAAQ,CAAC;AAACG,YAAM,EAAE;AAACG;AAAD,OAAT;AAAcF;AAAd,KAAD,CAAf;AACD;;AAED,QAAMS,OAAO,GAAGlB,GAAG,GAAGmB,OAAN,CAAc,6BAAd,IACZ,IAAIf,oBAAJ,CAAyBO,CAAC,CAACG,KAA3B,EAAkCE,KAAlC,CADY,GAEZ,IAAIb,cAAJ,CAAmBQ,CAAC,CAACG,KAArB,EAA4BE,KAA5B,CAFJ;AAIA,SAAOP,OAAO,CAACW,eAAR,CAAwBF,OAAxB,EAAiC,CAACP,CAAD,CAAjC,EAAsCA,CAAC,CAACU,KAAxC,CAAP;AACD;AAED,OAAO,MAAMC,aAAa,GAAiB;AACzCC,YAAU,EAAEtB,OAD6B;AAEzCuB,aAAW,EAAE,OAF4B;AAGzCC,YAAU,EAAEnB;AAH6B,CAApC","names":["env","Reverse","util","ReverseProgram","ReversePackedProgram","identity","reverse","args","inputs","backend","attrs","x","dims","xRank","shape","length","$dims","parseAxisParam","program","getBool","runWebGLProgram","dtype","reverseConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Reverse.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ReverseProgram} from '../reverse_gpu';\nimport {ReversePackedProgram} from '../reverse_packed_gpu';\n\nimport {identity} from './Identity';\n\nexport function reverse(args: {\n  inputs: ReverseInputs,\n  backend: MathBackendWebGL,\n  attrs: ReverseAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const program = env().getBool('WEBGL_PACK_ARRAY_OPERATIONS') ?\n      new ReversePackedProgram(x.shape, $dims) :\n      new ReverseProgram(x.shape, $dims);\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'webgl',\n  kernelFunc: reverse as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}