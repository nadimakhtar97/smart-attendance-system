{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\n\nexport function unaryKernelFunc(name, op, dtype) {\n  return _ref => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref;\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\n\nexport function unaryKernelFuncFromImpl(name, unaryImpl, dtype) {\n  return _ref2 => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref2;\n    const {\n      x\n    } = inputs;\n    assertNotComplex(x, name);\n\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend;\n    const values = cpuBackend.data.get(x.dataId).values;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAuDA,IAAvD,QAAkE,uBAAlE;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAIA;;;;;;;;;AAQA,OAAM,SAAUC,eAAV,CACFC,IADE,EACYC,EADZ,EACsCC,KADtC,EACsD;AAC1D,SAAO,QAA6B;AAAA,QAA5B;AAACC,YAAD;AAASC,WAAT;AAAgBC;AAAhB,KAA4B;AAClC,UAAM;AAACC;AAAD,QAAMH,MAAZ;AACAL,oBAAgB,CAACQ,CAAD,EAAIN,IAAJ,CAAhB;;AACA,QAAIM,CAAC,CAACJ,KAAF,KAAY,QAAZ,IAAwBA,KAAK,KAAK,QAAtC,EAAgD;AAC9C,YAAM,IAAIK,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,UAAMC,UAAU,GAAGH,OAAnB;AACA,UAAMI,MAAM,GAAGD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBL,CAAC,CAACM,MAAtB,EAA8BH,MAA7C;AACA,UAAMI,KAAK,GAAGhB,IAAI,CAACiB,aAAL,CAAmBR,CAAC,CAACS,KAArB,CAAd;AACA,UAAMC,MAAM,GAAGd,KAAK,IAAII,CAAC,CAACJ,KAA1B;AACA,UAAMe,SAAS,GAAGpB,IAAI,CAACqB,iBAAL,CAAuBF,MAAvB,EAA+BH,KAA/B,CAAlB;;AACA,SAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,KAApB,EAA2B,EAAEM,CAA7B,EAAgC;AAC9BF,eAAS,CAACE,CAAD,CAAT,GAAelB,EAAE,CAACQ,MAAM,CAACU,CAAD,CAAP,EAAYf,KAAZ,CAAjB;AACD;;AACD,WAAOI,UAAU,CAACY,cAAX,CAA0Bd,CAAC,CAACS,KAA5B,EAAmCC,MAAnC,EAA2CC,SAA3C,CAAP;AACD,GAhBD;AAiBD;AAED;;;;;;;;;;AASA,OAAM,SAAUI,uBAAV,CACFrB,IADE,EACYsB,SADZ,EACwCpB,KADxC,EACwD;AAC5D,SAAO,SAA6B;AAAA,QAA5B;AAACC,YAAD;AAASC,WAAT;AAAgBC;AAAhB,KAA4B;AAClC,UAAM;AAACC;AAAD,QAAMH,MAAZ;AACAL,oBAAgB,CAACQ,CAAD,EAAIN,IAAJ,CAAhB;;AACA,QAAIM,CAAC,CAACJ,KAAF,KAAY,QAAZ,IAAwBA,KAAK,KAAK,QAAtC,EAAgD;AAC9C,YAAM,IAAIK,KAAJ,CAAU,sDAAV,CAAN;AACD;;AAED,UAAMC,UAAU,GAAGH,OAAnB;AACA,UAAMI,MAAM,GAAGD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBL,CAAC,CAACM,MAAtB,EAA8BH,MAA7C;AACA,UAAMO,MAAM,GAAGd,KAAK,IAAII,CAAC,CAACJ,KAA1B;AACA,UAAMe,SAAS,GAAGK,SAAS,CAACb,MAAD,EAASO,MAAT,EAAiBZ,KAAjB,CAA3B;AACA,WAAOI,UAAU,CAACY,cAAX,CAA0Bd,CAAC,CAACS,KAA5B,EAAmCC,MAAnC,EAA2CC,SAA3C,CAAP;AACD,GAZD;AAaD","names":["util","assertNotComplex","unaryKernelFunc","name","op","dtype","inputs","attrs","backend","x","Error","cpuBackend","values","data","get","dataId","xSize","sizeFromShape","shape","$dtype","newValues","getArrayFromDType","i","makeTensorInfo","unaryKernelFuncFromImpl","unaryImpl"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/utils/unary_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelFunc, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {SimpleUnaryImpl, SimpleUnaryOperation} from './unary_types';\n\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param name Kernel name.\n * @param op A `SimpleUnaryOperation` for the kernel.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFunc(\n    name: string, op: SimpleUnaryOperation, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const xSize = util.sizeFromShape(x.shape);\n    const $dtype = dtype || x.dtype;\n    const newValues = util.getArrayFromDType($dtype, xSize);\n    for (let i = 0; i < xSize; ++i) {\n      newValues[i] = op(values[i], attrs);\n    }\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n\n/**\n * Template that creates a `KernelFunc` for unary ops from the given\n * `SimpleUnaryImpl`..\n * @param name Kernel name.\n * @param unaryImpl A `SimpleUnaryImpl` that implements the op.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the input. This is mainly used in certain\n *     kernels that return bool type, such as isFinite, isInf, etc.\n */\nexport function unaryKernelFuncFromImpl(\n    name: string, unaryImpl: SimpleUnaryImpl, dtype?: DataType): KernelFunc {\n  return ({inputs, attrs, backend}) => {\n    const {x} = inputs as UnaryInputs;\n    assertNotComplex(x, name);\n    if (x.dtype === 'string' || dtype === 'string') {\n      throw new Error('unaryKernelFunc does not support string input/output');\n    }\n\n    const cpuBackend = backend as MathBackendCPU;\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const $dtype = dtype || x.dtype;\n    const newValues = unaryImpl(values, $dtype, attrs);\n    return cpuBackend.makeTensorInfo(x.shape, $dtype, newValues);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}