{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: engine/training.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { io, Optimizer, scalar, serialization, Tensor, tensor1d, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { nameScope } from '../common';\nimport { NotImplementedError, RuntimeError, ValueError } from '../errors';\nimport { deserialize } from '../layers/serialization';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport { checkUserDefinedMetadata } from '../user_defined_metadata';\nimport { count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique } from '../utils/generic_utils';\nimport { printSummary } from '../utils/layer_utils';\nimport { range } from '../utils/math_utils';\nimport { convertPythonicToTs } from '../utils/serialization_utils';\nimport { version } from '../version';\nimport { Container } from './container';\nimport { execute, FeedDict } from './executor';\nimport { evaluateDataset, fitDataset } from './training_dataset';\nimport { checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, fitTensors, makeBatches, sliceArrays, sliceArraysByIndices } from './training_tensors';\nimport { computeWeightedLoss, standardizeClassWeights, standardizeWeights } from './training_utils';\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\n\nexport function isDataTensor(x) {\n  return x instanceof Tensor;\n}\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\n\nexport function isDataArray(x) {\n  return Array.isArray(x);\n}\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\n\nexport function isDataDict(x) {\n  return !isDataTensor(x) && !isDataArray(x);\n}\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\n\nexport function standardizeInputData(data, names, shapes) {\n  let checkBatchAxis = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  let exceptionPrefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n\n  if (names == null || names.length === 0) {\n    // Check for the case where the model expected no data, but some data got\n    // sent.\n    if (data != null) {\n      let gotUnexpectedData = false;\n\n      if (isDataArray(data) && data.length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        // `data` is a singleton Tensor in this case.\n        gotUnexpectedData = true;\n      }\n\n      if (gotUnexpectedData) {\n        throw new ValueError(`Error when checking model ${exceptionPrefix} expected no data, ` + `but got ${data}`);\n      }\n    }\n\n    return [];\n  }\n\n  if (data == null) {\n    return names.map(name => null);\n  }\n\n  let arrays;\n\n  if (isDataDict(data)) {\n    data = data;\n    arrays = [];\n\n    for (const name of names) {\n      if (data[name] == null) {\n        throw new ValueError(`No data provided for \"${name}\". Need data for each key in: ` + `${names}`);\n      }\n\n      arrays.push(data[name]);\n    }\n  } else if (isDataArray(data)) {\n    data = data;\n\n    if (data.length !== names.length) {\n      throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` + `Tensors that you are passing to your model is not the size the ` + `model expected. Expected to see ${names.length} Tensor(s), but ` + `instead got the following list of Tensor(s): ${data}`);\n    }\n\n    arrays = data;\n  } else {\n    data = data;\n\n    if (names.length > 1) {\n      throw new ValueError(`The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` + `but only received one Tensor. Found: Tensor with shape ${data.shape}`);\n    }\n\n    arrays = [data];\n  }\n\n  arrays = ensureTensorsRank2OrHigher(arrays); // Check shape compatibility.\n\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n\n      const array = arrays[i];\n\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have ${shapes[i].length} dimension(s). but got array with ` + `shape ${array.shape}`);\n      }\n\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          // Skip the first (batch) axis.\n          continue;\n        }\n\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(`${exceptionPrefix} expected a batch of elements where each ` + `example has shape [${shapes[i].slice(1, shapes[i].length)}] ` + `(i.e.,tensor shape [*,${shapes[i].slice(1, shapes[i].length)}])` + ` but the ${exceptionPrefix} received an input with ${array.shape[0]}` + ` examples, each with shape [${array.shape.slice(1, array.shape.length)}]` + ` (tensor shape [${array.shape}])`);\n        }\n      }\n    }\n  }\n\n  return arrays;\n}\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\n\nexport function checkArrayLengths(inputs, targets, weights) {\n  const setX = unique(inputs.map(input => input.shape[0]));\n  setX.sort();\n  const setY = unique(targets.map(target => target.shape[0]));\n  setY.sort(); // TODO(cais): Check `weights` as well.\n\n  if (setX.length > 1) {\n    throw new ValueError(`All input Tensors (x) should have the same number of samples. ` + `Got array shapes: ` + `${JSON.stringify(inputs.map(input => input.shape))}`);\n  }\n\n  if (setY.length > 1) {\n    throw new ValueError(`All target Tensors (y) should have the same number of samples. ` + `Got array shapes: ` + `${JSON.stringify(targets.map(target => target.shape))}`);\n  }\n\n  if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n    throw new ValueError(`Input Tensors should have the same number of samples as target ` + `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` + `sample(s).`);\n  }\n}\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\n\nfunction checkLossAndTargetCompatibility(targets, lossFns, outputShapes) {\n  // TODO(cais): Dedicated test coverage?\n  const keyLosses = [losses.meanSquaredError, losses.binaryCrossentropy, losses.categoricalCrossentropy];\n\n  for (let i = 0; i < targets.length; ++i) {\n    const y = targets[i];\n    const loss = lossFns[i];\n    const shape = outputShapes[i];\n\n    if (loss == null) {\n      continue;\n    }\n\n    if (loss === losses.categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(`You are passing a target array of shape ${y.shape} while using ` + `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` + `expects targets to be binary matrices (1s and 0s) of shape ` + `[samples, classes].`); // TODO(cais): Example code in error message.\n      }\n    }\n\n    if (keyLosses.indexOf(loss) !== -1) {\n      const slicedYShape = y.shape.slice(1);\n      const slicedShape = shape.slice(1);\n\n      for (let j = 0; j < slicedYShape.length; ++j) {\n        const targetDim = slicedYShape[j];\n        const outDim = slicedShape[j];\n\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(`A target Tensor with shape ${y.shape} was passed for an ` + `output of shape ${shape}, while using a loss function that ` + `expects targets to have the same shape as the output.`);\n        }\n      }\n    }\n  }\n}\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\n\n\nfunction checkInputData(data, names, shapes) {\n  let checkBatchAxis = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  let exceptionPrefix = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';\n  let arrays;\n\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(`Error when checking model ${exceptionPrefix}: the Array of ` + `Tensors that you are passing to your model is not the size the ` + `the model expected. Expected to see ${names.length} Tensor(s),` + ` but instead got ${data.length} Tensors(s).`);\n    }\n\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(`The model expects ${names.length} ${exceptionPrefix} Tensors, ` + `but only received one Tensor. Found: array with shape ` + `${JSON.stringify(data.shape)}.`);\n    }\n\n    arrays = [data];\n  }\n\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n\n      const array = arrays[i];\n\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(`Error when checking ${exceptionPrefix}: expected ${names[i]} ` + `to have ${shapes[i].length} dimension(s), but got array with ` + `shape ${JSON.stringify(array.shape)}`);\n      }\n\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(`Error when checking ${exceptionPrefix}: expected ` + `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` + `got array with shape ${JSON.stringify(array.shape)}.`);\n          }\n        }\n      }\n    }\n  }\n}\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\n\n\nexport function collectMetrics(metrics, outputNames) {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map(name => []);\n  }\n\n  let wrappedMetrics;\n\n  if (typeof metrics === 'string' || typeof metrics === 'function') {\n    wrappedMetrics = [metrics];\n  } else if (Array.isArray(metrics) || typeof metrics === 'object') {\n    wrappedMetrics = metrics;\n  } else {\n    throw new TypeError('Type of metrics argument not understood. Expected an string,' + `function, Array, or Object, found: ${metrics}`);\n  }\n\n  if (Array.isArray(wrappedMetrics)) {\n    // We then apply all metrics to all outputs.\n    return outputNames.map(name => wrappedMetrics);\n  } else {\n    // In this case, metrics is a dict.\n    const nestedMetrics = [];\n\n    for (const name of outputNames) {\n      let outputMetrics = wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n\n      if (!Array.isArray(outputMetrics)) {\n        outputMetrics = [outputMetrics];\n      }\n\n      nestedMetrics.push(outputMetrics);\n    }\n\n    return nestedMetrics;\n  }\n}\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\n\nexport class LayersModel extends Container {\n  constructor(args) {\n    super(args);\n    this.isTraining = false;\n  }\n  /**\n   * Print a text summary of the model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - If the model has non-sequential-like topology, the inputs each layer\n   *   receives\n   * - The total number of trainable and non-trainable parameters of the model.\n   *\n   * ```js\n   * const input1 = tf.input({shape: [10]});\n   * const input2 = tf.input({shape: [20]});\n   * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n   * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n   * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n   * const output =\n   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n   *\n   * const model = tf.model({inputs: [input1, input2], outputs: output});\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  summary(lineLength, positions) {\n    let printFn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : console.log;\n\n    if (!this.built) {\n      throw new ValueError(`This model has never been called, thus its weights have not been ` + `created yet. So no summary can be displayed. Build the model ` + `first (e.g., by calling it on some test data).`);\n    }\n\n    printSummary(this, lineLength, positions, printFn);\n  }\n  /**\n   * Configures and prepares the model for training and evaluation.  Compiling\n   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n   * or `evaluate` on an un-compiled model will throw an error.\n   *\n   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n   * metrics to be used for fitting and evaluating this model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  compile(args) {\n    if (args.loss == null) {\n      args.loss = [];\n    }\n\n    this.loss = args.loss;\n\n    if (typeof args.optimizer === 'string') {\n      this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n      this.isOptimizerOwned = true;\n    } else {\n      if (!(args.optimizer instanceof Optimizer)) {\n        throw new ValueError(`User-defined optimizer must be an instance of tf.Optimizer.`);\n      }\n\n      this.optimizer_ = args.optimizer;\n      this.isOptimizerOwned = false;\n    } // TODO(cais): Add lossWeights.\n    // TODO(cais): Add sampleWeightMode.\n    // Prepare loss functions.\n\n\n    let lossFunctions = [];\n\n    if (!Array.isArray(args.loss) && typeof args.loss !== 'string' && typeof args.loss !== 'function') {\n      args.loss = args.loss;\n\n      for (const name in args.loss) {\n        if (this.outputNames.indexOf(name) === -1) {\n          throw new ValueError(`Unknown entry in loss dictionary: \"${name}\". ` + `Only expected the following keys: ${this.outputNames}`);\n        }\n      }\n\n      for (const name of this.outputNames) {\n        if (args.loss[name] == null) {\n          console.warn(`Output \"${name}\" is missing from loss dictionary. We assume ` + `this was done on purpose, and we will not be expecting data ` + `to be passed to ${name} during training`);\n        }\n\n        lossFunctions.push(losses.get(args.loss[name]));\n      }\n    } else if (Array.isArray(args.loss)) {\n      if (args.loss.length !== this.outputs.length) {\n        throw new ValueError(`When passing an Array as loss, it should have one entry per ` + `model output. The model has ${this.outputs.length} output(s), ` + `but you passed loss=${args.loss}.`);\n      }\n\n      const theLosses = args.loss;\n      lossFunctions = theLosses.map(l => losses.get(l));\n    } else {\n      const lossFunction = losses.get(args.loss);\n      this.outputs.forEach(_ => {\n        lossFunctions.push(lossFunction);\n      });\n    }\n\n    this.lossFunctions = lossFunctions;\n    this.feedOutputNames = [];\n    this.feedOutputShapes = [];\n    this.feedLossFns = [];\n\n    for (let i = 0; i < this.outputs.length; ++i) {\n      // TODO(cais): Logic for skipping target(s).\n      const shape = this.internalOutputShapes[i];\n      const name = this.outputNames[i];\n      this.feedOutputNames.push(name);\n      this.feedOutputShapes.push(shape);\n      this.feedLossFns.push(this.lossFunctions[i]);\n    } // TODO(cais): Add logic for output masks.\n    // TODO(cais): Add logic for sample weights.\n\n\n    const skipTargetIndices = []; // Prepare metrics.\n\n    this.metrics = args.metrics; // TODO(cais): Add weightedMetrics.\n\n    this.metricsNames = ['loss'];\n    this.metricsTensors = []; // Compute total loss.\n    // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n    //   Here, metricsTensors are TypeScript functions. This difference is due\n    //   to the difference in symbolic/imperative property of the backends.\n\n    nameScope('loss', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        } // TODO(cais): Add weightedLoss, sampleWeight and mask.\n        //   The following line should be weightedLoss\n\n\n        const weightedLoss = this.lossFunctions[i];\n\n        if (this.outputs.length > 1) {\n          this.metricsTensors.push([weightedLoss, i]);\n          this.metricsNames.push(this.outputNames[i] + '_loss');\n        }\n      } // Porting Note: Due to the imperative nature of the backend, we calculate\n      //   the regularizer penalties in the totalLossFunction, instead of here.\n\n    });\n    const nestedMetrics = collectMetrics(args.metrics, this.outputNames); // TODO(cais): Add nestedWeightedMetrics.\n\n    /**\n     * Helper function used in loop below.\n     */\n\n    const appendMetric = (outputIndex, metricName, metricTensor) => {\n      if (this.outputNames.length > 1) {\n        metricName = this.outputNames[outputIndex] + '_' + metricName;\n      }\n\n      this.metricsNames.push(metricName);\n      this.metricsTensors.push([metricTensor, outputIndex]);\n    };\n\n    nameScope('metric', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n\n        const outputMetrics = nestedMetrics[i]; // TODO(cais): Add weights and outputWeightedMetrics.\n        // TODO(cais): Add optional arg `weights` to the following function.\n\n        const handleMetrics = metrics => {\n          const metricNamePrefix = '';\n          let metricName;\n          let accFn;\n          let weightedMetricFn; //  TODO(cais): Use 'weights_' for weighted metrics.\n\n          for (const metric of metrics) {\n            if (typeof metric === 'string' && ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !== -1) {\n              const outputShape = this.internalOutputShapes[i];\n\n              if (outputShape[outputShape.length - 1] === 1 || this.lossFunctions[i] === losses.binaryCrossentropy) {\n                // case: binary accuracy/crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryCrossentropy;\n                }\n              } else if (this.lossFunctions[i] === losses.sparseCategoricalCrossentropy) {\n                // case: categorical accuracy / crossentropy with sparse\n                // targets.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalCrossentropy;\n                }\n              } else {\n                // case: categorical accuracy / crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalCrossentropy;\n                }\n              }\n\n              let suffix;\n\n              if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                suffix = 'acc';\n              } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                suffix = 'ce';\n              } // TODO(cais): Add weighting actually.\n\n\n              weightedMetricFn = accFn;\n              metricName = metricNamePrefix + suffix;\n            } else {\n              const metricFn = Metrics.get(metric); // TODO(cais): Add weighting actually.\n\n              weightedMetricFn = metricFn;\n              metricName = metricNamePrefix + Metrics.getLossOrMetricName(metric);\n            } // TODO(cais): Add weighting and masking to metricResult.\n\n\n            let metricResult;\n            nameScope(metricName, () => {\n              metricResult = weightedMetricFn;\n            });\n            appendMetric(i, metricName, metricResult);\n          }\n        };\n\n        handleMetrics(outputMetrics); // TODO(cais): Call handleMetrics with weights.\n      }\n    }); // Porting Notes: Given the imperative backend of tfjs-core,\n    //   there is no need for constructing the symbolic graph and placeholders.\n\n    this.collectedTrainableWeights = this.trainableWeights;\n  }\n  /**\n   * Check trainable weights count consistency.\n   *\n   * This will raise a warning if `this.trainableWeights` and\n   * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n   * numbers of parameters).\n   * Inconsistency will typically arise when one modifies `model.trainable`\n   * without calling `model.compile()` again.\n   */\n\n\n  checkTrainableWeightsConsistency() {\n    if (this.collectedTrainableWeights == null) {\n      return;\n    }\n\n    if (this.trainableWeights.length !== this.collectedTrainableWeights.length) {\n      console.warn('Discrepancy between trainableweights and collected trainable ' + 'weights. Did you set `model.trainable` without calling ' + '`model.compile()` afterwards?');\n    }\n  }\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(\n   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateArgs`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  evaluate(x, y) {\n    let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize); // TODO(cais): Standardize `config.sampleWeights` as well.\n    // Validate user data.\n\n    const checkBatchAxis = true;\n    const standardizedOuts = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n\n    try {\n      // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n      // of the input to 0.\n      const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n      this.makeTestFunction();\n      const f = this.testFunction;\n      const testOuts = this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n      return singletonOrArray(testOuts);\n    } finally {\n      disposeNewTensors(standardizedOuts[0], x);\n      disposeNewTensors(standardizedOuts[1], y);\n    }\n  } // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  async evaluateDataset(dataset, args) {\n    this.makeTestFunction();\n    return evaluateDataset(this, dataset, args);\n  }\n  /**\n   * Get number of samples provided for training, evaluation or prediction.\n   *\n   * @param ins Input `tf.Tensor`.\n   * @param batchSize Integer batch size, optional.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring loop finished. Optional.\n   * @param stepsName The public API's parameter name for `steps`.\n   * @returns Number of samples provided.\n   */\n\n\n  checkNumSamples(ins, batchSize, steps) {\n    let stepsName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'steps';\n    let numSamples;\n\n    if (steps != null) {\n      numSamples = null;\n\n      if (batchSize != null) {\n        throw new ValueError(`If ${stepsName} is set, batchSize must be null or undefined.` + `Got batchSize = ${batchSize}`);\n      }\n    } else if (ins != null) {\n      if (Array.isArray(ins)) {\n        numSamples = ins[0].shape[0];\n      } else {\n        numSamples = ins.shape[0];\n      }\n    } else {\n      throw new ValueError(`Either the input data should have a defined shape, or ` + `${stepsName} shoud be specified.`);\n    }\n\n    return numSamples;\n  }\n  /**\n   * Execute internal tensors of the model with input data feed.\n   * @param inputs Input data feed. Must match the inputs of the model.\n   * @param outputs Names of the output tensors to be fetched. Must match\n   *   names of the SymbolicTensors that belong to the graph.\n   * @returns Fetched values for `outputs`.\n   */\n\n\n  execute(inputs, outputs) {\n    if (Array.isArray(outputs) && outputs.length === 0) {\n      throw new ValueError('`outputs` is an empty Array, which is not allowed.');\n    }\n\n    const outputsIsArray = Array.isArray(outputs);\n    const outputNames = outputsIsArray ? outputs : [outputs];\n    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames); // Format the input into a FeedDict.\n\n    const feedDict = new FeedDict();\n\n    if (inputs instanceof Tensor) {\n      inputs = [inputs];\n    }\n\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== this.inputs.length) {\n        throw new ValueError(`The number of inputs provided (${inputs.length}) ` + `does not match the number of inputs of this model ` + `(${this.inputs.length}).`);\n      }\n\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n    } else {\n      for (const input of this.inputs) {\n        const tensorValue = inputs[input.name];\n\n        if (tensorValue == null) {\n          throw new ValueError(`No value is provided for the model's input ${input.name}`);\n        }\n\n        feedDict.add(input, tensorValue);\n      }\n    } // Run execution.\n\n\n    const executeOutputs = execute(outputSymbolicTensors, feedDict);\n    return outputsIsArray ? executeOutputs : executeOutputs[0];\n  }\n  /**\n   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n   */\n\n\n  retrieveSymbolicTensors(symbolicTensorNames) {\n    const outputSymbolicTensors = pyListRepeat(null, symbolicTensorNames.length);\n    let outputsRemaining = symbolicTensorNames.length;\n\n    for (const layer of this.layers) {\n      const layerOutputs = Array.isArray(layer.output) ? layer.output : [layer.output];\n      const layerOutputNames = layerOutputs.map(output => output.name);\n\n      for (let i = 0; i < symbolicTensorNames.length; ++i) {\n        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n\n        if (index !== -1) {\n          outputSymbolicTensors[i] = layerOutputs[index];\n          outputsRemaining--;\n        }\n\n        if (outputsRemaining === 0) {\n          break;\n        }\n      }\n\n      if (outputsRemaining === 0) {\n        break;\n      }\n    }\n\n    if (outputsRemaining > 0) {\n      const remainingNames = [];\n      outputSymbolicTensors.forEach((tensor, i) => {\n        if (tensor == null) {\n          remainingNames.push(symbolicTensorNames[i]);\n        }\n      });\n      throw new ValueError(`Cannot find SymbolicTensors for output name(s): ` + `${JSON.stringify(remainingNames)}`);\n    }\n\n    return outputSymbolicTensors;\n  }\n  /**\n   * Helper method to loop over some data in batches.\n   *\n   * Porting Note: Not using the functional approach in the Python equivalent\n   *   due to the imperative backend.\n   * Porting Note: Does not support step mode currently.\n   *\n   * @param ins: input data\n   * @param batchSize: integer batch size.\n   * @param verbose: verbosity model\n   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n   *   `tf.Tensor` (if multipe outputs).\n   */\n\n\n  predictLoop(ins) {\n    let batchSize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;\n    let verbose = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins);\n\n      if (verbose) {\n        throw new NotImplementedError('Verbose predictLoop() is not implemented yet.');\n      } // Sample-based predictions.\n      // Porting Note: Tensor currently does not support sliced assignments as\n      //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n      //   iterating over the batches.\n\n\n      const batches = makeBatches(numSamples, batchSize);\n      const outsBatches = this.outputs.map(output => []); // TODO(cais): Can the scope() be pushed down inside the for loop?\n\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchOuts = tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1]; // TODO(cais): Take care of the case of the last element is a flag for\n          //   training/test.\n\n          const insBatch = sliceArrays(ins, batchStart, batchEnd); // Construct the feeds for execute();\n\n          const feeds = [];\n\n          if (Array.isArray(insBatch)) {\n            for (let i = 0; i < insBatch.length; ++i) {\n              feeds.push({\n                key: this.inputs[i],\n                value: insBatch[i]\n              });\n            }\n          } else {\n            feeds.push({\n              key: this.inputs[0],\n              value: insBatch\n            });\n          }\n\n          const feedDict = new FeedDict(feeds);\n          return execute(this.outputs, feedDict);\n        });\n        batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n      }\n\n      return singletonOrArray(outsBatches.map(batches => tfc.concat(batches, 0)));\n    });\n  }\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFlow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n   * ```\n   *\n   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param args A `ModelPredictArgs` object containing optional fields.\n   *\n   * @return Prediction results as a `tf.Tensor`(s).\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  predict(x) {\n    let args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n    checkInputData(xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n\n    try {\n      // TODO(cais): Take care of stateful models.\n      //   if (this.stateful) ...\n      // TODO(cais): Take care of the learning_phase boolean flag.\n      //   if (this.useLearningPhase) ...\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      return this.predictLoop(xsRank2OrHigher, batchSize);\n    } finally {\n      disposeNewTensors(xsRank2OrHigher, x);\n    }\n  }\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predictOnBatch(tf.ones([8, 10])).print();\n   * ```\n   * @param x: Input samples, as a Tensor (for models with exactly one\n   *   input) or an array of Tensors (for models with more than one input).\n   * @return Tensor(s) of predictions\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  predictOnBatch(x) {\n    checkInputData(x, this.inputNames, this.feedInputShapes, true); // TODO(cais): Take care of the learning_phase boolean flag.\n    //   if (this.useLearningPhase) ...\n\n    const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n    return this.predictLoop(x, batchSize);\n  }\n\n  standardizeUserDataXY(x, y) {\n    let checkBatchAxis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    let batchSize = arguments.length > 3 ? arguments[3] : undefined;\n\n    // TODO(cais): Add sampleWeight, classWeight\n    if (this.optimizer_ == null) {\n      throw new RuntimeError('You must compile a model before training/testing. Use ' + 'LayersModel.compile(modelCompileArgs).');\n    }\n\n    const outputShapes = [];\n\n    for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n      const outputShape = this.feedOutputShapes[i];\n      const lossFn = this.feedLossFns[i];\n\n      if (lossFn === losses.sparseCategoricalCrossentropy) {\n        outputShapes.push(outputShape.slice(0, outputShape.length - 1).concat([1]));\n      } else {\n        // Porting Note: Because of strong typing `lossFn` must be a function.\n        outputShapes.push(outputShape);\n      }\n    }\n\n    x = standardizeInputData(x, this.feedInputNames, this.feedInputShapes, false, 'input');\n    y = standardizeInputData(y, this.feedOutputNames, outputShapes, false, 'target'); // TODO(cais): Standardize sampleWeights & classWeights.\n\n    checkArrayLengths(x, y, null); // TODO(cais): Check sampleWeights as well.\n\n    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n\n    if (this.stateful && batchSize != null && batchSize > 0) {\n      if (x[0].shape[0] % batchSize !== 0) {\n        throw new ValueError(`In a stateful network, you should only pass inputs with a ` + `number of samples that is divisible by the batch size ` + `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n      }\n    }\n\n    return [x, y];\n  }\n\n  async standardizeUserData(x, y, sampleWeight, classWeight) {\n    let checkBatchAxis = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    let batchSize = arguments.length > 5 ? arguments[5] : undefined;\n    const [standardXs, standardYs] = this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize); // TODO(cais): Handle sampleWeights.\n\n    if (sampleWeight != null) {\n      throw new Error('sample weight is not supported yet.');\n    }\n\n    let standardSampleWeights = null;\n\n    if (classWeight != null) {\n      const classWeights = standardizeClassWeights(classWeight, this.outputNames);\n      standardSampleWeights = [];\n\n      for (let i = 0; i < classWeights.length; ++i) {\n        standardSampleWeights.push(await standardizeWeights(standardYs[i], null, classWeights[i]));\n      }\n    } // TODO(cais): Deal with the case of model.stateful == true.\n\n\n    return [standardXs, standardYs, standardSampleWeights];\n  }\n  /**\n   * Loop over some test data in batches.\n   * @param f A Function returning a list of tensors.\n   * @param ins Array of tensors to be fed to `f`.\n   * @param batchSize Integer batch size or `null` / `undefined`.\n   * @param verbose verbosity mode.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring test finished. Ignored with the default value of `null` /\n   * `undefined`.\n   * @returns Array of Scalars.\n   */\n\n\n  testLoop(f, ins, batchSize) {\n    let verbose = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n    let steps = arguments.length > 4 ? arguments[4] : undefined;\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n      const outs = [];\n\n      if (verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n      } // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n\n\n      if (steps != null) {\n        throw new NotImplementedError('steps mode in testLoop() is not implemented yet');\n      } else {\n        const batches = makeBatches(numSamples, batchSize);\n        const indexArray = tensor1d(range(0, numSamples));\n\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds = K.sliceAlongFirstAxis(indexArray, batchStart, batchEnd - batchStart); // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n\n          const insBatch = sliceArraysByIndices(ins, batchIds);\n          const batchOuts = f(insBatch);\n\n          if (batchIndex === 0) {\n            for (let i = 0; i < batchOuts.length; ++i) {\n              outs.push(scalar(0));\n            }\n          }\n\n          for (let i = 0; i < batchOuts.length; ++i) {\n            const batchOut = batchOuts[i];\n            outs[i] = tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n          }\n        }\n\n        for (let i = 0; i < outs.length; ++i) {\n          outs[i] = tfc.div(outs[i], numSamples);\n        }\n      }\n\n      return outs;\n    });\n  }\n\n  getDedupedMetricsNames() {\n    const outLabels = this.metricsNames; // Rename duplicated metrics names (can happen with an output layer\n    // shared among multiple dataflows).\n\n    const dedupedOutLabels = [];\n\n    for (let i = 0; i < outLabels.length; ++i) {\n      const label = outLabels[i];\n      let newLabel = label;\n\n      if (count(outLabels, label) > 1) {\n        const dupIndex = count(outLabels.slice(0, i), label);\n        newLabel += `_${dupIndex}`;\n      }\n\n      dedupedOutLabels.push(newLabel);\n    }\n\n    return dedupedOutLabels;\n  }\n  /**\n   * Creates a function that performs the following actions:\n   *\n   * 1. computes the losses\n   * 2. sums them to get the total loss\n   * 3. call the optimizer computes the gradients of the LayersModel's\n   *    trainable weights w.r.t. the total loss and update the variables\n   * 4. calculates the metrics\n   * 5. returns the values of the losses and metrics.\n   */\n\n\n  makeTrainFunction() {\n    return data => {\n      const lossValues = [];\n      const inputs = data.slice(0, this.inputs.length);\n      const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n      const sampleWeights = data.slice(this.inputs.length + this.outputs.length, this.inputs.length + this.outputs.length * 2);\n      const metricsValues = []; // Create a function that computes the total loss based on the\n      // inputs. This function is used for obtaining gradients through\n      // backprop.\n\n      const totalLossFunction = () => {\n        const feeds = [];\n\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({\n            key: this.inputs[i],\n            value: inputs[i]\n          });\n        }\n\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict, {\n          'training': true\n        }); // TODO(cais): Take care of the case of multiple outputs from a\n        //   single layer?\n\n        let totalLoss;\n\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          let loss = lossFunction(targets[i], outputs[i]);\n\n          if (sampleWeights[i] != null) {\n            loss = computeWeightedLoss(loss, sampleWeights[i]);\n          } // TODO(cais): push Scalar instead.\n\n\n          const meanLoss = tfc.mean(loss); // TODO(cais): Use a scope() instead, to avoid ownership.\n\n          lossValues.push(meanLoss);\n\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n        } // Compute the metrics.\n        // TODO(cais): These should probably be calculated outside\n        //   totalLossFunction to benefit speed?\n\n\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          let weightedMetric;\n\n          if (this.outputs.length > 1 && i < this.outputs.length) {\n            weightedMetric = lossValues[i];\n          } else {\n            const metric = this.metricsTensors[i][0];\n            const outputIndex = this.metricsTensors[i][1];\n            weightedMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          }\n\n          tfc.keep(weightedMetric); // TODO(cais): Use a scope() instead, to avoid ownership.\n\n          metricsValues.push(weightedMetric);\n        }\n\n        totalLoss = tfc.mean(totalLoss); // Add regularizer penalties.\n\n        this.calculateLosses().forEach(regularizerLoss => {\n          totalLoss = tfc.add(totalLoss, regularizerLoss);\n        });\n        return totalLoss;\n      };\n\n      const variables = this.collectedTrainableWeights.map(param => param.read());\n      const returnCost = true;\n      const totalLossValue = this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n      return [totalLossValue].concat(metricsValues);\n    };\n  }\n  /**\n   * Create a function which, when invoked with an array of `tf.Tensor`s as a\n   * batch of inputs, returns the prespecified loss and metrics of the model\n   * under the batch of input data.\n   */\n\n\n  makeTestFunction() {\n    this.testFunction = data => {\n      return tfc.tidy(() => {\n        const valOutputs = [];\n        let totalLoss;\n        const inputs = data.slice(0, this.inputs.length);\n        const targets = data.slice(this.inputs.length, this.inputs.length + this.outputs.length);\n        const feeds = [];\n\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({\n            key: this.inputs[i],\n            value: inputs[i]\n          });\n        }\n\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict); // Compute total loss.\n\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i]; // TODO(cais): Add sample weighting and replace the simple\n          // averaging.\n\n          const loss = tfc.mean(lossFunction(targets[i], outputs[i]));\n\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n\n          valOutputs.push(totalLoss);\n        } // Compute the metrics.\n\n\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1]; // TODO(cais): Replace K.mean() with a proper weighting function.\n\n          const meanMetric = tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          valOutputs.push(meanMetric);\n        }\n\n        return valOutputs;\n      });\n    };\n  }\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a\n   * dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * for (let i = 1; i < 5 ; ++i) {\n   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *       batchSize: 4,\n   *       epochs: 3\n   *   });\n   *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n   * }\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you\n   * can also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named,\n   * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args A `ModelFitArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input\n   * data and what the model expects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  async fit(x, y) {\n    let args = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    return fitTensors(this, x, y, args);\n  } // TODO(cais): Add code snippet below when it's possible to instantiate\n  //   actual dataset objects.\n\n  /**\n   * Trains the model using a dataset object.\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for training. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs.\n   *   Of the two items in the array, the first is the input feature(s) and\n   *   the second is the output target(s).\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  async fitDataset(dataset, args) {\n    return fitDataset(this, dataset, args);\n  }\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and matric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target darta. It could be either a `tf.Tensor` a multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  async trainOnBatch(x, y) {\n    // TODO(cais): Support sampleWeight and classWeight.\n    // TODO(cais): Support Dataset objects.\n    const standardizeOut = await this.standardizeUserData(x, y);\n    const inputs = standardizeOut[0];\n    const targets = standardizeOut[1];\n    const trainFunction = this.makeTrainFunction();\n    const losses = trainFunction(inputs.concat(targets));\n    const lossValues = [];\n\n    for (const loss of losses) {\n      const v = await loss.data();\n      lossValues.push(v[0]);\n    }\n\n    tfc.dispose(losses);\n    disposeNewTensors(standardizeOut[0], x);\n    disposeNewTensors(standardizeOut[1], y);\n    return singletonOrArray(lossValues);\n  }\n  /**\n   * Extract weight values of the model.\n   *\n   * @param config: An instance of `io.SaveConfig`, which specifies\n   * model-saving options such as whether only trainable weights are to be\n   * saved.\n   * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n   *   non-uniqueified weight names) to their values.\n   */\n\n\n  getNamedWeights(config) {\n    const namedWeights = [];\n    const trainableOnly = config != null && config.trainableOnly;\n    const weights = trainableOnly ? this.trainableWeights : this.weights;\n    const weightValues = this.getWeights(trainableOnly);\n\n    for (let i = 0; i < weights.length; ++i) {\n      if (trainableOnly && !weights[i].trainable) {\n        // Optionally skip non-trainable weights.\n        continue;\n      }\n\n      namedWeights.push({\n        name: weights[i].originalName,\n        tensor: weightValues[i]\n      });\n    }\n\n    return namedWeights;\n  }\n  /**\n   * Setter used for force stopping of LayersModel.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const input = tf.input({shape: [10]});\n   * const output = tf.layers.dense({units: 1}).apply(input);\n   * const model = tf.model({inputs: [input], outputs: [output]});\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10\n   * values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n\n\n  set stopTraining(stop) {\n    this.stopTraining_ = stop;\n  }\n\n  get stopTraining() {\n    return this.stopTraining_;\n  }\n\n  get optimizer() {\n    return this.optimizer_;\n  }\n\n  set optimizer(optimizer) {\n    if (this.optimizer_ !== optimizer) {\n      this.optimizer_ = optimizer;\n      this.isOptimizerOwned = false;\n    }\n  }\n\n  dispose() {\n    const result = super.dispose();\n\n    if (result.refCountAfterDispose === 0 && this.optimizer != null && this.isOptimizerOwned) {\n      const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n      this.optimizer_.dispose();\n      result.numDisposedVariables += numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n    }\n\n    return result;\n  }\n\n  getLossIdentifiers() {\n    let lossNames;\n\n    if (typeof this.loss === 'string') {\n      lossNames = toSnakeCase(this.loss);\n    } else if (Array.isArray(this.loss)) {\n      for (const loss of this.loss) {\n        if (typeof loss !== 'string') {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n\n      lossNames = this.loss.map(name => toSnakeCase(name));\n    } else {\n      const outputNames = Object.keys(this.loss);\n      lossNames = {};\n      const losses = this.loss;\n\n      for (const outputName of outputNames) {\n        if (typeof losses[outputName] === 'string') {\n          lossNames[outputName] = toSnakeCase(losses[outputName]);\n        } else {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n    }\n\n    return lossNames;\n  }\n\n  getMetricIdentifiers() {\n    if (typeof this.metrics === 'string' || typeof this.metrics === 'function') {\n      return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n    } else if (Array.isArray(this.metrics)) {\n      return this.metrics.map(metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n    } else {\n      const metricsIdentifiers = {};\n\n      for (const key in this.metrics) {\n        metricsIdentifiers[key] = toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n      }\n\n      return metricsIdentifiers;\n    }\n  }\n\n  getTrainingConfig() {\n    return {\n      loss: this.getLossIdentifiers(),\n      metrics: this.getMetricIdentifiers(),\n      optimizer_config: {\n        class_name: this.optimizer.getClassName(),\n        config: this.optimizer.getConfig()\n      }\n    }; // TODO(cais): Add weight_metrics when they are supported.\n    // TODO(cais): Add sample_weight_mode when it's supported.\n    // TODO(cais): Add loss_weights when it's supported.\n  }\n\n  loadTrainingConfig(trainingConfig) {\n    if (trainingConfig.weighted_metrics != null) {\n      throw new Error('Loading weight_metrics is not supported yet.');\n    }\n\n    if (trainingConfig.loss_weights != null) {\n      throw new Error('Loading loss_weights is not supported yet.');\n    }\n\n    if (trainingConfig.sample_weight_mode != null) {\n      throw new Error('Loading sample_weight_mode is not supported yet.');\n    }\n\n    const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config);\n    const optimizer = deserialize(tsConfig);\n    let loss;\n\n    if (typeof trainingConfig.loss === 'string') {\n      loss = toCamelCase(trainingConfig.loss);\n    } else if (Array.isArray(trainingConfig.loss)) {\n      loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n    } else if (trainingConfig.loss != null) {\n      loss = {};\n\n      for (const key in trainingConfig.loss) {\n        loss[key] = toCamelCase(trainingConfig.loss[key]);\n      }\n    }\n\n    let metrics;\n\n    if (Array.isArray(trainingConfig.metrics)) {\n      metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n    } else if (trainingConfig.metrics != null) {\n      metrics = {};\n\n      for (const key in trainingConfig.metrics) {\n        metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n      }\n    }\n\n    this.compile({\n      loss,\n      metrics,\n      optimizer\n    });\n  }\n  /**\n   * Save the configuration and/or weights of the LayersModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 2. Saving `model`'s topology and weights to browser\n   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('indexeddb://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 3. Saving `model`'s topology and weights as two files\n   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n   * browser.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('downloads://my-model-1');\n   * ```\n   *\n   * Example 4. Send  `model`'s topology and weights to an HTTP server.\n   * See the documentation of `tf.io.http` for more details\n   * including specifying request parameters and implementation of the\n   * server.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('http://my-server/model/upload');\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n\n\n  async save(handlerOrURL, config) {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n\n      if (handlers.length === 0) {\n        throw new ValueError(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new ValueError(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);\n      }\n\n      handlerOrURL = handlers[0];\n    }\n\n    if (handlerOrURL.save == null) {\n      throw new ValueError('LayersModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');\n    }\n\n    const weightDataAndSpecs = await io.encodeWeights(this.getNamedWeights(config));\n    const returnString = false;\n    const unusedArg = null;\n    const modelConfig = this.toJSON(unusedArg, returnString);\n    const modelArtifacts = {\n      modelTopology: modelConfig,\n      format: LAYERS_MODEL_FORMAT_NAME,\n      generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n      convertedBy: null\n    };\n    const includeOptimizer = config == null ? false : config.includeOptimizer;\n\n    if (includeOptimizer && this.optimizer != null) {\n      modelArtifacts.trainingConfig = this.getTrainingConfig();\n      const weightType = 'optimizer';\n      const {\n        data: optimizerWeightData,\n        specs: optimizerWeightSpecs\n      } = await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n      weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n      weightDataAndSpecs.data = io.concatenateArrayBuffers([weightDataAndSpecs.data, optimizerWeightData]);\n    }\n\n    if (this.userDefinedMetadata != null) {\n      // Check serialized size of user-defined metadata.\n      const checkSize = true;\n      checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n      modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n    }\n\n    modelArtifacts.weightData = weightDataAndSpecs.data;\n    modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n    return handlerOrURL.save(modelArtifacts);\n  }\n  /**\n   * Set user-defined metadata.\n   *\n   * The set metadata will be serialized together with the topology\n   * and weights of the model during `save()` calls.\n   *\n   * @param setUserDefinedMetadata\n   */\n\n\n  setUserDefinedMetadata(userDefinedMetadata) {\n    checkUserDefinedMetadata(userDefinedMetadata, this.name);\n    this.userDefinedMetadata = userDefinedMetadata;\n  }\n  /**\n   * Get user-defined metadata.\n   *\n   * The metadata is supplied via one of the two routes:\n   *   1. By calling `setUserDefinedMetadata()`.\n   *   2. Loaded during model loading (if the model is constructed\n   *      via `tf.loadLayersModel()`.)\n   *\n   * If no user-defined metadata is available from either of the\n   * two routes, this function will return `undefined`.\n   */\n\n\n  getUserDefinedMetadata() {\n    return this.userDefinedMetadata;\n  }\n\n} // The class name is 'Model' rather than 'LayersModel' for backwards\n// compatibility since this class name shows up in the serialization format.\n\n/** @nocollapse */\n\nLayersModel.className = 'Model';\nserialization.registerClass(LayersModel);\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n\n/** @doc {heading: 'Models', subheading: 'Classes'} */\n\nexport class Functional extends LayersModel {}\nFunctional.className = 'Functional';\nserialization.registerClass(Functional);","map":{"version":3,"mappings":"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","names":["tfc","io","Optimizer","scalar","serialization","Tensor","tensor1d","util","K","nameScope","NotImplementedError","RuntimeError","ValueError","deserialize","losses","Metrics","optimizers","checkUserDefinedMetadata","count","pyListRepeat","singletonOrArray","toCamelCase","toSnakeCase","unique","printSummary","range","convertPythonicToTs","version","Container","execute","FeedDict","evaluateDataset","fitDataset","checkBatchSize","disposeNewTensors","ensureTensorsRank2OrHigher","fitTensors","makeBatches","sliceArrays","sliceArraysByIndices","computeWeightedLoss","standardizeClassWeights","standardizeWeights","isDataTensor","x","isDataArray","Array","isArray","isDataDict","standardizeInputData","data","names","shapes","checkBatchAxis","exceptionPrefix","length","gotUnexpectedData","key","hasOwnProperty","map","name","arrays","push","shape","i","array","j","dim","refDim","slice","checkArrayLengths","inputs","targets","weights","setX","input","sort","setY","target","JSON","stringify","arraysEqual","checkLossAndTargetCompatibility","lossFns","outputShapes","keyLosses","meanSquaredError","binaryCrossentropy","categoricalCrossentropy","y","loss","indexOf","slicedYShape","slicedShape","targetDim","outDim","checkInputData","collectMetrics","metrics","outputNames","wrappedMetrics","TypeError","nestedMetrics","outputMetrics","LAYERS_MODEL_FORMAT_NAME","LayersModel","constructor","args","isTraining","summary","lineLength","positions","printFn","console","log","built","compile","optimizer","optimizer_","getOptimizer","isOptimizerOwned","lossFunctions","warn","get","outputs","theLosses","l","lossFunction","forEach","_","feedOutputNames","feedOutputShapes","feedLossFns","internalOutputShapes","skipTargetIndices","metricsNames","metricsTensors","weightedLoss","appendMetric","outputIndex","metricName","metricTensor","handleMetrics","metricNamePrefix","accFn","weightedMetricFn","metric","outputShape","binaryAccuracy","sparseCategoricalCrossentropy","sparseCategoricalAccuracy","categoricalAccuracy","suffix","metricFn","getLossOrMetricName","metricResult","collectedTrainableWeights","trainableWeights","checkTrainableWeightsConsistency","evaluate","batchSize","standardizedOuts","standardizeUserDataXY","ins","concat","makeTestFunction","f","testFunction","testOuts","testLoop","verbose","steps","dataset","checkNumSamples","stepsName","numSamples","outputsIsArray","outputSymbolicTensors","retrieveSymbolicTensors","feedDict","add","tensorValue","executeOutputs","symbolicTensorNames","outputsRemaining","layer","layers","layerOutputs","output","layerOutputNames","index","remainingNames","tensor","predictLoop","tidy","batches","outsBatches","batchIndex","batchOuts","batchStart","batchEnd","insBatch","feeds","value","batchOut","predict","xsRank2OrHigher","inputNames","feedInputShapes","predictOnBatch","lossFn","feedInputNames","stateful","standardizeUserData","sampleWeight","classWeight","standardXs","standardYs","Error","standardSampleWeights","classWeights","outs","indexArray","batchIds","sliceAlongFirstAxis","mul","div","getDedupedMetricsNames","outLabels","dedupedOutLabels","label","newLabel","dupIndex","makeTrainFunction","lossValues","sampleWeights","metricsValues","totalLossFunction","totalLoss","meanLoss","mean","weightedMetric","keep","calculateLosses","regularizerLoss","variables","param","read","returnCost","totalLossValue","minimize","valOutputs","meanMetric","fit","trainOnBatch","standardizeOut","trainFunction","v","dispose","getNamedWeights","config","namedWeights","trainableOnly","weightValues","getWeights","trainable","originalName","stopTraining","stop","stopTraining_","result","refCountAfterDispose","numTensorsBeforeOptmizerDisposal","memory","numTensors","numDisposedVariables","getLossIdentifiers","lossNames","Object","keys","outputName","getMetricIdentifiers","metricsIdentifiers","getTrainingConfig","optimizer_config","class_name","getClassName","getConfig","loadTrainingConfig","trainingConfig","weighted_metrics","loss_weights","sample_weight_mode","tsConfig","lossEntry","save","handlerOrURL","handlers","getSaveHandlers","weightDataAndSpecs","encodeWeights","returnString","unusedArg","modelConfig","toJSON","modelArtifacts","modelTopology","format","generatedBy","convertedBy","includeOptimizer","weightType","optimizerWeightData","specs","optimizerWeightSpecs","concatenateArrayBuffers","userDefinedMetadata","checkSize","weightData","weightSpecs","setUserDefinedMetadata","getUserDefinedMetadata","registerClass","Functional"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/engine/training.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/* Original Source: engine/training.py */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {io, ModelPredictConfig as ModelPredictArgs, NamedTensorMap, Optimizer, Scalar, scalar, serialization, Tensor, Tensor1D, tensor1d, util} from '@tensorflow/tfjs-core';\n\nimport * as K from '../backend/tfjs_backend';\nimport {History, ModelLoggingVerbosity} from '../base_callbacks';\nimport {nameScope} from '../common';\nimport {NotImplementedError, RuntimeError, ValueError} from '../errors';\nimport {Shape} from '../keras_format/common';\nimport {LossIdentifier} from '../keras_format/loss_config';\nimport {OptimizerSerialization} from '../keras_format/optimizer_config';\nimport {MetricsIdentifier, TrainingConfig} from '../keras_format/training_config';\nimport {deserialize} from '../layers/serialization';\nimport * as losses from '../losses';\nimport * as Metrics from '../metrics';\nimport * as optimizers from '../optimizers';\nimport {LossOrMetricFn, NamedTensor} from '../types';\nimport {checkUserDefinedMetadata} from '../user_defined_metadata';\nimport {count, pyListRepeat, singletonOrArray, toCamelCase, toSnakeCase, unique} from '../utils/generic_utils';\nimport {printSummary} from '../utils/layer_utils';\nimport {range} from '../utils/math_utils';\nimport {convertPythonicToTs} from '../utils/serialization_utils';\nimport {LayerVariable} from '../variables';\nimport {version} from '../version';\n\nimport {Container, ContainerArgs} from './container';\nimport {Dataset} from './dataset_stub';\nimport {execute, FeedDict} from './executor';\nimport {DisposeResult, SymbolicTensor} from './topology';\nimport {evaluateDataset, fitDataset, ModelEvaluateDatasetArgs, ModelFitDatasetArgs} from './training_dataset';\nimport {checkBatchSize, disposeNewTensors, ensureTensorsRank2OrHigher, fitTensors, makeBatches, ModelFitArgs, sliceArrays, sliceArraysByIndices} from './training_tensors';\nimport {ClassWeight, ClassWeightMap, computeWeightedLoss, standardizeClassWeights, standardizeWeights} from './training_utils';\n\n/**\n * Helper function for polymorphic input data: 1. singleton Tensor.\n */\nexport function isDataTensor(x: Tensor|Tensor[]|{[inputName: string]: Tensor}|\n                             {[inputName: string]: Tensor[]}): boolean {\n  return x instanceof Tensor;\n}\n\n/**\n * Helper function for polymorphic input data: 2. Array of Tensor.\n */\nexport function isDataArray(x: Tensor|Tensor[]|\n                            {[inputName: string]: Tensor}): boolean {\n  return Array.isArray(x);\n}\n\n/**\n * Helper function for polymorphic input data: 3. \"dict\" of Tensor.\n */\nexport function isDataDict(x: Tensor|Tensor[]|\n                           {[inputName: string]: Tensor}): boolean {\n  return !isDataTensor(x) && !isDataArray(x);\n}\n\n/**\n * Normalizes inputs and targets provided by users.\n * @param data User-provided input data (polymorphic).\n * @param names An Array of expected Tensor names.\n * @param shapes Optional Array of expected Tensor shapes.\n * @param checkBatchAxis Whether to check that the batch axis of the arrays\n *   match  the expected value found in `shapes`.\n * @param exceptionPrefix String prefix used for exception formatting.\n * @returns List of standardized input Tensors (one Tensor per model input).\n * @throws ValueError: in case of improperly formatted user data.\n */\nexport function standardizeInputData(\n    data: Tensor|Tensor[]|{[inputName: string]: Tensor}, names: string[],\n    shapes?: Shape[], checkBatchAxis = true, exceptionPrefix = ''): Tensor[] {\n  if (names == null || names.length === 0) {\n    // Check for the case where the model expected no data, but some data got\n    // sent.\n    if (data != null) {\n      let gotUnexpectedData = false;\n      if (isDataArray(data) && (data as Tensor[]).length > 0) {\n        gotUnexpectedData = true;\n      } else if (isDataDict(data)) {\n        for (const key in data) {\n          if (data.hasOwnProperty(key)) {\n            gotUnexpectedData = true;\n            break;\n          }\n        }\n      } else {\n        // `data` is a singleton Tensor in this case.\n        gotUnexpectedData = true;\n      }\n      if (gotUnexpectedData) {\n        throw new ValueError(\n            `Error when checking model ${exceptionPrefix} expected no data, ` +\n            `but got ${data}`);\n      }\n    }\n    return [];\n  }\n  if (data == null) {\n    return names.map(name => null);\n  }\n\n  let arrays: Tensor[];\n  if (isDataDict(data)) {\n    data = data as {[inputName: string]: Tensor};\n    arrays = [];\n    for (const name of names) {\n      if (data[name] == null) {\n        throw new ValueError(\n            `No data provided for \"${name}\". Need data for each key in: ` +\n            `${names}`);\n      }\n      arrays.push(data[name]);\n    }\n  } else if (isDataArray(data)) {\n    data = data as Tensor[];\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `model expected. Expected to see ${names.length} Tensor(s), but ` +\n          `instead got the following list of Tensor(s): ${data}`);\n    }\n    arrays = data;\n  } else {\n    data = data as Tensor;\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model ${exceptionPrefix} expects ${names.length} Tensor(s), ` +\n          `but only received one Tensor. Found: Tensor with shape ${\n              data.shape}`);\n    }\n    arrays = [data];\n  }\n\n  arrays = ensureTensorsRank2OrHigher(arrays);\n\n  // Check shape compatibility.\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s). but got array with ` +\n            `shape ${array.shape}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          // Skip the first (batch) axis.\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null && refDim >= 0 && dim !== refDim) {\n          throw new ValueError(\n              `${exceptionPrefix} expected a batch of elements where each ` +\n              `example has shape [${shapes[i].slice(1, shapes[i].length)}] ` +\n              `(i.e.,tensor shape [*,${\n                  shapes[i].slice(1, shapes[i].length)}])` +\n              ` but the ${exceptionPrefix} received an input with ${\n                  array.shape[0]}` +\n              ` examples, each with shape [${\n                  array.shape.slice(1, array.shape.length)}]` +\n              ` (tensor shape [${array.shape}])`);\n        }\n      }\n    }\n  }\n  return arrays;\n}\n\n/**\n * User input validation for Tensors.\n * @param inputs `Array` of `tf.Tensor`s for inputs.\n * @param targets `Array` of `tf.Tensor`s for targets.\n * @param weights Optional `Array` of `tf.Tensor`s for sample weights.\n * @throws ValueError: in case of incorrectly formatted data.\n */\nexport function checkArrayLengths(\n    inputs: Tensor[], targets: Tensor[], weights?: Tensor[]) {\n  const setX = unique(inputs.map(input => input.shape[0]));\n  setX.sort();\n  const setY = unique(targets.map(target => target.shape[0]));\n  setY.sort();\n  // TODO(cais): Check `weights` as well.\n  if (setX.length > 1) {\n    throw new ValueError(\n        `All input Tensors (x) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(inputs.map(input => input.shape))}`);\n  }\n  if (setY.length > 1) {\n    throw new ValueError(\n        `All target Tensors (y) should have the same number of samples. ` +\n        `Got array shapes: ` +\n        `${JSON.stringify(targets.map(target => target.shape))}`);\n  }\n  if (setX.length > 0 && setY.length > 0 && !util.arraysEqual(setX, setY)) {\n    throw new ValueError(\n        `Input Tensors should have the same number of samples as target ` +\n        `Tensors. Found ${setX[0]} input sample(s) and ${setY[0]} target ` +\n        `sample(s).`);\n  }\n}\n\n/**\n * Validation on the compatibility of targes and loss functions.\n *\n * This helps prevent users from using loss functions incorrectly.\n *\n * @param targets `Array` of `tf.Tensor`s of targets.\n * @param lossFns `Array` of loss functions.\n * @param outputShapes `Array` of shapes of model outputs.\n */\nfunction checkLossAndTargetCompatibility(\n    targets: Tensor[], lossFns: LossOrMetricFn[], outputShapes: Shape[]) {\n  // TODO(cais): Dedicated test coverage?\n  const keyLosses = [\n    losses.meanSquaredError, losses.binaryCrossentropy,\n    losses.categoricalCrossentropy\n  ];\n  for (let i = 0; i < targets.length; ++i) {\n    const y = targets[i];\n    const loss = lossFns[i];\n    const shape = outputShapes[i];\n    if (loss == null) {\n      continue;\n    }\n    if (loss === losses.categoricalCrossentropy) {\n      if (y.shape[y.shape.length - 1] === 1) {\n        throw new ValueError(\n            `You are passing a target array of shape ${y.shape} while using ` +\n            `a loss 'categorical_crossentropy'. 'categorical_crossentropy'` +\n            `expects targets to be binary matrices (1s and 0s) of shape ` +\n            `[samples, classes].`);\n        // TODO(cais): Example code in error message.\n      }\n    }\n    if (keyLosses.indexOf(loss) !== -1) {\n      const slicedYShape = y.shape.slice(1);\n      const slicedShape = shape.slice(1);\n      for (let j = 0; j < slicedYShape.length; ++j) {\n        const targetDim = slicedYShape[j];\n        const outDim = slicedShape[j];\n        if (outDim != null && targetDim !== outDim) {\n          throw new ValueError(\n              `A target Tensor with shape ${y.shape} was passed for an ` +\n              `output of shape ${shape}, while using a loss function that ` +\n              `expects targets to have the same shape as the output.`);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Check inputs provided by the user.\n *\n * Porting Note: This corresponds to _standardize_input_data() in Python\n *   Keras. Because of the strong typing in TF.js, we do not need to convert\n *   the data. Specifically:\n *   1) in PyKeras, `data` can be `DataFrame` instances from pandas, for\n *      example. We don't need to worry about that here because there is no\n *      widely popular javascript/typesdcript equivalent of pandas (so far).\n *      If one becomes available in the future, we can add support.\n *   2) in PyKeras, inputs can be Python dict. But here we are stipulating\n * that the data is either a single `tf.Tensor` or an Array of `tf.Tensor`s. We\n * may add support for `Object` data inputs in the future when the need\n * arises.\n *\n * Instead, we perform basic checks for number of parameters and shapes.\n *\n * @param data: The input data.\n * @param names: Name for the inputs, from the model.\n * @param shapes: Expected shapes for the input data, from the model.\n * @param checkBatchAxis: Whether the size along the batch axis (i.e., the\n *   first dimension) will be checked for matching.\n * @param exceptionPrefix: Execption prefix message, used in generating error\n *   messages.\n * @throws ValueError: on incorrect number of inputs or mismatches in shapes.\n */\nfunction checkInputData(\n    data: Tensor|Tensor[], names: string[], shapes?: Shape[],\n    checkBatchAxis = true, exceptionPrefix = '') {\n  let arrays: Tensor[];\n  if (Array.isArray(data)) {\n    if (data.length !== names.length) {\n      throw new ValueError(\n          `Error when checking model ${exceptionPrefix}: the Array of ` +\n          `Tensors that you are passing to your model is not the size the ` +\n          `the model expected. Expected to see ${names.length} Tensor(s),` +\n          ` but instead got ${data.length} Tensors(s).`);\n    }\n    arrays = data;\n  } else {\n    if (names.length > 1) {\n      throw new ValueError(\n          `The model expects ${names.length} ${exceptionPrefix} Tensors, ` +\n          `but only received one Tensor. Found: array with shape ` +\n          `${JSON.stringify(data.shape)}.`);\n    }\n    arrays = [data];\n  }\n\n  if (shapes != null) {\n    for (let i = 0; i < names.length; ++i) {\n      if (shapes[i] == null) {\n        continue;\n      }\n      const array = arrays[i];\n      if (array.shape.length !== shapes[i].length) {\n        throw new ValueError(\n            `Error when checking ${exceptionPrefix}: expected ${names[i]} ` +\n            `to have ${shapes[i].length} dimension(s), but got array with ` +\n            `shape ${JSON.stringify(array.shape)}`);\n      }\n      for (let j = 0; j < shapes[i].length; ++j) {\n        if (j === 0 && !checkBatchAxis) {\n          continue;\n        }\n        const dim = array.shape[j];\n        const refDim = shapes[i][j];\n        if (refDim != null) {\n          if (refDim !== dim) {\n            throw new ValueError(\n                `Error when checking ${exceptionPrefix}: expected ` +\n                `${names[i]} to have shape ${JSON.stringify(shapes[i])} but ` +\n                `got array with shape ${JSON.stringify(array.shape)}.`);\n          }\n        }\n      }\n    }\n  }\n}\n\n/**\n * Maps metric functions to model outputs.\n * @param metrics An shortcut strings name, metric function, `Array` or dict\n *   (`Object`) of metric functions.\n * @param outputNames An `Array` of the names of model outputs.\n * @returns An `Array` (one entry per model output) of `Array` of metric\n *   functions. For instance, if the model has 2 outputs, and for the first\n *   output we want to compute `binaryAccuracy` and `binaryCrossentropy`,\n *   and just `binaryAccuracy` for the second output, the `Array` would look\n *   like:\n *     `[[binaryAccuracy, binaryCrossentropy],  [binaryAccuracy]]`\n * @throws TypeError: incompatible metrics format.\n */\nexport function collectMetrics(\n    metrics: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n    {[outputName: string]: string | LossOrMetricFn},\n    outputNames: string[]): Array<Array<string|LossOrMetricFn>> {\n  if (metrics == null || Array.isArray(metrics) && metrics.length === 0) {\n    return outputNames.map(name => []);\n  }\n\n  let wrappedMetrics: Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n  if (typeof metrics === 'string' || typeof metrics === 'function') {\n    wrappedMetrics = [metrics];\n  } else if (Array.isArray(metrics) || typeof metrics === 'object') {\n    wrappedMetrics = metrics as Array<string|LossOrMetricFn>|\n        {[outputName: string]: string} | {[outputName: string]: LossOrMetricFn};\n  } else {\n    throw new TypeError(\n        'Type of metrics argument not understood. Expected an string,' +\n        `function, Array, or Object, found: ${metrics}`);\n  }\n\n  if (Array.isArray(wrappedMetrics)) {\n    // We then apply all metrics to all outputs.\n    return outputNames.map(\n        name => wrappedMetrics as Array<string|LossOrMetricFn>);\n  } else {\n    // In this case, metrics is a dict.\n    const nestedMetrics: Array<Array<string|LossOrMetricFn>> = [];\n    for (const name of outputNames) {\n      let outputMetrics: string|LossOrMetricFn|Array<string|LossOrMetricFn> =\n          wrappedMetrics.hasOwnProperty(name) ? wrappedMetrics[name] : [];\n      if (!Array.isArray(outputMetrics)) {\n        outputMetrics = [outputMetrics];\n      }\n      nestedMetrics.push(outputMetrics);\n    }\n    return nestedMetrics;\n  }\n}\n\nexport interface ModelEvaluateArgs {\n  /**\n   * Batch size (Integer). If unspecified, it will default to 32.\n   */\n  batchSize?: number;\n\n  /**\n   * Verbosity mode.\n   */\n  verbose?: ModelLoggingVerbosity;\n\n  /**\n   * Tensor of weights to weight the contribution of different samples to the\n   * loss and metrics.\n   */\n  sampleWeight?: Tensor;\n\n  /**\n   * integer: total number of steps (batches of samples)\n   * before declaring the evaluation round finished. Ignored with the default\n   * value of `undefined`.\n   */\n  steps?: number;\n}\n\n/**\n * Configuration for calls to `LayersModel.compile()`.\n */\nexport interface ModelCompileArgs {\n  /**\n   * An instance of `tf.train.Optimizer` or a string name for an Optimizer.\n   */\n  optimizer: string|Optimizer;\n\n  /**\n   * Object function(s) or name(s) of object function(s).\n   * If the model has multiple outputs, you can use a different loss\n   * on each output by passing a dictionary or an Array of losses.\n   * The loss value that will be minimized by the model will then be the sum\n   * of all individual losses.\n   */\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n\n  /**\n   * List of metrics to be evaluated by the model during training and testing.\n   * Typically you will use `metrics=['accuracy']`.\n   * To specify different metrics for different outputs of a multi-output\n   * model, you could also pass a dictionary.\n   */\n  metrics?: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n\n  // TODO(cais): Add lossWeights, sampleWeightMode, weightedMetrics, and\n  //   targetTensors.\n}\n\nconst LAYERS_MODEL_FORMAT_NAME = 'layers-model';\n\n/**\n * A `tf.LayersModel` is a directed, acyclic graph of `tf.Layer`s plus methods\n * for training, evaluation, prediction and saving.\n *\n * `tf.LayersModel` is the basic unit of training, inference and evaluation in\n * TensorFlow.js. To create a `tf.LayersModel`, use `tf.LayersModel`.\n *\n * See also:\n *   `tf.Sequential`, `tf.loadLayersModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class LayersModel extends Container implements tfc.InferenceModel {\n  // The class name is 'Model' rather than 'LayersModel' for backwards\n  // compatibility since this class name shows up in the serialization format.\n  /** @nocollapse */\n  static className = 'Model';\n  protected optimizer_: Optimizer;\n  // Whether the model instance owns the optimizer: `true` if and only if\n  // `optimizer` is created from a string parameter during `compile()` call.\n  protected isOptimizerOwned: boolean;\n\n  loss: string|string[]|{[outputName: string]: string}|LossOrMetricFn|\n      LossOrMetricFn[]|{[outputName: string]: LossOrMetricFn};\n  lossFunctions: LossOrMetricFn[];\n\n  // TODO(cais): These private variables should probably not have the string\n  //   'feed' in their names, because we are not dealing with a symbolic\n  //   backend.\n  private feedOutputShapes: Shape[];\n  private feedLossFns: LossOrMetricFn[];\n  private collectedTrainableWeights: LayerVariable[];\n  private testFunction: (data: Tensor[]) => Scalar[];\n  history: History;\n\n  // A public property that can be set by Callbacks to order early stopping\n  // during `fit()` calls.\n  protected stopTraining_: boolean;\n  protected isTraining: boolean;\n\n  metrics: string|LossOrMetricFn|Array<string|LossOrMetricFn>|\n      {[outputName: string]: string | LossOrMetricFn};\n  metricsNames: string[];\n  // Porting Note: `metrics_tensors` in PyKeras is a symbolic tensor. But given\n  //   the imperative nature of tfjs-core, `metricsTensors` is a\n  //   TypeScript function here.\n  //   Also note that due to the imperative nature of tfjs-core, `metricsTensor`\n  //   here needs an output index to keep track of which output of the\n  //   LayersModel a metric belongs to. This is unlike `metrics_tensors` in\n  //   PyKeras, which is a `list` of symbolic tensors, each of which has\n  //   implicit \"knowledge\" of the outputs it depends on.\n  metricsTensors: Array<[LossOrMetricFn, number]>;\n\n  // User defind metadata (if any).\n  private userDefinedMetadata: {};\n\n  constructor(args: ContainerArgs) {\n    super(args);\n    this.isTraining = false;\n  }\n\n  /**\n   * Print a text summary of the model's layers.\n   *\n   * The summary includes\n   * - Name and type of all layers that comprise the model.\n   * - Output shape(s) of the layers\n   * - Number of weight parameters of each layer\n   * - If the model has non-sequential-like topology, the inputs each layer\n   *   receives\n   * - The total number of trainable and non-trainable parameters of the model.\n   *\n   * ```js\n   * const input1 = tf.input({shape: [10]});\n   * const input2 = tf.input({shape: [20]});\n   * const dense1 = tf.layers.dense({units: 4}).apply(input1);\n   * const dense2 = tf.layers.dense({units: 8}).apply(input2);\n   * const concat = tf.layers.concatenate().apply([dense1, dense2]);\n   * const output =\n   *     tf.layers.dense({units: 3, activation: 'softmax'}).apply(concat);\n   *\n   * const model = tf.model({inputs: [input1, input2], outputs: output});\n   * model.summary();\n   * ```\n   *\n   * @param lineLength Custom line length, in number of characters.\n   * @param positions Custom widths of each of the columns, as either\n   *   fractions of `lineLength` (e.g., `[0.5, 0.75, 1]`) or absolute number\n   *   of characters (e.g., `[30, 50, 65]`). Each number corresponds to\n   *   right-most (i.e., ending) position of a column.\n   * @param printFn Custom print function. Can be used to replace the default\n   *   `console.log`. For example, you can use `x => {}` to mute the printed\n   *   messages in the console.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  summary(\n      lineLength?: number, positions?: number[],\n      printFn:\n          // tslint:disable-next-line:no-any\n      (message?: any, ...optionalParams: any[]) => void = console.log) {\n    if (!this.built) {\n      throw new ValueError(\n          `This model has never been called, thus its weights have not been ` +\n          `created yet. So no summary can be displayed. Build the model ` +\n          `first (e.g., by calling it on some test data).`);\n    }\n    printSummary(this, lineLength, positions, printFn);\n  }\n\n  /**\n   * Configures and prepares the model for training and evaluation.  Compiling\n   * outfits the model with an optimizer, loss, and/or metrics.  Calling `fit`\n   * or `evaluate` on an un-compiled model will throw an error.\n   *\n   * @param args a `ModelCompileArgs` specifying the loss, optimizer, and\n   * metrics to be used for fitting and evaluating this model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  compile(args: ModelCompileArgs): void {\n    if (args.loss == null) {\n      args.loss = [];\n    }\n    this.loss = args.loss;\n\n    if (typeof args.optimizer === 'string') {\n      this.optimizer_ = optimizers.getOptimizer(args.optimizer);\n      this.isOptimizerOwned = true;\n    } else {\n      if (!(args.optimizer instanceof Optimizer)) {\n        throw new ValueError(\n            `User-defined optimizer must be an instance of tf.Optimizer.`);\n      }\n      this.optimizer_ = args.optimizer;\n      this.isOptimizerOwned = false;\n    }\n\n    // TODO(cais): Add lossWeights.\n    // TODO(cais): Add sampleWeightMode.\n\n    // Prepare loss functions.\n    let lossFunctions: LossOrMetricFn[] = [];\n    if (!Array.isArray(args.loss) && typeof args.loss !== 'string' &&\n        typeof args.loss !== 'function') {\n      args.loss = args.loss as {[outputName: string]: string};\n      for (const name in args.loss) {\n        if (this.outputNames.indexOf(name) === -1) {\n          throw new ValueError(\n              `Unknown entry in loss dictionary: \"${name}\". ` +\n              `Only expected the following keys: ${this.outputNames}`);\n        }\n      }\n      for (const name of this.outputNames) {\n        if (args.loss[name] == null) {\n          console.warn(\n              `Output \"${name}\" is missing from loss dictionary. We assume ` +\n              `this was done on purpose, and we will not be expecting data ` +\n              `to be passed to ${name} during training`);\n        }\n        lossFunctions.push(losses.get(args.loss[name]));\n      }\n    } else if (Array.isArray(args.loss)) {\n      if (args.loss.length !== this.outputs.length) {\n        throw new ValueError(\n            `When passing an Array as loss, it should have one entry per ` +\n            `model output. The model has ${this.outputs.length} output(s), ` +\n            `but you passed loss=${args.loss}.`);\n      }\n      const theLosses = args.loss as Array<string|LossOrMetricFn>;\n      lossFunctions = theLosses.map(l => losses.get(l));\n    } else {\n      const lossFunction = losses.get(args.loss);\n      this.outputs.forEach(_ => {\n        lossFunctions.push(lossFunction);\n      });\n    }\n\n    this.lossFunctions = lossFunctions;\n\n    this.feedOutputNames = [];\n    this.feedOutputShapes = [];\n    this.feedLossFns = [];\n    for (let i = 0; i < this.outputs.length; ++i) {\n      // TODO(cais): Logic for skipping target(s).\n      const shape = this.internalOutputShapes[i];\n      const name = this.outputNames[i];\n      this.feedOutputNames.push(name);\n      this.feedOutputShapes.push(shape);\n      this.feedLossFns.push(this.lossFunctions[i]);\n    }\n\n    // TODO(cais): Add logic for output masks.\n    // TODO(cais): Add logic for sample weights.\n    const skipTargetIndices: number[] = [];\n\n    // Prepare metrics.\n    this.metrics = args.metrics;\n    // TODO(cais): Add weightedMetrics.\n    this.metricsNames = ['loss'];\n    this.metricsTensors = [];\n\n    // Compute total loss.\n    // Porting Note: In PyKeras, metrics_tensors are symbolic tensor objects.\n    //   Here, metricsTensors are TypeScript functions. This difference is due\n    //   to the difference in symbolic/imperative property of the backends.\n    nameScope('loss', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        // TODO(cais): Add weightedLoss, sampleWeight and mask.\n        //   The following line should be weightedLoss\n        const weightedLoss = this.lossFunctions[i];\n        if (this.outputs.length > 1) {\n          this.metricsTensors.push([weightedLoss, i]);\n          this.metricsNames.push(this.outputNames[i] + '_loss');\n        }\n      }\n\n      // Porting Note: Due to the imperative nature of the backend, we calculate\n      //   the regularizer penalties in the totalLossFunction, instead of here.\n    });\n\n    const nestedMetrics = collectMetrics(args.metrics, this.outputNames);\n    // TODO(cais): Add nestedWeightedMetrics.\n\n    /**\n     * Helper function used in loop below.\n     */\n    const appendMetric =\n        (outputIndex: number, metricName: string,\n         metricTensor: LossOrMetricFn) => {\n          if (this.outputNames.length > 1) {\n            metricName = this.outputNames[outputIndex] + '_' + metricName;\n          }\n          this.metricsNames.push(metricName);\n          this.metricsTensors.push([metricTensor, outputIndex]);\n        };\n\n    nameScope('metric', () => {\n      for (let i = 0; i < this.outputs.length; ++i) {\n        if (skipTargetIndices.indexOf(i) !== -1) {\n          continue;\n        }\n        const outputMetrics = nestedMetrics[i];\n        // TODO(cais): Add weights and outputWeightedMetrics.\n\n        // TODO(cais): Add optional arg `weights` to the following function.\n        const handleMetrics = (metrics: Array<string|LossOrMetricFn>) => {\n          const metricNamePrefix = '';\n          let metricName: string;\n          let accFn: LossOrMetricFn;\n          let weightedMetricFn: LossOrMetricFn;\n          //  TODO(cais): Use 'weights_' for weighted metrics.\n\n          for (const metric of metrics) {\n            if (typeof metric === 'string' &&\n                ['accuracy', 'acc', 'crossentropy', 'ce'].indexOf(metric) !==\n                    -1) {\n              const outputShape = this.internalOutputShapes[i];\n\n              if (outputShape[outputShape.length - 1] === 1 ||\n                  this.lossFunctions[i] === losses.binaryCrossentropy) {\n                // case: binary accuracy/crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.binaryCrossentropy;\n                }\n              } else if (\n                  this.lossFunctions[i] ===\n                  losses.sparseCategoricalCrossentropy) {\n                // case: categorical accuracy / crossentropy with sparse\n                // targets.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.sparseCategoricalCrossentropy;\n                }\n              } else {\n                // case: categorical accuracy / crossentropy.\n                if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalAccuracy;\n                } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                  accFn = Metrics.categoricalCrossentropy;\n                }\n              }\n              let suffix: string;\n              if (['accuracy', 'acc'].indexOf(metric) !== -1) {\n                suffix = 'acc';\n              } else if (['crossentropy', 'ce'].indexOf(metric) !== -1) {\n                suffix = 'ce';\n              }\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = accFn;\n              metricName = metricNamePrefix + suffix;\n            } else {\n              const metricFn = Metrics.get(metric);\n              // TODO(cais): Add weighting actually.\n              weightedMetricFn = metricFn;\n              metricName =\n                  metricNamePrefix + Metrics.getLossOrMetricName(metric);\n            }\n\n            // TODO(cais): Add weighting and masking to metricResult.\n            let metricResult: LossOrMetricFn;\n            nameScope(metricName, () => {\n              metricResult = weightedMetricFn;\n            });\n            appendMetric(i, metricName, metricResult);\n          }\n        };\n\n        handleMetrics(outputMetrics);\n        // TODO(cais): Call handleMetrics with weights.\n      }\n    });\n\n    // Porting Notes: Given the imperative backend of tfjs-core,\n    //   there is no need for constructing the symbolic graph and placeholders.\n    this.collectedTrainableWeights = this.trainableWeights;\n  }\n\n  /**\n   * Check trainable weights count consistency.\n   *\n   * This will raise a warning if `this.trainableWeights` and\n   * `this.collectedTrainableWeights` are inconsistent (i.e., have different\n   * numbers of parameters).\n   * Inconsistency will typically arise when one modifies `model.trainable`\n   * without calling `model.compile()` again.\n   */\n  protected checkTrainableWeightsConsistency(): void {\n    if (this.collectedTrainableWeights == null) {\n      return;\n    }\n    if (this.trainableWeights.length !==\n        this.collectedTrainableWeights.length) {\n      console.warn(\n          'Discrepancy between trainableweights and collected trainable ' +\n          'weights. Did you set `model.trainable` without calling ' +\n          '`model.compile()` afterwards?');\n    }\n  }\n\n  /**\n   * Returns the loss value & metrics values for the model in test mode.\n   *\n   * Loss and metrics are specified during `compile()`, which needs to happen\n   * before calls to `evaluate()`.\n   *\n   * Computation is done in batches.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * const result = model.evaluate(\n   *     tf.ones([8, 10]), tf.ones([8, 1]), {batchSize: 4});\n   * result.print();\n   * ```\n   *\n   * @param x `tf.Tensor` of test data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple inputs.\n   * @param y `tf.Tensor` of target data, or an `Array` of `tf.Tensor`s if the\n   * model has multiple outputs.\n   * @param args A `ModelEvaluateArgs`, containing optional fields.\n   *\n   * @return `Scalar` test loss (if the model has a single output and no\n   *   metrics) or `Array` of `Scalar`s (if the model has multiple outputs\n   *   and/or metrics). The attribute `model.metricsNames`\n   *   will give you the display labels for the scalar outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  evaluate(\n      x: Tensor|Tensor[], y: Tensor|Tensor[],\n      args: ModelEvaluateArgs = {}): Scalar|Scalar[] {\n    const batchSize = args.batchSize == null ? 32 : args.batchSize;\n    checkBatchSize(batchSize);\n\n    // TODO(cais): Standardize `config.sampleWeights` as well.\n    // Validate user data.\n    const checkBatchAxis = true;\n    const standardizedOuts =\n        this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    try {\n      // TODO(cais): If uses `useLearningPhase`, set the corresponding element\n      // of the input to 0.\n      const ins = standardizedOuts[0].concat(standardizedOuts[1]);\n      this.makeTestFunction();\n      const f = this.testFunction;\n      const testOuts =\n          this.testLoop(f, ins, batchSize, args.verbose, args.steps);\n      return singletonOrArray(testOuts);\n    } finally {\n      disposeNewTensors(standardizedOuts[0], x);\n      disposeNewTensors(standardizedOuts[1], y);\n    }\n  }\n\n  // TODO(cais): Add code snippet below once real dataset objects are\n  //   available.\n  /**\n   * Evaluate model using a dataset object.\n   *\n   * Note: Unlike `evaluate()`, this method is asynchronous (`async`);\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for evaluation. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs. Of the two items in the array, the\n   *   first is the input feature(s) and the second is the output target(s).\n   * @param args A configuration object for the dataset-based evaluation.\n   * @returns Loss and metric values as an Array of `Scalar` objects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async evaluateDataset(dataset: Dataset<{}>, args?: ModelEvaluateDatasetArgs):\n      Promise<Scalar|Scalar[]> {\n    this.makeTestFunction();\n    return evaluateDataset(this, dataset, args);\n  }\n\n  /**\n   * Get number of samples provided for training, evaluation or prediction.\n   *\n   * @param ins Input `tf.Tensor`.\n   * @param batchSize Integer batch size, optional.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring loop finished. Optional.\n   * @param stepsName The public API's parameter name for `steps`.\n   * @returns Number of samples provided.\n   */\n  private checkNumSamples(\n      ins: Tensor|Tensor[], batchSize?: number, steps?: number,\n      stepsName = 'steps'): number {\n    let numSamples: number;\n    if (steps != null) {\n      numSamples = null;\n      if (batchSize != null) {\n        throw new ValueError(\n            `If ${stepsName} is set, batchSize must be null or undefined.` +\n            `Got batchSize = ${batchSize}`);\n      }\n    } else if (ins != null) {\n      if (Array.isArray(ins)) {\n        numSamples = ins[0].shape[0];\n      } else {\n        numSamples = ins.shape[0];\n      }\n    } else {\n      throw new ValueError(\n          `Either the input data should have a defined shape, or ` +\n          `${stepsName} shoud be specified.`);\n    }\n    return numSamples;\n  }\n\n  /**\n   * Execute internal tensors of the model with input data feed.\n   * @param inputs Input data feed. Must match the inputs of the model.\n   * @param outputs Names of the output tensors to be fetched. Must match\n   *   names of the SymbolicTensors that belong to the graph.\n   * @returns Fetched values for `outputs`.\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs: string|string[]):\n      Tensor|Tensor[] {\n    if (Array.isArray(outputs) && outputs.length === 0) {\n      throw new ValueError(\n          '`outputs` is an empty Array, which is not allowed.');\n    }\n\n    const outputsIsArray = Array.isArray(outputs);\n    const outputNames =\n        (outputsIsArray ? outputs as string[] : [outputs as string]);\n    const outputSymbolicTensors = this.retrieveSymbolicTensors(outputNames);\n\n    // Format the input into a FeedDict.\n    const feedDict = new FeedDict();\n    if (inputs instanceof Tensor) {\n      inputs = [inputs];\n    }\n    if (Array.isArray(inputs)) {\n      if (inputs.length !== this.inputs.length) {\n        throw new ValueError(\n            `The number of inputs provided (${inputs.length}) ` +\n            `does not match the number of inputs of this model ` +\n            `(${this.inputs.length}).`);\n      }\n      for (let i = 0; i < this.inputs.length; ++i) {\n        feedDict.add(this.inputs[i], inputs[i]);\n      }\n    } else {\n      for (const input of this.inputs) {\n        const tensorValue = inputs[input.name];\n        if (tensorValue == null) {\n          throw new ValueError(\n              `No value is provided for the model's input ${input.name}`);\n        }\n        feedDict.add(input, tensorValue);\n      }\n    }\n\n    // Run execution.\n    const executeOutputs = execute(outputSymbolicTensors, feedDict) as Tensor[];\n    return outputsIsArray ? executeOutputs : executeOutputs[0];\n  }\n\n  /**\n   * Retrieve the model's internal symbolic tensors from symbolic-tensor names.\n   */\n  private retrieveSymbolicTensors(symbolicTensorNames: string[]):\n      SymbolicTensor[] {\n    const outputSymbolicTensors: SymbolicTensor[] =\n        pyListRepeat(null, symbolicTensorNames.length);\n    let outputsRemaining = symbolicTensorNames.length;\n    for (const layer of this.layers) {\n      const layerOutputs: SymbolicTensor[] =\n          Array.isArray(layer.output) ? layer.output : [layer.output];\n      const layerOutputNames = layerOutputs.map(output => output.name);\n      for (let i = 0; i < symbolicTensorNames.length; ++i) {\n        const index = layerOutputNames.indexOf(symbolicTensorNames[i]);\n        if (index !== -1) {\n          outputSymbolicTensors[i] = layerOutputs[index];\n          outputsRemaining--;\n        }\n        if (outputsRemaining === 0) {\n          break;\n        }\n      }\n      if (outputsRemaining === 0) {\n        break;\n      }\n    }\n\n    if (outputsRemaining > 0) {\n      const remainingNames: string[] = [];\n      outputSymbolicTensors.forEach((tensor, i) => {\n        if (tensor == null) {\n          remainingNames.push(symbolicTensorNames[i]);\n        }\n      });\n      throw new ValueError(\n          `Cannot find SymbolicTensors for output name(s): ` +\n          `${JSON.stringify(remainingNames)}`);\n    }\n    return outputSymbolicTensors;\n  }\n\n  /**\n   * Helper method to loop over some data in batches.\n   *\n   * Porting Note: Not using the functional approach in the Python equivalent\n   *   due to the imperative backend.\n   * Porting Note: Does not support step mode currently.\n   *\n   * @param ins: input data\n   * @param batchSize: integer batch size.\n   * @param verbose: verbosity model\n   * @returns: Predictions as `tf.Tensor` (if a single output) or an `Array` of\n   *   `tf.Tensor` (if multipe outputs).\n   */\n  private predictLoop(ins: Tensor|Tensor[], batchSize = 32, verbose = false):\n      Tensor|Tensor[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins);\n      if (verbose) {\n        throw new NotImplementedError(\n            'Verbose predictLoop() is not implemented yet.');\n      }\n\n      // Sample-based predictions.\n      // Porting Note: Tensor currently does not support sliced assignments as\n      //   in numpy, e.g., x[1:3] = y. Therefore we use concatenation while\n      //   iterating over the batches.\n\n      const batches = makeBatches(numSamples, batchSize);\n      const outsBatches: Tensor[][] = this.outputs.map(output => []);\n\n      // TODO(cais): Can the scope() be pushed down inside the for loop?\n      for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n        const batchOuts = tfc.tidy(() => {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          // TODO(cais): Take care of the case of the last element is a flag for\n          //   training/test.\n          const insBatch = sliceArrays(ins, batchStart, batchEnd);\n\n          // Construct the feeds for execute();\n          const feeds = [];\n          if (Array.isArray(insBatch)) {\n            for (let i = 0; i < insBatch.length; ++i) {\n              feeds.push({key: this.inputs[i], value: insBatch[i]});\n            }\n          } else {\n            feeds.push({key: this.inputs[0], value: insBatch});\n          }\n          const feedDict = new FeedDict(feeds);\n          return execute(this.outputs, feedDict) as Tensor[];\n        });\n        batchOuts.forEach((batchOut, i) => outsBatches[i].push(batchOut));\n      }\n      return singletonOrArray(\n          outsBatches.map(batches => tfc.concat(batches, 0)));\n    });\n  }\n\n  /**\n   * Generates output predictions for the input samples.\n   *\n   * Computation is done in batches.\n   *\n   * Note: the \"step\" mode of predict() is currently not supported.\n   *   This is because the TensorFlow.js core backend is imperative only.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predict(tf.ones([8, 10]), {batchSize: 4}).print();\n   * ```\n   *\n   * @param x The input data, as a Tensor, or an `Array` of `tf.Tensor`s if\n   *   the model has multiple inputs.\n   * @param args A `ModelPredictArgs` object containing optional fields.\n   *\n   * @return Prediction results as a `tf.Tensor`(s).\n   *\n   * @exception ValueError In case of mismatch between the provided input data\n   *   and the model's expectations, or in case a stateful model receives a\n   *   number of samples that is not a multiple of the batch size.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(x: Tensor|Tensor[], args: ModelPredictArgs = {}): Tensor|Tensor[] {\n    const xsRank2OrHigher = ensureTensorsRank2OrHigher(x);\n    checkInputData(\n        xsRank2OrHigher, this.inputNames, this.feedInputShapes, false);\n    try {\n      // TODO(cais): Take care of stateful models.\n      //   if (this.stateful) ...\n      // TODO(cais): Take care of the learning_phase boolean flag.\n      //   if (this.useLearningPhase) ...\n      const batchSize = args.batchSize == null ? 32 : args.batchSize;\n      checkBatchSize(batchSize);\n      return this.predictLoop(xsRank2OrHigher, batchSize);\n    } finally {\n      disposeNewTensors(xsRank2OrHigher, x);\n    }\n  }\n\n  /**\n   * Returns predictions for a single batch of samples.\n   *\n   * ```js\n   * const model = tf.sequential({\n   *   layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.predictOnBatch(tf.ones([8, 10])).print();\n   * ```\n   * @param x: Input samples, as a Tensor (for models with exactly one\n   *   input) or an array of Tensors (for models with more than one input).\n   * @return Tensor(s) of predictions\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predictOnBatch(x: Tensor|Tensor[]): Tensor|Tensor[] {\n    checkInputData(x, this.inputNames, this.feedInputShapes, true);\n    // TODO(cais): Take care of the learning_phase boolean flag.\n    //   if (this.useLearningPhase) ...\n    const batchSize = (Array.isArray(x) ? x[0] : x).shape[0];\n    return this.predictLoop(x, batchSize);\n  }\n\n  protected standardizeUserDataXY(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor}, checkBatchAxis = true,\n      batchSize?: number): [Tensor[], Tensor[]] {\n    // TODO(cais): Add sampleWeight, classWeight\n    if (this.optimizer_ == null) {\n      throw new RuntimeError(\n          'You must compile a model before training/testing. Use ' +\n          'LayersModel.compile(modelCompileArgs).');\n    }\n    const outputShapes: Shape[] = [];\n    for (let i = 0; i < this.feedOutputShapes.length; ++i) {\n      const outputShape = this.feedOutputShapes[i];\n      const lossFn = this.feedLossFns[i];\n      if (lossFn === losses.sparseCategoricalCrossentropy) {\n        outputShapes.push(\n            outputShape.slice(0, outputShape.length - 1).concat([1]));\n      } else {\n        // Porting Note: Because of strong typing `lossFn` must be a function.\n        outputShapes.push(outputShape);\n      }\n    }\n    x = standardizeInputData(\n        x, this.feedInputNames, this.feedInputShapes, false, 'input');\n    y = standardizeInputData(\n        y, this.feedOutputNames, outputShapes, false, 'target');\n    // TODO(cais): Standardize sampleWeights & classWeights.\n    checkArrayLengths(x, y, null);\n    // TODO(cais): Check sampleWeights as well.\n    checkLossAndTargetCompatibility(y, this.feedLossFns, this.feedOutputShapes);\n    if (this.stateful && batchSize != null && batchSize > 0) {\n      if (x[0].shape[0] % batchSize !== 0) {\n        throw new ValueError(\n            `In a stateful network, you should only pass inputs with a ` +\n            `number of samples that is divisible by the batch size ` +\n            `${batchSize}. Found: ${x[0].shape[0]} sample(s).`);\n      }\n    }\n    return [x, y];\n  }\n\n  protected async standardizeUserData(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      sampleWeight?: Tensor|Tensor[]|{[outputName: string]: Tensor},\n      classWeight?: ClassWeight|ClassWeight[]|ClassWeightMap,\n      checkBatchAxis = true,\n      batchSize?: number): Promise<[Tensor[], Tensor[], Tensor[]]> {\n    const [standardXs, standardYs] =\n        this.standardizeUserDataXY(x, y, checkBatchAxis, batchSize);\n    // TODO(cais): Handle sampleWeights.\n    if (sampleWeight != null) {\n      throw new Error('sample weight is not supported yet.');\n    }\n\n    let standardSampleWeights: Tensor[] = null;\n    if (classWeight != null) {\n      const classWeights =\n          standardizeClassWeights(classWeight, this.outputNames);\n      standardSampleWeights = [];\n      for (let i = 0; i < classWeights.length; ++i) {\n        standardSampleWeights.push(\n            await standardizeWeights(standardYs[i], null, classWeights[i]));\n      }\n    }\n\n    // TODO(cais): Deal with the case of model.stateful == true.\n    return [standardXs, standardYs, standardSampleWeights];\n  }\n\n  /**\n   * Loop over some test data in batches.\n   * @param f A Function returning a list of tensors.\n   * @param ins Array of tensors to be fed to `f`.\n   * @param batchSize Integer batch size or `null` / `undefined`.\n   * @param verbose verbosity mode.\n   * @param steps Total number of steps (batches of samples) before\n   * declaring test finished. Ignored with the default value of `null` /\n   * `undefined`.\n   * @returns Array of Scalars.\n   */\n  private testLoop(\n      f: (data: Tensor[]) => Scalar[], ins: Tensor[], batchSize?: number,\n      verbose = 0, steps?: number): Scalar[] {\n    return tfc.tidy(() => {\n      const numSamples = this.checkNumSamples(ins, batchSize, steps, 'steps');\n      const outs: Scalar[] = [];\n      if (verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n      }\n      // TODO(cais): Use `indicesForConversionToDense' to prevent slow down.\n      if (steps != null) {\n        throw new NotImplementedError(\n            'steps mode in testLoop() is not implemented yet');\n      } else {\n        const batches = makeBatches(numSamples, batchSize);\n        const indexArray = tensor1d(range(0, numSamples));\n        for (let batchIndex = 0; batchIndex < batches.length; ++batchIndex) {\n          const batchStart = batches[batchIndex][0];\n          const batchEnd = batches[batchIndex][1];\n          const batchIds =\n              K.sliceAlongFirstAxis(\n                  indexArray, batchStart, batchEnd - batchStart) as Tensor1D;\n          // TODO(cais): In ins, train flag can be a number, instead of an\n          //   Tensor? Do we need to handle this in tfjs-layers?\n          const insBatch = sliceArraysByIndices(ins, batchIds) as Scalar[];\n          const batchOuts = f(insBatch);\n          if (batchIndex === 0) {\n            for (let i = 0; i < batchOuts.length; ++i) {\n              outs.push(scalar(0));\n            }\n          }\n          for (let i = 0; i < batchOuts.length; ++i) {\n            const batchOut = batchOuts[i];\n            outs[i] =\n                tfc.add(outs[i], tfc.mul(batchEnd - batchStart, batchOut));\n          }\n        }\n        for (let i = 0; i < outs.length; ++i) {\n          outs[i] = tfc.div(outs[i], numSamples);\n        }\n      }\n      return outs;\n    });\n  }\n\n  protected getDedupedMetricsNames(): string[] {\n    const outLabels = this.metricsNames;\n    // Rename duplicated metrics names (can happen with an output layer\n    // shared among multiple dataflows).\n    const dedupedOutLabels = [];\n    for (let i = 0; i < outLabels.length; ++i) {\n      const label = outLabels[i];\n      let newLabel = label;\n      if (count(outLabels, label) > 1) {\n        const dupIndex = count(outLabels.slice(0, i), label);\n        newLabel += `_${dupIndex}`;\n      }\n      dedupedOutLabels.push(newLabel);\n    }\n    return dedupedOutLabels;\n  }\n\n  /**\n   * Creates a function that performs the following actions:\n   *\n   * 1. computes the losses\n   * 2. sums them to get the total loss\n   * 3. call the optimizer computes the gradients of the LayersModel's\n   *    trainable weights w.r.t. the total loss and update the variables\n   * 4. calculates the metrics\n   * 5. returns the values of the losses and metrics.\n   */\n  protected makeTrainFunction(): (data: Tensor[]) => Scalar[] {\n    return (data: Tensor[]) => {\n      const lossValues: Scalar[] = [];\n\n      const inputs = data.slice(0, this.inputs.length);\n      const targets = data.slice(\n          this.inputs.length, this.inputs.length + this.outputs.length);\n      const sampleWeights = data.slice(\n          this.inputs.length + this.outputs.length,\n          this.inputs.length + this.outputs.length * 2);\n\n      const metricsValues: Scalar[] = [];\n\n      // Create a function that computes the total loss based on the\n      // inputs. This function is used for obtaining gradients through\n      // backprop.\n      const totalLossFunction = () => {\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs =\n            execute(this.outputs, feedDict, {'training': true}) as Tensor[];\n        // TODO(cais): Take care of the case of multiple outputs from a\n        //   single layer?\n\n        let totalLoss: Tensor;\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          let loss = lossFunction(targets[i], outputs[i]);\n          if (sampleWeights[i] != null) {\n            loss = computeWeightedLoss(loss, sampleWeights[i]);\n          }\n\n          // TODO(cais): push Scalar instead.\n          const meanLoss: Scalar = tfc.mean(loss);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          lossValues.push(meanLoss);\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n        }\n\n        // Compute the metrics.\n        // TODO(cais): These should probably be calculated outside\n        //   totalLossFunction to benefit speed?\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          let weightedMetric: Scalar;\n\n          if (this.outputs.length > 1 && i < this.outputs.length) {\n            weightedMetric = lossValues[i];\n          } else {\n            const metric = this.metricsTensors[i][0];\n            const outputIndex = this.metricsTensors[i][1];\n            weightedMetric =\n                tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          }\n\n          tfc.keep(weightedMetric);\n          // TODO(cais): Use a scope() instead, to avoid ownership.\n          metricsValues.push(weightedMetric);\n        }\n\n        totalLoss = tfc.mean(totalLoss);\n\n        // Add regularizer penalties.\n        this.calculateLosses().forEach(regularizerLoss => {\n          totalLoss = tfc.add(totalLoss, regularizerLoss);\n        });\n\n        return totalLoss as Scalar;\n      };\n\n      const variables = this.collectedTrainableWeights.map(\n          param => param.read() as tfc.Variable);\n      const returnCost = true;\n      const totalLossValue =\n          this.optimizer_.minimize(totalLossFunction, returnCost, variables);\n\n      return [totalLossValue].concat(metricsValues);\n    };\n  }\n\n  /**\n   * Create a function which, when invoked with an array of `tf.Tensor`s as a\n   * batch of inputs, returns the prespecified loss and metrics of the model\n   * under the batch of input data.\n   */\n  private makeTestFunction() {\n    this.testFunction = (data: Tensor[]) => {\n      return tfc.tidy(() => {\n        const valOutputs: Scalar[] = [];\n        let totalLoss: Scalar;\n        const inputs = data.slice(0, this.inputs.length);\n        const targets = data.slice(\n            this.inputs.length, this.inputs.length + this.outputs.length);\n        const feeds = [];\n        for (let i = 0; i < this.inputs.length; ++i) {\n          feeds.push({key: this.inputs[i], value: inputs[i]});\n        }\n        const feedDict = new FeedDict(feeds);\n        const outputs = execute(this.outputs, feedDict) as Tensor[];\n        // Compute total loss.\n        for (let i = 0; i < this.lossFunctions.length; ++i) {\n          const lossFunction = this.lossFunctions[i];\n          // TODO(cais): Add sample weighting and replace the simple\n          // averaging.\n          const loss: Scalar = tfc.mean(lossFunction(targets[i], outputs[i]));\n          if (i === 0) {\n            totalLoss = loss;\n          } else {\n            totalLoss = tfc.add(totalLoss, loss);\n          }\n          valOutputs.push(totalLoss);\n        }\n        // Compute the metrics.\n        for (let i = 0; i < this.metricsTensors.length; ++i) {\n          const metric = this.metricsTensors[i][0];\n          const outputIndex = this.metricsTensors[i][1];\n          // TODO(cais): Replace K.mean() with a proper weighting function.\n          const meanMetric =\n              tfc.mean(metric(targets[outputIndex], outputs[outputIndex]));\n          valOutputs.push(meanMetric as Scalar);\n        }\n        return valOutputs;\n      });\n    };\n  }\n\n  /**\n   * Trains the model for a fixed number of epochs (iterations on a\n   * dataset).\n   *\n   * ```js\n   * const model = tf.sequential({\n   *     layers: [tf.layers.dense({units: 1, inputShape: [10]})]\n   * });\n   * model.compile({optimizer: 'sgd', loss: 'meanSquaredError'});\n   * for (let i = 1; i < 5 ; ++i) {\n   *   const h = await model.fit(tf.ones([8, 10]), tf.ones([8, 1]), {\n   *       batchSize: 4,\n   *       epochs: 3\n   *   });\n   *   console.log(\"Loss after Epoch \" + i + \" : \" + h.history.loss[0]);\n   * }\n   * ```\n   *\n   * @param x `tf.Tensor` of training data, or an array of `tf.Tensor`s if the\n   * model has multiple inputs. If all inputs in the model are named, you\n   * can also pass a dictionary mapping input names to `tf.Tensor`s.\n   * @param y `tf.Tensor` of target (label) data, or an array of `tf.Tensor`s if\n   * the model has multiple outputs. If all outputs in the model are named,\n   * you can also pass a dictionary mapping output names to `tf.Tensor`s.\n   * @param args A `ModelFitArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @exception ValueError In case of mismatch between the provided input\n   * data and what the model expects.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fit(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      args: ModelFitArgs = {}): Promise<History> {\n    return fitTensors(this, x, y, args);\n  }\n\n  // TODO(cais): Add code snippet below when it's possible to instantiate\n  //   actual dataset objects.\n  /**\n   * Trains the model using a dataset object.\n   *\n   * @param dataset A dataset object. Its `iterator()` method is expected\n   *   to generate a dataset iterator object, the `next()` method of which\n   *   is expected to produce data batches for training. The return value\n   *   of the `next()` call ought to contain a boolean `done` field and a\n   *   `value` field. The `value` field is expected to be an array of two\n   *   `tf.Tensor`s or an array of two nested `tf.Tensor` structures. The former\n   *   case is for models with exactly one input and one output (e.g..\n   *   a sequential model). The latter case is for models with multiple\n   *   inputs and/or multiple outputs.\n   *   Of the two items in the array, the first is the input feature(s) and\n   *   the second is the output target(s).\n   * @param args A `ModelFitDatasetArgs`, containing optional fields.\n   *\n   * @return A `History` instance. Its `history` attribute contains all\n   *   information collected during training.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async fitDataset<T>(dataset: Dataset<T>, args: ModelFitDatasetArgs<T>):\n      Promise<History> {\n    return fitDataset(this, dataset, args);\n  }\n\n  /**\n   * Runs a single gradient update on a single batch of data.\n   *\n   * This method differs from `fit()` and `fitDataset()` in the following\n   * regards:\n   *   - It operates on exactly one batch of data.\n   *   - It returns only the loss and matric values, instead of\n   *     returning the batch-by-batch loss and metric values.\n   *   - It doesn't support fine-grained options such as verbosity and\n   *     callbacks.\n   *\n   * @param x Input data. It could be one of the following:\n   *   - A `tf.Tensor`, or an Array of `tf.Tensor`s (in case the model has\n   *     multiple inputs).\n   *   - An Object mapping input names to corresponding `tf.Tensor` (if the\n   *     model has named inputs).\n   * @param y Target darta. It could be either a `tf.Tensor` a multiple\n   *   `tf.Tensor`s. It should be consistent with `x`.\n   * @returns Training loss or losses (in case the model has\n   *   multiple outputs), along with metrics (if any), as numbers.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async trainOnBatch(\n      x: Tensor|Tensor[]|{[inputName: string]: Tensor},\n      y: Tensor|Tensor[]|\n      {[inputName: string]: Tensor}): Promise<number|number[]> {\n    // TODO(cais): Support sampleWeight and classWeight.\n    // TODO(cais): Support Dataset objects.\n    const standardizeOut = await this.standardizeUserData(x, y);\n    const inputs = standardizeOut[0];\n    const targets = standardizeOut[1];\n    const trainFunction = this.makeTrainFunction();\n    const losses = trainFunction(inputs.concat(targets));\n    const lossValues: number[] = [];\n    for (const loss of losses) {\n      const v = await loss.data();\n      lossValues.push(v[0]);\n    }\n    tfc.dispose(losses);\n    disposeNewTensors(standardizeOut[0], x);\n    disposeNewTensors(standardizeOut[1], y);\n    return singletonOrArray(lossValues);\n  }\n\n  /**\n   * Extract weight values of the model.\n   *\n   * @param config: An instance of `io.SaveConfig`, which specifies\n   * model-saving options such as whether only trainable weights are to be\n   * saved.\n   * @returns A `NamedTensorMap` mapping original weight names (i.e.,\n   *   non-uniqueified weight names) to their values.\n   */\n  protected getNamedWeights(config?: io.SaveConfig): NamedTensor[] {\n    const namedWeights: NamedTensor[] = [];\n\n    const trainableOnly = config != null && config.trainableOnly;\n    const weights = trainableOnly ? this.trainableWeights : this.weights;\n    const weightValues = this.getWeights(trainableOnly);\n    for (let i = 0; i < weights.length; ++i) {\n      if (trainableOnly && !weights[i].trainable) {\n        // Optionally skip non-trainable weights.\n        continue;\n      }\n      namedWeights.push(\n          {name: weights[i].originalName, tensor: weightValues[i]});\n    }\n    return namedWeights;\n  }\n\n  /**\n   * Setter used for force stopping of LayersModel.fit() (i.e., training).\n   *\n   * Example:\n   *\n   * ```js\n   * const input = tf.input({shape: [10]});\n   * const output = tf.layers.dense({units: 1}).apply(input);\n   * const model = tf.model({inputs: [input], outputs: [output]});\n   * model.compile({loss: 'meanSquaredError', optimizer: 'sgd'});\n   * const xs = tf.ones([8, 10]);\n   * const ys = tf.zeros([8, 1]);\n   *\n   * const history = await model.fit(xs, ys, {\n   *   epochs: 10,\n   *   callbacks: {\n   *     onEpochEnd: async (epoch, logs) => {\n   *       if (epoch === 2) {\n   *         model.stopTraining = true;\n   *       }\n   *     }\n   *   }\n   * });\n   *\n   * // There should be only 3 values in the loss array, instead of 10\n   * values,\n   * // due to the stopping after 3 epochs.\n   * console.log(history.history.loss);\n   * ```\n   */\n  set stopTraining(stop: boolean) {\n    this.stopTraining_ = stop;\n  }\n\n  get stopTraining(): boolean {\n    return this.stopTraining_;\n  }\n\n  get optimizer(): Optimizer {\n    return this.optimizer_;\n  }\n\n  set optimizer(optimizer: Optimizer) {\n    if (this.optimizer_ !== optimizer) {\n      this.optimizer_ = optimizer;\n      this.isOptimizerOwned = false;\n    }\n  }\n\n  dispose(): DisposeResult {\n    const result = super.dispose();\n    if (result.refCountAfterDispose === 0 && this.optimizer != null &&\n        this.isOptimizerOwned) {\n      const numTensorsBeforeOptmizerDisposal = tfc.memory().numTensors;\n      this.optimizer_.dispose();\n      result.numDisposedVariables +=\n          numTensorsBeforeOptmizerDisposal - tfc.memory().numTensors;\n    }\n    return result;\n  }\n\n  private getLossIdentifiers(): LossIdentifier|LossIdentifier[]|\n      {[outputName: string]: LossIdentifier} {\n    let lossNames: LossIdentifier|LossIdentifier[]|\n        {[outputName: string]: LossIdentifier};\n    if (typeof this.loss === 'string') {\n      lossNames = toSnakeCase(this.loss) as LossIdentifier;\n    } else if (Array.isArray(this.loss)) {\n      for (const loss of this.loss) {\n        if (typeof loss !== 'string') {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n      lossNames = (this.loss as string[]).map(name => toSnakeCase(name)) as\n          LossIdentifier[];\n    } else {\n      const outputNames = Object.keys(this.loss);\n      lossNames = {} as {[outputName: string]: LossIdentifier};\n      const losses =\n          this.loss as {[outputName: string]: LossOrMetricFn | string};\n      for (const outputName of outputNames) {\n        if (typeof losses[outputName] === 'string') {\n          lossNames[outputName] =\n              toSnakeCase(losses[outputName] as string) as LossIdentifier;\n        } else {\n          throw new Error('Serialization of non-string loss is not supported.');\n        }\n      }\n    }\n    return lossNames;\n  }\n\n  private getMetricIdentifiers(): MetricsIdentifier[]|\n      {[key: string]: MetricsIdentifier} {\n    if (typeof this.metrics === 'string' ||\n        typeof this.metrics === 'function') {\n      return [toSnakeCase(Metrics.getLossOrMetricName(this.metrics))];\n    } else if (Array.isArray(this.metrics)) {\n      return this.metrics.map(\n          metric => toSnakeCase(Metrics.getLossOrMetricName(metric)));\n    } else {\n      const metricsIdentifiers: {[key: string]: MetricsIdentifier} = {};\n      for (const key in this.metrics) {\n        metricsIdentifiers[key] =\n            toSnakeCase(Metrics.getLossOrMetricName(this.metrics[key]));\n      }\n      return metricsIdentifiers;\n    }\n  }\n\n  protected getTrainingConfig(): TrainingConfig {\n    return {\n      loss: this.getLossIdentifiers(),\n      metrics: this.getMetricIdentifiers(),\n      optimizer_config: {\n        class_name: this.optimizer.getClassName(),\n        config: this.optimizer.getConfig()\n      } as OptimizerSerialization\n    };\n    // TODO(cais): Add weight_metrics when they are supported.\n    // TODO(cais): Add sample_weight_mode when it's supported.\n    // TODO(cais): Add loss_weights when it's supported.\n  }\n\n  loadTrainingConfig(trainingConfig: TrainingConfig) {\n    if (trainingConfig.weighted_metrics != null) {\n      throw new Error('Loading weight_metrics is not supported yet.');\n    }\n    if (trainingConfig.loss_weights != null) {\n      throw new Error('Loading loss_weights is not supported yet.');\n    }\n    if (trainingConfig.sample_weight_mode != null) {\n      throw new Error('Loading sample_weight_mode is not supported yet.');\n    }\n\n    const tsConfig = convertPythonicToTs(trainingConfig.optimizer_config) as\n        serialization.ConfigDict;\n    const optimizer = deserialize(tsConfig) as Optimizer;\n\n    let loss;\n    if (typeof trainingConfig.loss === 'string') {\n      loss = toCamelCase(trainingConfig.loss);\n    } else if (Array.isArray(trainingConfig.loss)) {\n      loss = trainingConfig.loss.map(lossEntry => toCamelCase(lossEntry));\n    } else if (trainingConfig.loss != null) {\n      loss = {} as {[outputName: string]: LossIdentifier};\n      for (const key in trainingConfig.loss) {\n        loss[key] = toCamelCase(trainingConfig.loss[key]) as LossIdentifier;\n      }\n    }\n\n    let metrics;\n    if (Array.isArray(trainingConfig.metrics)) {\n      metrics = trainingConfig.metrics.map(metric => toCamelCase(metric));\n    } else if (trainingConfig.metrics != null) {\n      metrics = {} as {[outputName: string]: MetricsIdentifier};\n      for (const key in trainingConfig.metrics) {\n        metrics[key] = toCamelCase(trainingConfig.metrics[key]);\n      }\n    }\n\n    this.compile({loss, metrics, optimizer});\n  }\n\n  /**\n   * Save the configuration and/or weights of the LayersModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 2. Saving `model`'s topology and weights to browser\n   * [IndexedDB](https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API);\n   * then load it back.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * console.log('Prediction from original model:');\n   * model.predict(tf.ones([1, 3])).print();\n   *\n   * const saveResults = await model.save('indexeddb://my-model-1');\n   *\n   * const loadedModel = await tf.loadLayersModel('indexeddb://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * loadedModel.predict(tf.ones([1, 3])).print();\n   * ```\n   *\n   * Example 3. Saving `model`'s topology and weights as two files\n   * (`my-model-1.json` and `my-model-1.weights.bin`) downloaded from\n   * browser.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('downloads://my-model-1');\n   * ```\n   *\n   * Example 4. Send  `model`'s topology and weights to an HTTP server.\n   * See the documentation of `tf.io.http` for more details\n   * including specifying request parameters and implementation of the\n   * server.\n   *\n   * ```js\n   * const model = tf.sequential(\n   *     {layers: [tf.layers.dense({units: 1, inputShape: [3]})]});\n   * const saveResults = await model.save('http://my-server/model/upload');\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new ValueError(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new ValueError(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new ValueError(\n          'LayersModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    const weightDataAndSpecs =\n        await io.encodeWeights(this.getNamedWeights(config));\n\n    const returnString = false;\n    const unusedArg: {} = null;\n    const modelConfig = this.toJSON(unusedArg, returnString);\n    const modelArtifacts: io.ModelArtifacts = {\n      modelTopology: modelConfig,\n      format: LAYERS_MODEL_FORMAT_NAME,\n      generatedBy: `TensorFlow.js tfjs-layers v${version}`,\n      convertedBy: null,\n    };\n\n    const includeOptimizer = config == null ? false : config.includeOptimizer;\n    if (includeOptimizer && this.optimizer != null) {\n      modelArtifacts.trainingConfig = this.getTrainingConfig();\n      const weightType = 'optimizer';\n      const {data: optimizerWeightData, specs: optimizerWeightSpecs} =\n          await io.encodeWeights(await this.optimizer.getWeights(), weightType);\n      weightDataAndSpecs.specs.push(...optimizerWeightSpecs);\n      weightDataAndSpecs.data = io.concatenateArrayBuffers(\n          [weightDataAndSpecs.data, optimizerWeightData]);\n    }\n\n    if (this.userDefinedMetadata != null) {\n      // Check serialized size of user-defined metadata.\n      const checkSize = true;\n      checkUserDefinedMetadata(this.userDefinedMetadata, this.name, checkSize);\n      modelArtifacts.userDefinedMetadata = this.userDefinedMetadata;\n    }\n\n    modelArtifacts.weightData = weightDataAndSpecs.data;\n    modelArtifacts.weightSpecs = weightDataAndSpecs.specs;\n    return handlerOrURL.save(modelArtifacts);\n  }\n\n  /**\n   * Set user-defined metadata.\n   *\n   * The set metadata will be serialized together with the topology\n   * and weights of the model during `save()` calls.\n   *\n   * @param setUserDefinedMetadata\n   */\n  setUserDefinedMetadata(userDefinedMetadata: {}): void {\n    checkUserDefinedMetadata(userDefinedMetadata, this.name);\n    this.userDefinedMetadata = userDefinedMetadata;\n  }\n\n  /**\n   * Get user-defined metadata.\n   *\n   * The metadata is supplied via one of the two routes:\n   *   1. By calling `setUserDefinedMetadata()`.\n   *   2. Loaded during model loading (if the model is constructed\n   *      via `tf.loadLayersModel()`.)\n   *\n   * If no user-defined metadata is available from either of the\n   * two routes, this function will return `undefined`.\n   */\n  getUserDefinedMetadata(): {} {\n    return this.userDefinedMetadata;\n  }\n}\nserialization.registerClass(LayersModel);\n\n/**\n * A `tf.Functional` is an alias to `tf.LayersModel`.\n *\n * See also:\n *   `tf.LayersModel`, `tf.Sequential`, `tf.loadLayersModel`.\n */\n/** @doc {heading: 'Models', subheading: 'Classes'} */\nexport class Functional extends LayersModel {\n  static className = 'Functional';\n}\nserialization.registerClass(Functional);\n"]},"metadata":{},"sourceType":"module"}