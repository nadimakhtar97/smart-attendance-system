{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class PadProgram {\n  constructor(xShape, paddings, constantValue) {\n    this.variableNames = ['x'];\n    this.customUniforms = [{\n      name: 'value',\n      type: 'float'\n    }];\n    this.outputShape = paddings.map((p, i) => p[0]\n    /* beforePad */\n    + xShape[i] + p[1]\n    /* afterPad */\n    );\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords = ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAR,QAA6C,mBAA7C;AAEA,OAAM,MAAOC,UAAP,CAAiB;AAMrBC,cACIC,MADJ,EACsBC,QADtB,EAEIC,aAFJ,EAEyB;AAPzB,yBAAgB,CAAC,GAAD,CAAhB;AAGA,0BAAiB,CAAC;AAACC,UAAI,EAAE,OAAP;AAAgBC,UAAI,EAAE;AAAtB,KAAD,CAAjB;AAKE,SAAKC,WAAL,GAAmBJ,QAAQ,CAACK,GAAT,CACf,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD;AAAI;AAAL,MAAuBP,MAAM,CAACQ,CAAD,CAA7B,GAAmCD,CAAC,CAAC,CAAD;AAAI;AADnC,KAAnB;AAEA,UAAME,IAAI,GAAGT,MAAM,CAACU,MAApB;AACA,UAAMN,IAAI,GAAGP,iBAAiB,CAACY,IAAD,CAA9B;AAEA,UAAME,KAAK,GAAGV,QAAQ,CAACK,GAAT,CAAaC,CAAC,IAAIA,CAAC,CAAC,CAAD,CAAnB,EAAwBK,IAAxB,CAA6B,GAA7B,CAAd;AACA,UAAMC,GAAG,GAAGZ,QAAQ,CAACK,GAAT,CAAa,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,CAAC,CAAD,CAAD,GAAOP,MAAM,CAACQ,CAAD,CAApC,EAAyCI,IAAzC,CAA8C,GAA9C,CAAZ;AACA,UAAME,cAAc,GAChB,CAAC,WAAD,EAAc,WAAd,EAA2B,WAA3B,EAAwC,WAAxC,EAAqDC,KAArD,CAA2D,CAA3D,EAA8DN,IAA9D,CADJ;;AAGA,QAAIA,IAAI,KAAK,CAAb,EAAgB;AACd,WAAKO,QAAL,GAAgB;sBACAL,KAAK;oBACPE,GAAG;;;;;;;;;;OAFjB;AAaA;AACD;;AACD,SAAKG,QAAL,GAAgB;QACZZ,IAAI,YAAYA,IAAI,IAAIO,KAAK;QAC7BP,IAAI,UAAUA,IAAI,IAAIS,GAAG;;;UAGvBT,IAAI;;;;YAIFA,IAAI;2BACWU,cAAc;;;KAVrC;AAcD;;AAjDoB","names":["getCoordsDataType","PadProgram","constructor","xShape","paddings","constantValue","name","type","outputShape","map","p","i","rank","length","start","join","end","unpackedCoords","slice","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/pad_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType, UniformType} from './shader_compiler';\n\nexport class PadProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n  customUniforms = [{name: 'value', type: 'float' as UniformType}];\n\n  constructor(\n      xShape: number[], paddings: Array<[number, number]>,\n      constantValue: number) {\n    this.outputShape = paddings.map(\n        (p, i) => p[0] /* beforePad */ + xShape[i] + p[1] /* afterPad */);\n    const rank = xShape.length;\n    const type = getCoordsDataType(rank);\n\n    const start = paddings.map(p => p[0]).join(',');\n    const end = paddings.map((p, i) => p[0] + xShape[i]).join(',');\n    const unpackedCoords =\n        ['coords[0]', 'coords[1]', 'coords[2]', 'coords[3]'].slice(0, rank);\n\n    if (rank === 1) {\n      this.userCode = `\n        int start = ${start};\n        int end = ${end};\n\n        void main() {\n          int outC = getOutputCoords();\n          if (outC < start || outC >= end) {\n            setOutput(value);\n          } else {\n            setOutput(getX(outC - start));\n          }\n        }\n      `;\n      return;\n    }\n    this.userCode = `\n      ${type} start = ${type}(${start});\n      ${type} end = ${type}(${end});\n\n      void main() {\n        ${type} outC = getOutputCoords();\n        if (any(lessThan(outC, start)) || any(greaterThanEqual(outC, end))) {\n          setOutput(value);\n        } else {\n          ${type} coords = outC - start;\n          setOutput(getX(${unpackedCoords}));\n        }\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}