{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'BatchMatMul':\n    case 'BatchMatMulV2':\n    case 'MatMul':\n      return [tfOps.matMul(getParamValue('a', node, tensorMap, context), getParamValue('b', node, tensorMap, context), getParamValue('transposeA', node, tensorMap, context), getParamValue('transposeB', node, tensorMap, context))];\n\n    case 'Einsum':\n      return [tfOps.einsum(getParamValue('equation', node, tensorMap, context), ...getParamValue('tensors', node, tensorMap, context))];\n\n    case 'Transpose':\n      return [tfOps.transpose(getParamValue('x', node, tensorMap, context), getParamValue('perm', node, tensorMap, context))];\n\n    case '_FusedMatMul':\n      const [extraOp, activationFunc] = getParamValue('fusedOps', node, tensorMap, context);\n      const isBiasAdd = extraOp === 'biasadd';\n      const isPrelu = activationFunc === 'prelu';\n      const numArgs = getParamValue('numArgs', node, tensorMap, context);\n      const leakyreluAlpha = getParamValue('leakyreluAlpha', node, tensorMap, context);\n\n      if (isBiasAdd) {\n        if (isPrelu && numArgs !== 2) {\n          throw new Error('Fused MatMul with BiasAdd and Prelu must have two ' + 'extra arguments: bias and alpha.');\n        }\n\n        if (!isPrelu && numArgs !== 1) {\n          throw new Error('Fused MatMul with BiasAdd must have one extra argument: bias.');\n        }\n      }\n\n      const [biasArg, preluArg] = getParamValue('args', node, tensorMap, context);\n      return [tfOps.fused.matMul({\n        a: getParamValue('a', node, tensorMap, context),\n        b: getParamValue('b', node, tensorMap, context),\n        transposeA: getParamValue('transposeA', node, tensorMap, context),\n        transposeB: getParamValue('transposeB', node, tensorMap, context),\n        bias: biasArg,\n        activation: activationFunc,\n        preluActivationWeights: preluArg,\n        leakyreluAlpha\n      })];\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'matrices';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","matMul","einsum","transpose","extraOp","activationFunc","isBiasAdd","isPrelu","numArgs","leakyreluAlpha","Error","biasArg","preluArg","fused","a","b","transposeA","transposeB","bias","activation","preluActivationWeights","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/matrices_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor2D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'BatchMatMul':\n        case 'BatchMatMulV2':\n        case 'MatMul':\n          return [tfOps.matMul(\n              getParamValue('a', node, tensorMap, context) as Tensor2D,\n              getParamValue('b', node, tensorMap, context) as Tensor2D,\n              getParamValue('transposeA', node, tensorMap, context) as boolean,\n              getParamValue('transposeB', node, tensorMap, context) as\n                  boolean)];\n\n        case 'Einsum':\n          return [tfOps.einsum(\n              getParamValue('equation', node, tensorMap, context) as string,\n              ...getParamValue('tensors', node, tensorMap, context) as\n                  Tensor[])];\n\n        case 'Transpose':\n          return [tfOps.transpose(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('perm', node, tensorMap, context) as number[])];\n\n        case '_FusedMatMul':\n          const [extraOp, activationFunc] =\n              (getParamValue('fusedOps', node, tensorMap, context) as string[]);\n\n          const isBiasAdd = extraOp === 'biasadd';\n          const isPrelu = activationFunc === 'prelu';\n\n          const numArgs =\n              (getParamValue('numArgs', node, tensorMap, context) as number);\n          const leakyreluAlpha =\n              getParamValue('leakyreluAlpha', node, tensorMap, context) as\n              number;\n\n          if (isBiasAdd) {\n            if (isPrelu && numArgs !== 2) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd and Prelu must have two ' +\n                  'extra arguments: bias and alpha.');\n            }\n            if (!isPrelu && numArgs !== 1) {\n              throw new Error(\n                  'Fused MatMul with BiasAdd must have one extra argument: bias.');\n            }\n          }\n          const [biasArg, preluArg] =\n              getParamValue('args', node, tensorMap, context) as Tensor[];\n          return [tfOps.fused.matMul({\n            a: getParamValue('a', node, tensorMap, context) as Tensor2D,\n            b: getParamValue('b', node, tensorMap, context) as Tensor2D,\n            transposeA: getParamValue('transposeA', node, tensorMap, context) as\n                boolean,\n            transposeB: getParamValue('transposeB', node, tensorMap, context) as\n                boolean,\n            bias: biasArg,\n            activation: activationFunc as tfOps.fused.Activation,\n            preluActivationWeights: preluArg,\n            leakyreluAlpha\n          })];\n\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'matrices';\n"]},"metadata":{},"sourceType":"module"}