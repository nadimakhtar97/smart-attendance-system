{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n  const {\n    inputs,\n    attrs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    perm\n  } = attrs;\n  assertNotComplex(x, 'transpose');\n  const xRank = x.shape.length;\n  const newShape = new Array(xRank);\n\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {\n    dataId,\n    shape: newShape,\n    dtype: x.dtype\n  };\n}\nexport const transposeConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,SAA9C,QAA2G,uBAA3G;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,SAAQC,aAAR,QAA4B,kBAA5B;AAEA,OAAM,SAAUC,SAAV,CAAoBC,IAApB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,SAAT;AAAgBC;AAAhB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI;AAAD,MAASH,KAAf;AAEAL,kBAAgB,CAACO,CAAD,EAAI,WAAJ,CAAhB;AAEA,QAAME,KAAK,GAAGF,CAAC,CAACG,KAAF,CAAQC,MAAtB;AAEA,QAAMC,QAAQ,GAAa,IAAIC,KAAJ,CAAUJ,KAAV,CAA3B;;AACA,OAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAAQ,CAACD,MAA7B,EAAqCG,CAAC,EAAtC,EAA0C;AACxCF,YAAQ,CAACE,CAAD,CAAR,GAAcP,CAAC,CAACG,KAAF,CAAQF,IAAI,CAACM,CAAD,CAAZ,CAAd;AACD;;AAED,QAAMC,MAAM,GAAGT,OAAO,CAACU,IAAR,CAAaC,GAAb,CAAiBV,CAAC,CAACW,MAAnB,EAA2BH,MAA1C;AACA,QAAMI,MAAM,GAAGlB,aAAa,CAACc,MAAD,EAASR,CAAC,CAACG,KAAX,EAAkBH,CAAC,CAACa,KAApB,EAA2BZ,IAA3B,EAAiCI,QAAjC,CAA5B;AAEA,QAAMM,MAAM,GAAGZ,OAAO,CAACe,KAAR,CAAcF,MAAd,EAAsBP,QAAtB,EAAgCL,CAAC,CAACa,KAAlC,CAAf;AACA,SAAO;AAACF,UAAD;AAASR,SAAK,EAAEE,QAAhB;AAA0BQ,SAAK,EAAEb,CAAC,CAACa;AAAnC,GAAP;AACD;AAED,OAAO,MAAME,eAAe,GAAiB;AAC3CC,YAAU,EAAExB,SAD+B;AAE3CyB,aAAW,EAAE,KAF8B;AAG3CC,YAAU,EAAEvB;AAH+B,CAAtC","names":["Transpose","assertNotComplex","transposeImpl","transpose","args","inputs","attrs","backend","x","perm","xRank","shape","length","newShape","Array","i","values","data","get","dataId","result","dtype","write","transposeConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Transpose.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Transpose, TransposeAttrs, TransposeInputs, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {transposeImpl} from './Transpose_impl';\n\nexport function transpose(args: {\n  inputs: TransposeInputs,\n  attrs: TransposeAttrs,\n  backend: MathBackendCPU\n}): TensorInfo {\n  const {inputs, attrs, backend} = args;\n  const {x} = inputs;\n  const {perm} = attrs;\n\n  assertNotComplex(x, 'transpose');\n\n  const xRank = x.shape.length;\n\n  const newShape: number[] = new Array(xRank);\n  for (let i = 0; i < newShape.length; i++) {\n    newShape[i] = x.shape[perm[i]];\n  }\n\n  const values = backend.data.get(x.dataId).values as TypedArray;\n  const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n\n  const dataId = backend.write(result, newShape, x.dtype);\n  return {dataId, shape: newShape, dtype: x.dtype};\n}\n\nexport const transposeConfig: KernelConfig = {\n  kernelName: Transpose,\n  backendName: 'cpu',\n  kernelFunc: transpose as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}