{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    axis\n  } = attrs;\n  assertNotComplex(x, 'argMin');\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n\n  if (permutedAxes != null) {\n    $x = transpose({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        perm: permutedAxes\n      }\n    });\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n  const aVals = backend.data.get($x.dataId).values;\n\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport const argMinConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin\n};","map":{"version":3,"mappings":"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","names":["ArgMin","backend_util","util","assertNotComplex","transpose","argMin","args","inputs","backend","attrs","x","axis","axes","parseAxisParam","shape","permutedAxes","getAxesPermutation","length","$x","intermediateTensorInfos","perm","push","getInnerMostAxes","assertAxesAreInnerMostDims","outShape","reduceShape","computeOutAndReduceShapes","outSize","sizeFromShape","vals","makeZerosTypedArray","reduceSize","aVals","data","get","dataId","values","i","offset","min","minIndex","j","value","forEach","t","disposeIntermediateTensorInfo","makeTensorInfo","argMinConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/ArgMin.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ArgMin, ArgMinAttrs, ArgMinInputs, backend_util, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {transpose} from './Transpose';\n\nexport function argMin(\n    args: {inputs: ArgMinInputs, backend: MathBackendCPU, attrs: ArgMinAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {axis} = attrs;\n\n  assertNotComplex(x, 'argMin');\n\n  let axes = util.parseAxisParam(axis, x.shape);\n  const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n  let $x = x;\n  const intermediateTensorInfos = [];\n  if (permutedAxes != null) {\n    $x = transpose({inputs: {x}, backend, attrs: {perm: permutedAxes}});\n    intermediateTensorInfos.push($x);\n    axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n  }\n\n  axes = [axes[0]];\n  backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n  const [outShape, reduceShape] =\n      backend_util.computeOutAndReduceShapes($x.shape, axes);\n\n  const outSize = util.sizeFromShape(outShape);\n  const vals = util.makeZerosTypedArray(outSize, 'int32');\n  const reduceSize = util.sizeFromShape(reduceShape);\n\n  const aVals = backend.data.get($x.dataId).values as TypedArray;\n  for (let i = 0; i < vals.length; ++i) {\n    const offset = i * reduceSize;\n    let min = aVals[offset];\n    let minIndex = 0;\n    for (let j = 0; j < reduceSize; ++j) {\n      const value = aVals[offset + j];\n      if (value < min) {\n        min = value;\n        minIndex = j;\n      }\n    }\n    vals[i] = minIndex;\n  }\n\n  intermediateTensorInfos.forEach(\n      t => backend.disposeIntermediateTensorInfo(t));\n\n  return backend.makeTensorInfo(outShape, 'int32', vals);\n}\n\nexport const argMinConfig: KernelConfig = {\n  kernelName: ArgMin,\n  backendName: 'cpu',\n  kernelFunc: argMin as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}