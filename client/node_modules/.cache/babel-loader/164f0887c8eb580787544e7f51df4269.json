{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, env, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nexport function depthwiseConv2dNative(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode\n  } = attrs;\n  let $dilations = dilations;\n\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  let program;\n\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n\n  const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\nexport const depthwiseConv2dNativeConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,qBAAtB,EAAsGC,GAAtG,EAAqIC,IAArI,QAAgJ,uBAAhJ;AAGA,SAAQC,sBAAR,QAAqC,uBAArC;AACA,SAAQC,4BAAR,QAA2C,8BAA3C;AAEA,OAAM,SAAUC,qBAAV,CAAgCC,IAAhC,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC;AAAJ,MAAcJ,MAApB;AACA,QAAM;AAACK,WAAD;AAAUC,OAAV;AAAeC,aAAf;AAA0BC;AAA1B,MAA6CN,KAAnD;AAEA,MAAIO,UAAU,GAAGF,SAAjB;;AACA,MAAIE,UAAU,IAAI,IAAlB,EAAwB;AACtBA,cAAU,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAb;AACD;;AAEDd,MAAI,CAACe,MAAL,CACIlB,YAAY,CAACmB,8BAAb,CAA4CN,OAA5C,EAAqDI,UAArD,CADJ,EAEI,MAAM,mEACF,kBAAkBJ,OAAO,mBAAmBI,UAAU,GAH9D;AAKA,QAAMG,QAAQ,GAAGpB,YAAY,CAACqB,iBAAb,CACbV,CAAC,CAACW,KADW,EAEbV,MAAM,CAACU,KAFM,EAEqCT,OAFrC,EAE8CI,UAF9C,EAGbH,GAHa,EAGRE,eAHQ,EAGS;AAAK;AAHd,GAAjB;AAKA,MAAIO,OAAJ;;AACA,MAAIrB,GAAG,GAAGsB,OAAN,CAAc,0BAAd,KAA6CJ,QAAQ,CAACK,WAAT,IAAwB,CAArE,IACAL,QAAQ,CAACM,WAAT,GAAuBN,QAAQ,CAACO,UAAhC,KAA+C,CADnD,EACsD;AACpDJ,WAAO,GAAG,IAAIlB,4BAAJ,CAAiCe,QAAjC,CAAV;AACD,GAHD,MAGO;AACLG,WAAO,GAAG,IAAInB,sBAAJ,CAA2BgB,QAA3B,CAAV;AACD;;AACD,QAAMQ,YAAY,GAAG,CACnB,CAACR,QAAQ,CAACS,OAAT,CAAiBC,GAAlB,EAAuBV,QAAQ,CAACS,OAAT,CAAiBE,IAAxC,CADmB,EAEnB,CAACX,QAAQ,CAACY,YAAV,EAAwBZ,QAAQ,CAACK,WAAjC,CAFmB,EAGnB,CAACL,QAAQ,CAACa,cAAV,EAA0Bb,QAAQ,CAACc,aAAnC,CAHmB,EAInB,CAACd,QAAQ,CAACe,QAAV,EAAoBf,QAAQ,CAACgB,OAA7B,CAJmB,CAArB;AAMA,SAAO3B,OAAO,CAAC4B,eAAR,CAAwBd,OAAxB,EAAiC,CAACZ,CAAD,EAAIC,MAAJ,CAAjC,EAA8C,SAA9C,EAAyDgB,YAAzD,CAAP;AACD;AAED,OAAO,MAAMU,2BAA2B,GAAiB;AACvDC,YAAU,EAAEtC,qBAD2C;AAEvDuC,aAAW,EAAE,OAF0C;AAGvDC,YAAU,EAAEnC;AAH2C,CAAlD","names":["backend_util","DepthwiseConv2dNative","env","util","DepthwiseConv2DProgram","DepthwiseConvPacked2DProgram","depthwiseConv2dNative","args","inputs","backend","attrs","x","filter","strides","pad","dilations","dimRoundingMode","$dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","shape","program","getBool","strideWidth","outChannels","inChannels","customValues","padInfo","top","left","strideHeight","dilationHeight","dilationWidth","inHeight","inWidth","runWebGLProgram","depthwiseConv2dNativeConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/DepthwiseConv2dNative.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNative, DepthwiseConv2dNativeAttrs, DepthwiseConv2dNativeInputs, env, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\n\nexport function depthwiseConv2dNative(args: {\n  inputs: DepthwiseConv2dNativeInputs,\n  attrs: DepthwiseConv2dNativeAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations, dimRoundingMode} = attrs;\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1) {\n    program = new DepthwiseConvPacked2DProgram(convInfo);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  return backend.runWebGLProgram(program, [x, filter], 'float32', customValues);\n}\n\nexport const depthwiseConv2dNativeConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNative,\n  backendName: 'webgl',\n  kernelFunc: depthwiseConv2dNative as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}