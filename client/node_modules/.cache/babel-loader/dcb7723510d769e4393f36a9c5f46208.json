{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Conv2D } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport * as conv_util from './conv_util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes a 2D convolution over the input x.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction conv2d_(x, filter, strides, pad) {\n  let dataFormat = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'NHWC';\n  let dilations = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  let dimRoundingMode = arguments.length > 6 ? arguments[6] : undefined;\n  const $x = convertToTensor(x, 'x', 'conv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(x4D.rank === 4, () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  util.assert($filter.rank === 4, () => `Error in conv2d: filter must be rank 4, but got rank ` + `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2d', pad, dimRoundingMode);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(inDepth === $filter.shape[2], () => `Error in conv2d: depth of input (${inDepth}) must match ` + `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(conv_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in conv2D: Either strides or dilations must be 1. ' + `Got strides ${strides} and dilations '${dilations}'`);\n  const inputs = {\n    x: x4D,\n    filter: $filter\n  };\n  const attrs = {\n    strides,\n    pad,\n    dataFormat,\n    dilations,\n    dimRoundingMode\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(Conv2D, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const conv2d = op({\n  conv2d_\n});","map":{"version":3,"mappings":"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","names":["ENGINE","Conv2D","convertToTensor","util","conv_util","op","reshape","conv2d_","x","filter","strides","pad","dataFormat","dilations","dimRoundingMode","$x","$filter","x4D","reshapedTo4D","rank","shape","assert","checkPadOnDimRoundingMode","inDepth","eitherStridesOrDilationsAreOne","inputs","attrs","res","runKernel","conv2d"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/conv2d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Conv2D, Conv2DAttrs, Conv2DInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport * as conv_util from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes a 2D convolution over the input x.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param filter The filter, rank 4, of shape\n *     `[filterHeight, filterWidth, inDepth, outDepth]`.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`.\n * @param pad The type of padding algorithm.\n *    - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *    - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels].\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `dilations` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dimRoundingMode A string from: 'ceil', 'round', 'floor'. If none is\n *     provided, it will default to truncate.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction conv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, filter: Tensor4D|TensorLike,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|conv_util.ExplicitPadding,\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC',\n    dilations: [number, number]|number = [1, 1],\n    dimRoundingMode?: 'floor'|'round'|'ceil'): T {\n  const $x = convertToTensor(x, 'x', 'conv2d', 'float32');\n  const $filter = convertToTensor(filter, 'filter', 'conv2d', 'float32');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in conv2d: input must be rank 4, but got rank ${x4D.rank}.`);\n  util.assert(\n      $filter.rank === 4,\n      () => `Error in conv2d: filter must be rank 4, but got rank ` +\n          `${$filter.rank}.`);\n  conv_util.checkPadOnDimRoundingMode('conv2d', pad, dimRoundingMode);\n  const inDepth = dataFormat === 'NHWC' ? x4D.shape[3] : x4D.shape[1];\n  util.assert(\n      inDepth === $filter.shape[2],\n      () => `Error in conv2d: depth of input (${inDepth}) must match ` +\n          `input depth for filter ${$filter.shape[2]}.`);\n  util.assert(\n      conv_util.eitherStridesOrDilationsAreOne(strides, dilations),\n      () => 'Error in conv2D: Either strides or dilations must be 1. ' +\n          `Got strides ${strides} and dilations '${dilations}'`);\n\n  const inputs: Conv2DInputs = {x: x4D, filter: $filter};\n  const attrs:\n      Conv2DAttrs = {strides, pad, dataFormat, dilations, dimRoundingMode};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  Conv2D, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const conv2d = op({conv2d_});\n"]},"metadata":{},"sourceType":"module"}