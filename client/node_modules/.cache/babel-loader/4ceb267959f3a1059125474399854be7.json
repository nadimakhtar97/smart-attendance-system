{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum } from '../kernel_names';\nimport { expandDims } from '../ops/expand_dims';\nimport { gather } from '../ops/gather';\nimport { greaterEqual } from '../ops/greater_equal';\nimport { logicalAnd } from '../ops/logical_and';\nimport { maximum } from '../ops/maximum';\nimport { ones } from '../ops/ones';\nimport { scalar } from '../ops/scalar';\nimport { where } from '../ops/where';\nimport { zerosLike } from '../ops/zeros_like';\nexport const unsortedSegmentSumGradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: ['segmentIds'],\n  gradFunc: (dy, saved) => {\n    const [segmentIds] = saved;\n\n    const derX = () => {\n      return gatherDropNegatives(dy, segmentIds);\n    };\n\n    return {\n      x: derX\n    };\n  }\n};\n\nfunction gatherDropNegatives(x, indices) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices);\n  let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  const numIters = gathered.rank - isPositive.rank;\n\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,kBAAR,QAAiC,iBAAjC;AAEA,SAAQC,UAAR,QAAyB,oBAAzB;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,YAAR,QAA2B,sBAA3B;AACA,SAAQC,UAAR,QAAyB,oBAAzB;AACA,SAAQC,OAAR,QAAsB,gBAAtB;AACA,SAAQC,IAAR,QAAmB,aAAnB;AACA,SAAQC,MAAR,QAAqB,eAArB;AACA,SAAQC,KAAR,QAAoB,cAApB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AAGA,OAAO,MAAMC,4BAA4B,GAAe;AACtDC,YAAU,EAAEX,kBAD0C;AAEtDY,cAAY,EAAE,CAAC,YAAD,CAFwC;AAGtDC,UAAQ,EAAE,CAACC,EAAD,EAAaC,KAAb,KAAgC;AACxC,UAAM,CAACC,UAAD,IAAeD,KAArB;;AAEA,UAAME,IAAI,GAAG,MAAK;AAChB,aAAOC,mBAAmB,CAACJ,EAAD,EAAKE,UAAL,CAA1B;AACD,KAFD;;AAGA,WAAO;AAACG,OAAC,EAAEF;AAAJ,KAAP;AACD;AAVqD,CAAjD;;AAaP,SAASC,mBAAT,CAA+CC,CAA/C,EAAqDC,OAArD,EAAsE;AACpE;AACA;AACA;AACA,QAAMC,kBAAkB,GAAGhB,OAAO,CAACe,OAAD,EAAUX,SAAS,CAACW,OAAD,CAAnB,CAAlC;AACA,QAAME,QAAQ,GAAGpB,MAAM,CAACiB,CAAD,EAAIE,kBAAJ,CAAvB;AACA,MAAIE,UAAU,GAAGpB,YAAY,CAACiB,OAAD,EAAUb,MAAM,CAAC,CAAD,EAAI,OAAJ,CAAhB,CAA7B;AACA,QAAMiB,QAAQ,GAAGF,QAAQ,CAACG,IAAT,GAAgBF,UAAU,CAACE,IAA5C;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,QAApB,EAA8B,EAAEE,CAAhC,EAAmC;AACjCH,cAAU,GAAGtB,UAAU,CAACsB,UAAD,EAAaG,CAAC,GAAG,CAAjB,CAAvB;AACD;;AACDH,YAAU,GAAGnB,UAAU,CAACmB,UAAD,EAAajB,IAAI,CAACgB,QAAQ,CAACK,KAAV,EAAiB,MAAjB,CAAjB,CAAvB;AACA,QAAMC,SAAS,GAAGnB,SAAS,CAACa,QAAD,CAA3B;AACA,SAAOd,KAAK,CAACe,UAAD,EAAaD,QAAb,EAAuBM,SAAvB,CAAZ;AACD","names":["UnsortedSegmentSum","expandDims","gather","greaterEqual","logicalAnd","maximum","ones","scalar","where","zerosLike","unsortedSegmentSumGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","segmentIds","derX","gatherDropNegatives","x","indices","zeroClippedIndices","gathered","isPositive","numIters","rank","i","shape","zeroSlice"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/UnsortedSegmentSum_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {UnsortedSegmentSum} from '../kernel_names';\nimport {GradConfig} from '../kernel_registry';\nimport {expandDims} from '../ops/expand_dims';\nimport {gather} from '../ops/gather';\nimport {greaterEqual} from '../ops/greater_equal';\nimport {logicalAnd} from '../ops/logical_and';\nimport {maximum} from '../ops/maximum';\nimport {ones} from '../ops/ones';\nimport {scalar} from '../ops/scalar';\nimport {where} from '../ops/where';\nimport {zerosLike} from '../ops/zeros_like';\nimport {Tensor, Tensor1D} from '../tensor';\n\nexport const unsortedSegmentSumGradConfig: GradConfig = {\n  kernelName: UnsortedSegmentSum,\n  inputsToSave: ['segmentIds'],\n  gradFunc: (dy: Tensor, saved: Tensor[]) => {\n    const [segmentIds] = saved;\n\n    const derX = () => {\n      return gatherDropNegatives(dy, segmentIds as Tensor1D);\n    };\n    return {x: derX};\n  }\n};\n\nfunction gatherDropNegatives<T extends Tensor>(x: T, indices: Tensor1D) {\n  // Helper function for unsorted segment ops. Gathers params for\n  // positive segment ids and gathers 0 for inputs with negative segment id.\n  // Mirrors _GatherDropNegatives from tensorflow/python/ops/math_grad.py\n  const zeroClippedIndices = maximum(indices, zerosLike(indices));\n  const gathered = gather(x, zeroClippedIndices as Tensor1D);\n  let isPositive = greaterEqual(indices, scalar(0, 'int32'));\n  const numIters = gathered.rank - isPositive.rank;\n  for (let i = 0; i < numIters; ++i) {\n    isPositive = expandDims(isPositive, i + 1);\n  }\n  isPositive = logicalAnd(isPositive, ones(gathered.shape, 'bool'));\n  const zeroSlice = zerosLike(gathered);\n  return where(isPositive, gathered, zeroSlice);\n}\n"]},"metadata":{},"sourceType":"module"}