{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\n\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\n\nexport async function encodeWeights(tensors, group) {\n  // TODO(adarob, cais): Support quantization.\n  const specs = [];\n  const dataPromises = [];\n  const names = Array.isArray(tensors) ? tensors.map(tensor => tensor.name) : Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' && t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n\n    const spec = {\n      name,\n      shape: t.shape,\n      dtype: t.dtype\n    };\n\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise(async resolve => {\n        const vals = await t.bytes();\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) + NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n\n    if (group != null) {\n      spec.group = group;\n    }\n\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {\n    data: concatenateTypedArrays(tensorValues),\n    specs\n  };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\n\nexport function decodeWeights(buffer, specs) {\n  // TODO(adarob, cais): Support quantization.\n  const out = {};\n  let float16Decode;\n  let offset = 0;\n\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values;\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` + `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` + `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(`Weight ${spec.name} has unknown ` + `quantization dtype ${quantization.dtype}. ` + `Supported quantization dtypes are: ` + `'uint8', 'uint16', and 'float16'.`);\n      }\n\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = quantization.dtype === 'uint8' ? new Uint8Array(byteBuffer) : new Uint16Array(byteBuffer);\n\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n\n          values = float16Decode(quantizedArray);\n        } else {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(`Unsupported quantization type ${quantization.dtype} ` + `for weight type int32.`);\n        }\n\n        values = new Int32Array(quantizedArray.length);\n\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        values.push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n\n      offset += size * dtypeFactor;\n    }\n\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n\n  return out;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\n\nexport function concatenateTypedArrays(xs) {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0; // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n\n  const normalizedXs = [];\n  xs.forEach(x => {\n    totalByteLength += x.byteLength; // tslint:disable:no-any\n\n    normalizedXs.push(x.byteLength === x.buffer.byteLength ? x : new x.constructor(x));\n\n    if (!(x instanceof Float32Array || x instanceof Int32Array || x instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    } // tslint:enable:no-any\n\n  });\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach(x => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n  return y.buffer;\n} // Use Buffer on Node.js instead of Blob/atob/btoa\n\nconst useNodeBuffer = typeof Buffer !== 'undefined' && (typeof Blob === 'undefined' || typeof atob === 'undefined' || typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\n\nexport function stringByteLength(str) {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n\n  return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\n\nexport function arrayBufferToBase64String(buffer) {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n\n  const buf = new Uint8Array(buffer);\n  let s = '';\n\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n\n  return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\n\nexport function base64StringToArrayBuffer(str) {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n\n  return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\n\nexport function concatenateArrayBuffers(buffers) {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach(buffer => {\n    totalByteLength += buffer.byteLength;\n  });\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach(buffer => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\n\nexport function basename(path) {\n  const SEPARATOR = '/';\n  path = path.trim();\n\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\n\nexport function getModelJSONForModelArtifacts(artifacts, manifest) {\n  const result = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n\n  return result;\n}\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\n\nexport async function getModelArtifactsForJSON(modelJSON, loadWeights) {\n  const modelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n\n  if (modelJSON.weightsManifest != null) {\n    const [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n\n  return modelArtifacts;\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\n\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ? 0 : stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ? 0 : modelArtifacts.weightData.byteLength\n  };\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\n\nfunction computeFloat16MantisaTable() {\n  const convertMantissa = i => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n\n    m &= ~0x00800000;\n    e += 0x38800000;\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n  mantisaTable[0] = 0;\n\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + (i - 1024 << 13);\n  }\n\n  return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\n\n\nfunction computeFloat16ExponentTable() {\n  const exponentTable = new Uint32Array(64);\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + (i - 32 << 23);\n  }\n\n  return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\n\n\nfunction computeFloat16OffsetTable() {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n\n  offsetTable[0] = offsetTable[32] = 0;\n  return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\n\n\nexport function getFloat16Decoder() {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n  return quantizedArray => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] + exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n\n    return new Float32Array(buffer);\n  };\n}","map":{"version":3,"mappings":"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","names":["complex","tensor","sizeFromShape","DTYPE_VALUE_SIZE_MAP","NUM_BYTES_STRING_LENGTH","encodeWeights","tensors","group","specs","dataPromises","names","Array","isArray","map","name","Object","keys","i","length","t","dtype","Error","spec","shape","utf8bytes","Promise","resolve","vals","bytes","totalNumBytes","reduce","p","c","Uint8Array","offset","val","bytesOfLength","Uint32Array","buffer","set","push","data","tensorValues","all","concatenateTypedArrays","decodeWeights","out","float16Decode","size","values","quantization","quantizationSizeFactor","byteBuffer","slice","quantizedArray","Uint16Array","Float32Array","v","scale","min","undefined","getFloat16Decoder","Int32Array","Math","round","byteLength","dtypeFactor","real","image","realTensor","imageTensor","dispose","xs","JSON","stringify","totalByteLength","normalizedXs","forEach","x","constructor","y","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","str","arrayBufferToBase64String","from","toString","buf","s","l","String","fromCharCode","base64StringToArrayBuffer","byteOffset","charCodeAt","concatenateArrayBuffers","buffers","temp","basename","path","SEPARATOR","trim","endsWith","items","split","getModelJSONForModelArtifacts","artifacts","manifest","result","modelTopology","format","generatedBy","convertedBy","weightsManifest","signature","userDefinedMetadata","modelInitializer","trainingConfig","getModelArtifactsForJSON","modelJSON","loadWeights","modelArtifacts","weightSpecs","weightData","getModelArtifactsInfoForJSON","ArrayBuffer","dateSaved","Date","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightDataBytes","computeFloat16MantisaTable","convertMantissa","m","e","mantisaTable","computeFloat16ExponentTable","exponentTable","computeFloat16OffsetTable","offsetTable","bufferUint32View","index","float16Bits","float32Bits"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/io/io_utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {complex} from '../ops/complex';\nimport {tensor} from '../ops/tensor';\nimport {NamedTensor, NamedTensorMap} from '../tensor_types';\nimport {TypedArray} from '../types';\nimport {sizeFromShape} from '../util';\n\nimport {DTYPE_VALUE_SIZE_MAP, ModelArtifacts, ModelArtifactsInfo, ModelJSON, WeightGroup, WeightsManifestConfig, WeightsManifestEntry} from './types';\n\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(\n    tensors: NamedTensorMap|NamedTensor[], group?: WeightGroup):\n    Promise<{data: ArrayBuffer, specs: WeightsManifestEntry[]}> {\n  // TODO(adarob, cais): Support quantization.\n  const specs: WeightsManifestEntry[] = [];\n  const dataPromises: Array<Promise<TypedArray>> = [];\n\n  const names: string[] = Array.isArray(tensors) ?\n      tensors.map(tensor => tensor.name) :\n      Object.keys(tensors);\n\n  for (let i = 0; i < names.length; ++i) {\n    const name = names[i];\n    const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n    if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n        t.dtype !== 'string' && t.dtype !== 'complex64') {\n      throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n    }\n    const spec: WeightsManifestEntry = {name, shape: t.shape, dtype: t.dtype};\n    if (t.dtype === 'string') {\n      const utf8bytes = new Promise<TypedArray>(async resolve => {\n        const vals = await t.bytes() as Uint8Array[];\n        const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n            NUM_BYTES_STRING_LENGTH * vals.length;\n        const bytes = new Uint8Array(totalNumBytes);\n        let offset = 0;\n        for (let i = 0; i < vals.length; i++) {\n          const val = vals[i];\n          const bytesOfLength =\n              new Uint8Array(new Uint32Array([val.length]).buffer);\n          bytes.set(bytesOfLength, offset);\n          offset += NUM_BYTES_STRING_LENGTH;\n          bytes.set(val, offset);\n          offset += val.length;\n        }\n        resolve(bytes);\n      });\n      dataPromises.push(utf8bytes);\n    } else {\n      dataPromises.push(t.data());\n    }\n    if (group != null) {\n      spec.group = group;\n    }\n    specs.push(spec);\n  }\n\n  const tensorValues = await Promise.all(dataPromises);\n  return {data: concatenateTypedArrays(tensorValues), specs};\n}\n\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param buffer A flat ArrayBuffer carrying the binary values of the tensors\n *   concatenated in the order specified in `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(\n    buffer: ArrayBuffer, specs: WeightsManifestEntry[]): NamedTensorMap {\n  // TODO(adarob, cais): Support quantization.\n  const out: NamedTensorMap = {};\n  let float16Decode: (buffer: Uint16Array) => Float32Array | undefined;\n  let offset = 0;\n  for (const spec of specs) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values: TypedArray|string[]|Uint8Array[];\n\n    if ('quantization' in spec) {\n      const quantization = spec.quantization;\n      if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n        if (!('min' in quantization && 'scale' in quantization)) {\n          throw new Error(\n              `Weight ${spec.name} with quantization ${quantization.dtype} ` +\n              `doesn't have corresponding metadata min and scale.`);\n        }\n      } else if (quantization.dtype === 'float16') {\n        if (dtype !== 'float32') {\n          throw new Error(\n              `Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n              `which only supports weights of type float32 not ${dtype}.`);\n        }\n      } else {\n        throw new Error(\n            `Weight ${spec.name} has unknown ` +\n            `quantization dtype ${quantization.dtype}. ` +\n            `Supported quantization dtypes are: ` +\n            `'uint8', 'uint16', and 'float16'.`);\n      }\n      const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n      const byteBuffer =\n          buffer.slice(offset, offset + size * quantizationSizeFactor);\n      const quantizedArray = (quantization.dtype === 'uint8') ?\n          new Uint8Array(byteBuffer) :\n          new Uint16Array(byteBuffer);\n      if (dtype === 'float32') {\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n          values = new Float32Array(quantizedArray.length);\n          for (let i = 0; i < quantizedArray.length; i++) {\n            const v = quantizedArray[i];\n            values[i] = v * quantization.scale + quantization.min;\n          }\n        } else if (quantization.dtype === 'float16') {\n          if (float16Decode === undefined) {\n            float16Decode = getFloat16Decoder();\n          }\n          values = float16Decode(quantizedArray as Uint16Array);\n        } else {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type float32.`);\n        }\n      } else if (dtype === 'int32') {\n        if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n          throw new Error(\n              `Unsupported quantization type ${quantization.dtype} ` +\n              `for weight type int32.`);\n        }\n        values = new Int32Array(quantizedArray.length);\n        for (let i = 0; i < quantizedArray.length; i++) {\n          const v = quantizedArray[i];\n          values[i] = Math.round(v * quantization.scale + quantization.min);\n        }\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * quantizationSizeFactor;\n    } else if (dtype === 'string') {\n      const size = sizeFromShape(spec.shape);\n      values = [];\n      for (let i = 0; i < size; i++) {\n        const byteLength = new Uint32Array(\n            buffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n        offset += NUM_BYTES_STRING_LENGTH;\n        const bytes = new Uint8Array(buffer.slice(offset, offset + byteLength));\n        (values as Uint8Array[]).push(bytes);\n        offset += byteLength;\n      }\n    } else {\n      const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n      const byteBuffer = buffer.slice(offset, offset + size * dtypeFactor);\n\n      if (dtype === 'float32') {\n        values = new Float32Array(byteBuffer);\n      } else if (dtype === 'int32') {\n        values = new Int32Array(byteBuffer);\n      } else if (dtype === 'bool') {\n        values = new Uint8Array(byteBuffer);\n      } else if (dtype === 'complex64') {\n        values = new Float32Array(byteBuffer);\n        const real = new Float32Array(values.length / 2);\n        const image = new Float32Array(values.length / 2);\n        for (let i = 0; i < real.length; i++) {\n          real[i] = values[i * 2];\n          image[i] = values[i * 2 + 1];\n        }\n        const realTensor = tensor(real, shape, 'float32');\n        const imageTensor = tensor(image, shape, 'float32');\n        out[name] = complex(realTensor, imageTensor);\n        realTensor.dispose();\n        imageTensor.dispose();\n      } else {\n        throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n      }\n      offset += size * dtypeFactor;\n    }\n    if (dtype !== 'complex64') {\n      out[name] = tensor(values, shape, dtype);\n    }\n  }\n  return out;\n}\n\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs: TypedArray[]): ArrayBuffer {\n  // TODO(adarob, cais): Support quantization.\n  if (xs === null) {\n    throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n  }\n\n  let totalByteLength = 0;\n\n  // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n  // can have a different byte length from that of the `TypedArray` itself,\n  // for example, when the `TypedArray` is created from an offset in an\n  // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n  // the `TypedArray` in byte length. If an element of `xs` does not show\n  // this property, a new `TypedArray` that satisfy this property will be\n  // constructed and pushed into `normalizedXs`.\n  const normalizedXs: TypedArray[] = [];\n  xs.forEach((x: TypedArray) => {\n    totalByteLength += x.byteLength;\n    // tslint:disable:no-any\n    normalizedXs.push(\n        x.byteLength === x.buffer.byteLength ? x :\n                                               new (x.constructor as any)(x));\n    if (!(x as any instanceof Float32Array || x as any instanceof Int32Array ||\n          x as any instanceof Uint8Array)) {\n      throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n    }\n    // tslint:enable:no-any\n  });\n\n  const y = new Uint8Array(totalByteLength);\n  let offset = 0;\n  normalizedXs.forEach((x: TypedArray) => {\n    y.set(new Uint8Array(x.buffer), offset);\n    offset += x.byteLength;\n  });\n\n  return y.buffer;\n}\n\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n     typeof btoa === 'undefined');\n\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str: string): number {\n  if (useNodeBuffer) {\n    return Buffer.byteLength(str);\n  }\n  return new Blob([str]).size;\n}\n\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer: ArrayBuffer): string {\n  if (useNodeBuffer) {\n    return Buffer.from(buffer).toString('base64');\n  }\n  const buf = new Uint8Array(buffer);\n  let s = '';\n  for (let i = 0, l = buf.length; i < l; i++) {\n    s += String.fromCharCode(buf[i]);\n  }\n  return btoa(s);\n}\n\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str: string): ArrayBuffer {\n  if (useNodeBuffer) {\n    const buf = Buffer.from(str, 'base64');\n    return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n  }\n  const s = atob(str);\n  const buffer = new Uint8Array(s.length);\n  for (let i = 0; i < s.length; ++i) {\n    buffer.set([s.charCodeAt(i)], i);\n  }\n  return buffer.buffer;\n}\n\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers A number of array buffers to concatenate.\n * @returns Result of concatenating `buffers` in order.\n */\nexport function concatenateArrayBuffers(buffers: ArrayBuffer[]): ArrayBuffer {\n  if (buffers.length === 1) {\n    return buffers[0];\n  }\n\n  let totalByteLength = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    totalByteLength += buffer.byteLength;\n  });\n\n  const temp = new Uint8Array(totalByteLength);\n  let offset = 0;\n  buffers.forEach((buffer: ArrayBuffer) => {\n    temp.set(new Uint8Array(buffer), offset);\n    offset += buffer.byteLength;\n  });\n  return temp.buffer;\n}\n\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path: string): string {\n  const SEPARATOR = '/';\n  path = path.trim();\n  while (path.endsWith(SEPARATOR)) {\n    path = path.slice(0, path.length - 1);\n  }\n  const items = path.split(SEPARATOR);\n  return items[items.length - 1];\n}\n\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(\n    artifacts: ModelArtifacts, manifest: WeightsManifestConfig): ModelJSON {\n  const result: ModelJSON = {\n    modelTopology: artifacts.modelTopology,\n    format: artifacts.format,\n    generatedBy: artifacts.generatedBy,\n    convertedBy: artifacts.convertedBy,\n    weightsManifest: manifest\n  };\n  if (artifacts.signature != null) {\n    result.signature = artifacts.signature;\n  }\n  if (artifacts.userDefinedMetadata != null) {\n    result.userDefinedMetadata = artifacts.userDefinedMetadata;\n  }\n  if (artifacts.modelInitializer != null) {\n    result.modelInitializer = artifacts.modelInitializer;\n  }\n  if (artifacts.trainingConfig != null) {\n    result.trainingConfig = artifacts.trainingConfig;\n  }\n  return result;\n}\n\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(\n    modelJSON: ModelJSON,\n    loadWeights: (weightsManifest: WeightsManifestConfig) => Promise<[\n      /* weightSpecs */ WeightsManifestEntry[], /* weightData */ ArrayBuffer\n    ]>): Promise<ModelArtifacts> {\n  const modelArtifacts: ModelArtifacts = {\n    modelTopology: modelJSON.modelTopology,\n    format: modelJSON.format,\n    generatedBy: modelJSON.generatedBy,\n    convertedBy: modelJSON.convertedBy\n  };\n\n  if (modelJSON.trainingConfig != null) {\n    modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n  }\n  if (modelJSON.weightsManifest != null) {\n    const [weightSpecs, weightData] =\n        await loadWeights(modelJSON.weightsManifest);\n    modelArtifacts.weightSpecs = weightSpecs;\n    modelArtifacts.weightData = weightData;\n  }\n  if (modelJSON.signature != null) {\n    modelArtifacts.signature = modelJSON.signature;\n  }\n  if (modelJSON.userDefinedMetadata != null) {\n    modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n  }\n  if (modelJSON.modelInitializer != null) {\n    modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n  }\n\n  return modelArtifacts;\n}\n\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts: ModelArtifacts):\n    ModelArtifactsInfo {\n  if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n    throw new Error('Expected JSON model topology, received ArrayBuffer.');\n  }\n\n  return {\n    dateSaved: new Date(),\n    modelTopologyType: 'JSON',\n    modelTopologyBytes: modelArtifacts.modelTopology == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n    weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n        0 :\n        stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n    weightDataBytes: modelArtifacts.weightData == null ?\n        0 :\n        modelArtifacts.weightData.byteLength,\n  };\n}\n\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable(): Uint32Array {\n  const convertMantissa = (i: number): number => {\n    let m = i << 13;\n    let e = 0;\n\n    while ((m & 0x00800000) === 0) {\n      e -= 0x00800000;\n      m <<= 1;\n    }\n    m &= ~0x00800000;\n    e += 0x38800000;\n\n    return m | e;\n  };\n\n  const mantisaTable = new Uint32Array(2048);\n\n  mantisaTable[0] = 0;\n  for (let i = 1; i < 1024; i++) {\n    mantisaTable[i] = convertMantissa(i);\n  }\n  for (let i = 1024; i < 2048; i++) {\n    mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n  }\n\n  return mantisaTable;\n}\n\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable(): Uint32Array {\n  const exponentTable = new Uint32Array(64);\n\n  exponentTable[0] = 0;\n  exponentTable[31] = 0x47800000;\n  exponentTable[32] = 0x80000000;\n  exponentTable[63] = 0xc7800000;\n  for (let i = 1; i < 31; i++) {\n    exponentTable[i] = i << 23;\n  }\n  for (let i = 33; i < 63; i++) {\n    exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n  }\n\n  return exponentTable;\n}\n\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable(): Uint32Array {\n  const offsetTable = new Uint32Array(64);\n\n  for (let i = 0; i < 64; i++) {\n    offsetTable[i] = 1024;\n  }\n  offsetTable[0] = offsetTable[32] = 0;\n\n  return offsetTable;\n}\n\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder(): (buffer: Uint16Array) => Float32Array {\n  // Algorithm is based off of\n  // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n\n  // Cache lookup tables\n  const mantisaTable = computeFloat16MantisaTable();\n  const exponentTable = computeFloat16ExponentTable();\n  const offsetTable = computeFloat16OffsetTable();\n\n  return (quantizedArray: Uint16Array) => {\n    const buffer = new ArrayBuffer(4 * quantizedArray.length);\n    const bufferUint32View = new Uint32Array(buffer);\n    for (let index = 0; index < quantizedArray.length; index++) {\n      const float16Bits = quantizedArray[index];\n      const float32Bits =\n          mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n          exponentTable[float16Bits >> 10];\n      bufferUint32View[index] = float32Bits;\n    }\n    return new Float32Array(buffer);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}