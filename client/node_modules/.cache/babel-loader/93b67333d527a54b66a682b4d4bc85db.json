{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { cast } from './cast';\nimport { matMul } from './mat_mul';\nimport { oneHot } from './one_hot';\nimport { op } from './operation';\nimport { transpose } from './transpose';\n/**\n * Computes the confusion matrix from true labels and predicted labels.\n *\n * ```js\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\n * const numClasses = 3;\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\n * out.print();\n * // Expected output matrix:\n * // [[2, 0, 0],\n * //  [0, 1, 1],\n * //  [0, 0, 1]]\n * ```\n *\n * @param labels The target labels, assumed to be 0-based integers\n *   for the classes. The shape is `[numExamples]`, where\n *   `numExamples` is the number of examples included.\n * @param predictions The predicted classes, assumed to be\n *   0-based integers for the classes. Must have the same shape as `labels`.\n * @param numClasses Number of all classes, as an integer.\n *   Its value must be larger than the largest element in `labels` and\n *   `predictions`.\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\n *   row `r` and column `c` is the number of times examples of actual class\n *   `r` were predicted as class `c`.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\n\nexport function confusionMatrix_(labels, predictions, numClasses) {\n  const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n  const $predictions = convertToTensor(predictions, 'predictions', 'confusionMatrix');\n  util.assert(numClasses == null || numClasses > 0 && Number.isInteger(numClasses), () => `If provided, numClasses must be a positive integer, ` + `but got ${numClasses}`);\n  util.assert($labels.rank === 1, () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n  util.assert($predictions.rank === 1, () => `Expected the rank of predictions to be 1, ` + `but got ${$predictions.rank}`);\n  util.assert($labels.shape[0] === $predictions.shape[0], () => `Mismatch in the number of examples: ` + `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` + `Labels and predictions should have the same number of elements.`);\n  util.assert(numClasses > 0 && Number.isInteger(numClasses), () => `numClasses is required to be a positive integer, but got ` + `${numClasses}`); // TODO(cais): In the future, if oneHot supports tensors inputs for\n  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n\n  const oneHotLabels = oneHot(cast($labels, 'int32'), numClasses);\n  const oneHotPredictions = oneHot(cast($predictions, 'int32'), numClasses);\n  const oneHotLabelsT = transpose(oneHotLabels);\n  const product = matMul(oneHotLabelsT, oneHotPredictions);\n  return cast(product, 'int32');\n}\nexport const confusionMatrix = op({\n  confusionMatrix_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,OAAM,SAAUC,gBAAV,CACFC,MADE,EAC2BC,WAD3B,EAEFC,UAFE,EAEgB;AACpB,QAAMC,OAAO,GAAGX,eAAe,CAACQ,MAAD,EAAS,QAAT,EAAmB,iBAAnB,CAA/B;AACA,QAAMI,YAAY,GACdZ,eAAe,CAACS,WAAD,EAAc,aAAd,EAA6B,iBAA7B,CADnB;AAGAR,MAAI,CAACY,MAAL,CACIH,UAAU,IAAI,IAAd,IAAsBA,UAAU,GAAG,CAAb,IAAkBI,MAAM,CAACC,SAAP,CAAiBL,UAAjB,CAD5C,EAEI,MAAM,yDACF,WAAWA,UAAU,EAH7B;AAIAT,MAAI,CAACY,MAAL,CACIF,OAAO,CAACK,IAAR,KAAiB,CADrB,EAEI,MAAM,gDAAgDL,OAAO,CAACK,IAAI,EAFtE;AAGAf,MAAI,CAACY,MAAL,CACID,YAAY,CAACI,IAAb,KAAsB,CAD1B,EAEI,MAAM,+CACF,WAAWJ,YAAY,CAACI,IAAI,EAHpC;AAIAf,MAAI,CAACY,MAAL,CACIF,OAAO,CAACM,KAAR,CAAc,CAAd,MAAqBL,YAAY,CAACK,KAAb,CAAmB,CAAnB,CADzB,EAEI,MAAM,yCACF,GAAGN,OAAO,CAACM,KAAR,CAAc,CAAd,CAAgB,QAAQL,YAAY,CAACK,KAAb,CAAmB,CAAnB,CAAqB,IAD9C,GAEF,iEAJR;AAKAhB,MAAI,CAACY,MAAL,CACIH,UAAU,GAAG,CAAb,IAAkBI,MAAM,CAACC,SAAP,CAAiBL,UAAjB,CADtB,EAEI,MAAM,8DACF,GAAGA,UAAU,EAHrB,EArBoB,CAyBpB;AACA;;AAEA,QAAMQ,YAAY,GAAGd,MAAM,CAACF,IAAI,CAACS,OAAD,EAAU,OAAV,CAAL,EAAyBD,UAAzB,CAA3B;AACA,QAAMS,iBAAiB,GACnBf,MAAM,CAACF,IAAI,CAACU,YAAD,EAAe,OAAf,CAAL,EAA8BF,UAA9B,CADV;AAEA,QAAMU,aAAa,GAAad,SAAS,CAACY,YAAD,CAAzC;AACA,QAAMG,OAAO,GAAalB,MAAM,CAACiB,aAAD,EAAgBD,iBAAhB,CAAhC;AACA,SAAOjB,IAAI,CAACmB,OAAD,EAAU,OAAV,CAAX;AACD;AAED,OAAO,MAAMC,eAAe,GAAGjB,EAAE,CAAC;AAACE;AAAD,CAAD,CAA1B","names":["convertToTensor","util","cast","matMul","oneHot","op","transpose","confusionMatrix_","labels","predictions","numClasses","$labels","$predictions","assert","Number","isInteger","rank","shape","oneHotLabels","oneHotPredictions","oneHotLabelsT","product","confusionMatrix"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/confusion_matrix.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {cast} from './cast';\nimport {matMul} from './mat_mul';\nimport {oneHot} from './one_hot';\nimport {op} from './operation';\nimport {transpose} from './transpose';\n\n/**\n * Computes the confusion matrix from true labels and predicted labels.\n *\n * ```js\n * const labels = tf.tensor1d([0, 1, 2, 1, 0], 'int32');\n * const predictions = tf.tensor1d([0, 2, 2, 1, 0], 'int32');\n * const numClasses = 3;\n * const out = tf.math.confusionMatrix(labels, predictions, numClasses);\n * out.print();\n * // Expected output matrix:\n * // [[2, 0, 0],\n * //  [0, 1, 1],\n * //  [0, 0, 1]]\n * ```\n *\n * @param labels The target labels, assumed to be 0-based integers\n *   for the classes. The shape is `[numExamples]`, where\n *   `numExamples` is the number of examples included.\n * @param predictions The predicted classes, assumed to be\n *   0-based integers for the classes. Must have the same shape as `labels`.\n * @param numClasses Number of all classes, as an integer.\n *   Its value must be larger than the largest element in `labels` and\n *   `predictions`.\n * @returns The confusion matrix as a int32-type 2D tensor. The value at\n *   row `r` and column `c` is the number of times examples of actual class\n *   `r` were predicted as class `c`.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nexport function confusionMatrix_(\n    labels: Tensor1D|TensorLike, predictions: Tensor1D|TensorLike,\n    numClasses: number): Tensor2D {\n  const $labels = convertToTensor(labels, 'labels', 'confusionMatrix');\n  const $predictions =\n      convertToTensor(predictions, 'predictions', 'confusionMatrix');\n\n  util.assert(\n      numClasses == null || numClasses > 0 && Number.isInteger(numClasses),\n      () => `If provided, numClasses must be a positive integer, ` +\n          `but got ${numClasses}`);\n  util.assert(\n      $labels.rank === 1,\n      () => `Expected the rank of labels to be 1, but got ${$labels.rank}`);\n  util.assert(\n      $predictions.rank === 1,\n      () => `Expected the rank of predictions to be 1, ` +\n          `but got ${$predictions.rank}`);\n  util.assert(\n      $labels.shape[0] === $predictions.shape[0],\n      () => `Mismatch in the number of examples: ` +\n          `${$labels.shape[0]} vs. ${$predictions.shape[0]}. ` +\n          `Labels and predictions should have the same number of elements.`);\n  util.assert(\n      numClasses > 0 && Number.isInteger(numClasses),\n      () => `numClasses is required to be a positive integer, but got ` +\n          `${numClasses}`);\n  // TODO(cais): In the future, if oneHot supports tensors inputs for\n  //   `numClasses`, `confusionMatrix` can make `numClasses` optional.\n\n  const oneHotLabels = oneHot(cast($labels, 'int32'), numClasses) as Tensor2D;\n  const oneHotPredictions =\n      oneHot(cast($predictions, 'int32'), numClasses) as Tensor2D;\n  const oneHotLabelsT: Tensor2D = transpose(oneHotLabels);\n  const product: Tensor2D = matMul(oneHotLabelsT, oneHotPredictions);\n  return cast(product, 'int32');\n}\n\nexport const confusionMatrix = op({confusionMatrix_});\n"]},"metadata":{},"sourceType":"module"}