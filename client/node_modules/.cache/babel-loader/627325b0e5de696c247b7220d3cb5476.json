{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n    const originalLoc = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex];\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n\n  }\n\n  return outBuf;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAmD,uBAAnD;AAEA,OAAM,SAAUC,YAAV,CACFC,IADE,EACwBC,UADxB,EAEFC,kBAFE,EAE0B;AAC9B,QAAMC,MAAM,GAAGL,MAAM,CAACI,kBAAD,EAAqBF,IAAI,CAACI,KAA1B,CAArB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,MAAM,CAACG,IAA3B,EAAiC,EAAED,CAAnC,EAAsC;AACpC,UAAME,MAAM,GAAGJ,MAAM,CAACK,UAAP,CAAkBH,CAAlB,CAAf;AAEA,UAAMI,WAAW,GAAaF,MAAM,CAACG,KAAP,EAA9B;AACA,UAAMC,QAAQ,GAAGF,WAAW,CAAC,CAAD,CAA5B;AACA,UAAMG,UAAU,GAAGH,WAAW,CAAC,CAAD,CAA9B;AACA,UAAMI,YAAY,GAAGZ,UAAU,CAACa,UAAX,CAAsB,CAACH,QAAD,EAAWC,UAAX,CAAtB,CAArB;AACAH,eAAW,CAAC,CAAD,CAAX,GAAiBR,UAAU,CAACc,MAAX,CAAkBF,YAAlB,CAAjB;AAEA,UAAMG,aAAa,GAAGhB,IAAI,CAACc,UAAL,CAAgBL,WAAhB,CAAtB;;AAEA,QAAI,KAAKO,aAAL,IAAsBA,aAAa,GAAGhB,IAAI,CAACe,MAAL,CAAYE,MAAtD,EAA8D;AAC5Dd,YAAM,CAACY,MAAP,CAAcV,CAAd,IAAmBL,IAAI,CAACe,MAAL,CAAYC,aAAZ,CAAnB;AACD,KAbmC,CAalC;;AACH;;AAED,SAAOb,MAAP;AACD","names":["buffer","gatherV2Impl","xBuf","indicesBuf","flattenOutputShape","outBuf","dtype","i","size","newLoc","indexToLoc","originalLoc","slice","batchIdx","indicesIdx","indicesIndex","locToIndex","values","originalIndex","length"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/GatherV2_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, DataType, Rank, TensorBuffer} from '@tensorflow/tfjs-core';\n\nexport function gatherV2Impl<R extends Rank, D extends DataType>(\n    xBuf: TensorBuffer<R, D>, indicesBuf: TensorBuffer<R, D>,\n    flattenOutputShape: number[]): TensorBuffer<R, D> {\n  const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const newLoc = outBuf.indexToLoc(i);\n\n    const originalLoc: number[] = newLoc.slice();\n    const batchIdx = originalLoc[0];\n    const indicesIdx = originalLoc[2];\n    const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n    originalLoc[2] = indicesBuf.values[indicesIndex] as number;\n\n    const originalIndex = xBuf.locToIndex(originalLoc);\n\n    if (0 <= originalIndex && originalIndex < xBuf.values.length) {\n      outBuf.values[i] = xBuf.values[originalIndex];\n    } // Else, index is out of bounds, so leave the default zero val in outBuf.\n  }\n\n  return outBuf as TensorBuffer<R, D>;\n}\n"]},"metadata":{},"sourceType":"module"}