{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImplCPU } from '../kernel_utils/shared';\nexport function sparseReshape(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    inputIndices,\n    inputShape,\n    newShape\n  } = inputs;\n\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${inputIndices.shape}`);\n  }\n\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape = Array.from(backend.readSync(inputShape.dataId));\n  const $inputIndices = backend.readSync(inputIndices.dataId);\n  const targetShape = Array.from(backend.readSync(newShape.dataId));\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n  return [backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices), backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape))];\n}\nexport const sparseReshapeConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,aAAtB,QAAuF,uBAAvF;AAGA,SAAQC,oBAAR,QAAmC,wBAAnC;AAEA,OAAM,SAAUC,aAAV,CACFC,IADE,EAC4D;AAEhE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG,gBAAD;AAAeC,cAAf;AAA2BC;AAA3B,MAAuCJ,MAA7C;;AACA,MAAIE,YAAY,CAACG,KAAb,CAAmBC,MAAnB,KAA8B,CAAlC,EAAqC;AACnC,UAAM,IAAIC,KAAJ,CAAU,uDACZL,YAAY,CAACG,KAAK,EADhB,CAAN;AAED;;AACD,MAAIF,UAAU,CAACE,KAAX,CAAiBC,MAAjB,KAA4B,CAAhC,EAAmC;AACjC,UAAM,IAAIC,KAAJ,CAAU,qDACZJ,UAAU,CAACE,KAAK,EADd,CAAN;AAED;;AAED,MAAID,QAAQ,CAACC,KAAT,CAAeC,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,UAAM,IAAIC,KAAJ,CACF,sDAAsDH,QAAQ,CAACC,KAAK,EADlE,CAAN;AAED;;AAED,QAAMG,WAAW,GACbC,KAAK,CAACC,IAAN,CAAWT,OAAO,CAACU,QAAR,CAAiBR,UAAU,CAACS,MAA5B,CAAX,CADJ;AAEA,QAAMC,aAAa,GAAGZ,OAAO,CAACU,QAAR,CAAiBT,YAAY,CAACU,MAA9B,CAAtB;AACA,QAAME,WAAW,GACbL,KAAK,CAACC,IAAN,CAAWT,OAAO,CAACU,QAAR,CAAiBP,QAAQ,CAACQ,MAA1B,CAAX,CADJ;AAGA,QAAM,CAACG,UAAD,EAAaC,YAAb,EAA2BC,WAA3B,IAA0CpB,oBAAoB,CAChEgB,aADgE,EACjDX,YAAY,CAACG,KADoC,EAC7BH,YAAY,CAACgB,KADgB,EACTV,WADS,EAEhEM,WAFgE,CAApE;AAGA,SAAO,CACLb,OAAO,CAACkB,cAAR,CAAuBH,YAAvB,EAAqCd,YAAY,CAACgB,KAAlD,EAAyDH,UAAzD,CADK,EAELd,OAAO,CAACkB,cAAR,CACI,CAACF,WAAW,CAACX,MAAb,CADJ,EAC0BF,QAAQ,CAACc,KADnC,EAC0C,IAAIE,UAAJ,CAAeH,WAAf,CAD1C,CAFK,CAAP;AAKD;AAED,OAAO,MAAMI,mBAAmB,GAAiB;AAC/CC,YAAU,EAAE1B,aADmC;AAE/C2B,aAAW,EAAE,OAFkC;AAG/CC,YAAU,EAAE1B;AAHmC,CAA1C","names":["SparseReshape","sparseReshapeImplCPU","sparseReshape","args","inputs","backend","inputIndices","inputShape","newShape","shape","length","Error","$inputShape","Array","from","readSync","dataId","$inputIndices","targetShape","newIndices","indicesShape","outputShape","dtype","makeTensorInfo","Int32Array","sparseReshapeConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/SparseReshape.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, SparseReshape, SparseReshapeInputs, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {sparseReshapeImplCPU} from '../kernel_utils/shared';\n\nexport function sparseReshape(\n    args: {inputs: SparseReshapeInputs, backend: MathBackendWebGL}):\n    [TensorInfo, TensorInfo] {\n  const {inputs, backend} = args;\n  const {inputIndices, inputShape, newShape} = inputs;\n  if (inputIndices.shape.length !== 2) {\n    throw new Error(`Input indices should be a matrix but received shape ${\n        inputIndices.shape}`);\n  }\n  if (inputShape.shape.length !== 1) {\n    throw new Error(`Input shape should be a vector but received shape ${\n        inputShape.shape}`);\n  }\n\n  if (newShape.shape.length !== 1) {\n    throw new Error(\n        `Target shape should be a vector but received shape ${newShape.shape}`);\n  }\n\n  const $inputShape =\n      Array.from(backend.readSync(inputShape.dataId) as TypedArray);\n  const $inputIndices = backend.readSync(inputIndices.dataId) as TypedArray;\n  const targetShape =\n      Array.from(backend.readSync(newShape.dataId) as TypedArray);\n\n  const [newIndices, indicesShape, outputShape] = sparseReshapeImplCPU(\n      $inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape,\n      targetShape);\n  return [\n    backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n    backend.makeTensorInfo(\n        [outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n  ];\n}\n\nexport const sparseReshapeConfig: KernelConfig = {\n  kernelName: SparseReshape,\n  backendName: 'webgl',\n  kernelFunc: sparseReshape,\n};\n"]},"metadata":{},"sourceType":"module"}