{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs, util } from '@tensorflow/tfjs-core';\nexport const complexAbs = args => {\n  const {\n    x\n  } = args.inputs;\n  const cpuBackend = args.backend;\n  const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n  const complexVals = cpuBackend.data.get(x.dataId);\n  const real = complexVals.complexTensorInfos.real;\n  const imag = complexVals.complexTensorInfos.imag;\n  const realVals = cpuBackend.data.get(real.dataId).values;\n  const imagVals = cpuBackend.data.get(imag.dataId).values;\n\n  for (let i = 0; i < realVals.length; i++) {\n    const real = realVals[i];\n    const imag = imagVals[i];\n    resultValues[i] = Math.hypot(real, imag);\n  }\n\n  return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const complexAbsConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,UAAR,EAAgEC,IAAhE,QAA2E,uBAA3E;AAIA,OAAO,MAAMC,UAAU,GAClBC,IAAD,IAA8D;AAC5D,QAAM;AAACC;AAAD,MAAMD,IAAI,CAACE,MAAjB;AACA,QAAMC,UAAU,GAAGH,IAAI,CAACI,OAAxB;AACA,QAAMC,YAAY,GAAG,IAAIC,YAAJ,CAAiBR,IAAI,CAACS,aAAL,CAAmBN,CAAC,CAACO,KAArB,CAAjB,CAArB;AACA,QAAMC,WAAW,GAAGN,UAAU,CAACO,IAAX,CAAgBC,GAAhB,CAAoBV,CAAC,CAACW,MAAtB,CAApB;AACA,QAAMC,IAAI,GAAGJ,WAAW,CAACK,kBAAZ,CAA+BD,IAA5C;AACA,QAAME,IAAI,GAAGN,WAAW,CAACK,kBAAZ,CAA+BC,IAA5C;AACA,QAAMC,QAAQ,GAAGb,UAAU,CAACO,IAAX,CAAgBC,GAAhB,CAAoBE,IAAI,CAACD,MAAzB,EAAiCK,MAAlD;AACA,QAAMC,QAAQ,GAAGf,UAAU,CAACO,IAAX,CAAgBC,GAAhB,CAAoBI,IAAI,CAACH,MAAzB,EAAiCK,MAAlD;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAAQ,CAACI,MAA7B,EAAqCD,CAAC,EAAtC,EAA0C;AACxC,UAAMN,IAAI,GAAGG,QAAQ,CAACG,CAAD,CAArB;AACA,UAAMJ,IAAI,GAAGG,QAAQ,CAACC,CAAD,CAArB;AACAd,gBAAY,CAACc,CAAD,CAAZ,GAAkBE,IAAI,CAACC,KAAL,CAAWT,IAAX,EAAiBE,IAAjB,CAAlB;AACD;;AAED,SAAOZ,UAAU,CAACoB,UAAX,CAAsBlB,YAAtB,EAAoCJ,CAAC,CAACO,KAAtC,EAA6C,SAA7C,CAAP;AACD,CAjBE;AAmBP,OAAO,MAAMgB,gBAAgB,GAAiB;AAC5CC,YAAU,EAAE5B,UADgC;AAE5C6B,aAAW,EAAE,KAF+B;AAG5CC,YAAU,EAAE5B;AAHgC,CAAvC","names":["ComplexAbs","util","complexAbs","args","x","inputs","cpuBackend","backend","resultValues","Float32Array","sizeFromShape","shape","complexVals","data","get","dataId","real","complexTensorInfos","imag","realVals","values","imagVals","i","length","Math","hypot","makeOutput","complexAbsConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/ComplexAbs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ComplexAbs, ComplexAbsInputs, KernelConfig, KernelFunc, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport const complexAbs =\n    (args: {inputs: ComplexAbsInputs, backend: MathBackendCPU}) => {\n      const {x} = args.inputs;\n      const cpuBackend = args.backend;\n      const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n      const complexVals = cpuBackend.data.get(x.dataId);\n      const real = complexVals.complexTensorInfos.real;\n      const imag = complexVals.complexTensorInfos.imag;\n      const realVals = cpuBackend.data.get(real.dataId).values as Float32Array;\n      const imagVals = cpuBackend.data.get(imag.dataId).values as Float32Array;\n      for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n      }\n\n      return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n    };\n\nexport const complexAbsConfig: KernelConfig = {\n  kernelName: ComplexAbs,\n  backendName: 'cpu',\n  kernelFunc: complexAbs as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}