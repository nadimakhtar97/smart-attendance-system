{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { clone, util } from '@tensorflow/tfjs-core';\nexport function getParamValue(paramName, node, tensorMap, context, resourceManager) {\n  const inputParam = node.inputParams[paramName];\n\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ? undefined : inputParam.inputIndexEnd === undefined ? start + 1 : inputParam.inputIndexEnd;\n\n    if (inputParam.type === 'tensor') {\n      return getTensor(node.inputNames[inputParam.inputIndexStart], tensorMap, context, resourceManager);\n    }\n\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n      return inputs.map(name => getTensor(name, tensorMap, context, resourceManager));\n    }\n\n    const tensor = getTensor(node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ? data[0] : util.toNestedArray(tensor.shape, data);\n  }\n\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\n\nexport function getTensor(name, tensorsMap, context, resourceManager) {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n  return contextId !== undefined ? tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] : undefined;\n}\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\n\nexport function getTensorsForCurrentContenxt(name, tensorsMap, context) {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\n\nexport function getNodeNameAndIndex(inputName, context) {\n  const [nodeName, index, outputName] = parseNodeName(inputName);\n  return [getNodeNameWithContextId(nodeName, context && context.currentContextId), index, outputName];\n}\n\nfunction getNodeNameWithContextId(name, contextId) {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name) {\n  const parts = name.split(':');\n\n  if (parts.length === 1) {\n    return [name, 0, undefined];\n  }\n\n  const nodeName = parts[0];\n  const outputName = parts.length === 3 ? parts[1] : undefined;\n  const index = Number(parts[parts.length - 1]);\n  return [nodeName, index, outputName];\n}\nexport function split(arr, size) {\n  const res = [];\n\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n\n  return res;\n}\nexport function getPadding(node, tensorMap, context) {\n  let pad = getParamValue('pad', node, tensorMap, context);\n\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding = [[0, 0], [0, 0], [0, 0], [0, 0]];\n\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = pad[i * 2];\n      explicitPadding[i][1] = pad[i * 2 + 1];\n    }\n\n    return explicitPadding;\n  }\n\n  return pad;\n}\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\n\nexport function cloneTensor(tensor) {\n  return tensor.kept ? tensor : clone(tensor);\n}","map":{"version":3,"mappings":"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","names":["clone","util","getParamValue","paramName","node","tensorMap","context","resourceManager","inputParam","inputParams","inputIndexStart","undefined","start","end","inputIndexEnd","type","getTensor","inputNames","inputs","slice","map","name","tensor","data","dataSync","toNestedArray","shape","attrParam","attrParams","value","tensorsMap","nodeName","index","parseNodeName","getHashTableHandleByName","contextId","currentContextIds","find","getNodeNameWithContextId","getTensorsForCurrentContenxt","currentContextId","getNodeNameAndIndex","inputName","outputName","parts","split","length","Number","arr","size","res","i","push","getPadding","pad","explicitPadding","cloneTensor","kept"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/utils.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {clone, Tensor, util} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {Node, ValueType} from '../types';\n\nexport function getParamValue(\n    paramName: string, node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext, resourceManager?: ResourceManager): ValueType {\n  const inputParam = node.inputParams[paramName];\n  if (inputParam && inputParam.inputIndexStart !== undefined) {\n    const start = inputParam.inputIndexStart;\n    const end = inputParam.inputIndexEnd === 0 ?\n        undefined :\n        (inputParam.inputIndexEnd === undefined ? start + 1 :\n                                                  inputParam.inputIndexEnd);\n    if (inputParam.type === 'tensor') {\n      return getTensor(\n          node.inputNames[inputParam.inputIndexStart], tensorMap, context,\n          resourceManager);\n    }\n    if (inputParam.type === 'tensors') {\n      const inputs = node.inputNames.slice(start, end);\n\n      return inputs.map(\n          name => getTensor(name, tensorMap, context, resourceManager));\n    }\n    const tensor = getTensor(\n        node.inputNames.slice(start)[0], tensorMap, context, resourceManager);\n    const data = tensor.dataSync();\n    return inputParam.type === 'number' ?\n        data[0] :\n        util.toNestedArray(tensor.shape, data);\n  }\n  const attrParam = node.attrParams[paramName];\n  return attrParam && attrParam.value;\n}\n\n/**\n * Retrieve the tensor from tensorsMap based on input name.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function getTensor(\n    name: string, tensorsMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): Tensor {\n  const [nodeName, index] = parseNodeName(name);\n\n  if (resourceManager != null) {\n    const tensor = resourceManager.getHashTableHandleByName(nodeName);\n    if (tensor != null) {\n      return tensor;\n    }\n  }\n\n  const contextId = context.currentContextIds.find(contextId => {\n    return !!tensorsMap[getNodeNameWithContextId(nodeName, contextId)];\n  });\n\n  return contextId !== undefined ?\n      tensorsMap[getNodeNameWithContextId(nodeName, contextId)][index] :\n      undefined;\n}\n\n/**\n * Retrieve the tensors based on input name for current context.\n * @param name Node input name\n * @param tensorsMap Tensors map keyed by the node\n */\nexport function getTensorsForCurrentContenxt(\n    name: string, tensorsMap: NamedTensorsMap,\n    context: ExecutionContext): Tensor[] {\n  return tensorsMap[getNodeNameWithContextId(name, context.currentContextId)];\n}\n\n/**\n * Returns the node name, outputName and index from the Node input name.\n * @param inputName The input name of the node, in format of\n * node_name:output_index, i.e. MatMul:0, if the output_index is not set, it is\n * default to 0.\n * If the input name contains output name i.e. StringSplit:indices:0, it will\n * return ['StringSplit', 0, 'indices'].\n */\nexport function getNodeNameAndIndex(\n    inputName: string, context?: ExecutionContext): [string, number, string] {\n  const [nodeName, index, outputName] = parseNodeName(inputName);\n\n  return [\n    getNodeNameWithContextId(nodeName, context && context.currentContextId),\n    index, outputName\n  ];\n}\n\nfunction getNodeNameWithContextId(name: string, contextId?: string): string {\n  return !!contextId ? `${name}-${contextId}` : name;\n}\n\nexport function parseNodeName(name: string): [string, number, string] {\n  const parts = name.split(':');\n  if (parts.length === 1) {\n    return [name, 0, undefined];\n  }\n\n  const nodeName = parts[0];\n  const outputName = parts.length === 3 ? parts[1] : undefined;\n  const index = Number(parts[parts.length - 1]);\n  return [nodeName, index, outputName];\n}\n\nexport function split(arr: number[], size: number) {\n  const res = [];\n  for (let i = 0; i < arr.length; i += size) {\n    res.push(arr.slice(i, i + size));\n  }\n  return res;\n}\nexport function getPadding(\n    node: Node, tensorMap: NamedTensorsMap,\n    context: ExecutionContext): ValueType {\n  let pad = getParamValue('pad', node, tensorMap, context);\n  if (pad === 'explicit') {\n    // This is 1d array, we need to convert it to 2d array\n    pad = getParamValue('explicitPaddings', node, tensorMap, context);\n    const explicitPadding: [\n      [number, number], [number, number], [number, number], [number, number]\n    ] = [[0, 0], [0, 0], [0, 0], [0, 0]];\n    for (let i = 0; i < 4; i++) {\n      explicitPadding[i][0] = (pad as number[])[i * 2];\n      explicitPadding[i][1] = (pad as number[])[i * 2 + 1];\n    }\n    return explicitPadding;\n  }\n  return pad;\n}\n\n/**\n *  Reuse the tensor if it is marked as keep, otherwise clone the tensor to\n *  avoid disposal. This is important for TensorArray and TensorList ops, since\n *  internally they use a tensor as the id for TensorArray and TensorList, and\n * to simplify lookup, they also use Tensor.id as the key to the internal map.\n * These id tensors have been marked as kept in the backend, we need avoid clone\n * them in order to create new Tensor.id.\n * @param tensor\n */\nexport function cloneTensor(tensor: Tensor): Tensor {\n  return tensor.kept ? tensor : clone(tensor);\n}\n"]},"metadata":{},"sourceType":"module"}