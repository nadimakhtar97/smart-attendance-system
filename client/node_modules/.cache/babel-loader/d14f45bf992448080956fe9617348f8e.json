{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    dy,\n    filter\n  } = inputs;\n  const {\n    strides,\n    dilations,\n    pad,\n    dimRoundingMode,\n    inputShape\n  } = attrs;\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n  const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n          let dotProd = 0;\n\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) + fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput\n};","map":{"version":3,"mappings":"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","names":["backend_util","DepthwiseConv2dNativeBackpropInput","TensorBuffer","util","assertNotComplex","depthwiseConv2dNativeBackpropInput","args","inputs","backend","attrs","dy","filter","strides","dilations","pad","dimRoundingMode","inputShape","dyStrides","computeStrides","shape","filterStrides","convInfo","computeConv2DInfo","dx","inShape","dxValues","values","dxS0","dxS1","dxS2","dyValues","data","get","dataId","dyS0","dyS1","dyS2","fltValues","fltS0","fltS1","fltS2","batchSize","filterHeight","filterWidth","inChannels","inHeight","inWidth","outChannels","outHeight","outWidth","strideHeight","strideWidth","topPad","padInfo","top","leftPad","left","chMul","b","d1","xR","xRCorner","xRMin","Math","max","ceil","yRMax","min","xC","xCCorner","xCMin","yCMax","dotProd","yR","wR","yC","wC","dyOffset","fltOffset","dm","d2","pixel","weight","makeTensorInfo","dtype","depthwiseConv2dNativeBackpropInputConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/DepthwiseConv2dNativeBackpropInput.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DepthwiseConv2dNativeBackpropInput, DepthwiseConv2dNativeBackpropInputAttrs, DepthwiseConv2dNativeBackpropInputInputs, KernelConfig, KernelFunc, TensorBuffer, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function depthwiseConv2dNativeBackpropInput(args: {\n  inputs: DepthwiseConv2dNativeBackpropInputInputs,\n  backend: MathBackendCPU,\n  attrs: DepthwiseConv2dNativeBackpropInputAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {dy, filter} = inputs;\n  const {strides, dilations, pad, dimRoundingMode, inputShape} = attrs;\n\n  assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n\n  const dyStrides = util.computeStrides(dy.shape);\n  const filterStrides = util.computeStrides(filter.shape);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      inputShape, filter.shape as [number, number, number, number], strides,\n      dilations, pad, dimRoundingMode, true /* depthwise */);\n\n  const dx = new TensorBuffer(convInfo.inShape, 'float32');\n  const dxValues = dx.values;\n  const [dxS0, dxS1, dxS2] = dx.strides;\n  const dyValues = backend.data.get(dy.dataId).values as TypedArray;\n  const [dyS0, dyS1, dyS2] = dyStrides;\n  const fltValues = backend.data.get(filter.dataId).values as TypedArray;\n  const [fltS0, fltS1, fltS2] = filterStrides;\n  const {\n    batchSize,\n    filterHeight,\n    filterWidth,\n    inChannels,\n    inHeight,\n    inWidth,\n    outChannels,\n    outHeight,\n    outWidth,\n    strideHeight,\n    strideWidth\n  } = convInfo;\n  const topPad = filterHeight - 1 - convInfo.padInfo.top;\n  const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n  const chMul = outChannels / inChannels;\n\n  for (let b = 0; b < batchSize; ++b) {\n    for (let d1 = 0; d1 < inChannels; ++d1) {\n      for (let xR = 0; xR < inHeight; ++xR) {\n        const xRCorner = xR - topPad;\n        const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n        const yRMax =\n            Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n\n        for (let xC = 0; xC < inWidth; ++xC) {\n          const xCCorner = xC - leftPad;\n          const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n          const yCMax =\n              Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n\n          let dotProd = 0;\n          for (let yR = xRMin; yR < yRMax; ++yR) {\n            const wR = yR * strideHeight - xRCorner;\n\n            for (let yC = xCMin; yC < yCMax; ++yC) {\n              const wC = yC * strideWidth - xCCorner;\n              const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n              const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                  fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n\n              for (let dm = 0; dm < chMul; ++dm) {\n                const d2 = d1 * chMul + dm;\n                const pixel = dyValues[dyOffset + d2];\n                const weight = fltValues[fltOffset + dm];\n                dotProd += pixel * weight;\n              }\n            }\n          }\n          dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n        }\n      }\n    }\n  }\n\n  return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\n\nexport const depthwiseConv2dNativeBackpropInputConfig: KernelConfig = {\n  kernelName: DepthwiseConv2dNativeBackpropInput,\n  backendName: 'cpu',\n  kernelFunc: depthwiseConv2dNativeBackpropInput as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}