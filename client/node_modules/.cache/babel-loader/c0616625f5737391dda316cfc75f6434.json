{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import webgl flags.\nimport './flags_webgl';\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, scalar, tidy, util } from '@tensorflow/tfjs-core';\nimport { getWebGLContext } from './canvas_util';\nimport { DecodeMatrixProgram } from './decode_matrix_gpu';\nimport { DecodeMatrixPackedProgram } from './decode_matrix_packed_gpu';\nimport { EncodeFloatProgram } from './encode_float_gpu';\nimport { EncodeFloatPackedProgram } from './encode_float_packed_gpu';\nimport { EncodeMatrixProgram } from './encode_matrix_gpu';\nimport { EncodeMatrixPackedProgram } from './encode_matrix_packed_gpu';\nimport { GPGPUContext } from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport { simpleAbsImplCPU } from './kernel_utils/shared';\nimport { PackProgram } from './pack_gpu';\nimport { ReshapePackedProgram } from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport { TextureUsage } from './tex_util';\nimport { TextureManager } from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport { UnaryOpProgram } from './unaryop_gpu';\nimport { UnaryOpPackedProgram } from './unaryop_packed_gpu';\nimport { UnpackProgram } from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\nconst whereImpl = kernel_impls.whereImpl;\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\nconst binaryCaches = {};\nexport function getBinaryCache(webGLVersion) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n} // Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\n\nconst CPU_HANDOFF_SIZE_THRESHOLD = env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD'); // Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\n\nconst BEFORE_PAGING_CONSTANT = 600;\n\nfunction numMBBeforeWarning() {\n  if (env().global.screen == null) {\n    return 1024; // 1 GB.\n  }\n\n  return env().global.screen.height * env().global.screen.width * window.devicePixelRatio * BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  constructor(gpuResource) {\n    super(); // Maps data ids that have a pending read operation, to list of subscribers.\n\n    this.pendingRead = new WeakMap(); // List of data ids that are scheduled for disposal, but are waiting on a\n    // pending read operation.\n\n    this.pendingDisposal = new WeakSet(); // Used to count the number of 'shallow' sliced tensors that point to the\n    // same data id.\n\n    this.dataRefCount = new WeakMap();\n    this.numBytesInGPU = 0; // Accumulated time spent (including blocking) in uploading data to webgl.\n\n    this.uploadWaitMs = 0; // Accumulated time spent (including blocking in downloading data from webgl.\n\n    this.downloadWaitMs = 0; // record the last manual GL Flush time.\n\n    this.lastGlFlushTime = 0;\n    this.warnedAboutMemory = false;\n    this.pendingDeletes = 0;\n    this.disposed = false;\n\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  nextDataId() {\n    return MathBackendWebGL.nextDataId++;\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values, shape, dtype) {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') || env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    const dataId = {\n      id: this.nextDataId()\n    };\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount: 1\n    });\n    return dataId;\n  }\n  /** Return refCount of a `TensorData`. */\n\n\n  refCount(dataId) {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n\n    return 0;\n  }\n  /** Increase refCount of a `TextureData`. */\n\n\n  incRef(dataId) {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n  /** Decrease refCount of a `TextureData`. */\n\n\n  decRef(dataId) {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(dataId, values, shape, dtype, refCount) {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n\n    if (dtype === 'complex64') {\n      throw new Error(`Cannot write to a complex64 dtype. ` + `Please use tf.complex(real, imag).`);\n    }\n\n    this.texData.set(dataId, {\n      shape,\n      dtype,\n      values,\n      usage: TextureUsage.UPLOAD,\n      refCount\n    });\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo) {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      dtype,\n      complexTensorInfos,\n      slice,\n      shape,\n      isPacked\n    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (dtype === 'string') {\n      return values;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result;\n\n    if (dtype === 'complex64') {\n      const realValues = this.readSync(complexTensorInfos.real.dataId);\n      const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId) {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise(resolve => subscribers.push(resolve));\n    }\n\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      complexTensorInfos,\n      isPacked\n    } = texData; // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') && env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(`tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` + `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer = null;\n    let tmpDownloadTarget;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n      buffer = this.gpgpu.createBufferFromTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    } // Download the values from the GPU.\n\n\n    let vals;\n\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([this.read(complexTensorInfos.real.dataId), this.read(complexTensorInfos.imag.dataId)]);\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId); // Notify all pending reads.\n\n    subscribers.forEach(resolve => resolve(dTypeVals));\n\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n\n      this.pendingDeletes--;\n    }\n\n    return dTypeVals;\n  }\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n\n\n  readToGPU(dataId) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const texData = this.texData.get(dataId);\n    const {\n      values,\n      shape,\n      slice,\n      dtype,\n      isPacked,\n      texture\n    } = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    } // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n\n\n    if (slice != null) {\n      let program;\n\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n\n      const res = this.runWebGLProgram(program, [{\n        dataId,\n        shape,\n        dtype\n      }], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    } // Decode the texture so that it is stored densely (using four channels).\n\n\n    const tmpTarget = this.decode(dataId, options.customTexShape); // Make engine track this tensor, so that we can dispose it later.\n\n    const tensorRef = engine().makeTensorFromDataId(tmpTarget.dataId, tmpTarget.shape, tmpTarget.dtype);\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return Object.assign({\n      tensorRef\n    }, tmpData.texture);\n  }\n\n  bufferSync(t) {\n    const data = this.readSync(t.dataId);\n    let decodedData = data;\n\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = data.map(d => util.decodeString(d));\n      } catch (_a) {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n\n    return buffer(t.shape, t.dtype, decodedData);\n  }\n\n  checkNumericalProblems(values) {\n    if (values == null) {\n      return;\n    }\n\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i];\n\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(`The value ${num} cannot be represented with your ` + `current settings. Consider enabling float32 rendering: ` + `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  getValuesFromTexture(dataId) {\n    const {\n      shape,\n      dtype,\n      isPacked\n    } = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals = this.gpgpu.downloadMatrixFromPackedTexture(tmpData.texture.texture, ...tex_util.getDenseTexShape(shape)).subarray(0, size);\n      this.disposeIntermediateTensorInfo(tmpTarget);\n      return vals;\n    }\n\n    const shouldUsePackedProgram = env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape = shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ? new EncodeFloatPackedProgram(outputShape) : new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(program, [{\n      shape: outputShape,\n      dtype,\n      dataId\n    }], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu.downloadByteEncodedFloatMatrixFromOutputTexture(tmpData.texture.texture, tmpData.texShape[0], tmpData.texShape[1]).subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n    return vals;\n  }\n\n  timerAvailable() {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  time(f) {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers = [];\n    let outerMostTime = false;\n\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n\n    this.activeTimers = newActiveTimers;\n    f(); // needing to split these up because util.flatten only accepts certain types\n\n    const flattenedActiveTimerQueries = util.flatten(this.activeTimers.map(d => d.query)).filter(d => d != null);\n    const flattenedActiveTimerNames = util.flatten(this.activeTimers.map(d => d.name)).filter(d => d != null);\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null // will be filled by the engine\n\n    };\n    return (async () => {\n      if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n        res['kernelMs'] = util.sum(kernelMs);\n\n        res['getExtraProfileInfo'] = () => kernelMs.map((d, i) => ({\n          name: flattenedActiveTimerNames[i],\n          ms: d\n        })).map(d => `${d.name}: ${d.ms}`).join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n\n  memory() {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    };\n  }\n\n  startTimer() {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n\n    return {\n      startMs: util.now(),\n      endMs: null\n    };\n  }\n\n  endTimer(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n\n    query.endMs = util.now();\n    return query;\n  }\n\n  async getQueryTime(query) {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query);\n    }\n\n    const timerQuery = query;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n\n\n  disposeData(dataId) {\n    let force = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    } // No-op if already disposed.\n\n\n    if (!this.texData.has(dataId)) {\n      return true;\n    } // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n\n\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {\n      complexTensorInfos\n    } = this.texData.get(dataId);\n\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n    return true;\n  }\n\n  releaseGPUData(dataId) {\n    const {\n      texture,\n      dtype,\n      texShape,\n      usage,\n      isPacked,\n      slice\n    } = this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId) {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n\n\n  getDataInfo(dataId) {\n    return this.texData.get(dataId);\n  }\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n\n\n  shouldExecuteOnCPU(inputs) {\n    let sizeThreshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : CPU_HANDOFF_SIZE_THRESHOLD;\n    return env().getBool('WEBGL_CPU_FORWARD') && inputs.every(input => this.texData.get(input.dataId).texture == null && util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext() {\n    return this.gpgpu;\n  }\n\n  where(condition) {\n    backend_util.warn('tf.where() in webgl locks the UI thread. ' + 'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  packedUnaryOp(x, op, dtype) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  } // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n\n\n  abs(x) {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues = simpleAbsImplCPU(this.texData.get(x.dataId).values);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype);\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  makeTensorInfo(shape, dtype, values) {\n    let dataId;\n\n    if (dtype === 'string' && values != null && values.length > 0 && util.isString(values[0])) {\n      const encodedValues = values.map(d => util.encodeString(d));\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {\n      dataId,\n      shape,\n      dtype\n    };\n  }\n\n  makeOutput(shape, dtype, values) {\n    const {\n      dataId\n    } = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n  }\n\n  unpackTensor(input) {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input) {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(program, [input], input.dtype, null\n    /* customUniformValues */\n    , preventEagerUnpackingOutput);\n  }\n\n  packedReshape(input, afterShape) {\n    const input3DShape = [webgl_util.getBatchDim(input.shape), ...webgl_util.getRowsCols(input.shape)];\n    const input3D = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(program, [input3D], input.dtype, customValues, preventEagerUnpackingOfOutput);\n    return {\n      dataId: output.dataId,\n      shape: afterShape,\n      dtype: output.dtype\n    };\n  }\n\n  decode(dataId, customTexShape) {\n    const texData = this.texData.get(dataId);\n    const {\n      isPacked,\n      shape,\n      dtype\n    } = texData;\n\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(size <= texSize, () => 'customTexShape is too small. ' + 'Row * Column * 4 should be equal or larger than the ' + 'size of the tensor data.');\n    }\n\n    const shapeAs3D = webgl_util.getShapeAs3D(shape);\n    let program;\n\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [customTexShape != null ? customTexShape : tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(program, [{\n      shape: shapeAs3D,\n      dtype,\n      dataId\n    }], dtype, customValues, preventEagerUnpackingOfOutput, customTexShape);\n    return {\n      dtype,\n      shape,\n      dataId: out.dataId\n    };\n  }\n\n  runWebGLProgram(program, inputs, outputDtype, customUniformValues) {\n    let preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    let customTexShape = arguments.length > 5 ? arguments[5] : undefined;\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ? customTexShape : tex_util.getDenseTexShape(program.outputShape); // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n\n      outData.texShape = texelShape.map(d => d * 2);\n    }\n\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values = util.getTypedArrayFromDType(output.dtype, 0);\n      return output;\n    }\n\n    const dataToDispose = [];\n    const inputsData = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(`GPGPUProgram does not support complex64 input. For complex64 ` + `dtypes, please separate the program into real and imaginary ` + `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs && util.sizeFromShape(input.shape) <= env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values\n          };\n        } // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n\n\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) : this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (texData.isPacked && !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n        const savedInput = input;\n        const targetShape = input.shape;\n        input.shape = texData.shape;\n        input = this.packedReshape(input, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n        savedInput.shape = targetShape;\n      }\n\n      return {\n        shape: input.shape,\n        texData,\n        isUniform: false\n      };\n    });\n    this.uploadToGPU(output.dataId);\n    const outputData = {\n      shape: output.shape,\n      texData: outData,\n      isUniform: false\n    };\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query;\n\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(this.gpgpu, binary, inputsData, outputData, customUniformValues);\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push({\n        name: program.constructor.name,\n        query: this.getQueryTime(query)\n      });\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD'); // Manually GL flush requested\n\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n\n      if (time - this.lastGlFlushTime > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked && preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n\n    return output;\n  }\n\n  compileAndRun(program, inputs, outputDtype, customUniformValues) {\n    let preventEagerUnpackingOfOutput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : false;\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(program, inputs, outputDtype, customUniformValues, preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  getAndSaveBinary(key, getBinary) {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n\n    return this.binaryCache[key];\n  }\n\n  getTextureManager() {\n    return this.textureManager;\n  }\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    } // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n\n\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n\n    this.textureManager.dispose();\n\n    if (this.canvas != null && typeof HTMLCanvasElement !== 'undefined' && this.canvas instanceof HTMLCanvasElement) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n\n    this.disposed = true;\n  }\n\n  floatPrecision() {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n\n        return 16;\n      });\n    }\n\n    return this.floatPrecisionValue;\n  }\n  /** Returns the smallest representable number.  */\n\n\n  epsilon() {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId) {\n    const texData = this.texData.get(dataId);\n    const {\n      shape,\n      dtype,\n      values,\n      texture,\n      usage,\n      isPacked\n    } = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n\n    const shouldTimeProgram = this.activeTimers != null;\n    let start;\n\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n      let program;\n      let width = texShape[1],\n          height = texShape[0];\n      const isByteArray = values instanceof Uint8Array || values instanceof Uint8ClampedArray; // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      } // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n\n\n      const tempDenseInputTexShape = isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle = this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData = this.texData.get(tempDenseInputHandle.dataId);\n\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(this.getTexture(tempDenseInputHandle.dataId), width, height, values);\n      const customValues = [[height, width]]; // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(program, [tempDenseInputHandle], dtype, customValues, preventEagerUnpacking); // Have the original texture assume the identity of the encoded output.\n\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId); // Once uploaded, don't store the values on cpu.\n\n      texData.values = null;\n\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  convertAndCacheOnCPU(dataId, float32Values) {\n    const texData = this.texData.get(dataId);\n    const {\n      dtype\n    } = texData;\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype);\n    }\n\n    return texData.values;\n  }\n\n  acquireTexture(texShape, texType, dtype, isPacked) {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n\n    if (!this.warnedAboutMemory && this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(`High memory usage in GPU: ${mb} MB, ` + `most likely due to a memory leak`);\n    }\n\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  computeBytes(shape, dtype) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n\n}\nMathBackendWebGL.nextDataId = 0;\n\nfunction float32ToTypedArray(a, dtype) {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a;\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = dtype === 'int32' ? new Int32Array(a.length) : new Uint8Array(a.length);\n\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n\n    return result;\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}","map":{"version":3,"mappings":"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","names":["backend_util","buffer","DataStorage","engine","env","kernel_impls","KernelBackend","scalar","tidy","util","getWebGLContext","DecodeMatrixProgram","DecodeMatrixPackedProgram","EncodeFloatProgram","EncodeFloatPackedProgram","EncodeMatrixProgram","EncodeMatrixPackedProgram","GPGPUContext","gpgpu_math","simpleAbsImplCPU","PackProgram","ReshapePackedProgram","tex_util","TextureUsage","TextureManager","unary_op","UnaryOpProgram","UnaryOpPackedProgram","UnpackProgram","webgl_util","whereImpl","EPSILON_FLOAT32","EPSILON_FLOAT16","binaryCaches","getBinaryCache","webGLVersion","CPU_HANDOFF_SIZE_THRESHOLD","getNumber","BEFORE_PAGING_CONSTANT","numMBBeforeWarning","global","screen","height","width","window","devicePixelRatio","MathBackendWebGL","constructor","gpuResource","WeakMap","WeakSet","getBool","Error","newGPGPU","gl","binaryCache","gpgpuCreatedLocally","gpgpu","canvas","textureManager","texData","nextDataId","numDataIds","pendingDeletes","write","values","shape","dtype","checkNumericalProblems","dataId","id","set","usage","UPLOAD","refCount","has","tensorData","get","incRef","decRef","move","disposeIntermediateTensorInfo","tensorInfo","disposeData","readSync","complexTensorInfos","slice","isPacked","program","CLONE","res","runWebGLProgram","data","convertAndCacheOnCPU","shouldTimeProgram","activeTimers","start","now","result","realValues","real","imagValues","imag","mergeRealAndImagArrays","getValuesFromTexture","downloadWaitMs","read","pendingRead","subscribers","Promise","resolve","push","tmpDownloadTarget","decode","tmpData","createBufferFromTexture","texture","getDenseTexShape","createAndWaitForFence","vals","ps","all","size","sizeFromShape","downloadFloat32MatrixFromBuffer","callAndCheck","deleteBuffer","dTypeVals","delete","forEach","pendingDisposal","removeDataId","readToGPU","options","gpuResouorce","tmpTarget","customTexShape","tensorRef","makeTensorFromDataId","bufferSync","t","decodedData","map","d","decodeString","i","length","num","canBeRepresented","downloadMatrixFromPackedTexture","subarray","shouldUsePackedProgram","outputShape","getShapeAs3D","output","downloadByteEncodedFloatMatrixFromOutputTexture","texShape","timerAvailable","time","f","oldActiveTimers","newActiveTimers","outerMostTime","programTimersStack","flattenedActiveTimerQueries","flatten","query","filter","flattenedActiveTimerNames","name","uploadWaitMs","kernelMs","wallMs","sum","ms","join","error","memory","unreliable","numBytesInGPU","numBytesInGPUAllocated","numBytesAllocated","numBytesInGPUFree","numBytesFree","startTimer","beginQuery","startMs","endMs","endTimer","endQuery","getQueryTime","waitForQueryAndGetTime","timerQuery","force","add","releaseGPUData","key","origDataId","dataRefCount","computeBytes","releaseTexture","getTexture","uploadToGPU","getDataInfo","shouldExecuteOnCPU","inputs","sizeThreshold","every","input","getGPGPUContext","where","condition","warn","condVals","dataSync","packedUnaryOp","x","op","outInfo","compileAndRun","abs","outValues","makeOutput","ABS","makeTensorInfo","isString","encodedValues","encodeString","unpackTensor","packTensor","preventEagerUnpackingOutput","packedReshape","afterShape","input3DShape","getBatchDim","getRowsCols","input3D","afterShapeAs3D","preventEagerUnpackingOfOutput","customValues","texSize","assert","shapeAs3D","out","outputDtype","customUniformValues","outData","packedOutput","outPackingScheme","PackingScheme","DENSE","texelShape","outTexUsage","getTypedArrayFromDType","dataToDispose","inputsData","packedInputs","isUniform","uniformValues","isReshapeFree","savedInput","targetShape","outputData","makeShaderKey","binary","getAndSaveBinary","compileProgram","runProgram","info","glFlushThreshold","lastGlFlushTime","flush","unpacked","getBinary","getTextureManager","dispose","disposed","allKeys","Object","keys","deleteProgram","webGLProgram","HTMLCanvasElement","remove","floatPrecision","floatPrecisionValue","debugFlag","underflowCheckValue","epsilon","getTextureShapeFromLogicalShape","isByteArray","Uint8Array","Uint8ClampedArray","getPackedMatrixTextureShapeWidthHeight","tempDenseInputTexShape","tempDenseInputHandle","tempDenseInputTexData","PIXELS","uploadDenseMatrixToTexture","preventEagerUnpacking","encodedOutputTarget","outputTexData","newTexture","acquireTexture","float32Values","float32ToTypedArray","texType","warnedAboutMemory","mb","toFixed","console","bytesPerElement","a","Int32Array","Math","round"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/backend_webgl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n// Import webgl flags.\nimport './flags_webgl';\n\nimport * as tf from '@tensorflow/tfjs-core';\nimport {backend_util, BackendValues, buffer, DataId, DataStorage, DataToGPUWebGLOption, DataType, DataValues, engine, env, GPUData, kernel_impls, KernelBackend, MemoryInfo, NumericDataType, Rank, RecursiveArray, scalar, ShapeMap, Tensor, Tensor2D, TensorBuffer, TensorInfo, tidy, TimingInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {getWebGLContext} from './canvas_util';\nimport {DecodeMatrixProgram} from './decode_matrix_gpu';\nimport {DecodeMatrixPackedProgram} from './decode_matrix_packed_gpu';\nimport {EncodeFloatProgram} from './encode_float_gpu';\nimport {EncodeFloatPackedProgram} from './encode_float_packed_gpu';\nimport {EncodeMatrixProgram} from './encode_matrix_gpu';\nimport {EncodeMatrixPackedProgram} from './encode_matrix_packed_gpu';\nimport {GPGPUContext} from './gpgpu_context';\nimport * as gpgpu_math from './gpgpu_math';\nimport {GPGPUBinary, GPGPUProgram, TensorData} from './gpgpu_math';\nimport {simpleAbsImplCPU} from './kernel_utils/shared';\nimport {PackProgram} from './pack_gpu';\nimport {ReshapePackedProgram} from './reshape_packed_gpu';\nimport * as tex_util from './tex_util';\nimport {Texture, TextureData, TextureUsage} from './tex_util';\nimport {TextureManager} from './texture_manager';\nimport * as unary_op from './unaryop_gpu';\nimport {UnaryOpProgram} from './unaryop_gpu';\nimport {UnaryOpPackedProgram} from './unaryop_packed_gpu';\nimport {UnpackProgram} from './unpack_gpu';\nimport * as webgl_util from './webgl_util';\n\nconst whereImpl = kernel_impls.whereImpl;\n\nexport const EPSILON_FLOAT32 = 1e-7;\nexport const EPSILON_FLOAT16 = 1e-4;\n\ntype KernelInfo = {\n  name: string; query: Promise<number>;\n};\n\nexport type TimerNode = RecursiveArray<KernelInfo>|KernelInfo;\nexport interface CPUTimerQuery {\n  startMs: number;\n  endMs?: number;\n}\n\nexport interface WebGLMemoryInfo extends MemoryInfo {\n  numBytesInGPU: number;\n  // Tracks the total number of bytes allocated on the GPU, accounting for the\n  // physical texture type.\n  numBytesInGPUAllocated: number;\n  // Tracks byte size of textures that were created and then made available for\n  // reuse (disposed).\n  numBytesInGPUFree: number;\n  unreliable: boolean;\n}\n\nexport interface WebGLTimingInfo extends TimingInfo {\n  uploadWaitMs: number;\n  downloadWaitMs: number;\n}\n\nconst binaryCaches: {[webGLVersion: string]: {[key: string]: GPGPUBinary}} = {};\n\nexport function getBinaryCache(webGLVersion: number) {\n  if (webGLVersion in binaryCaches) {\n    return binaryCaches[webGLVersion];\n  }\n  binaryCaches[webGLVersion] = {};\n  return binaryCaches[webGLVersion];\n}\n\n// Empirically determined constant used to determine size threshold for handing\n// off execution to the CPU.\nconst CPU_HANDOFF_SIZE_THRESHOLD =\n    env().getNumber('CPU_HANDOFF_SIZE_THRESHOLD');\n\n// Empirically determined constant used to decide the number of MB on GPU\n// before we warn about high memory use. The MB are this constant * screen area\n// * dpi / 1024 / 1024.\nconst BEFORE_PAGING_CONSTANT = 600;\nfunction numMBBeforeWarning(): number {\n  if (env().global.screen == null) {\n    return 1024;  // 1 GB.\n  }\n  return (env().global.screen.height * env().global.screen.width *\n          window.devicePixelRatio) *\n      BEFORE_PAGING_CONSTANT / 1024 / 1024;\n}\n\nexport class MathBackendWebGL extends KernelBackend {\n  texData: DataStorage<TextureData>;\n  gpgpu: GPGPUContext;\n\n  private static nextDataId = 0;\n  private nextDataId(): number {\n    return MathBackendWebGL.nextDataId++;\n  }\n  // Maps data ids that have a pending read operation, to list of subscribers.\n  private pendingRead = new WeakMap<DataId, Array<(arr: TypedArray) => void>>();\n  // List of data ids that are scheduled for disposal, but are waiting on a\n  // pending read operation.\n  private pendingDisposal = new WeakSet<DataId>();\n\n  // Used to count the number of 'shallow' sliced tensors that point to the\n  // same data id.\n  dataRefCount = new WeakMap<DataId, number>();\n  private numBytesInGPU = 0;\n\n  private canvas: HTMLCanvasElement|OffscreenCanvas;\n\n  private programTimersStack: TimerNode[];\n  private activeTimers: TimerNode[];\n  // Accumulated time spent (including blocking) in uploading data to webgl.\n  private uploadWaitMs = 0;\n  // Accumulated time spent (including blocking in downloading data from webgl.\n  private downloadWaitMs = 0;\n\n  // record the last manual GL Flush time.\n  private lastGlFlushTime = 0;\n\n  // Number of bits of precision of this backend.\n  private floatPrecisionValue: 32|16;\n\n  private textureManager: TextureManager;\n  private binaryCache: {[key: string]: GPGPUBinary};\n  private gpgpuCreatedLocally: boolean;\n  private numMBBeforeWarning: number;\n  private warnedAboutMemory = false;\n\n  constructor(gpuResource?: GPGPUContext|HTMLCanvasElement|OffscreenCanvas) {\n    super();\n    if (!env().getBool('HAS_WEBGL')) {\n      throw new Error('WebGL is not supported on this device');\n    }\n\n    let newGPGPU;\n    if (gpuResource != null) {\n      if (gpuResource instanceof GPGPUContext) {\n        newGPGPU = gpuResource;\n      } else {\n        const gl =\n            getWebGLContext(env().getNumber('WEBGL_VERSION'), gpuResource);\n        newGPGPU = new GPGPUContext(gl);\n      }\n      this.binaryCache = {};\n      this.gpgpuCreatedLocally = false;\n    } else {\n      const gl = getWebGLContext(env().getNumber('WEBGL_VERSION'));\n      newGPGPU = new GPGPUContext(gl);\n      this.binaryCache = getBinaryCache(env().getNumber('WEBGL_VERSION'));\n      this.gpgpuCreatedLocally = true;\n    }\n\n    this.gpgpu = newGPGPU;\n    this.canvas = this.gpgpu.gl.canvas;\n    this.textureManager = new TextureManager(this.gpgpu);\n    this.numMBBeforeWarning = numMBBeforeWarning();\n    this.texData = new DataStorage(this, engine());\n  }\n\n  numDataIds() {\n    return this.texData.numDataIds() - this.pendingDeletes;\n  }\n\n  write(values: BackendValues, shape: number[], dtype: DataType): DataId {\n    if (env().getBool('WEBGL_CHECK_NUMERICAL_PROBLEMS') ||\n        env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64' && values != null) {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    const dataId = {id: this.nextDataId()};\n    this.texData.set(\n        dataId,\n        {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount: 1});\n    return dataId;\n  }\n\n  /** Return refCount of a `TensorData`. */\n  refCount(dataId: DataId): number {\n    if (this.texData.has(dataId)) {\n      const tensorData = this.texData.get(dataId);\n      return tensorData.refCount;\n    }\n    return 0;\n  }\n\n  /** Increase refCount of a `TextureData`. */\n  incRef(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    texData.refCount++;\n  }\n\n  /** Decrease refCount of a `TextureData`. */\n  decRef(dataId: DataId): void {\n    if (this.texData.has(dataId)) {\n      const texData = this.texData.get(dataId);\n      texData.refCount--;\n    }\n  }\n\n  move(\n      dataId: DataId, values: BackendValues, shape: number[], dtype: DataType,\n      refCount: number): void {\n    if (env().getBool('DEBUG')) {\n      this.checkNumericalProblems(values);\n    }\n    if (dtype === 'complex64') {\n      throw new Error(\n          `Cannot write to a complex64 dtype. ` +\n          `Please use tf.complex(real, imag).`);\n    }\n    this.texData.set(\n        dataId, {shape, dtype, values, usage: TextureUsage.UPLOAD, refCount});\n  }\n\n  disposeIntermediateTensorInfo(tensorInfo: TensorInfo): void {\n    this.disposeData(tensorInfo.dataId);\n  }\n\n  readSync(dataId: DataId): BackendValues {\n    const texData = this.texData.get(dataId);\n    const {values, dtype, complexTensorInfos, slice, shape, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.readSync(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n    if (dtype === 'string') {\n      return values;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let result: Float32Array;\n    if (dtype === 'complex64') {\n      const realValues =\n          this.readSync(complexTensorInfos.real.dataId) as Float32Array;\n      const imagValues =\n          this.readSync(complexTensorInfos.imag.dataId) as Float32Array;\n      result = backend_util.mergeRealAndImagArrays(realValues, imagValues);\n    } else {\n      result = this.getValuesFromTexture(dataId);\n    }\n\n    if (shouldTimeProgram) {\n      this.downloadWaitMs += util.now() - start;\n    }\n    return this.convertAndCacheOnCPU(dataId, result);\n  }\n\n  async read(dataId: DataId): Promise<BackendValues> {\n    if (this.pendingRead.has(dataId)) {\n      const subscribers = this.pendingRead.get(dataId);\n      return new Promise<TypedArray>(resolve => subscribers.push(resolve));\n    }\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, complexTensorInfos, isPacked} = texData;\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const data = this.read(res.dataId);\n      this.disposeIntermediateTensorInfo(res);\n      return data;\n    }\n\n    if (values != null) {\n      return this.convertAndCacheOnCPU(dataId);\n    }\n\n    if (env().getBool('DEBUG')) {\n      // getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') caused a blocking GPU call.\n      // For performance reason, only check it for debugging. In production,\n      // it doesn't handle this use case anyway, so behavior is not changed.\n      if (!env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED') &&\n          env().getNumber('WEBGL_VERSION') === 2) {\n        throw new Error(\n            `tensor.data() with WEBGL_DOWNLOAD_FLOAT_ENABLED=false and ` +\n            `WEBGL_VERSION=2 not yet supported.`);\n      }\n    }\n\n    let buffer: WebGLBuffer = null;\n    let tmpDownloadTarget: TensorInfo;\n\n    if (dtype !== 'complex64' && env().get('WEBGL_BUFFER_SUPPORTED')) {\n      // Possibly copy the texture into a buffer before inserting a fence.\n      tmpDownloadTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpDownloadTarget.dataId);\n\n      buffer = this.gpgpu.createBufferFromTexture(\n          tmpData.texture.texture, ...tex_util.getDenseTexShape(shape));\n    }\n\n    this.pendingRead.set(dataId, []);\n\n    if (dtype !== 'complex64') {\n      // Create a fence and wait for it to resolve.\n      await this.gpgpu.createAndWaitForFence();\n    }\n\n    // Download the values from the GPU.\n    let vals: Float32Array;\n    if (dtype === 'complex64') {\n      const ps = await Promise.all([\n        this.read(complexTensorInfos.real.dataId),\n        this.read(complexTensorInfos.imag.dataId)\n      ]);\n\n      const realValues = ps[0];\n      const imagValues = ps[1];\n      vals = backend_util.mergeRealAndImagArrays(\n          realValues as Float32Array, imagValues as Float32Array);\n    } else if (buffer == null) {\n      vals = this.getValuesFromTexture(dataId);\n    } else {\n      const size = util.sizeFromShape(shape);\n      vals = this.gpgpu.downloadFloat32MatrixFromBuffer(buffer, size);\n    }\n    if (tmpDownloadTarget != null) {\n      this.disposeIntermediateTensorInfo(tmpDownloadTarget);\n    }\n    if (buffer != null) {\n      const gl = this.gpgpu.gl;\n      webgl_util.callAndCheck(gl, () => gl.deleteBuffer(buffer));\n    }\n    const dTypeVals = this.convertAndCacheOnCPU(dataId, vals);\n\n    const subscribers = this.pendingRead.get(dataId);\n    this.pendingRead.delete(dataId);\n\n    // Notify all pending reads.\n    subscribers.forEach(resolve => resolve(dTypeVals));\n    if (this.pendingDisposal.has(dataId)) {\n      this.pendingDisposal.delete(dataId);\n      if (this.disposeData(dataId)) {\n        engine().removeDataId(dataId, this);\n      }\n      this.pendingDeletes--;\n    }\n    return dTypeVals;\n  }\n\n  /**\n   * Read tensor to a new texture that is densely packed for ease of use.\n   * @param dataId The source tensor.\n   * @param options\n   *     customTexShape: Optional. If set, will use the user defined texture\n   *     shape to create the texture.\n   */\n  readToGPU(dataId: DataId, options: DataToGPUWebGLOption = {}): GPUData {\n    const texData = this.texData.get(dataId);\n    const {values, shape, slice, dtype, isPacked, texture} = texData;\n\n    if (dtype === 'complex64') {\n      throw new Error('Does not support reading texture for complex64 dtype.');\n    }\n\n    // The presence of `slice` indicates this tensor is a shallow slice of a\n    // different tensor, and is using that original tensor's texture. Run\n    // `clone` in order to copy that texture and read from it.\n    if (slice != null) {\n      let program;\n      if (isPacked) {\n        program = new UnaryOpPackedProgram(shape, unary_op.CLONE);\n      } else {\n        program = new UnaryOpProgram(shape, unary_op.CLONE);\n      }\n      const res =\n          this.runWebGLProgram(program, [{dataId, shape, dtype}], dtype);\n      const gpuResouorce = this.readToGPU(res, options);\n      this.disposeIntermediateTensorInfo(res);\n      return gpuResouorce;\n    }\n\n    if (texture == null) {\n      if (values != null) {\n        throw new Error('Data is not on GPU but on CPU.');\n      } else {\n        throw new Error('There is no data on GPU or CPU.');\n      }\n    }\n\n    // Decode the texture so that it is stored densely (using four channels).\n    const tmpTarget = this.decode(dataId, options.customTexShape);\n\n    // Make engine track this tensor, so that we can dispose it later.\n    const tensorRef = engine().makeTensorFromDataId(\n        tmpTarget.dataId, tmpTarget.shape, tmpTarget.dtype);\n\n    const tmpData = this.texData.get(tmpTarget.dataId);\n    return {tensorRef, ...tmpData.texture};\n  }\n\n  bufferSync<R extends Rank>(t: TensorInfo): TensorBuffer<R> {\n    const data = this.readSync(t.dataId);\n    let decodedData = data as DataValues;\n    if (t.dtype === 'string') {\n      try {\n        // Decode the bytes into string.\n        decodedData = (data as Uint8Array[]).map(d => util.decodeString(d));\n      } catch {\n        throw new Error('Failed to decode encoded string bytes into utf-8');\n      }\n    }\n    return buffer(t.shape as ShapeMap[R], t.dtype, decodedData) as\n        TensorBuffer<R>;\n  }\n\n  private checkNumericalProblems(values: BackendValues): void {\n    if (values == null) {\n      return;\n    }\n    for (let i = 0; i < values.length; i++) {\n      const num = values[i] as number;\n      if (!webgl_util.canBeRepresented(num)) {\n        if (env().getBool('WEBGL_RENDER_FLOAT32_CAPABLE')) {\n          throw Error(\n              `The value ${num} cannot be represented with your ` +\n              `current settings. Consider enabling float32 rendering: ` +\n              `'tf.env().set('WEBGL_RENDER_FLOAT32_ENABLED', true);'`);\n        }\n        throw Error(`The value ${num} cannot be represented on this device.`);\n      }\n    }\n  }\n\n  private getValuesFromTexture(dataId: DataId): Float32Array {\n    const {shape, dtype, isPacked} = this.texData.get(dataId);\n    const size = util.sizeFromShape(shape);\n    if (env().getBool('WEBGL_DOWNLOAD_FLOAT_ENABLED')) {\n      const tmpTarget = this.decode(dataId);\n      const tmpData = this.texData.get(tmpTarget.dataId);\n      const vals =\n          this.gpgpu\n              .downloadMatrixFromPackedTexture(\n                  tmpData.texture.texture, ...tex_util.getDenseTexShape(shape))\n              .subarray(0, size);\n\n      this.disposeIntermediateTensorInfo(tmpTarget);\n\n      return vals;\n    }\n\n    const shouldUsePackedProgram =\n        env().getBool('WEBGL_PACK') && isPacked === true;\n    const outputShape =\n        shouldUsePackedProgram ? webgl_util.getShapeAs3D(shape) : shape;\n    const program = shouldUsePackedProgram ?\n        new EncodeFloatPackedProgram(outputShape as [number, number, number]) :\n        new EncodeFloatProgram(outputShape);\n    const output = this.runWebGLProgram(\n        program, [{shape: outputShape, dtype, dataId}], 'float32');\n    const tmpData = this.texData.get(output.dataId);\n    const vals = this.gpgpu\n                     .downloadByteEncodedFloatMatrixFromOutputTexture(\n                         tmpData.texture.texture, tmpData.texShape[0],\n                         tmpData.texShape[1])\n                     .subarray(0, size);\n    this.disposeIntermediateTensorInfo(output);\n\n    return vals;\n  }\n\n  timerAvailable(): boolean {\n    return env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0;\n  }\n\n  time(f: () => void): Promise<WebGLTimingInfo> {\n    const oldActiveTimers = this.activeTimers;\n    const newActiveTimers: TimerNode[] = [];\n\n    let outerMostTime = false;\n    if (this.programTimersStack == null) {\n      this.programTimersStack = newActiveTimers;\n      outerMostTime = true;\n    } else {\n      this.activeTimers.push(newActiveTimers);\n    }\n    this.activeTimers = newActiveTimers;\n\n    f();\n\n    // needing to split these up because util.flatten only accepts certain types\n    const flattenedActiveTimerQueries =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.query))\n            .filter(d => d != null);\n    const flattenedActiveTimerNames =\n        util.flatten(this.activeTimers.map((d: KernelInfo) => d.name))\n            .filter(d => d != null);\n\n    this.activeTimers = oldActiveTimers;\n\n    if (outerMostTime) {\n      this.programTimersStack = null;\n    }\n\n    const res: WebGLTimingInfo = {\n      uploadWaitMs: this.uploadWaitMs,\n      downloadWaitMs: this.downloadWaitMs,\n      kernelMs: null,\n      wallMs: null  // will be filled by the engine\n    };\n\n    return (async () => {\n      if (env()\n        .getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n        const kernelMs = await Promise.all(flattenedActiveTimerQueries);\n\n        res['kernelMs'] = util.sum(kernelMs);\n        res['getExtraProfileInfo'] = () =>\n          kernelMs.map((d, i) => ({name: flattenedActiveTimerNames[i], ms: d}))\n            .map(d => `${d.name}: ${d.ms}`)\n            .join(', ');\n      } else {\n        res['kernelMs'] = {\n          error: 'WebGL query timers are not supported in this environment.'\n        };\n      }\n\n      this.uploadWaitMs = 0;\n      this.downloadWaitMs = 0;\n      return res;\n    })();\n  }\n  memory(): WebGLMemoryInfo {\n    return {\n      unreliable: false,\n      numBytesInGPU: this.numBytesInGPU,\n      numBytesInGPUAllocated: this.textureManager.numBytesAllocated,\n      numBytesInGPUFree: this.textureManager.numBytesFree\n    } as WebGLMemoryInfo;\n  }\n\n  private startTimer(): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.beginQuery();\n    }\n    return {startMs: util.now(), endMs: null};\n  }\n\n  private endTimer(query: WebGLQuery|CPUTimerQuery): WebGLQuery|CPUTimerQuery {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      this.gpgpu.endQuery();\n      return query;\n    }\n    (query as CPUTimerQuery).endMs = util.now();\n    return query;\n  }\n\n  private async getQueryTime(query: WebGLQuery|CPUTimerQuery): Promise<number> {\n    if (env().getNumber('WEBGL_DISJOINT_QUERY_TIMER_EXTENSION_RELIABLE') > 0) {\n      return this.gpgpu.waitForQueryAndGetTime(query as WebGLQuery);\n    }\n    const timerQuery = query as CPUTimerQuery;\n    return timerQuery.endMs - timerQuery.startMs;\n  }\n\n  private pendingDeletes = 0;\n\n  /**\n   * Decrease the RefCount on the dataId and dispose the memory if the dataId\n   * has 0 refCount. If there are pending read on the data, the disposal would\n   * added to the pending delete queue. Return true if the dataId is removed\n   * from backend or the backend does not contain the dataId, false if the\n   * dataId is not removed. Memory may or may not be released even when dataId\n   * is removed, which also depends on dataRefCount, see `releaseGPU`.\n   * @param dataId\n   * @oaram force Optional, remove the data regardless of refCount\n   */\n  disposeData(dataId: DataId, force = false): boolean {\n    if (this.pendingDisposal.has(dataId)) {\n      return false;\n    }\n\n    // No-op if already disposed.\n    if (!this.texData.has(dataId)) {\n      return true;\n    }\n\n    // if force flag is set, change refCount to 0, this would ensure disposal\n    // when added to the pendingDisposal queue. Memory may or may not be\n    // released, which also depends on dataRefCount, see `releaseGPU`.\n    if (force) {\n      this.texData.get(dataId).refCount = 0;\n    } else {\n      this.texData.get(dataId).refCount--;\n    }\n\n    if (!force && this.texData.get(dataId).refCount > 0) {\n      return false;\n    }\n\n    if (this.pendingRead.has(dataId)) {\n      this.pendingDisposal.add(dataId);\n      this.pendingDeletes++;\n      return false;\n    }\n\n    this.releaseGPUData(dataId);\n    const {complexTensorInfos} = this.texData.get(dataId);\n    if (complexTensorInfos != null) {\n      this.disposeData(complexTensorInfos.real.dataId, force);\n      this.disposeData(complexTensorInfos.imag.dataId, force);\n    }\n\n    this.texData.delete(dataId);\n\n    return true;\n  }\n\n  private releaseGPUData(dataId: DataId): void {\n    const {texture, dtype, texShape, usage, isPacked, slice} =\n        this.texData.get(dataId);\n    const key = slice && slice.origDataId || dataId;\n    const refCount = this.dataRefCount.get(key);\n\n    if (refCount > 1) {\n      this.dataRefCount.set(key, refCount - 1);\n    } else {\n      this.dataRefCount.delete(key);\n      if (texture != null) {\n        this.numBytesInGPU -= this.computeBytes(texShape, dtype);\n        this.textureManager.releaseTexture(texture, texShape, usage, isPacked);\n      }\n    }\n\n    const texData = this.texData.get(dataId);\n    texData.texture = null;\n    texData.texShape = null;\n    texData.isPacked = false;\n    texData.slice = null;\n  }\n\n  getTexture(dataId: DataId): WebGLTexture {\n    this.uploadToGPU(dataId);\n    return this.texData.get(dataId).texture.texture;\n  }\n\n  /**\n   * Returns internal information for the specific data bucket. Used in unit\n   * tests.\n   */\n  getDataInfo(dataId: DataId): TextureData {\n    return this.texData.get(dataId);\n  }\n\n  /*\n  Tests whether all the inputs to an op are small and on the CPU. This heuristic\n  determines when it would be faster to execute a kernel on the CPU. WebGL\n  kernels opt into running this check and forwarding when appropriate.\n  TODO(https://github.com/tensorflow/tfjs/issues/872): Develop a more\n  sustainable strategy for optimizing backend execution of ops.\n   */\n  shouldExecuteOnCPU(\n      inputs: TensorInfo[],\n      sizeThreshold = CPU_HANDOFF_SIZE_THRESHOLD): boolean {\n    return env().getBool('WEBGL_CPU_FORWARD') &&\n        inputs.every(\n            input => this.texData.get(input.dataId).texture == null &&\n                util.sizeFromShape(input.shape) < sizeThreshold);\n  }\n\n  getGPGPUContext(): GPGPUContext {\n    return this.gpgpu;\n  }\n\n  where(condition: Tensor): Tensor2D {\n    backend_util.warn(\n        'tf.where() in webgl locks the UI thread. ' +\n        'Call tf.whereAsync() instead');\n    const condVals = condition.dataSync();\n    return whereImpl(condition.shape, condVals);\n  }\n\n  private packedUnaryOp(x: TensorInfo, op: string, dtype: DataType) {\n    const program = new UnaryOpPackedProgram(x.shape, op);\n    const outInfo = this.compileAndRun(program, [x], dtype);\n    return engine().makeTensorFromDataId(\n        outInfo.dataId, outInfo.shape, outInfo.dtype);\n  }\n\n  // TODO(msoulanille) remove this once the backend has been modularized\n  // a copy is needed here to break a circular dependency.\n  // Also remove the op from unary_op.\n  abs<T extends Tensor>(x: T): T {\n    // TODO: handle cases when x is complex.\n    if (this.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n      const outValues =\n          simpleAbsImplCPU(this.texData.get(x.dataId).values as TypedArray);\n      return this.makeOutput(x.shape, x.dtype, outValues);\n    }\n\n    if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n      return this.packedUnaryOp(x, unary_op.ABS, x.dtype) as T;\n    }\n\n    const program = new UnaryOpProgram(x.shape, unary_op.ABS);\n    const outInfo = this.compileAndRun(program, [x]);\n    return engine().makeTensorFromDataId(\n               outInfo.dataId, outInfo.shape, outInfo.dtype) as T;\n  }\n\n  makeTensorInfo(\n      shape: number[], dtype: DataType,\n      values?: BackendValues|string[]): TensorInfo {\n    let dataId;\n    if (dtype === 'string' && values != null && values.length > 0 &&\n        util.isString(values[0])) {\n      const encodedValues =\n          (values as {} as string[]).map(d => util.encodeString(d));\n\n      dataId = this.write(encodedValues, shape, dtype);\n    } else {\n      dataId = this.write(values as TypedArray, shape, dtype);\n    }\n\n    this.texData.get(dataId).usage = null;\n    return {dataId, shape, dtype};\n  }\n\n  private makeOutput<T extends Tensor>(\n      shape: number[], dtype: DataType, values?: BackendValues): T {\n    const {dataId} = this.makeTensorInfo(shape, dtype, values);\n    return engine().makeTensorFromDataId(dataId, shape, dtype, this) as T;\n  }\n\n  unpackTensor(input: TensorInfo): TensorInfo {\n    const program = new UnpackProgram(input.shape);\n    return this.runWebGLProgram(program, [input], input.dtype);\n  }\n\n  packTensor(input: TensorInfo): TensorInfo {\n    const program = new PackProgram(input.shape);\n    const preventEagerUnpackingOutput = true;\n    return this.runWebGLProgram(\n        program, [input], input.dtype, null /* customUniformValues */,\n        preventEagerUnpackingOutput);\n  }\n\n  private packedReshape(input: TensorInfo, afterShape: number[]): TensorInfo {\n    const input3DShape = [\n      webgl_util.getBatchDim(input.shape),\n      ...webgl_util.getRowsCols(input.shape)\n    ] as [number, number, number];\n    const input3D: TensorInfo = {\n      dtype: input.dtype,\n      shape: input3DShape,\n      dataId: input.dataId\n    };\n    const afterShapeAs3D = [\n      webgl_util.getBatchDim(afterShape), ...webgl_util.getRowsCols(afterShape)\n    ] as [number, number, number];\n\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const customValues = [input3DShape];\n    const output = this.runWebGLProgram(\n        program, [input3D], input.dtype, customValues,\n        preventEagerUnpackingOfOutput);\n    return {dataId: output.dataId, shape: afterShape, dtype: output.dtype};\n  }\n\n  private decode(dataId: DataId, customTexShape?: [number, number]):\n      TensorInfo {\n    const texData = this.texData.get(dataId);\n    const {isPacked, shape, dtype} = texData;\n    if (customTexShape != null) {\n      const size = util.sizeFromShape(shape);\n      const texSize = customTexShape[0] * customTexShape[1] * 4;\n      util.assert(\n          size <= texSize,\n          () => 'customTexShape is too small. ' +\n              'Row * Column * 4 should be equal or larger than the ' +\n              'size of the tensor data.');\n    }\n    const shapeAs3D =\n        webgl_util.getShapeAs3D(shape) as [number, number, number];\n    let program;\n    if (isPacked) {\n      program = new DecodeMatrixPackedProgram(shapeAs3D);\n    } else {\n      program = new DecodeMatrixProgram(shapeAs3D);\n    }\n    const preventEagerUnpackingOfOutput = true;\n    const customValues =\n        [customTexShape != null ? customTexShape :\n                                  tex_util.getDenseTexShape(shapeAs3D)];\n    const out = this.runWebGLProgram(\n        program, [{shape: shapeAs3D, dtype, dataId}], dtype, customValues,\n        preventEagerUnpackingOfOutput, customTexShape);\n    return {dtype, shape, dataId: out.dataId};\n  }\n\n  runWebGLProgram(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype: DataType,\n      customUniformValues?: number[][], preventEagerUnpackingOfOutput = false,\n      customTexShape?: [number, number]): TensorInfo {\n    const output = this.makeTensorInfo(program.outputShape, outputDtype);\n    const outData = this.texData.get(output.dataId);\n    if (program.packedOutput) {\n      outData.isPacked = true;\n    }\n    if (program.outPackingScheme === tex_util.PackingScheme.DENSE) {\n      const texelShape = customTexShape != null ?\n          customTexShape :\n          tex_util.getDenseTexShape(program.outputShape);\n      // For a densely packed output, we explicitly set texShape\n      // so it doesn't get assigned later according to our typical packing\n      // scheme wherein a single texel can only contain values from adjacent\n      // rows/cols.\n      outData.texShape = texelShape.map(d => d * 2) as [number, number];\n    }\n    if (program.outTexUsage != null) {\n      outData.usage = program.outTexUsage;\n    }\n\n    if (util.sizeFromShape(output.shape) === 0) {\n      // Short-circuit the computation since the result is empty (has 0 in its\n      // shape).\n      outData.values =\n          util.getTypedArrayFromDType(output.dtype as 'float32', 0);\n      return output;\n    }\n\n    const dataToDispose: TensorInfo[] = [];\n    const inputsData: TensorData[] = inputs.map(input => {\n      if (input.dtype === 'complex64') {\n        throw new Error(\n            `GPGPUProgram does not support complex64 input. For complex64 ` +\n            `dtypes, please separate the program into real and imaginary ` +\n            `parts.`);\n      }\n\n      let texData = this.texData.get(input.dataId);\n\n      if (texData.texture == null) {\n        if (!program.packedInputs &&\n            util.sizeFromShape(input.shape) <=\n                env().getNumber('WEBGL_SIZE_UPLOAD_UNIFORM')) {\n          // Upload small tensors that live on the CPU as uniforms, not as\n          // textures. Do this only when the environment supports 32bit floats\n          // due to problems when comparing 16bit floats with 32bit floats.\n          // TODO(https://github.com/tensorflow/tfjs/issues/821): Make it\n          // possible for packed shaders to sample from uniforms.\n          return {\n            shape: input.shape,\n            texData: null,\n            isUniform: true,\n            uniformValues: texData.values as TypedArray\n          };\n        }\n\n        // This ensures that if a packed program's inputs have not yet been\n        // uploaded to the GPU, they get uploaded as packed right off the bat.\n        if (program.packedInputs) {\n          texData.isPacked = true;\n          texData.shape = input.shape;\n        }\n      }\n\n      this.uploadToGPU(input.dataId);\n      if (!!texData.isPacked !== !!program.packedInputs) {\n        input = texData.isPacked ? this.unpackTensor(input) :\n                                   this.packTensor(input);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n      } else if (\n          texData.isPacked &&\n          !webgl_util.isReshapeFree(texData.shape, input.shape)) {\n        // This is a special case where a texture exists for a tensor\n        // but the shapes are incompatible (due to packing constraints) because\n        // the tensor did not have a chance to go through the packed reshape\n        // shader. This only happens when we reshape the *same* tensor to form\n        // *distinct* inputs to an op, e.g. dotting a vector with itself. This\n        // case will disappear once packed uploading is the default.\n\n        const savedInput = input;\n        const targetShape = input.shape;\n\n        input.shape = texData.shape;\n        input = this.packedReshape(input as Tensor, targetShape);\n        dataToDispose.push(input);\n        texData = this.texData.get(input.dataId);\n\n        savedInput.shape = targetShape;\n      }\n\n      return {shape: input.shape, texData, isUniform: false};\n    });\n\n    this.uploadToGPU(output.dataId);\n    const outputData:\n        TensorData = {shape: output.shape, texData: outData, isUniform: false};\n    const key = gpgpu_math.makeShaderKey(program, inputsData, outputData);\n    const binary = this.getAndSaveBinary(key, () => {\n      return gpgpu_math.compileProgram(\n          this.gpgpu, program, inputsData, outputData);\n    });\n    const shouldTimeProgram = this.activeTimers != null;\n    let query: WebGLQuery|CPUTimerQuery;\n    if (shouldTimeProgram) {\n      query = this.startTimer();\n    }\n\n    gpgpu_math.runProgram(\n        this.gpgpu, binary, inputsData, outputData, customUniformValues);\n\n    dataToDispose.forEach(info => this.disposeIntermediateTensorInfo(info));\n\n    if (shouldTimeProgram) {\n      query = this.endTimer(query);\n      this.activeTimers.push(\n          {name: program.constructor.name, query: this.getQueryTime(query)});\n    }\n\n    const glFlushThreshold = env().get('WEBGL_FLUSH_THRESHOLD');\n    // Manually GL flush requested\n    if (glFlushThreshold > 0) {\n      const time = util.now();\n      if ((time - this.lastGlFlushTime) > glFlushThreshold) {\n        this.gpgpu.gl.flush();\n        this.lastGlFlushTime = time;\n      }\n    }\n\n    if (!env().getBool('WEBGL_LAZILY_UNPACK') && outData.isPacked &&\n        preventEagerUnpackingOfOutput === false) {\n      const unpacked = this.unpackTensor(output);\n      this.disposeIntermediateTensorInfo(output);\n      return unpacked;\n    }\n    return output;\n  }\n\n  compileAndRun(\n      program: GPGPUProgram, inputs: TensorInfo[], outputDtype?: DataType,\n      customUniformValues?: number[][],\n      preventEagerUnpackingOfOutput = false): TensorInfo {\n    outputDtype = outputDtype || inputs[0].dtype;\n    const outInfo = this.runWebGLProgram(\n        program, inputs, outputDtype, customUniformValues,\n        preventEagerUnpackingOfOutput);\n    return outInfo;\n  }\n\n  private getAndSaveBinary(key: string, getBinary: () => GPGPUBinary):\n      GPGPUBinary {\n    if (!(key in this.binaryCache)) {\n      this.binaryCache[key] = getBinary();\n    }\n    return this.binaryCache[key];\n  }\n\n  getTextureManager(): TextureManager {\n    return this.textureManager;\n  }\n\n  private disposed = false;\n\n  dispose() {\n    if (this.disposed) {\n      return;\n    }\n    // Avoid disposing the compiled webgl programs during unit testing because\n    // it slows down test execution.\n    if (!env().getBool('IS_TEST')) {\n      const allKeys = Object.keys(this.binaryCache);\n      allKeys.forEach(key => {\n        this.gpgpu.deleteProgram(this.binaryCache[key].webGLProgram);\n        delete this.binaryCache[key];\n      });\n    }\n    this.textureManager.dispose();\n    if (this.canvas != null &&\n        (typeof (HTMLCanvasElement) !== 'undefined' &&\n         this.canvas instanceof HTMLCanvasElement)) {\n      this.canvas.remove();\n    } else {\n      this.canvas = null;\n    }\n    if (this.gpgpuCreatedLocally) {\n      this.gpgpu.program = null;\n      this.gpgpu.dispose();\n    }\n    this.disposed = true;\n  }\n\n  floatPrecision(): 16|32 {\n    if (this.floatPrecisionValue == null) {\n      this.floatPrecisionValue = tidy(() => {\n        if (!env().get('WEBGL_RENDER_FLOAT32_ENABLED')) {\n          // Momentarily switching DEBUG flag to false so we don't throw an\n          // error trying to upload a small value.\n          const debugFlag = env().getBool('DEBUG');\n          env().set('DEBUG', false);\n          const underflowCheckValue = this.abs(scalar(1e-8)).dataSync()[0];\n          env().set('DEBUG', debugFlag);\n\n          if (underflowCheckValue > 0) {\n            return 32;\n          }\n        }\n        return 16;\n      });\n    }\n    return this.floatPrecisionValue;\n  }\n\n  /** Returns the smallest representable number.  */\n  epsilon(): number {\n    return this.floatPrecision() === 32 ? EPSILON_FLOAT32 : EPSILON_FLOAT16;\n  }\n\n  uploadToGPU(dataId: DataId): void {\n    const texData = this.texData.get(dataId);\n    const {shape, dtype, values, texture, usage, isPacked} = texData;\n\n    if (texture != null) {\n      // Array is already on GPU. No-op.\n      return;\n    }\n    const shouldTimeProgram = this.activeTimers != null;\n    let start: number;\n    if (shouldTimeProgram) {\n      start = util.now();\n    }\n\n    let texShape = texData.texShape;\n    if (texShape == null) {\n      // This texShape may not be the final texture shape. For packed or dense\n      // textures, the texShape will be changed when textures are created.\n      texShape = webgl_util.getTextureShapeFromLogicalShape(shape, isPacked);\n      texData.texShape = texShape;\n    }\n\n    if (values != null) {\n      const shapeAs3D = webgl_util.getShapeAs3D(shape);\n\n      let program;\n      let width = texShape[1], height = texShape[0];\n      const isByteArray =\n          values instanceof Uint8Array || values instanceof Uint8ClampedArray;\n\n      // texture for float array is PhysicalTextureType.PACKED_2X2_FLOAT32, we\n      // need to make sure the upload uses the same packed size\n      if (isPacked || !isByteArray) {\n        [width, height] = tex_util.getPackedMatrixTextureShapeWidthHeight(\n            texShape[0], texShape[1]);\n      }\n\n      if (isPacked) {\n        program = new EncodeMatrixPackedProgram(shapeAs3D, isByteArray);\n      } else {\n        program = new EncodeMatrixProgram(shapeAs3D, isByteArray);\n      }\n\n      // TexShape for float array needs to be the original shape, which byte\n      // array needs to be packed size. This allow the data upload shape to be\n      // matched with texture creation logic.\n      const tempDenseInputTexShape: [number, number] =\n          isByteArray ? [height, width] : texShape;\n      const tempDenseInputHandle =\n          this.makeTensorInfo(tempDenseInputTexShape, dtype);\n      const tempDenseInputTexData =\n          this.texData.get(tempDenseInputHandle.dataId);\n      if (isByteArray) {\n        tempDenseInputTexData.usage = TextureUsage.PIXELS;\n      } else {\n        tempDenseInputTexData.usage = TextureUsage.UPLOAD;\n      }\n      tempDenseInputTexData.texShape = tempDenseInputTexShape;\n      this.gpgpu.uploadDenseMatrixToTexture(\n          this.getTexture(tempDenseInputHandle.dataId), width, height,\n          values as TypedArray);\n\n      const customValues = [[height, width]];\n      // We want the output to remain packed regardless of the value of\n      // WEBGL_PACK.\n      const preventEagerUnpacking = true;\n      const encodedOutputTarget = this.runWebGLProgram(\n          program, [tempDenseInputHandle], dtype, customValues,\n          preventEagerUnpacking);\n\n      // Have the original texture assume the identity of the encoded output.\n      const outputTexData = this.texData.get(encodedOutputTarget.dataId);\n      texData.texture = outputTexData.texture;\n      texData.texShape = outputTexData.texShape;\n      texData.isPacked = outputTexData.isPacked;\n      texData.usage = outputTexData.usage;\n\n      this.disposeIntermediateTensorInfo(tempDenseInputHandle);\n      this.texData.delete(encodedOutputTarget.dataId);\n\n      // Once uploaded, don't store the values on cpu.\n      texData.values = null;\n      if (shouldTimeProgram) {\n        this.uploadWaitMs += util.now() - start;\n      }\n    } else {\n      const newTexture = this.acquireTexture(texShape, usage, dtype, isPacked);\n      texData.texture = newTexture;\n    }\n  }\n\n  private convertAndCacheOnCPU(dataId: DataId, float32Values?: Float32Array):\n      TypedArray {\n    const texData = this.texData.get(dataId);\n    const {dtype} = texData;\n\n    this.releaseGPUData(dataId);\n\n    if (float32Values != null) {\n      texData.values = float32ToTypedArray(float32Values, dtype as 'float32');\n    }\n    return texData.values as TypedArray;\n  }\n\n  private acquireTexture(\n      texShape: [number, number], texType: TextureUsage, dtype: DataType,\n      isPacked: boolean): Texture {\n    this.numBytesInGPU += this.computeBytes(texShape, dtype);\n    if (!this.warnedAboutMemory &&\n        this.numBytesInGPU > this.numMBBeforeWarning * 1024 * 1024) {\n      const mb = (this.numBytesInGPU / 1024 / 1024).toFixed(2);\n      this.warnedAboutMemory = true;\n      console.warn(\n          `High memory usage in GPU: ${mb} MB, ` +\n          `most likely due to a memory leak`);\n    }\n    return this.textureManager.acquireTexture(texShape, texType, isPacked);\n  }\n\n  private computeBytes(shape: [number, number], dtype: DataType) {\n    return shape[0] * shape[1] * util.bytesPerElement(dtype);\n  }\n}\n\nfunction float32ToTypedArray<D extends NumericDataType>(\n    a: Float32Array, dtype: D): tf.DataTypeMap[D] {\n  if (dtype === 'float32' || dtype === 'complex64') {\n    return a as tf.DataTypeMap[D];\n  } else if (dtype === 'int32' || dtype === 'bool') {\n    const result = (dtype === 'int32') ? new Int32Array(a.length) :\n                                         new Uint8Array(a.length);\n    for (let i = 0; i < result.length; ++i) {\n      result[i] = Math.round(a[i]);\n    }\n    return result as tf.DataTypeMap[D];\n  } else {\n    throw new Error(`Unknown dtype ${dtype}`);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}