{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { ExpandDims } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\n\nfunction expandDims_(x) {\n  let axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');\n  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n  const inputs = {\n    input: $x\n  };\n  const attrs = {\n    dim: axis\n  };\n  return ENGINE.runKernel(ExpandDims, inputs, attrs);\n}\n\nexport const expandDims = op({\n  expandDims_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,UAAR,QAA4D,iBAA5D;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;;;;;AAgBA,SAASC,WAAT,CAAuCC,CAAvC,EAAqE;AAAA,MAARC,IAAQ,uEAAD,CAAC;AACnE,QAAMC,EAAE,GAAGN,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,YAAT,EAAuB,mBAAvB,CAA1B;AAEAH,MAAI,CAACM,MAAL,CAAYF,IAAI,IAAIC,EAAE,CAACE,IAAvB,EAA6B,MAAM,oCAAnC;AAEA,QAAMC,MAAM,GAAqB;AAACC,SAAK,EAAEJ;AAAR,GAAjC;AACA,QAAMK,KAAK,GAAoB;AAACC,OAAG,EAAEP;AAAN,GAA/B;AAEA,SAAOP,MAAM,CAACe,SAAP,CACHd,UADG,EACSU,MADT,EACyCE,KADzC,CAAP;AAED;;AAED,OAAO,MAAMG,UAAU,GAAGZ,EAAE,CAAC;AAACC;AAAD,CAAD,CAArB","names":["ENGINE","ExpandDims","convertToTensor","util","op","expandDims_","x","axis","$x","assert","rank","inputs","input","attrs","dim","runKernel","expandDims"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/expand_dims.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {ExpandDims, ExpandDimsAttrs, ExpandDimsInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Returns a `tf.Tensor` that has expanded rank, by inserting a dimension\n * into the tensor's shape.\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n * const axis = 1;\n * x.expandDims(axis).print();\n * ```\n *\n * @param x The input tensor whose dimensions to be expanded.\n * @param axis The dimension index at which to insert shape of `1`. Defaults\n *     to 0 (the first dimension).\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction expandDims_<T extends Tensor>(x: Tensor|TensorLike, axis = 0): T {\n  const $x = convertToTensor(x, 'x', 'expandDims', 'string_or_numeric');\n\n  util.assert(axis <= $x.rank, () => 'Axis must be <= rank of the tensor');\n\n  const inputs: ExpandDimsInputs = {input: $x};\n  const attrs: ExpandDimsAttrs = {dim: axis};\n\n  return ENGINE.runKernel(\n      ExpandDims, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const expandDims = op({expandDims_});\n"]},"metadata":{},"sourceType":"module"}