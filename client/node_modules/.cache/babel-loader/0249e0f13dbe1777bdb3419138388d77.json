{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Conv3D } from '../kernel_names';\nimport { conv3DBackpropFilter } from '../ops/conv3d_backprop_filter';\nimport { conv3DBackpropInput } from '../ops/conv3d_backprop_input';\nimport { tupleValuesAreOne } from '../ops/conv_util';\nimport * as util from '../util';\nexport const conv3DGradConfig = {\n  kernelName: Conv3D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy, saved, attrs) => {\n    const {\n      dilations,\n      strides,\n      pad\n    } = attrs;\n    util.assert(tupleValuesAreOne(dilations), () => 'Error in gradient of conv3D: dilation rates greater than 1 are ' + `not yet supported in gradients. Got dilations '${dilations}'`);\n    const [x5D, $filter] = saved;\n    return {\n      x: () => conv3DBackpropInput(x5D.shape, dy, $filter, strides, pad),\n      filter: () => conv3DBackpropFilter(x5D, dy, $filter.shape, strides, pad)\n    };\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAkC,iBAAlC;AAEA,SAAQC,oBAAR,QAAmC,+BAAnC;AACA,SAAQC,mBAAR,QAAkC,8BAAlC;AACA,SAAQC,iBAAR,QAAgC,kBAAhC;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,OAAO,MAAMC,gBAAgB,GAAe;AAC1CC,YAAU,EAAEN,MAD8B;AAE1CO,cAAY,EAAE,CAAC,GAAD,EAAM,QAAN,CAF4B;AAG1CC,UAAQ,EAAE,CAACC,EAAD,EAAeC,KAAf,EAAgCC,KAAhC,KAAuD;AAC/D,UAAM;AAACC,eAAD;AAAYC,aAAZ;AAAqBC;AAArB,QAA4BH,KAAlC;AACAP,QAAI,CAACW,MAAL,CACIZ,iBAAiB,CAACS,SAAD,CADrB,EAEI,MACI,oEACA,kDAAkDA,SAAS,GAJnE;AAMA,UAAM,CAACI,GAAD,EAAMC,OAAN,IAAiBP,KAAvB;AAEA,WAAO;AACLQ,OAAC,EAAE,MAAMhB,mBAAmB,CACvBc,GAAgB,CAACG,KADM,EACCV,EADD,EACKQ,OADL,EAC0BJ,OAD1B,EACmCC,GADnC,CADvB;AAGLM,YAAM,EAAE,MAAMnB,oBAAoB,CAC9Be,GAD8B,EACbP,EADa,EACRQ,OAAoB,CAACE,KADb,EACoBN,OADpB,EAC6BC,GAD7B;AAH7B,KAAP;AAMD;AAnByC,CAArC","names":["Conv3D","conv3DBackpropFilter","conv3DBackpropInput","tupleValuesAreOne","util","conv3DGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","dilations","strides","pad","assert","x5D","$filter","x","shape","filter"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/Conv3D_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Conv3D, Conv3DAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {conv3DBackpropFilter} from '../ops/conv3d_backprop_filter';\nimport {conv3DBackpropInput} from '../ops/conv3d_backprop_input';\nimport {tupleValuesAreOne} from '../ops/conv_util';\nimport {Tensor, Tensor5D} from '../tensor';\nimport * as util from '../util';\n\nexport const conv3DGradConfig: GradConfig = {\n  kernelName: Conv3D,\n  inputsToSave: ['x', 'filter'],\n  gradFunc: (dy: Tensor5D, saved: Tensor[], attrs: NamedAttrMap) => {\n    const {dilations, strides, pad} = attrs as {} as Conv3DAttrs;\n    util.assert(\n        tupleValuesAreOne(dilations),\n        () =>\n            'Error in gradient of conv3D: dilation rates greater than 1 are ' +\n            `not yet supported in gradients. Got dilations '${dilations}'`);\n\n    const [x5D, $filter] = saved;\n\n    return {\n      x: () => conv3DBackpropInput(\n          (x5D as Tensor5D).shape, dy, $filter as Tensor5D, strides, pad),\n      filter: () => conv3DBackpropFilter(\n          x5D as Tensor5D, dy, ($filter as Tensor5D).shape, strides, pad)\n    };\n  }\n};\n"]},"metadata":{},"sourceType":"module"}