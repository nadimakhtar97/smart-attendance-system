{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { NodeValueImpl } from './custom_op/node_value_impl';\nimport { getRegisteredOp } from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\n\nexport function executeOp(node, tensorMap, context, resourceManager) {\n  const value = ((node, tensorMap, context) => {\n    switch (node.category) {\n      case 'arithmetic':\n        return tfc.tidy(() => arithmetic.executeOp(node, tensorMap, context));\n\n      case 'basic_math':\n        return tfc.tidy(() => basicMath.executeOp(node, tensorMap, context));\n\n      case 'control':\n        return control.executeOp(node, tensorMap, context);\n\n      case 'convolution':\n        return tfc.tidy(() => convolution.executeOp(node, tensorMap, context));\n\n      case 'creation':\n        return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n\n      case 'dynamic':\n        return dynamic.executeOp(node, tensorMap, context);\n\n      case 'evaluation':\n        return tfc.tidy(() => evaluation.executeOp(node, tensorMap, context));\n\n      case 'image':\n        return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n\n      case 'graph':\n        return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n\n      case 'logical':\n        return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n\n      case 'matrices':\n        return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n\n      case 'normalization':\n        return tfc.tidy(() => normalization.executeOp(node, tensorMap, context));\n\n      case 'reduction':\n        return tfc.tidy(() => reduction.executeOp(node, tensorMap, context));\n\n      case 'slice_join':\n        return tfc.tidy(() => sliceJoin.executeOp(node, tensorMap, context));\n\n      case 'sparse':\n        return tfc.tidy(() => sparse.executeOp(node, tensorMap, context));\n\n      case 'spectral':\n        return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n\n      case 'string':\n        return tfc.tidy(() => string.executeOp(node, tensorMap, context));\n\n      case 'transformation':\n        return tfc.tidy(() => transformation.executeOp(node, tensorMap, context));\n\n      case 'hash_table':\n        return hashTable.executeOp(node, tensorMap, context, resourceManager);\n\n      case 'custom':\n        const opMapper = getRegisteredOp(node.op);\n\n        if (opMapper && opMapper.customExecutor) {\n          return opMapper.customExecutor(new NodeValueImpl(node, tensorMap, context));\n        } else {\n          throw TypeError(`Custom op ${node.op} is not registered.`);\n        }\n\n      default:\n        throw TypeError(`Unknown op '${node.op}'. File an issue at ` + `https://github.com/tensorflow/tfjs/issues so we can add it` + `, or register a custom execution with tf.registerOp()`);\n    }\n  })(node, tensorMap, context);\n\n  if (tfc.util.isPromise(value)) {\n    return value.then(data => [].concat(data));\n  }\n\n  return [].concat(value);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,OAAO,KAAKA,GAAZ,MAAqB,uBAArB;AAMA,SAAQC,aAAR,QAA4B,6BAA5B;AACA,SAAQC,eAAR,QAA8B,sBAA9B;AACA,OAAO,KAAKC,UAAZ,MAA4B,iCAA5B;AACA,OAAO,KAAKC,SAAZ,MAA2B,iCAA3B;AACA,OAAO,KAAKC,OAAZ,MAAyB,8BAAzB;AACA,OAAO,KAAKC,WAAZ,MAA6B,kCAA7B;AACA,OAAO,KAAKC,QAAZ,MAA0B,+BAA1B;AACA,OAAO,KAAKC,OAAZ,MAAyB,8BAAzB;AACA,OAAO,KAAKC,UAAZ,MAA4B,iCAA5B;AACA,OAAO,KAAKC,KAAZ,MAAuB,4BAAvB;AACA,OAAO,KAAKC,SAAZ,MAA2B,iCAA3B;AACA,OAAO,KAAKC,KAAZ,MAAuB,4BAAvB;AACA,OAAO,KAAKC,OAAZ,MAAyB,8BAAzB;AACA,OAAO,KAAKC,QAAZ,MAA0B,+BAA1B;AACA,OAAO,KAAKC,aAAZ,MAA+B,oCAA/B;AACA,OAAO,KAAKC,SAAZ,MAA2B,gCAA3B;AACA,OAAO,KAAKC,SAAZ,MAA2B,iCAA3B;AACA,OAAO,KAAKC,MAAZ,MAAwB,6BAAxB;AACA,OAAO,KAAKC,QAAZ,MAA0B,+BAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,6BAAxB;AACA,OAAO,KAAKC,cAAZ,MAAgC,qCAAhC;AAGA;;;;;;;;AAOA,OAAM,SAAUC,SAAV,CACFC,IADE,EACUC,SADV,EACsCC,OADtC,EAEFC,eAFE,EAE+B;AACnC,QAAMC,KAAK,GACP,CAAC,CAACJ,IAAD,EAAaC,SAAb,EAAyCC,OAAzC,KAAsE;AACrE,YAAQF,IAAI,CAACK,QAAb;AACE,WAAK,YAAL;AACE,eAAO5B,GAAG,CAAC6B,IAAJ,CACH,MAAM1B,UAAU,CAACmB,SAAX,CAAqBC,IAArB,EAA2BC,SAA3B,EAAsCC,OAAtC,CADH,CAAP;;AAEF,WAAK,YAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CACH,MAAMzB,SAAS,CAACkB,SAAV,CAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,OAArC,CADH,CAAP;;AAEF,WAAK,SAAL;AACE,eAAOpB,OAAO,CAACiB,SAAR,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,OAAnC,CAAP;;AACF,WAAK,aAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CACH,MAAMvB,WAAW,CAACgB,SAAZ,CAAsBC,IAAtB,EAA4BC,SAA5B,EAAuCC,OAAvC,CADH,CAAP;;AAEF,WAAK,UAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CAAS,MAAMtB,QAAQ,CAACe,SAAT,CAAmBC,IAAnB,EAAyBC,SAAzB,EAAoCC,OAApC,CAAf,CAAP;;AACF,WAAK,SAAL;AACE,eAAOjB,OAAO,CAACc,SAAR,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,OAAnC,CAAP;;AACF,WAAK,YAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CACH,MAAMpB,UAAU,CAACa,SAAX,CAAqBC,IAArB,EAA2BC,SAA3B,EAAsCC,OAAtC,CADH,CAAP;;AAEF,WAAK,OAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CAAS,MAAMjB,KAAK,CAACU,SAAN,CAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,OAAjC,CAAf,CAAP;;AACF,WAAK,OAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CAAS,MAAMnB,KAAK,CAACY,SAAN,CAAgBC,IAAhB,EAAsBC,SAAtB,EAAiCC,OAAjC,CAAf,CAAP;;AACF,WAAK,SAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CAAS,MAAMhB,OAAO,CAACS,SAAR,CAAkBC,IAAlB,EAAwBC,SAAxB,EAAmCC,OAAnC,CAAf,CAAP;;AACF,WAAK,UAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CAAS,MAAMf,QAAQ,CAACQ,SAAT,CAAmBC,IAAnB,EAAyBC,SAAzB,EAAoCC,OAApC,CAAf,CAAP;;AACF,WAAK,eAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CACH,MAAMd,aAAa,CAACO,SAAd,CAAwBC,IAAxB,EAA8BC,SAA9B,EAAyCC,OAAzC,CADH,CAAP;;AAEF,WAAK,WAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CACH,MAAMb,SAAS,CAACM,SAAV,CAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,OAArC,CADH,CAAP;;AAEF,WAAK,YAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CACH,MAAMZ,SAAS,CAACK,SAAV,CAAoBC,IAApB,EAA0BC,SAA1B,EAAqCC,OAArC,CADH,CAAP;;AAEF,WAAK,QAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CAAS,MAAMX,MAAM,CAACI,SAAP,CAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,OAAlC,CAAf,CAAP;;AACF,WAAK,UAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CAAS,MAAMV,QAAQ,CAACG,SAAT,CAAmBC,IAAnB,EAAyBC,SAAzB,EAAoCC,OAApC,CAAf,CAAP;;AACF,WAAK,QAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CAAS,MAAMT,MAAM,CAACE,SAAP,CAAiBC,IAAjB,EAAuBC,SAAvB,EAAkCC,OAAlC,CAAf,CAAP;;AACF,WAAK,gBAAL;AACE,eAAOzB,GAAG,CAAC6B,IAAJ,CACH,MAAMR,cAAc,CAACC,SAAf,CAAyBC,IAAzB,EAA+BC,SAA/B,EAA0CC,OAA1C,CADH,CAAP;;AAEF,WAAK,YAAL;AACE,eAAOd,SAAS,CAACW,SAAV,CACHC,IADG,EACGC,SADH,EACcC,OADd,EACuBC,eADvB,CAAP;;AAEF,WAAK,QAAL;AACE,cAAMI,QAAQ,GAAG5B,eAAe,CAACqB,IAAI,CAACQ,EAAN,CAAhC;;AACA,YAAID,QAAQ,IAAIA,QAAQ,CAACE,cAAzB,EAAyC;AACvC,iBAAOF,QAAQ,CAACE,cAAT,CACH,IAAI/B,aAAJ,CAAkBsB,IAAlB,EAAwBC,SAAxB,EAAmCC,OAAnC,CADG,CAAP;AAED,SAHD,MAGO;AACL,gBAAMQ,SAAS,CAAC,aAAaV,IAAI,CAACQ,EAAE,qBAArB,CAAf;AACD;;AACH;AACE,cAAME,SAAS,CACX,eAAeV,IAAI,CAACQ,EAAE,sBAAtB,GACA,4DADA,GAEA,uDAHW,CAAf;AAzDJ;AA8DD,GA/DD,EA+DGR,IA/DH,EA+DSC,SA/DT,EA+DoBC,OA/DpB,CADJ;;AAiEA,MAAIzB,GAAG,CAACkC,IAAJ,CAASC,SAAT,CAAmBR,KAAnB,CAAJ,EAA+B;AAC7B,WAAQA,KAA6B,CAACS,IAA9B,CAAoCC,IAAD,IAAU,GAAGC,MAAH,CAAUD,IAAV,CAA7C,CAAR;AACD;;AACD,SAAO,GAAGC,MAAH,CAAUX,KAAV,CAAP;AACD","names":["tfc","NodeValueImpl","getRegisteredOp","arithmetic","basicMath","control","convolution","creation","dynamic","evaluation","graph","hashTable","image","logical","matrices","normalization","reduction","sliceJoin","sparse","spectral","string","transformation","executeOp","node","tensorMap","context","resourceManager","value","category","tidy","opMapper","op","customExecutor","TypeError","util","isPromise","then","data","concat"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/operation_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../data/types';\nimport {ExecutionContext} from '../executor/execution_context';\nimport {ResourceManager} from '../executor/resource_manager';\n\nimport {NodeValueImpl} from './custom_op/node_value_impl';\nimport {getRegisteredOp} from './custom_op/register';\nimport * as arithmetic from './executors/arithmetic_executor';\nimport * as basicMath from './executors/basic_math_executor';\nimport * as control from './executors/control_executor';\nimport * as convolution from './executors/convolution_executor';\nimport * as creation from './executors/creation_executor';\nimport * as dynamic from './executors/dynamic_executor';\nimport * as evaluation from './executors/evaluation_executor';\nimport * as graph from './executors/graph_executor';\nimport * as hashTable from './executors/hash_table_executor';\nimport * as image from './executors/image_executor';\nimport * as logical from './executors/logical_executor';\nimport * as matrices from './executors/matrices_executor';\nimport * as normalization from './executors/normalization_executor';\nimport * as reduction from './executors/reduction_executor';\nimport * as sliceJoin from './executors/slice_join_executor';\nimport * as sparse from './executors/sparse_executor';\nimport * as spectral from './executors/spectral_executor';\nimport * as string from './executors/string_executor';\nimport * as transformation from './executors/transformation_executor';\nimport {Node} from './types';\n\n/**\n * Executes the op defined by the node object.\n * @param node\n * @param tensorMap contains tensors for executed nodes and weights\n * @param context contains tensors and information for running the current node.\n * @param resourceManager Optional. Contains global resources of the model.\n */\nexport function executeOp(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager?: ResourceManager): tfc.Tensor[]|Promise<tfc.Tensor[]> {\n  const value =\n      ((node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext) => {\n        switch (node.category) {\n          case 'arithmetic':\n            return tfc.tidy(\n                () => arithmetic.executeOp(node, tensorMap, context));\n          case 'basic_math':\n            return tfc.tidy(\n                () => basicMath.executeOp(node, tensorMap, context));\n          case 'control':\n            return control.executeOp(node, tensorMap, context);\n          case 'convolution':\n            return tfc.tidy(\n                () => convolution.executeOp(node, tensorMap, context));\n          case 'creation':\n            return tfc.tidy(() => creation.executeOp(node, tensorMap, context));\n          case 'dynamic':\n            return dynamic.executeOp(node, tensorMap, context);\n          case 'evaluation':\n            return tfc.tidy(\n                () => evaluation.executeOp(node, tensorMap, context));\n          case 'image':\n            return tfc.tidy(() => image.executeOp(node, tensorMap, context));\n          case 'graph':\n            return tfc.tidy(() => graph.executeOp(node, tensorMap, context));\n          case 'logical':\n            return tfc.tidy(() => logical.executeOp(node, tensorMap, context));\n          case 'matrices':\n            return tfc.tidy(() => matrices.executeOp(node, tensorMap, context));\n          case 'normalization':\n            return tfc.tidy(\n                () => normalization.executeOp(node, tensorMap, context));\n          case 'reduction':\n            return tfc.tidy(\n                () => reduction.executeOp(node, tensorMap, context));\n          case 'slice_join':\n            return tfc.tidy(\n                () => sliceJoin.executeOp(node, tensorMap, context));\n          case 'sparse':\n            return tfc.tidy(() => sparse.executeOp(node, tensorMap, context));\n          case 'spectral':\n            return tfc.tidy(() => spectral.executeOp(node, tensorMap, context));\n          case 'string':\n            return tfc.tidy(() => string.executeOp(node, tensorMap, context));\n          case 'transformation':\n            return tfc.tidy(\n                () => transformation.executeOp(node, tensorMap, context));\n          case 'hash_table':\n            return hashTable.executeOp(\n                node, tensorMap, context, resourceManager);\n          case 'custom':\n            const opMapper = getRegisteredOp(node.op);\n            if (opMapper && opMapper.customExecutor) {\n              return opMapper.customExecutor(\n                  new NodeValueImpl(node, tensorMap, context));\n            } else {\n              throw TypeError(`Custom op ${node.op} is not registered.`);\n            }\n          default:\n            throw TypeError(\n                `Unknown op '${node.op}'. File an issue at ` +\n                `https://github.com/tensorflow/tfjs/issues so we can add it` +\n                `, or register a custom execution with tf.registerOp()`);\n        }\n      })(node, tensorMap, context);\n  if (tfc.util.isPromise(value)) {\n    return (value as Promise<tfc.Tensor>).then((data) => [].concat(data));\n  }\n  return [].concat(value);\n}\n"]},"metadata":{},"sourceType":"module"}