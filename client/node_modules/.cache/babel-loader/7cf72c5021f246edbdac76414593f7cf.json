{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat } from '../concat';\nimport { fill } from '../fill';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\nimport { slice } from '../slice';\nimport { tensor2d } from '../tensor2d';\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue An number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\n\nfunction frame_(signal, frameLength, frameStep) {\n  let padEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  let padValue = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;\n  let start = 0;\n  const output = [];\n\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = start + frameLength - signal.size;\n      const pad = concat([slice(signal, start, frameLength - padLen), fill([padLen], padValue)]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n\n  return reshape(concat(output), [output.length, frameLength]);\n}\n\nexport const frame = op({\n  frame_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,IAAR,QAAmB,SAAnB;AACA,SAAQC,EAAR,QAAiB,cAAjB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AACA,SAAQC,KAAR,QAAoB,UAApB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AAEA;;;;;;;;;;;;;;;;;AAgBA,SAASC,MAAT,CACIC,MADJ,EACsBC,WADtB,EAC2CC,SAD3C,EAEgB;AAAA,MAD8CC,MAC9C,uEADuD,KACvD;AAAA,MAAZC,QAAY,uEAAD,CAAC;AACd,MAAIC,KAAK,GAAG,CAAZ;AACA,QAAMC,MAAM,GAAa,EAAzB;;AACA,SAAOD,KAAK,GAAGJ,WAAR,IAAuBD,MAAM,CAACO,IAArC,EAA2C;AACzCD,UAAM,CAACE,IAAP,CAAYX,KAAK,CAACG,MAAD,EAASK,KAAT,EAAgBJ,WAAhB,CAAjB;AACAI,SAAK,IAAIH,SAAT;AACD;;AAED,MAAIC,MAAJ,EAAY;AACV,WAAOE,KAAK,GAAGL,MAAM,CAACO,IAAtB,EAA4B;AAC1B,YAAME,MAAM,GAAIJ,KAAK,GAAGJ,WAAT,GAAwBD,MAAM,CAACO,IAA9C;AACA,YAAMG,GAAG,GAAGjB,MAAM,CAAC,CACjBI,KAAK,CAACG,MAAD,EAASK,KAAT,EAAgBJ,WAAW,GAAGQ,MAA9B,CADY,EAC2Bf,IAAI,CAAC,CAACe,MAAD,CAAD,EAAWL,QAAX,CAD/B,CAAD,CAAlB;AAGAE,YAAM,CAACE,IAAP,CAAYE,GAAZ;AACAL,WAAK,IAAIH,SAAT;AACD;AACF;;AAED,MAAII,MAAM,CAACK,MAAP,KAAkB,CAAtB,EAAyB;AACvB,WAAOb,QAAQ,CAAC,EAAD,EAAK,CAAC,CAAD,EAAIG,WAAJ,CAAL,CAAf;AACD;;AAED,SAAOL,OAAO,CAACH,MAAM,CAACa,MAAD,CAAP,EAAiB,CAACA,MAAM,CAACK,MAAR,EAAgBV,WAAhB,CAAjB,CAAd;AACD;;AACD,OAAO,MAAMW,KAAK,GAAGjB,EAAE,CAAC;AAACI;AAAD,CAAD,CAAhB","names":["concat","fill","op","reshape","slice","tensor2d","frame_","signal","frameLength","frameStep","padEnd","padValue","start","output","size","push","padLen","pad","length","frame"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/signal/frame.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D} from '../../tensor';\nimport {concat} from '../concat';\nimport {fill} from '../fill';\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\nimport {slice} from '../slice';\nimport {tensor2d} from '../tensor2d';\n\n/**\n * Expands input into frames of frameLength.\n * Slides a window size with frameStep.\n *\n * ```js\n * tf.signal.frame([1, 2, 3], 2, 1).print();\n * ```\n * @param signal The input tensor to be expanded\n * @param frameLength Length of each frame\n * @param frameStep The frame hop size in samples.\n * @param padEnd Whether to pad the end of signal with padValue.\n * @param padValue An number to use where the input signal does\n *     not exist when padEnd is True.\n *\n * @doc {heading: 'Operations', subheading: 'Signal', namespace: 'signal'}\n */\nfunction frame_(\n    signal: Tensor1D, frameLength: number, frameStep: number, padEnd = false,\n    padValue = 0): Tensor {\n  let start = 0;\n  const output: Tensor[] = [];\n  while (start + frameLength <= signal.size) {\n    output.push(slice(signal, start, frameLength));\n    start += frameStep;\n  }\n\n  if (padEnd) {\n    while (start < signal.size) {\n      const padLen = (start + frameLength) - signal.size;\n      const pad = concat([\n        slice(signal, start, frameLength - padLen), fill([padLen], padValue)\n      ]);\n      output.push(pad);\n      start += frameStep;\n    }\n  }\n\n  if (output.length === 0) {\n    return tensor2d([], [0, frameLength]);\n  }\n\n  return reshape(concat(output), [output.length, frameLength]);\n}\nexport const frame = op({frame_});\n"]},"metadata":{},"sourceType":"module"}