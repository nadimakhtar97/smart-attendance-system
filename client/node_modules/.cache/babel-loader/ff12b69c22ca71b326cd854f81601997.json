{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getVecChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class TransposePackedProgram {\n  constructor(aShape, newDim) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = true;\n    const outputShape = new Array(aShape.length);\n\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n\n    if (this.rank > 6) {\n      throw Error(`Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n\n    const dtype = getCoordsDataType(this.rank);\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn = `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,cAAR,QAA6B,gBAA7B;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAOC,sBAAP,CAA6B;AAQjCC,cAAYC,MAAZ,EAA8BC,MAA9B,EAA8C;AAP9C,yBAAgB,CAAC,GAAD,CAAhB;AAIA,wBAAe,IAAf;AACA,wBAAe,IAAf;AAGE,UAAMC,WAAW,GAAa,IAAIC,KAAJ,CAAUH,MAAM,CAACI,MAAjB,CAA9B;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,WAAW,CAACE,MAAhC,EAAwCC,CAAC,EAAzC,EAA6C;AAC3CH,iBAAW,CAACG,CAAD,CAAX,GAAiBL,MAAM,CAACC,MAAM,CAACI,CAAD,CAAP,CAAvB;AACD;;AACD,SAAKH,WAAL,GAAmBA,WAAnB;AACA,SAAKI,IAAL,GAAYJ,WAAW,CAACE,MAAxB;;AACA,QAAI,KAAKE,IAAL,GAAY,CAAhB,EAAmB;AACjB,YAAMC,KAAK,CACP,6BAA6B,KAAKD,IAAI,wBAD/B,CAAX;AAED;;AACD,UAAME,KAAK,GAAGX,iBAAiB,CAAC,KAAKS,IAAN,CAA/B;AAEA,UAAMG,WAAW,GAAGb,cAAc,CAAC,IAAD,EAAO,KAAKU,IAAZ,CAAlC;AACA,UAAMI,aAAa,GAAG,IAAIP,KAAJ,CAAU,KAAKG,IAAf,CAAtB;;AACA,SAAK,IAAID,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACG,MAA3B,EAAmCC,CAAC,EAApC,EAAwC;AACtCK,mBAAa,CAACT,MAAM,CAACI,CAAD,CAAP,CAAb,GAA2BI,WAAW,CAACJ,CAAD,CAAtC;AACD;;AACD,UAAMM,SAAS,GAAG,QAAQD,aAAa,CAACE,KAAd,CAAoB,CAAC,CAArB,EAAwBC,IAAxB,EAA8B,GAAxD;AACA,UAAMC,UAAU,GACZ,KAAKL,WAAW,CAAC,KAAKH,IAAL,GAAY,CAAb,CAAe,MAAMJ,WAAW,CAAC,KAAKI,IAAL,GAAY,CAAb,CAAe,EADnE;AAEA,UAAMS,IAAI,GAAG,mBAAmBL,aAAa,CAACG,IAAd,EAAoB,MAAMF,SAAS,GAAnE;AAEA,SAAKK,QAAL,GAAgB;;QAEZR,KAAK;;oBAEOO,IAAI;WACbD,UAAU;sBACCC,IAAI;;UAEhBN,WAAW,CAAC,KAAKH,IAAL,GAAY,CAAb,CAAe;aACvBG,WAAW,CAAC,KAAKH,IAAL,GAAY,CAAb,CAAe,MAAMJ,WAAW,CAAC,KAAKI,IAAL,GAAY,CAAb,CAAe;sBACjDS,IAAI;aACbD,UAAU;wBACCC,IAAI;;;;;KAZxB;AAkBD;;AAjDgC","names":["getVecChannels","getCoordsDataType","TransposePackedProgram","constructor","aShape","newDim","outputShape","Array","length","i","rank","Error","dtype","outputOrder","switchedOrder","innerDims","slice","join","nextColumn","getc","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/transpose_packed_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getVecChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class TransposePackedProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  rank: number;\n  packedInputs = true;\n  packedOutput = true;\n\n  constructor(aShape: number[], newDim: number[]) {\n    const outputShape: number[] = new Array(aShape.length);\n    for (let i = 0; i < outputShape.length; i++) {\n      outputShape[i] = aShape[newDim[i]];\n    }\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    if (this.rank > 6) {\n      throw Error(\n          `Packed transpose for rank ${this.rank} is not yet supported.`);\n    }\n    const dtype = getCoordsDataType(this.rank);\n\n    const outputOrder = getVecChannels('rc', this.rank);\n    const switchedOrder = new Array(this.rank);\n    for (let i = 0; i < newDim.length; i++) {\n      switchedOrder[newDim[i]] = outputOrder[i];\n    }\n    const innerDims = `vec2(${switchedOrder.slice(-2).join()})`;\n    const nextColumn =\n        `++${outputOrder[this.rank - 1]} < ${outputShape[this.rank - 1]}`;\n    const getc = `getChannel(getA(${switchedOrder.join()}), ${innerDims})`;\n\n    this.userCode = `\n    void main() {\n      ${dtype} rc = getOutputCoords();\n      vec4 result = vec4(0.);\n      result[0] = ${getc};\n      if(${nextColumn}) {\n        result[1] = ${getc};\n      }\n      --${outputOrder[this.rank - 1]};\n      if(++${outputOrder[this.rank - 2]} < ${outputShape[this.rank - 2]}) {\n        result[2] = ${getc};\n        if(${nextColumn}) {\n          result[3] = ${getc};\n        }\n      }\n      setOutput(result);\n    }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}