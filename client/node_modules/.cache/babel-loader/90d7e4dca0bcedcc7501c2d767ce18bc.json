{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return vals.slice(flatOffset, flatOffset + length);\n    }\n\n    return vals.subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ? backend_util.fromUint8ToStringArray(vals) : vals;\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values);\n  }\n\n  return outBuf.values;\n}\nexport function slice(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    begin,\n    size\n  } = attrs;\n  assertNotComplex(x, 'slice');\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice\n};","map":{"version":3,"mappings":"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","names":["backend_util","buffer","Slice","slice_util","util","assertNotComplex","sliceImpl","vals","begin","size","shape","dtype","isContinous","isSliceContinous","length","sizeFromShape","xStrides","computeStrides","flatOffset","computeFlatOffset","slice","subarray","decodedData","fromUint8ToStringArray","inBuf","outBuf","i","outLoc","indexToLoc","inLoc","map","idx","j","set","get","fromStringArrayToUint8","values","args","inputs","backend","attrs","x","$begin","$size","parseSliceParams","assertParamsValid","data","dataId","outVals","makeTensorInfo","sliceConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Slice.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BackendValues, buffer, DataType, KernelConfig, KernelFunc, Slice, slice_util, SliceAttrs, SliceInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function sliceImpl(\n    vals: BackendValues, begin: number[], size: number[], shape: number[],\n    dtype: DataType): BackendValues {\n  const isContinous = slice_util.isSliceContinous(shape, begin, size);\n  const length = util.sizeFromShape(size);\n  const xStrides = util.computeStrides(shape);\n\n  if (isContinous) {\n    const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n\n    if (dtype === 'string') {\n      return (vals as Uint8Array[]).slice(flatOffset, flatOffset + length);\n    }\n\n    return (vals as TypedArray).subarray(flatOffset, flatOffset + length);\n  }\n\n  const decodedData = dtype === 'string' ?\n      backend_util.fromUint8ToStringArray(vals as Uint8Array[]) :\n      vals as TypedArray;\n\n  const inBuf = buffer(shape, dtype, decodedData);\n  const outBuf = buffer(size, dtype);\n  for (let i = 0; i < outBuf.size; ++i) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.map((idx: number, j) => idx + begin[j]);\n    outBuf.set(inBuf.get(...inLoc), ...outLoc);\n  }\n\n  if (dtype === 'string') {\n    return backend_util.fromStringArrayToUint8(outBuf.values as string[]);\n  }\n  return outBuf.values as TypedArray;\n}\n\nexport function slice(\n    args: {inputs: SliceInputs, backend: MathBackendCPU, attrs: SliceAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {begin, size} = attrs;\n\n  assertNotComplex(x, 'slice');\n\n  const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n  slice_util.assertParamsValid(x, $begin, $size);\n\n  const vals = backend.data.get(x.dataId).values;\n  const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n  return backend.makeTensorInfo($size, x.dtype, outVals);\n}\n\nexport const sliceConfig: KernelConfig = {\n  kernelName: Slice,\n  backendName: 'cpu',\n  kernelFunc: slice as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}