{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { parseAxisParam } from '../util';\nimport { abs } from './abs';\nimport * as axis_util from './axis_util';\nimport { max } from './max';\nimport { min } from './min';\nimport { op } from './operation';\nimport { pow } from './pow';\nimport { reshape } from './reshape';\nimport { scalar } from './scalar';\nimport { sqrt } from './sqrt';\nimport { square } from './square';\nimport { sum } from './sum';\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^1/2*\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\n\nfunction norm_(x) {\n  let ord = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'euclidean';\n  let axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  let keepDims = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  x = convertToTensor(x, 'x', 'norm');\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n\n  return reshape(norm, keepDimsShape);\n}\n\nfunction normImpl(x, p) {\n  let axis = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  if (x.rank === 0) {\n    return abs(x);\n  } // consider vector when no axis is specified\n\n\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p, axis);\n  } // vector\n\n\n  if (x.rank === 1 || typeof axis === 'number' || Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return sum(abs(x), axis);\n    }\n\n    if (p === Infinity) {\n      return max(abs(x), axis);\n    }\n\n    if (p === -Infinity) {\n      return min(abs(x), axis);\n    }\n\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  } // matrix (assumption axis[0] < axis[1])\n\n\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return max(sum(abs(x), axis[0]), axis[1] - 1);\n    }\n\n    if (p === Infinity) {\n      return max(sum(abs(x), axis[1]), axis[0]);\n    }\n\n    if (p === -Infinity) {\n      return min(sum(abs(x), axis[1]), axis[0]);\n    }\n\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return sqrt(sum(square(x), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\n\nexport const norm = op({\n  norm_\n});","map":{"version":3,"mappings":"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","names":["convertToTensor","parseAxisParam","abs","axis_util","max","min","op","pow","reshape","scalar","sqrt","square","sum","norm_","x","ord","axis","keepDims","norm","normImpl","keepDimsShape","shape","axes","expandShapeToKeepDim","p","rank","Array","isArray","length","Infinity","Error"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/norm.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {parseAxisParam} from '../util';\n\nimport {abs} from './abs';\nimport * as axis_util from './axis_util';\nimport {max} from './max';\nimport {min} from './min';\nimport {op} from './operation';\nimport {pow} from './pow';\nimport {reshape} from './reshape';\nimport {scalar} from './scalar';\nimport {sqrt} from './sqrt';\nimport {square} from './square';\nimport {sum} from './sum';\n\n/**\n * Computes the norm of scalar, vectors, and matrices.\n * This function can compute several different vector norms (the 1-norm, the\n * Euclidean or 2-norm, the inf-norm, and in general the p-norm for p > 0)\n * and matrix norms (Frobenius, 1-norm, and inf-norm).\n *\n * ```js\n * const x = tf.tensor1d([1, 2, 3, 4]);\n *\n * x.norm().print();  // or tf.norm(x)\n * ```\n *\n * @param x The input array.\n * @param ord Optional. Order of the norm. Supported norm types are\n * following:\n *\n *  | ord        | norm for matrices         | norm for vectors\n *  |------------|---------------------------|---------------------\n *  |'euclidean' |Frobenius norm             |2-norm\n *  |'fro'       |Frobenius norm\t           |\n *  |Infinity    |max(sum(abs(x), axis=1))   |max(abs(x))\n *  |-Infinity   |min(sum(abs(x), axis=1))   |min(abs(x))\n *  |1           |max(sum(abs(x), axis=0))   |sum(abs(x))\n *  |2           |                           |sum(abs(x)^2)^1/2*\n *\n * @param axis Optional. If axis is null (the default), the input is\n * considered a vector and a single vector norm is computed over the entire\n * set of values in the Tensor, i.e. norm(x, ord) is equivalent\n * to norm(x.reshape([-1]), ord). If axis is a integer, the input\n * is considered a batch of vectors, and axis determines the axis in x\n * over which to compute vector norms. If axis is a 2-tuple of integer it is\n * considered a batch of matrices and axis determines the axes in NDArray\n * over which to compute a matrix norm.\n * @param keepDims Optional. If true, the norm have the same dimensionality\n * as the input.\n *\n * @doc {heading: 'Operations', subheading: 'Matrices'}\n */\nfunction norm_(\n    x: Tensor|TensorLike, ord: number|'euclidean'|'fro' = 'euclidean',\n    axis: number|number[] = null, keepDims = false): Tensor {\n  x = convertToTensor(x, 'x', 'norm');\n\n  const norm = normImpl(x, ord, axis);\n  let keepDimsShape = norm.shape;\n  if (keepDims) {\n    const axes = parseAxisParam(axis, x.shape);\n    keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n  }\n  return reshape(norm, keepDimsShape);\n}\n\nfunction normImpl(\n    x: Tensor, p: number|string, axis: number|number[] = null): Tensor {\n  if (x.rank === 0) {\n    return abs(x);\n  }\n\n  // consider vector when no axis is specified\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(reshape(x, [-1]), p, axis);\n  }\n\n  // vector\n  if (x.rank === 1 || typeof axis === 'number' ||\n      Array.isArray(axis) && axis.length === 1) {\n    if (p === 1) {\n      return sum(abs(x), axis);\n    }\n    if (p === Infinity) {\n      return max(abs(x), axis);\n    }\n    if (p === -Infinity) {\n      return min(abs(x), axis);\n    }\n    if (p === 'euclidean' || p === 2) {\n      // norm(x, 2) = sum(abs(xi) ^ 2) ^ 1/2\n      return sqrt(sum(pow(abs(x), scalar(2, 'int32')), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  // matrix (assumption axis[0] < axis[1])\n  if (Array.isArray(axis) && axis.length === 2) {\n    if (p === 1) {\n      return max(sum(abs(x), axis[0]), axis[1] - 1);\n    }\n    if (p === Infinity) {\n      return max(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === -Infinity) {\n      return min(sum(abs(x), axis[1]), axis[0]);\n    }\n    if (p === 'fro' || p === 'euclidean') {\n      // norm(x) = sqrt(sum(pow(x, 2)))\n      return sqrt(sum(square(x), axis));\n    }\n\n    throw new Error(`Error in norm: invalid ord value: ${p}`);\n  }\n\n  throw new Error(`Error in norm: invalid axis: ${axis}`);\n}\n\nexport const norm = op({norm_});\n"]},"metadata":{},"sourceType":"module"}