{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\nimport { assert } from '../util';\nimport { IORouterRegistry } from './router_registry';\nconst URL_SCHEME_SUFFIX = '://';\nexport class ModelStoreManagerRegistry {\n  constructor() {\n    this.managers = {};\n  }\n\n  static getInstance() {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n\n    return ModelStoreManagerRegistry.instance;\n  }\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n\n\n  static registerManager(scheme, manager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(registry.managers[scheme] == null, () => `A model store manager is already registered for scheme '${scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme) {\n    const manager = this.getInstance().managers[scheme];\n\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n\n    return manager;\n  }\n\n  static getSchemes() {\n    return Object.keys(this.getInstance().managers);\n  }\n\n}\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\n\nfunction parseURL(url) {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(`The url string provided does not contain a scheme. ` + `Supported schemes are: ` + `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1]\n  };\n}\n\nasync function cloneModelInternal(sourceURL, destURL) {\n  let deleteSource = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  assert(sourceURL !== destURL, () => `Old path and new path are the same: '${sourceURL}'`);\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(loadHandlers.length > 0, () => `Copying failed because no load handler is found for source URL ${sourceURL}.`);\n  assert(loadHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(saveHandlers.length > 0, () => `Copying failed because no save handler is found for destination ` + `URL ${destURL}.`);\n  assert(saveHandlers.length < 2, () => `Copying failed because more than one (${loadHandlers.length}) ` + `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n  const modelArtifacts = await loadHandler.load(); // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts); // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme).removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nasync function listModels() {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out = {};\n\n  for (const scheme of schemes) {\n    const schemeOut = await ModelStoreManagerRegistry.getManager(scheme).listModels();\n\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n\n  return out;\n}\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nasync function removeModel(url) {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nasync function copyModel(sourceURL, destURL) {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\n\n\nasync function moveModel(sourceURL, destURL) {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport { moveModel, copyModel, removeModel, listModels };","map":{"version":3,"mappings":"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","names":["assert","IORouterRegistry","URL_SCHEME_SUFFIX","ModelStoreManagerRegistry","constructor","managers","getInstance","instance","registerManager","scheme","manager","endsWith","slice","indexOf","length","registry","getManager","Error","getSchemes","Object","keys","parseURL","url","join","split","path","cloneModelInternal","sourceURL","destURL","deleteSource","loadHandlers","getLoadHandlers","loadHandler","saveHandlers","getSaveHandlers","saveHandler","sourceScheme","sourcePath","sameMedium","modelArtifacts","load","removeModel","saveResult","save","modelArtifactsInfo","listModels","schemes","out","schemeOut","schemeAndPath","copyModel","moveModel"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/io/model_management.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\n/**\n * Classes and functions for model management across multiple storage mediums.\n *\n * Supported client actions:\n * - Listing models on all registered storage mediums.\n * - Remove model by URL from any registered storage mediums, by using URL\n *   string.\n * - Moving or copying model from one path to another in the same medium or from\n *   one medium to another, by using URL strings.\n */\n\nimport {assert} from '../util';\n\nimport {IORouterRegistry} from './router_registry';\nimport {ModelArtifactsInfo, ModelStoreManager} from './types';\n\nconst URL_SCHEME_SUFFIX = '://';\n\nexport class ModelStoreManagerRegistry {\n  // Singleton instance.\n  private static instance: ModelStoreManagerRegistry;\n\n  private managers: {[scheme: string]: ModelStoreManager};\n\n  private constructor() {\n    this.managers = {};\n  }\n\n  private static getInstance(): ModelStoreManagerRegistry {\n    if (ModelStoreManagerRegistry.instance == null) {\n      ModelStoreManagerRegistry.instance = new ModelStoreManagerRegistry();\n    }\n    return ModelStoreManagerRegistry.instance;\n  }\n\n  /**\n   * Register a save-handler router.\n   *\n   * @param saveRouter A function that maps a URL-like string onto an instance\n   * of `IOHandler` with the `save` method defined or `null`.\n   */\n  static registerManager(scheme: string, manager: ModelStoreManager) {\n    assert(scheme != null, () => 'scheme must not be undefined or null.');\n    if (scheme.endsWith(URL_SCHEME_SUFFIX)) {\n      scheme = scheme.slice(0, scheme.indexOf(URL_SCHEME_SUFFIX));\n    }\n    assert(scheme.length > 0, () => 'scheme must not be an empty string.');\n    const registry = ModelStoreManagerRegistry.getInstance();\n    assert(\n        registry.managers[scheme] == null,\n        () => `A model store manager is already registered for scheme '${\n            scheme}'.`);\n    registry.managers[scheme] = manager;\n  }\n\n  static getManager(scheme: string): ModelStoreManager {\n    const manager = this.getInstance().managers[scheme];\n    if (manager == null) {\n      throw new Error(`Cannot find model manager for scheme '${scheme}'`);\n    }\n    return manager;\n  }\n\n  static getSchemes(): string[] {\n    return Object.keys(this.getInstance().managers);\n  }\n}\n\n/**\n * Helper method for parsing a URL string into a scheme and a path.\n *\n * @param url E.g., 'localstorage://my-model'\n * @returns A dictionary with two fields: scheme and path.\n *   Scheme: e.g., 'localstorage' in the example above.\n *   Path: e.g., 'my-model' in the example above.\n */\nfunction parseURL(url: string): {scheme: string, path: string} {\n  if (url.indexOf(URL_SCHEME_SUFFIX) === -1) {\n    throw new Error(\n        `The url string provided does not contain a scheme. ` +\n        `Supported schemes are: ` +\n        `${ModelStoreManagerRegistry.getSchemes().join(',')}`);\n  }\n  return {\n    scheme: url.split(URL_SCHEME_SUFFIX)[0],\n    path: url.split(URL_SCHEME_SUFFIX)[1],\n  };\n}\n\nasync function cloneModelInternal(\n    sourceURL: string, destURL: string,\n    deleteSource = false): Promise<ModelArtifactsInfo> {\n  assert(\n      sourceURL !== destURL,\n      () => `Old path and new path are the same: '${sourceURL}'`);\n\n  const loadHandlers = IORouterRegistry.getLoadHandlers(sourceURL);\n  assert(\n      loadHandlers.length > 0,\n      () => `Copying failed because no load handler is found for source URL ${\n          sourceURL}.`);\n  assert(\n      loadHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `load handlers for source URL ${sourceURL}.`);\n  const loadHandler = loadHandlers[0];\n\n  const saveHandlers = IORouterRegistry.getSaveHandlers(destURL);\n  assert(\n      saveHandlers.length > 0,\n      () => `Copying failed because no save handler is found for destination ` +\n          `URL ${destURL}.`);\n  assert(\n      saveHandlers.length < 2,\n      () => `Copying failed because more than one (${loadHandlers.length}) ` +\n          `save handlers for destination URL ${destURL}.`);\n  const saveHandler = saveHandlers[0];\n\n  const sourceScheme = parseURL(sourceURL).scheme;\n  const sourcePath = parseURL(sourceURL).path;\n  const sameMedium = sourceScheme === parseURL(sourceURL).scheme;\n\n  const modelArtifacts = await loadHandler.load();\n\n  // If moving within the same storage medium, remove the old model as soon as\n  // the loading is done. Without doing this, it is possible that the combined\n  // size of the two models will cause the cloning to fail.\n  if (deleteSource && sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  const saveResult = await saveHandler.save(modelArtifacts);\n\n  // If moving between mediums, the deletion is done after the save succeeds.\n  // This guards against the case in which saving to the destination medium\n  // fails.\n  if (deleteSource && !sameMedium) {\n    await ModelStoreManagerRegistry.getManager(sourceScheme)\n        .removeModel(sourcePath);\n  }\n\n  return saveResult.modelArtifactsInfo;\n}\n\n/**\n * List all models stored in registered storage mediums.\n *\n * For a web browser environment, the registered mediums are Local Storage and\n * IndexedDB.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @returns A `Promise` of a dictionary mapping URLs of existing models to\n * their model artifacts info. URLs include medium-specific schemes, e.g.,\n *   'indexeddb://my/model/1'. Model artifacts info include type of the\n * model's topology, byte sizes of the topology, weights, etc.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function listModels(): Promise<{[url: string]: ModelArtifactsInfo}> {\n  const schemes = ModelStoreManagerRegistry.getSchemes();\n  const out: {[url: string]: ModelArtifactsInfo} = {};\n  for (const scheme of schemes) {\n    const schemeOut =\n        await ModelStoreManagerRegistry.getManager(scheme).listModels();\n    for (const path in schemeOut) {\n      const url = scheme + URL_SCHEME_SUFFIX + path;\n      out[url] = schemeOut[path];\n    }\n  }\n  return out;\n}\n\n/**\n * Remove a model specified by URL from a reigstered storage medium.\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Delete the model.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n * ```\n *\n * @param url A URL to a stored model, with a scheme prefix, e.g.,\n *   'localstorage://my-model-1', 'indexeddb://my/model/2'.\n * @returns ModelArtifactsInfo of the deleted model (if and only if deletion\n *   is successful).\n * @throws Error if deletion fails, e.g., if no model exists at `path`.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function removeModel(url: string): Promise<ModelArtifactsInfo> {\n  const schemeAndPath = parseURL(url);\n  const manager = ModelStoreManagerRegistry.getManager(schemeAndPath.scheme);\n  return manager.removeModel(schemeAndPath.path);\n}\n\n/**\n * Copy a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Copying within a storage medium, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Copying between two storage mediums, e.g.,\n *    `tf.io.copyModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Copy the model, from Local Storage to IndexedDB.\n * await tf.io.copyModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove both models.\n * await tf.io.removeModel('localstorage://demo/management/model1');\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of copying.\n * @param destURL Destination URL of copying.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if copying fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function copyModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = false;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\n/**\n * Move a model from one URL to another.\n *\n * This function supports:\n *\n * 1. Moving within a storage medium, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'localstorage://model-2')`\n * 2. Moving between two storage mediums, e.g.,\n *    `tf.io.moveModel('localstorage://model-1', 'indexeddb://model-1')`\n *\n * ```js\n * // First create and save a model.\n * const model = tf.sequential();\n * model.add(tf.layers.dense(\n *     {units: 1, inputShape: [10], activation: 'sigmoid'}));\n * await model.save('localstorage://demo/management/model1');\n *\n * // Then list existing models.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Move the model, from Local Storage to IndexedDB.\n * await tf.io.moveModel(\n *     'localstorage://demo/management/model1',\n *     'indexeddb://demo/management/model1');\n *\n * // List models again.\n * console.log(JSON.stringify(await tf.io.listModels()));\n *\n * // Remove the moved model.\n * await tf.io.removeModel('indexeddb://demo/management/model1');\n * ```\n *\n * @param sourceURL Source URL of moving.\n * @param destURL Destination URL of moving.\n * @returns ModelArtifactsInfo of the copied model (if and only if copying\n *   is successful).\n * @throws Error if moving fails, e.g., if no model exists at `sourceURL`, or\n *   if `oldPath` and `newPath` are identical.\n *\n * @doc {\n *   heading: 'Models',\n *   subheading: 'Management',\n *   namespace: 'io',\n *   ignoreCI: true\n * }\n */\nasync function moveModel(\n    sourceURL: string, destURL: string): Promise<ModelArtifactsInfo> {\n  const deleteSource = true;\n  return cloneModelInternal(sourceURL, destURL, deleteSource);\n}\n\nexport {moveModel, copyModel, removeModel, listModels};\n"]},"metadata":{},"sourceType":"module"}