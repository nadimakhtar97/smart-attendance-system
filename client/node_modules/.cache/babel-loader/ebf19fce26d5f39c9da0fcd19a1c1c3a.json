{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'FusedBatchNorm':\n    case 'FusedBatchNormV2':\n      {\n        return [tfOps.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n      }\n\n    case 'FusedBatchNormV3':\n      {\n        return [tfOps.batchNorm(getParamValue('x', node, tensorMap, context), getParamValue('mean', node, tensorMap, context), getParamValue('variance', node, tensorMap, context), getParamValue('offset', node, tensorMap, context), getParamValue('scale', node, tensorMap, context), getParamValue('epsilon', node, tensorMap, context))];\n      }\n\n    case 'LRN':\n      {\n        return [tfOps.localResponseNormalization(getParamValue('x', node, tensorMap, context), getParamValue('radius', node, tensorMap, context), getParamValue('bias', node, tensorMap, context), getParamValue('alpha', node, tensorMap, context), getParamValue('beta', node, tensorMap, context))];\n      }\n\n    case 'Softmax':\n      {\n        return [tfOps.softmax(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'LogSoftmax':\n      {\n        return [tfOps.logSoftmax(getParamValue('x', node, tensorMap, context))];\n      }\n\n    case 'SparseToDense':\n      {\n        return [tfOps.sparseToDense(getParamValue('sparseIndices', node, tensorMap, context), getParamValue('outputShape', node, tensorMap, context), getParamValue('sparseValues', node, tensorMap, context), getParamValue('defaultValue', node, tensorMap, context))];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'normalization';","map":{"version":3,"mappings":"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","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","batchNorm","localResponseNormalization","softmax","logSoftmax","sparseToDense","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/normalization_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Scalar, Tensor, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'FusedBatchNorm':\n        case 'FusedBatchNormV2': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'FusedBatchNormV3': {\n          return [tfOps.batchNorm(\n              getParamValue('x', node, tensorMap, context) as Tensor,\n              getParamValue('mean', node, tensorMap, context) as Tensor,\n              getParamValue('variance', node, tensorMap, context) as Tensor,\n              getParamValue('offset', node, tensorMap, context) as Tensor,\n              getParamValue('scale', node, tensorMap, context) as Tensor,\n              getParamValue('epsilon', node, tensorMap, context) as number)];\n        }\n        case 'LRN': {\n          return [tfOps.localResponseNormalization(\n              getParamValue('x', node, tensorMap, context) as Tensor3D |\n                  Tensor4D,\n              getParamValue('radius', node, tensorMap, context) as number,\n              getParamValue('bias', node, tensorMap, context) as number,\n              getParamValue('alpha', node, tensorMap, context) as number,\n              getParamValue('beta', node, tensorMap, context) as number)];\n        }\n        case 'Softmax': {\n          return [tfOps.softmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'LogSoftmax': {\n          return [tfOps.logSoftmax(\n              getParamValue('x', node, tensorMap, context) as Tensor)];\n        }\n        case 'SparseToDense': {\n          return [tfOps.sparseToDense(\n              getParamValue('sparseIndices', node, tensorMap, context) as\n                  Tensor,\n              getParamValue('outputShape', node, tensorMap, context) as Tensor,\n              getParamValue('sparseValues', node, tensorMap, context) as\n                  number[],\n              getParamValue('defaultValue', node, tensorMap, context) as\n                  Scalar)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'normalization';\n"]},"metadata":{},"sourceType":"module"}