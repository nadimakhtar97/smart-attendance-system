{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, FusedDepthwiseConv2D, util } from '@tensorflow/tfjs-core';\nimport { DepthwiseConv2DProgram } from '../conv_gpu_depthwise';\nimport { DepthwiseConvPacked2DProgram } from '../conv_packed_gpu_depthwise';\nimport { mapActivationToShaderProgram } from '../kernel_utils/kernel_funcs_utils';\nexport function fusedDepthwiseConv2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter,\n    bias,\n    preluActivationWeights\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations,\n    dimRoundingMode,\n    activation,\n    leakyreluAlpha\n  } = attrs;\n  const intermediates = [];\n  let $dilations = dilations;\n\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' + `1. Got strides ${strides} and dilations '${$dilations}'`);\n  const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true\n  /* depthwise */\n  );\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') && convInfo.strideWidth <= 2 && convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ? mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) : null;\n  const programInputs = [x, filter];\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo([], 'float32', util.createScalarValue(leakyreluAlpha, 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program;\n\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(convInfo, hasBias, fusedActivation, hasPreluActivationWeights, hasLeakyreluAlpha);\n  }\n\n  const customValues = [[convInfo.padInfo.top, convInfo.padInfo.left], [convInfo.strideHeight, convInfo.strideWidth], [convInfo.dilationHeight, convInfo.dilationWidth], [convInfo.inHeight, convInfo.inWidth]];\n  const result = backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D\n};","map":{"version":3,"mappings":"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","names":["backend_util","env","FusedDepthwiseConv2D","util","DepthwiseConv2DProgram","DepthwiseConvPacked2DProgram","mapActivationToShaderProgram","fusedDepthwiseConv2D","args","inputs","backend","attrs","x","filter","bias","preluActivationWeights","strides","pad","dilations","dimRoundingMode","activation","leakyreluAlpha","intermediates","$dilations","assert","eitherStridesOrDilationsAreOne","convInfo","computeConv2DInfo","shape","shouldPackDepthwiseConv","getBool","strideWidth","outChannels","inChannels","fusedActivation","programInputs","hasBias","hasPreluActivationWeights","hasLeakyreluAlpha","push","$leakyreluAlpha","makeTensorInfo","createScalarValue","program","customValues","padInfo","top","left","strideHeight","dilationHeight","dilationWidth","inHeight","inWidth","result","runWebGLProgram","forEach","t","disposeIntermediateTensorInfo","fusedDepthwiseConv2DConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/FusedDepthwiseConv2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, env, FusedDepthwiseConv2D, FusedDepthwiseConv2DAttrs, FusedDepthwiseConv2DInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthwiseConv2DProgram} from '../conv_gpu_depthwise';\nimport {DepthwiseConvPacked2DProgram} from '../conv_packed_gpu_depthwise';\nimport {mapActivationToShaderProgram} from '../kernel_utils/kernel_funcs_utils';\n\nexport function fusedDepthwiseConv2D(args: {\n  inputs: FusedDepthwiseConv2DInputs,\n  attrs: FusedDepthwiseConv2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter, bias, preluActivationWeights} = inputs;\n  const {strides, pad, dilations, dimRoundingMode, activation, leakyreluAlpha} =\n      attrs;\n\n  const intermediates: TensorInfo[] = [];\n\n  let $dilations = dilations;\n  if ($dilations == null) {\n    $dilations = [1, 1];\n  }\n\n  util.assert(\n      backend_util.eitherStridesOrDilationsAreOne(strides, $dilations),\n      () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n          `1. Got strides ${strides} and dilations '${$dilations}'`);\n\n  const convInfo = backend_util.computeConv2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number, number], strides, $dilations,\n      pad, dimRoundingMode, true /* depthwise */);\n\n  const shouldPackDepthwiseConv = env().getBool('WEBGL_PACK_DEPTHWISECONV') &&\n      convInfo.strideWidth <= 2 &&\n      convInfo.outChannels / convInfo.inChannels === 1;\n  const fusedActivation = activation ?\n      mapActivationToShaderProgram(activation, shouldPackDepthwiseConv) :\n      null;\n  const programInputs: TensorInfo[] = [x, filter];\n\n  const hasBias = bias != null;\n  const hasPreluActivationWeights = preluActivationWeights != null;\n  const hasLeakyreluAlpha = activation === 'leakyrelu';\n\n  if (hasBias) {\n    programInputs.push(bias);\n  }\n  if (hasPreluActivationWeights) {\n    programInputs.push(preluActivationWeights);\n  }\n  if (hasLeakyreluAlpha) {\n    const $leakyreluAlpha = backend.makeTensorInfo(\n        [], 'float32',\n        util.createScalarValue(leakyreluAlpha as {} as 'float32', 'float32'));\n    programInputs.push($leakyreluAlpha);\n    intermediates.push($leakyreluAlpha);\n  }\n\n  let program: DepthwiseConv2DProgram|DepthwiseConvPacked2DProgram;\n  if (shouldPackDepthwiseConv) {\n    program = new DepthwiseConvPacked2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  } else {\n    program = new DepthwiseConv2DProgram(\n        convInfo, hasBias, fusedActivation, hasPreluActivationWeights,\n        hasLeakyreluAlpha);\n  }\n  const customValues = [\n    [convInfo.padInfo.top, convInfo.padInfo.left],\n    [convInfo.strideHeight, convInfo.strideWidth],\n    [convInfo.dilationHeight, convInfo.dilationWidth],\n    [convInfo.inHeight, convInfo.inWidth]\n  ];\n  const result =\n      backend.runWebGLProgram(program, programInputs, 'float32', customValues);\n\n  intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n\n  return result;\n}\n\nexport const fusedDepthwiseConv2DConfig: KernelConfig = {\n  kernelName: FusedDepthwiseConv2D,\n  backendName: 'webgl',\n  kernelFunc: fusedDepthwiseConv2D as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}