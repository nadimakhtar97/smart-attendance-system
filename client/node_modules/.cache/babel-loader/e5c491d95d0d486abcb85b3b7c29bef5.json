{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Diag, util } from '@tensorflow/tfjs-core';\nexport function diag(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const xSize = util.sizeFromShape(x.shape);\n  const xVals = backend.data.get(x.dataId).values;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\nexport const diagConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,EAAgBC,IAAhB,EAAoFC,IAApF,QAA+F,uBAA/F;AAIA,OAAM,SAAUC,IAAV,CAAeC,IAAf,EAAkE;AAEtE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG;AAAD,MAAMF,MAAZ;AAEA,QAAMG,KAAK,GAAGN,IAAI,CAACO,aAAL,CAAmBF,CAAC,CAACG,KAArB,CAAd;AAEA,QAAMC,KAAK,GAAGL,OAAO,CAACM,IAAR,CAAaC,GAAb,CAAiBN,CAAC,CAACO,MAAnB,EAA2BC,MAAzC;AACA,QAAMC,MAAM,GAAGhB,MAAM,CAAC,CAACQ,KAAD,EAAQA,KAAR,CAAD,EAAiBD,CAAC,CAACU,KAAnB,CAArB;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACD,MAApB;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGR,KAAK,CAACS,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;AACrCD,QAAI,CAACC,CAAC,GAAGX,KAAJ,GAAYW,CAAb,CAAJ,GAAsBR,KAAK,CAACQ,CAAD,CAA3B;AACD;;AAED,QAAME,QAAQ,GAAG,CAAC,GAAGd,CAAC,CAACG,KAAN,EAAa,GAAGH,CAAC,CAACG,KAAlB,CAAjB;AAEA,SAAOJ,OAAO,CAACgB,cAAR,CAAuBD,QAAvB,EAAiCL,MAAM,CAACC,KAAxC,EAA+CD,MAAM,CAACD,MAAtD,CAAP;AACD;AAED,OAAO,MAAMQ,UAAU,GAAiB;AACtCC,YAAU,EAAEvB,IAD0B;AAEtCwB,aAAW,EAAE,KAFyB;AAGtCC,YAAU,EAAEvB;AAH0B,CAAjC","names":["buffer","Diag","util","diag","args","inputs","backend","x","xSize","sizeFromShape","shape","xVals","data","get","dataId","values","outBuf","dtype","vals","i","length","outShape","makeTensorInfo","diagConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Diag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const xSize = util.sizeFromShape(x.shape);\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const outBuf = buffer([xSize, xSize], x.dtype);\n  const vals = outBuf.values;\n  for (let i = 0; i < xVals.length; i++) {\n    vals[i * xSize + i] = xVals[i];\n  }\n\n  const outShape = [...x.shape, ...x.shape];\n\n  return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'cpu',\n  kernelFunc: diag as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}