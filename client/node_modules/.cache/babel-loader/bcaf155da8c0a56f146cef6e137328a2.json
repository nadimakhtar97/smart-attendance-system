{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { customGrad } from '../gradients';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { exp } from './exp';\nimport { log } from './log';\nimport { max } from './max';\nimport { mul } from './mul';\nimport { op } from './operation';\nimport { sub } from './sub';\nimport { sum } from './sum';\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\n\nfunction logSoftmax_(logits) {\n  let axis = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n  const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n\n  if (axis === -1) {\n    axis = $logits.rank - 1;\n  }\n\n  if (axis !== $logits.rank - 1) {\n    throw Error('Log Softmax along a non-last dimension is not yet supported. ' + `Logits was rank ${$logits.rank} and axis was ${axis}`);\n  } // const forward: ForwardFunc<Tensor> = (backend, save) => {\n  //   const keepDims = true;\n  //   const xMax = max(logits, axis, true);\n  //   const shifted = sub(logits, xMax);\n  //   const value =\n  //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,\n  //       keepDims)));\n  //   save([value]);\n  //   return value;\n  // };\n  // Use a custom gradient for numerical stability.\n\n\n  const customOp = customGrad((logits, save) => {\n    const keepDims = true;\n    const xMax = max(logits, axis, true);\n    const shifted = sub(logits, xMax);\n    const value = sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis, keepDims)));\n    save([value]);\n\n    const gradFunc = (dy, saved) => {\n      const [value] = saved;\n      const keepDims = true;\n      const softmax = exp(value);\n      return sub(dy, mul(sum(dy, axis, keepDims), softmax));\n    };\n\n    return {\n      value,\n      gradFunc\n    };\n  });\n  return customOp($logits); // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.\n  // const inputs: LogSoftmaxInputs = {logits: $logits};\n  // const attrs: LogSoftmaxAttrs = {axis};\n  // return ENGINE.runKernel(\n  //            LogSoftmax, inputs as {} as NamedTensorMap,\n  //            attrs as {} as NamedAttrMap);\n}\n\nexport const logSoftmax = op({\n  logSoftmax_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,UAAR,QAAyB,cAAzB;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAGA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AACA,SAAQC,GAAR,QAAkB,OAAlB;AAEA;;;;;;;;;;;;;;;;;;;;;;AAqBA,SAASC,WAAT,CAAuCC,MAAvC,EAAsE;AAAA,MAATC,IAAS,uEAAF,CAAC,CAAC;AACpE,QAAMC,OAAO,GAAGZ,eAAe,CAACU,MAAD,EAAS,QAAT,EAAmB,YAAnB,CAA/B;;AAEA,MAAIC,IAAI,KAAK,CAAC,CAAd,EAAiB;AACfA,QAAI,GAAGC,OAAO,CAACC,IAAR,GAAe,CAAtB;AACD;;AACD,MAAIF,IAAI,KAAKC,OAAO,CAACC,IAAR,GAAe,CAA5B,EAA+B;AAC7B,UAAMC,KAAK,CACP,kEACA,mBAAmBF,OAAO,CAACC,IAAI,iBAAiBF,IAAI,EAF7C,CAAX;AAGD,GAVmE,CAYpE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AACA,QAAMI,QAAQ,GAAGhB,UAAU,CAAC,CAACW,MAAD,EAAiBM,IAAjB,KAAuC;AACjE,UAAMC,QAAQ,GAAG,IAAjB;AACA,UAAMC,IAAI,GAAGd,GAAG,CAACM,MAAD,EAASC,IAAT,EAAe,IAAf,CAAhB;AACA,UAAMQ,OAAO,GAAGZ,GAAG,CAACG,MAAD,EAASQ,IAAT,CAAnB;AACA,UAAME,KAAK,GACPb,GAAG,CAACN,IAAI,CAACkB,OAAD,EAAU,SAAV,CAAL,EAA2BhB,GAAG,CAACK,GAAG,CAACN,GAAG,CAACiB,OAAD,CAAJ,EAAeR,IAAf,EAAqBM,QAArB,CAAJ,CAA9B,CADP;AAEAD,QAAI,CAAC,CAACI,KAAD,CAAD,CAAJ;;AAEA,UAAMC,QAAQ,GAAG,CAACC,EAAD,EAAaC,KAAb,KAAgC;AAC/C,YAAM,CAACH,KAAD,IAAUG,KAAhB;AACA,YAAMN,QAAQ,GAAG,IAAjB;AACA,YAAMO,OAAO,GAAGtB,GAAG,CAACkB,KAAD,CAAnB;AACA,aAAOb,GAAG,CAACe,EAAD,EAAKjB,GAAG,CAACG,GAAG,CAACc,EAAD,EAAKX,IAAL,EAAWM,QAAX,CAAJ,EAA0BO,OAA1B,CAAR,CAAV;AACD,KALD;;AAMA,WAAO;AAACJ,WAAD;AAAQC;AAAR,KAAP;AACD,GAf0B,CAA3B;AAiBA,SAAON,QAAQ,CAACH,OAAD,CAAf,CAzCoE,CA2CpE;AACA;AACA;AACA;AACA;AACA;AACD;;AAED,OAAO,MAAMa,UAAU,GAAGnB,EAAE,CAAC;AAACG;AAAD,CAAD,CAArB","names":["customGrad","convertToTensor","cast","exp","log","max","mul","op","sub","sum","logSoftmax_","logits","axis","$logits","rank","Error","customOp","save","keepDims","xMax","shifted","value","gradFunc","dy","saved","softmax","logSoftmax"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/log_softmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {customGrad} from '../gradients';\n\nimport {Tensor} from '../tensor';\nimport {GradSaveFunc} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {exp} from './exp';\nimport {log} from './log';\nimport {max} from './max';\nimport {mul} from './mul';\nimport {op} from './operation';\nimport {sub} from './sub';\nimport {sum} from './sum';\n\n/**\n * Computes the log softmax.\n *\n * ```js\n * const a = tf.tensor1d([1, 2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * ```js\n * const a = tf.tensor2d([2, 4, 6, 1, 2, 3], [2, 3]);\n *\n * a.logSoftmax().print();  // or tf.logSoftmax(a)\n * ```\n *\n * @param logits The logits array.\n * @param axis The dimension softmax would be performed on. Defaults to `-1`\n *     which indicates the last dimension.\n *\n * @doc {heading: 'Operations', subheading: 'Normalization'}\n */\nfunction logSoftmax_<T extends Tensor>(logits: T|TensorLike, axis = -1): T {\n  const $logits = convertToTensor(logits, 'logits', 'logSoftmax');\n\n  if (axis === -1) {\n    axis = $logits.rank - 1;\n  }\n  if (axis !== $logits.rank - 1) {\n    throw Error(\n        'Log Softmax along a non-last dimension is not yet supported. ' +\n        `Logits was rank ${$logits.rank} and axis was ${axis}`);\n  }\n\n  // const forward: ForwardFunc<Tensor> = (backend, save) => {\n  //   const keepDims = true;\n  //   const xMax = max(logits, axis, true);\n  //   const shifted = sub(logits, xMax);\n  //   const value =\n  //       sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis,\n  //       keepDims)));\n  //   save([value]);\n  //   return value;\n  // };\n\n  // Use a custom gradient for numerical stability.\n  const customOp = customGrad((logits: Tensor, save: GradSaveFunc) => {\n    const keepDims = true;\n    const xMax = max(logits, axis, true);\n    const shifted = sub(logits, xMax);\n    const value =\n        sub(cast(shifted, 'float32'), log(sum(exp(shifted), axis, keepDims)));\n    save([value]);\n\n    const gradFunc = (dy: Tensor, saved: Tensor[]) => {\n      const [value] = saved;\n      const keepDims = true;\n      const softmax = exp(value);\n      return sub(dy, mul(sum(dy, axis, keepDims), softmax));\n    };\n    return {value, gradFunc};\n  });\n\n  return customOp($logits) as T;\n\n  // TODO Use Engine.runKernel when CPU/WebGL/WASM backends implement this.\n  // const inputs: LogSoftmaxInputs = {logits: $logits};\n  // const attrs: LogSoftmaxAttrs = {axis};\n  // return ENGINE.runKernel(\n  //            LogSoftmax, inputs as {} as NamedTensorMap,\n  //            attrs as {} as NamedAttrMap);\n}\n\nexport const logSoftmax = op({logSoftmax_});\n"]},"metadata":{},"sourceType":"module"}