{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { matMul } from './mat_mul';\nimport { ones } from './ones';\nimport { reshape } from './reshape';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { sizeFromShape } from '../util_base';\n/**\n * Broadcasts parameters for evaluation on an N-D grid.\n *\n * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`\n * of N-D coordinate arrays for evaluating expressions on an N-D grid.\n *\n * Notes:\n * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.\n * When the `indexing` argument is set to 'xy' (the default), the broadcasting\n * instructions for the first two dimensions are swapped.\n * Examples:\n * Calling `const [X, Y] = meshgrid(x, y)` with the tensors\n *\n * ```javascript\n * const x = [1, 2, 3];\n * const y = [4, 5, 6];\n * const [X, Y] = tf.meshgrid(x, y);\n * // X = [[1, 2, 3],\n * //      [1, 2, 3],\n * //      [1, 2, 3]]\n * // Y = [[4, 4, 4],\n * //      [5, 5, 5],\n * //      [6, 6, 6]]\n * ```\n *\n * @param x Tensor with rank geq 1.\n * @param y Tensor with rank geq 1.\n * @param indexing\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\n\nexport function meshgrid(x, y) {\n  let {\n    indexing = 'xy'\n  } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n  if (indexing !== 'xy' && indexing !== 'ij') {\n    throw new TypeError(`${indexing} is not a valid third argument to meshgrid`);\n  }\n\n  if (x === undefined) {\n    return [];\n  }\n\n  let $x = convertToTensor(x, 'x', 'meshgrid', x instanceof Tensor ? x.dtype : 'float32');\n\n  if (y === undefined) {\n    return [$x];\n  }\n\n  let $y = convertToTensor(y, 'y', 'meshgrid', y instanceof Tensor ? y.dtype : 'float32');\n  const w = sizeFromShape($x.shape);\n  const h = sizeFromShape($y.shape);\n\n  if (indexing === 'xy') {\n    $x = reshape($x, [1, -1]);\n    $y = reshape($y, [-1, 1]);\n    return [matMul(ones([h, 1], $x.dtype), $x), matMul($y, ones([1, w], $y.dtype))];\n  }\n\n  $x = reshape($x, [-1, 1]);\n  $y = reshape($y, [1, -1]);\n  return [matMul($x, ones([1, h], $x.dtype)), matMul(ones([w, 1], $y.dtype), $y)];\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,MAAR,QAAqB,WAArB;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,SAAQC,aAAR,QAA4B,cAA5B;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+BA,OAAM,SAAUC,QAAV,CACFC,CADE,EACgBC,CADhB,EACwD;AAAA,MAAtB;AAACC,YAAQ,GAAG;AAAZ,GAAsB,uEAAF,EAAE;;AAC5D,MAAIA,QAAQ,KAAK,IAAb,IAAqBA,QAAQ,KAAK,IAAtC,EAA4C;AAC1C,UAAM,IAAIC,SAAJ,CACF,GAAGD,QAAQ,4CADT,CAAN;AAED;;AACD,MAAIF,CAAC,KAAKI,SAAV,EAAqB;AACnB,WAAO,EAAP;AACD;;AACD,MAAIC,EAAE,GAAGR,eAAe,CACpBG,CADoB,EACjB,GADiB,EACZ,UADY,EACAA,CAAC,YAAYJ,MAAb,GAAsBI,CAAC,CAACM,KAAxB,GAAgC,SADhC,CAAxB;;AAGA,MAAIL,CAAC,KAAKG,SAAV,EAAqB;AACnB,WAAO,CAACC,EAAD,CAAP;AACD;;AACD,MAAIE,EAAE,GAAGV,eAAe,CACpBI,CADoB,EACjB,GADiB,EACZ,UADY,EACAA,CAAC,YAAYL,MAAb,GAAsBK,CAAC,CAACK,KAAxB,GAAgC,SADhC,CAAxB;AAGA,QAAME,CAAC,GAAGV,aAAa,CAACO,EAAE,CAACI,KAAJ,CAAvB;AACA,QAAMC,CAAC,GAAGZ,aAAa,CAACS,EAAE,CAACE,KAAJ,CAAvB;;AAEA,MAAIP,QAAQ,KAAK,IAAjB,EAAuB;AACrBG,MAAE,GAAGV,OAAO,CAACU,EAAD,EAAK,CAAC,CAAD,EAAI,CAAC,CAAL,CAAL,CAAZ;AACAE,MAAE,GAAGZ,OAAO,CAACY,EAAD,EAAK,CAAC,CAAC,CAAF,EAAK,CAAL,CAAL,CAAZ;AACA,WAAO,CACLd,MAAM,CAACC,IAAI,CAAC,CAACgB,CAAD,EAAI,CAAJ,CAAD,EAASL,EAAE,CAACC,KAAZ,CAAL,EAAyBD,EAAzB,CADD,EAELZ,MAAM,CAACc,EAAD,EAAKb,IAAI,CAAC,CAAC,CAAD,EAAIc,CAAJ,CAAD,EAASD,EAAE,CAACD,KAAZ,CAAT,CAFD,CAAP;AAID;;AAEDD,IAAE,GAAGV,OAAO,CAACU,EAAD,EAAK,CAAC,CAAC,CAAF,EAAK,CAAL,CAAL,CAAZ;AACAE,IAAE,GAAGZ,OAAO,CAACY,EAAD,EAAK,CAAC,CAAD,EAAI,CAAC,CAAL,CAAL,CAAZ;AACA,SAAO,CACLd,MAAM,CAACY,EAAD,EAAKX,IAAI,CAAC,CAAC,CAAD,EAAIgB,CAAJ,CAAD,EAASL,EAAE,CAACC,KAAZ,CAAT,CADD,EAELb,MAAM,CAACC,IAAI,CAAC,CAACc,CAAD,EAAI,CAAJ,CAAD,EAASD,EAAE,CAACD,KAAZ,CAAL,EAAyBC,EAAzB,CAFD,CAAP;AAID","names":["matMul","ones","reshape","Tensor","convertToTensor","sizeFromShape","meshgrid","x","y","indexing","TypeError","undefined","$x","dtype","$y","w","shape","h"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/meshgrid.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {matMul} from './mat_mul';\nimport {ones} from './ones';\nimport {reshape} from './reshape';\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {sizeFromShape} from '../util_base';\n\n/**\n * Broadcasts parameters for evaluation on an N-D grid.\n *\n * Given N one-dimensional coordinate arrays `*args`, returns a list `outputs`\n * of N-D coordinate arrays for evaluating expressions on an N-D grid.\n *\n * Notes:\n * `meshgrid` supports cartesian ('xy') and matrix ('ij') indexing conventions.\n * When the `indexing` argument is set to 'xy' (the default), the broadcasting\n * instructions for the first two dimensions are swapped.\n * Examples:\n * Calling `const [X, Y] = meshgrid(x, y)` with the tensors\n *\n * ```javascript\n * const x = [1, 2, 3];\n * const y = [4, 5, 6];\n * const [X, Y] = tf.meshgrid(x, y);\n * // X = [[1, 2, 3],\n * //      [1, 2, 3],\n * //      [1, 2, 3]]\n * // Y = [[4, 4, 4],\n * //      [5, 5, 5],\n * //      [6, 6, 6]]\n * ```\n *\n * @param x Tensor with rank geq 1.\n * @param y Tensor with rank geq 1.\n * @param indexing\n *\n * @doc {heading: 'Operations', subheading: 'Slicing and Joining'}\n */\nexport function meshgrid<T extends Tensor>(\n    x?: T|TensorLike, y?: T|TensorLike, {indexing = 'xy'} = {}): T[] {\n  if (indexing !== 'xy' && indexing !== 'ij') {\n    throw new TypeError(\n        `${indexing} is not a valid third argument to meshgrid`);\n  }\n  if (x === undefined) {\n    return [];\n  }\n  let $x = convertToTensor(\n      x, 'x', 'meshgrid', x instanceof Tensor ? x.dtype : 'float32');\n\n  if (y === undefined) {\n    return [$x];\n  }\n  let $y = convertToTensor(\n      y, 'y', 'meshgrid', y instanceof Tensor ? y.dtype : 'float32');\n\n  const w = sizeFromShape($x.shape);\n  const h = sizeFromShape($y.shape);\n\n  if (indexing === 'xy') {\n    $x = reshape($x, [1, -1]) as T;\n    $y = reshape($y, [-1, 1]) as T;\n    return [\n      matMul(ones([h, 1], $x.dtype), $x),\n      matMul($y, ones([1, w], $y.dtype)),\n    ];\n  }\n\n  $x = reshape($x, [-1, 1]) as T;\n  $y = reshape($y, [1, -1]) as T;\n  return [\n    matMul($x, ones([1, h], $x.dtype)),\n    matMul(ones([w, 1], $y.dtype), $y),\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}