{"ast":null,"code":"/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { StringNGrams } from '@tensorflow/tfjs-core';\nimport { stringNGramsImpl } from './StringNGrams_impl';\nexport function stringNGrams(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {\n    data,\n    dataSplits\n  } = inputs;\n  const $data = backend.data.get(data.dataId).values;\n  const $dataSplits = backend.data.get(dataSplits.dataId).values;\n  const [nGrams, nGramsSplits] = stringNGramsImpl($data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth, preserveShortSequences);\n  return [backend.makeTensorInfo([nGrams.length], 'string', nGrams), backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits)];\n}\nexport const stringNGramsConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,YAAlC,QAAwG,uBAAxG;AAIA,SAAQC,gBAAR,QAA+B,qBAA/B;AAEA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AACJI,aADI;AAEJC,eAFI;AAGJC,WAHI;AAIJC,YAJI;AAKJC,YALI;AAMJC;AANI,MAOFN,KAPJ;AAQA,QAAM;AAACO,QAAD;AAAOC;AAAP,MAAqBV,MAA3B;AACA,QAAMW,KAAK,GAAGV,OAAO,CAACQ,IAAR,CAAaG,GAAb,CAAiBH,IAAI,CAACI,MAAtB,EAA8BC,MAA5C;AACA,QAAMC,WAAW,GAAGd,OAAO,CAACQ,IAAR,CAAaG,GAAb,CAAiBF,UAAU,CAACG,MAA5B,EAAoCC,MAAxD;AAEA,QAAM,CAACE,MAAD,EAASC,YAAT,IAAyBpB,gBAAgB,CAC3Cc,KAD2C,EACpCI,WADoC,EACvBZ,SADuB,EACZC,WADY,EACCC,OADD,EACUC,QADV,EACoBC,QADpB,EAE3CC,sBAF2C,CAA/C;AAGA,SAAO,CACLP,OAAO,CAACiB,cAAR,CAAuB,CAACF,MAAM,CAACG,MAAR,CAAvB,EAAwC,QAAxC,EAAkDH,MAAlD,CADK,EAELf,OAAO,CAACiB,cAAR,CAAuBR,UAAU,CAACU,KAAlC,EAAyC,OAAzC,EAAkDH,YAAlD,CAFK,CAAP;AAID;AAED,OAAO,MAAMI,kBAAkB,GAAiB;AAC9CC,YAAU,EAAE1B,YADkC;AAE9C2B,aAAW,EAAE,KAFiC;AAG9CC,YAAU,EAAE1B;AAHkC,CAAzC","names":["StringNGrams","stringNGramsImpl","stringNGrams","args","inputs","backend","attrs","separator","nGramWidths","leftPad","rightPad","padWidth","preserveShortSequences","data","dataSplits","$data","get","dataId","values","$dataSplits","nGrams","nGramsSplits","makeTensorInfo","length","shape","stringNGramsConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/StringNGrams.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, StringNGrams, StringNGramsAttrs, StringNGramsInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\n\nimport {stringNGramsImpl} from './StringNGrams_impl';\n\nexport function stringNGrams(args: {\n  inputs: StringNGramsInputs,\n  backend: MathBackendCPU,\n  attrs: StringNGramsAttrs\n}): [TensorInfo, TensorInfo] {\n  const {inputs, backend, attrs} = args;\n  const {\n    separator,\n    nGramWidths,\n    leftPad,\n    rightPad,\n    padWidth,\n    preserveShortSequences\n  } = attrs;\n  const {data, dataSplits} = inputs;\n  const $data = backend.data.get(data.dataId).values as Uint8Array[];\n  const $dataSplits = backend.data.get(dataSplits.dataId).values as Int32Array;\n\n  const [nGrams, nGramsSplits] = stringNGramsImpl(\n      $data, $dataSplits, separator, nGramWidths, leftPad, rightPad, padWidth,\n      preserveShortSequences);\n  return [\n    backend.makeTensorInfo([nGrams.length], 'string', nGrams),\n    backend.makeTensorInfo(dataSplits.shape, 'int32', nGramsSplits),\n  ];\n}\n\nexport const stringNGramsConfig: KernelConfig = {\n  kernelName: StringNGrams,\n  backendName: 'cpu',\n  kernelFunc: stringNGrams as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}