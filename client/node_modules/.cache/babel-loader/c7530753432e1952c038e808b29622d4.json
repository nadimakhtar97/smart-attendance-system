{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    depthRadius,\n    bias,\n    alpha,\n    beta\n  } = attrs;\n  assertNotComplex(x, 'LRN');\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset) {\n    const currentChannel = offset % channels;\n    let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n    let sum = 0.0;\n\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n} // tslint:disable-next-line: variable-name\n\nexport const LRNConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,GAAlC,EAAoFC,IAApF,QAA+F,uBAA/F;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,OAAM,SAAUC,GAAV,CACFC,IADE,EACiE;AAErE,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,eAAD;AAAcC,QAAd;AAAoBC,SAApB;AAA2BC;AAA3B,MAAmCL,KAAzC;AAEAL,kBAAgB,CAACM,CAAD,EAAI,KAAJ,CAAhB;AAEA,QAAMK,QAAQ,GAAGL,CAAC,CAACM,KAAF,CAAQ,CAAR,CAAjB;AACA,QAAMC,IAAI,GAAGF,QAAQ,GAAG,CAAxB;AACA,QAAMG,OAAO,GAAGV,OAAO,CAACW,IAAR,CAAaC,GAAb,CAAiBV,CAAC,CAACW,MAAnB,EAA2BC,MAA3C;AACA,QAAMC,IAAI,GAAGpB,IAAI,CAACqB,aAAL,CAAmBd,CAAC,CAACM,KAArB,CAAb;AACA,QAAMS,MAAM,GAAG,IAAIC,YAAJ,CAAiBH,IAAjB,CAAf;;AAEA,WAASI,iBAAT,CAA2BC,MAA3B,EAAyC;AACvC,UAAMC,cAAc,GAAGD,MAAM,GAAGb,QAAhC;AACA,QAAIe,cAAc,GACdF,MAAM,GAAGC,cAAT,GAA0BE,IAAI,CAACC,GAAL,CAAS,CAAT,EAAYH,cAAc,GAAGlB,WAA7B,CAD9B;AAEA,UAAMsB,YAAY,GACdL,MAAM,GAAGC,cAAT,GAA0BE,IAAI,CAACG,GAAL,CAASL,cAAc,GAAGlB,WAA1B,EAAuCM,IAAvC,CAD9B;AAGA,QAAIkB,GAAG,GAAG,GAAV;;AACA,WAAOL,cAAc,IAAIG,YAAzB,EAAuCH,cAAc,EAArD,EAAyD;AACvD,YAAMM,CAAC,GAAGlB,OAAO,CAACY,cAAD,CAAjB;AACAK,SAAG,IAAIC,CAAC,GAAGA,CAAX;AACD;;AACD,WAAOD,GAAP;AACD;;AAED,OAAK,IAAIP,MAAM,GAAG,CAAlB,EAAqBA,MAAM,GAAGL,IAA9B,EAAoCK,MAAM,EAA1C,EAA8C;AAC5C,UAAMO,GAAG,GAAGR,iBAAiB,CAACC,MAAD,CAA7B;AACA,UAAMS,GAAG,GAAGnB,OAAO,CAACU,MAAD,CAAP,GAAkBG,IAAI,CAACO,GAAL,CAAS1B,IAAI,GAAGC,KAAK,GAAGsB,GAAxB,EAA6B,CAACrB,IAA9B,CAA9B;AACAW,UAAM,CAACG,MAAD,CAAN,GAAiBS,GAAjB;AACD;;AAED,SAAO7B,OAAO,CAAC+B,cAAR,CAAuB7B,CAAC,CAACM,KAAzB,EAAgCN,CAAC,CAAC8B,KAAlC,EAAyCf,MAAzC,CAAP;AACD,C,CAED;;AACA,OAAO,MAAMgB,SAAS,GAAiB;AACrCC,YAAU,EAAExC,GADyB;AAErCyC,aAAW,EAAE,KAFwB;AAGrCC,YAAU,EAAEvC;AAHyB,CAAhC","names":["LRN","util","assertNotComplex","lRN","args","inputs","backend","attrs","x","depthRadius","bias","alpha","beta","channels","shape","maxD","xValues","data","get","dataId","values","size","sizeFromShape","result","Float32Array","sumAcrossChannels","offset","currentChannel","beginSumOffset","Math","max","endSumOffset","min","sum","z","val","pow","makeTensorInfo","dtype","LRNConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/LRN.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, LRN, LRNAttrs, LRNInputs, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nexport function lRN(\n    args: {inputs: LRNInputs, backend: MathBackendCPU, attrs: LRNAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {depthRadius, bias, alpha, beta} = attrs;\n\n  assertNotComplex(x, 'LRN');\n\n  const channels = x.shape[3];\n  const maxD = channels - 1;\n  const xValues = backend.data.get(x.dataId).values as TypedArray;\n  const size = util.sizeFromShape(x.shape);\n  const result = new Float32Array(size);\n\n  function sumAcrossChannels(offset: number) {\n    const currentChannel = offset % channels;\n    let beginSumOffset =\n        offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n    const endSumOffset =\n        offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n\n    let sum = 0.0;\n    for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n      const z = xValues[beginSumOffset];\n      sum += z * z;\n    }\n    return sum;\n  }\n\n  for (let offset = 0; offset < size; offset++) {\n    const sum = sumAcrossChannels(offset);\n    const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n    result[offset] = val;\n  }\n\n  return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\n\n// tslint:disable-next-line: variable-name\nexport const LRNConfig: KernelConfig = {\n  kernelName: LRN,\n  backendName: 'cpu',\n  kernelFunc: lRN as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}