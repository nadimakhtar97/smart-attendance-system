{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\n\nexport class FileDataSource extends DataSource {\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(input) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    super();\n    this.input = input;\n    this.options = options;\n  }\n\n  async iterator() {\n    if (isLocalPath(this.input) && env().get('IS_NODE')) {\n      // tslint:disable-next-line:no-require-imports\n      const fs = require('fs');\n\n      this.input = fs.readFileSync(this.input.substr(7));\n    } // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n    // with file in browser.\n\n\n    return new FileChunkIterator(this.input, this.options);\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,GAAR,QAAkB,uBAAlB;AACA,SAAQC,UAAR,QAAyB,eAAzB;AAEA,SAAQC,iBAAR,QAA0D,kCAA1D;AAEA,SAAQC,WAAR,QAA0B,qBAA1B;AAEA;;;;;AAIA,OAAM,MAAOC,cAAP,SAA8BH,UAA9B,CAAwC;AAC5C;;;;;;;;AAQAI,cACcC,KADd,EAE6D;AAAA,QAAtCC,OAAsC,uEAAF,EAAE;AAC3D;AAFY;AACS;AAEtB;;AAEa,QAARC,QAAQ;AACZ,QAAIL,WAAW,CAAC,KAAKG,KAAN,CAAX,IAA2BN,GAAG,GAAGS,GAAN,CAAU,SAAV,CAA/B,EAAqD;AACnD;AACA,YAAMC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAlB;;AACA,WAAKL,KAAL,GAAaI,EAAE,CAACE,YAAH,CAAiB,KAAKN,KAAL,CAAsBO,MAAtB,CAA6B,CAA7B,CAAjB,CAAb;AACD,KALW,CAMZ;AACA;;;AACA,WAAO,IAAIX,iBAAJ,CAAsB,KAAKI,KAA3B,EAAiD,KAAKC,OAAtD,CAAP;AACD;;AAxB2C","names":["env","DataSource","FileChunkIterator","isLocalPath","FileDataSource","constructor","input","options","iterator","get","fs","require","readFileSync","substr"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-data/src/sources/file_data_source.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {env} from '@tensorflow/tfjs-core';\nimport {DataSource} from '../datasource';\nimport {ByteChunkIterator} from '../iterators/byte_chunk_iterator';\nimport {FileChunkIterator, FileChunkIteratorOptions} from '../iterators/file_chunk_iterator';\nimport {FileElement} from '../types';\nimport {isLocalPath} from '../util/source_util';\n\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n  /**\n   * Create a `FileDataSource`.\n   *\n   * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n   *     read. Local file only works in node environment.\n   * @param options Options passed to the underlying `FileChunkIterator`s,\n   *   such as {chunksize: 1024}.\n   */\n  constructor(\n      protected input: FileElement|string,\n      protected readonly options: FileChunkIteratorOptions = {}) {\n    super();\n  }\n\n  async iterator(): Promise<ByteChunkIterator> {\n    if (isLocalPath(this.input) && env().get('IS_NODE')) {\n      // tslint:disable-next-line:no-require-imports\n      const fs = require('fs');\n      this.input = fs.readFileSync((this.input as string).substr(7));\n    }\n    // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n    // with file in browser.\n    return new FileChunkIterator(this.input as FileElement, this.options);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}