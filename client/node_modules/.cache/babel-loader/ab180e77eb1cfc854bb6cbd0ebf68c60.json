{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { batchNorm } from './batchnorm';\nimport { op } from './operation';\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\n\nfunction batchNorm2d_(x, mean, variance, offset, scale, varianceEpsilon) {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale;\n\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n\n  let $offset;\n\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n\n  util.assert($x.rank === 2, () => `Error in batchNorm2D: x must be rank 2 but got rank ` + `${$x.rank}.`);\n  util.assert($mean.rank === 2 || $mean.rank === 1, () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` + `got rank ${$mean.rank}.`);\n  util.assert($variance.rank === 2 || $variance.rank === 1, () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` + `but got rank ${$variance.rank}.`);\n\n  if ($scale != null) {\n    util.assert($scale.rank === 2 || $scale.rank === 1, () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` + `but got rank ${$scale.rank}.`);\n  }\n\n  if ($offset != null) {\n    util.assert($offset.rank === 2 || $offset.rank === 1, () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` + `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm2d = op({\n  batchNorm2d_\n});","map":{"version":3,"mappings":"AAiBA,SAAQA,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,SAAR,QAAwB,aAAxB;AACA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;AAWA,SAASC,YAAT,CACIC,CADJ,EAC4BC,IAD5B,EAEIC,QAFJ,EAGIC,MAHJ,EAG2CC,KAH3C,EAIIC,eAJJ,EAI4B;AAC1B,QAAMC,EAAE,GAAGX,eAAe,CAACK,CAAD,EAAI,GAAJ,EAAS,WAAT,CAA1B;AACA,QAAMO,KAAK,GAAGZ,eAAe,CAACM,IAAD,EAAO,MAAP,EAAe,WAAf,CAA7B;AACA,QAAMO,SAAS,GAAGb,eAAe,CAACO,QAAD,EAAW,UAAX,EAAuB,WAAvB,CAAjC;AACA,MAAIO,MAAJ;;AACA,MAAIL,KAAK,IAAI,IAAb,EAAmB;AACjBK,UAAM,GAAGd,eAAe,CAACS,KAAD,EAAQ,OAAR,EAAiB,WAAjB,CAAxB;AACD;;AACD,MAAIM,OAAJ;;AACA,MAAIP,MAAM,IAAI,IAAd,EAAoB;AAClBO,WAAO,GAAGf,eAAe,CAACQ,MAAD,EAAS,QAAT,EAAmB,WAAnB,CAAzB;AACD;;AACDP,MAAI,CAACe,MAAL,CACIL,EAAE,CAACM,IAAH,KAAY,CADhB,EAEI,MAAM,yDACF,GAAGN,EAAE,CAACM,IAAI,GAHlB;AAIAhB,MAAI,CAACe,MAAL,CACIJ,KAAK,CAACK,IAAN,KAAe,CAAf,IAAoBL,KAAK,CAACK,IAAN,KAAe,CADvC,EAEI,MAAM,6DACF,YAAYL,KAAK,CAACK,IAAI,GAH9B;AAIAhB,MAAI,CAACe,MAAL,CACIH,SAAS,CAACI,IAAV,KAAmB,CAAnB,IAAwBJ,SAAS,CAACI,IAAV,KAAmB,CAD/C,EAEI,MAAM,6DACF,gBAAgBJ,SAAS,CAACI,IAAI,GAHtC;;AAIA,MAAIH,MAAM,IAAI,IAAd,EAAoB;AAClBb,QAAI,CAACe,MAAL,CACIF,MAAM,CAACG,IAAP,KAAgB,CAAhB,IAAqBH,MAAM,CAACG,IAAP,KAAgB,CADzC,EAEI,MAAM,0DACF,gBAAgBH,MAAM,CAACG,IAAI,GAHnC;AAID;;AACD,MAAIF,OAAO,IAAI,IAAf,EAAqB;AACnBd,QAAI,CAACe,MAAL,CACID,OAAO,CAACE,IAAR,KAAiB,CAAjB,IAAsBF,OAAO,CAACE,IAAR,KAAiB,CAD3C,EAEI,MAAM,2DACF,gBAAgBF,OAAO,CAACE,IAAI,GAHpC;AAID;;AAED,SAAOf,SAAS,CAACS,EAAD,EAAKC,KAAL,EAAYC,SAAZ,EAAuBE,OAAvB,EAAgCD,MAAhC,EAAwCJ,eAAxC,CAAhB;AACD;;AAED,OAAO,MAAMQ,WAAW,GAAGf,EAAE,CAAC;AAACC;AAAD,CAAD,CAAtB","names":["convertToTensor","util","batchNorm","op","batchNorm2d_","x","mean","variance","offset","scale","varianceEpsilon","$x","$mean","$variance","$scale","$offset","assert","rank","batchNorm2d"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/batchnorm2d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor1D, Tensor2D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {batchNorm} from './batchnorm';\nimport {op} from './operation';\n\n/**\n * Batch normalization, strictly for 2D. For the more relaxed version, see\n * `tf.batchNorm`.\n *\n * @param x The input Tensor.\n * @param mean A mean Tensor.\n * @param variance A variance Tensor.\n * @param offset An offset Tensor.\n * @param scale A scale Tensor.\n * @param varianceEpsilon A small float number to avoid dividing by 0.\n */\nfunction batchNorm2d_(\n    x: Tensor2D|TensorLike, mean: Tensor2D|Tensor1D|TensorLike,\n    variance: Tensor2D|Tensor1D|TensorLike,\n    offset?: Tensor2D|Tensor1D|TensorLike, scale?: Tensor2D|Tensor1D|TensorLike,\n    varianceEpsilon?: number): Tensor2D {\n  const $x = convertToTensor(x, 'x', 'batchNorm');\n  const $mean = convertToTensor(mean, 'mean', 'batchNorm');\n  const $variance = convertToTensor(variance, 'variance', 'batchNorm');\n  let $scale: Tensor2D|Tensor1D;\n  if (scale != null) {\n    $scale = convertToTensor(scale, 'scale', 'batchNorm');\n  }\n  let $offset: Tensor2D|Tensor1D;\n  if (offset != null) {\n    $offset = convertToTensor(offset, 'offset', 'batchNorm');\n  }\n  util.assert(\n      $x.rank === 2,\n      () => `Error in batchNorm2D: x must be rank 2 but got rank ` +\n          `${$x.rank}.`);\n  util.assert(\n      $mean.rank === 2 || $mean.rank === 1,\n      () => `Error in batchNorm2D: mean must be rank 2 or rank 1 but ` +\n          `got rank ${$mean.rank}.`);\n  util.assert(\n      $variance.rank === 2 || $variance.rank === 1,\n      () => `Error in batchNorm2D: variance must be rank 2 or rank 1 ` +\n          `but got rank ${$variance.rank}.`);\n  if ($scale != null) {\n    util.assert(\n        $scale.rank === 2 || $scale.rank === 1,\n        () => `Error in batchNorm2D: scale must be rank 2 or rank 1 ` +\n            `but got rank ${$scale.rank}.`);\n  }\n  if ($offset != null) {\n    util.assert(\n        $offset.rank === 2 || $offset.rank === 1,\n        () => `Error in batchNorm2D: offset must be rank 2 or rank 1 ` +\n            `but got rank ${$offset.rank}.`);\n  }\n\n  return batchNorm($x, $mean, $variance, $offset, $scale, varianceEpsilon);\n}\n\nexport const batchNorm2d = op({batchNorm2d_});\n"]},"metadata":{},"sourceType":"module"}