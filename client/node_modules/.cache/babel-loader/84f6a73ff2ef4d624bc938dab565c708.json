{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\nimport { getParamValue } from './utils';\nexport const executeOp = (node, tensorMap, context) => {\n  switch (node.op) {\n    case 'ResizeBilinear':\n      {\n        const images = getParamValue('images', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n        const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n        return [tfOps.image.resizeBilinear(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n      }\n\n    case 'ResizeNearestNeighbor':\n      {\n        const images = getParamValue('images', node, tensorMap, context);\n        const size = getParamValue('size', node, tensorMap, context);\n        const alignCorners = getParamValue('alignCorners', node, tensorMap, context);\n        const halfPixelCenters = getParamValue('halfPixelCenters', node, tensorMap, context);\n        return [tfOps.image.resizeNearestNeighbor(images, [size[0], size[1]], alignCorners, halfPixelCenters)];\n      }\n\n    case 'CropAndResize':\n      {\n        const image = getParamValue('image', node, tensorMap, context);\n        const boxes = getParamValue('boxes', node, tensorMap, context);\n        const boxInd = getParamValue('boxInd', node, tensorMap, context);\n        const cropSize = getParamValue('cropSize', node, tensorMap, context);\n        const method = getParamValue('method', node, tensorMap, context);\n        const extrapolationValue = getParamValue('extrapolationValue', node, tensorMap, context);\n        return [tfOps.image.cropAndResize(image, boxes, boxInd, cropSize, method, extrapolationValue)];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'image';","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA;AACA,OAAO,KAAKA,KAAZ,MAAuB,kDAAvB;AAMA,SAAQC,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAMC,SAAS,GAClB,CAACC,IAAD,EAAaC,SAAb,EACCC,OADD,KACwC;AACtC,UAAQF,IAAI,CAACG,EAAb;AACE,SAAK,gBAAL;AAAuB;AACrB,cAAMC,MAAM,GACRN,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CADjB;AAEA,cAAMG,IAAI,GACNP,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CADjB;AAEA,cAAMI,YAAY,GACdR,aAAa,CAAC,cAAD,EAAiBE,IAAjB,EAAuBC,SAAvB,EAAkCC,OAAlC,CADjB;AAGA,cAAMK,gBAAgB,GAClBT,aAAa,CAAC,kBAAD,EAAqBE,IAArB,EAA2BC,SAA3B,EAAsCC,OAAtC,CADjB;AAGA,eAAO,CAACL,KAAK,CAACW,KAAN,CAAYC,cAAZ,CACJL,MADI,EAC2B,CAACC,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAD3B,EAC+CC,YAD/C,EAEJC,gBAFI,CAAD,CAAP;AAGD;;AACD,SAAK,uBAAL;AAA8B;AAC5B,cAAMH,MAAM,GACRN,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CADjB;AAEA,cAAMG,IAAI,GACNP,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CADjB;AAEA,cAAMI,YAAY,GACdR,aAAa,CAAC,cAAD,EAAiBE,IAAjB,EAAuBC,SAAvB,EAAkCC,OAAlC,CADjB;AAGA,cAAMK,gBAAgB,GAClBT,aAAa,CAAC,kBAAD,EAAqBE,IAArB,EAA2BC,SAA3B,EAAsCC,OAAtC,CADjB;AAGA,eAAO,CAACL,KAAK,CAACW,KAAN,CAAYE,qBAAZ,CACJN,MADI,EAC2B,CAACC,IAAI,CAAC,CAAD,CAAL,EAAUA,IAAI,CAAC,CAAD,CAAd,CAD3B,EAC+CC,YAD/C,EAEJC,gBAFI,CAAD,CAAP;AAGD;;AACD,SAAK,eAAL;AAAsB;AACpB,cAAMC,KAAK,GACPV,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CADjB;AAEA,cAAMS,KAAK,GACPb,aAAa,CAAC,OAAD,EAAUE,IAAV,EAAgBC,SAAhB,EAA2BC,OAA3B,CADjB;AAEA,cAAMU,MAAM,GACRd,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CADjB;AAEA,cAAMW,QAAQ,GACVf,aAAa,CAAC,UAAD,EAAaE,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,CADjB;AAEA,cAAMY,MAAM,GACRhB,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CADjB;AAEA,cAAMa,kBAAkB,GACpBjB,aAAa,CAAC,oBAAD,EAAuBE,IAAvB,EAA6BC,SAA7B,EAAwCC,OAAxC,CADjB;AAGA,eAAO,CAACL,KAAK,CAACW,KAAN,CAAYQ,aAAZ,CACJR,KADI,EACeG,KADf,EACkCC,MADlC,EAEJC,QAFI,EAE0BC,MAF1B,EAGJC,kBAHI,CAAD,CAAP;AAID;;AACD;AACE,YAAME,SAAS,CAAC,aAAajB,IAAI,CAACG,EAAE,qBAArB,CAAf;AAnDJ;AAqDD,CAxDE;AA0DP,OAAO,MAAMe,QAAQ,GAAG,OAAjB","names":["tfOps","getParamValue","executeOp","node","tensorMap","context","op","images","size","alignCorners","halfPixelCenters","image","resizeBilinear","resizeNearestNeighbor","boxes","boxInd","cropSize","method","extrapolationValue","cropAndResize","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/image_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor, Tensor1D, Tensor2D, Tensor3D, Tensor4D} from '@tensorflow/tfjs-core';\n// tslint:disable-next-line: no-imports-from-dist\nimport * as tfOps from '@tensorflow/tfjs-core/dist/ops/ops_for_converter';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {InternalOpExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpExecutor =\n    (node: Node, tensorMap: NamedTensorsMap,\n     context: ExecutionContext): Tensor[] => {\n      switch (node.op) {\n        case 'ResizeBilinear': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeBilinear(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'ResizeNearestNeighbor': {\n          const images =\n              getParamValue('images', node, tensorMap, context) as Tensor;\n          const size =\n              getParamValue('size', node, tensorMap, context) as number[];\n          const alignCorners =\n              getParamValue('alignCorners', node, tensorMap, context) as\n              boolean;\n          const halfPixelCenters =\n              getParamValue('halfPixelCenters', node, tensorMap, context) as\n              boolean;\n          return [tfOps.image.resizeNearestNeighbor(\n              images as Tensor3D | Tensor4D, [size[0], size[1]], alignCorners,\n              halfPixelCenters)];\n        }\n        case 'CropAndResize': {\n          const image =\n              getParamValue('image', node, tensorMap, context) as Tensor;\n          const boxes =\n              getParamValue('boxes', node, tensorMap, context) as Tensor;\n          const boxInd =\n              getParamValue('boxInd', node, tensorMap, context) as Tensor;\n          const cropSize =\n              getParamValue('cropSize', node, tensorMap, context) as number[];\n          const method =\n              getParamValue('method', node, tensorMap, context) as string;\n          const extrapolationValue =\n              getParamValue('extrapolationValue', node, tensorMap, context) as\n              number;\n          return [tfOps.image.cropAndResize(\n              image as Tensor4D, boxes as Tensor2D, boxInd as Tensor1D,\n              cropSize as [number, number], method as 'bilinear' | 'nearest',\n              extrapolationValue)];\n        }\n        default:\n          throw TypeError(`Node type ${node.op} is not implemented`);\n      }\n    };\n\nexport const CATEGORY = 'image';\n"]},"metadata":{},"sourceType":"module"}