{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D } from '@tensorflow/tfjs-core';\nimport { Dilation2DProgram } from '../dilation_gpu';\nimport { reshape } from './Reshape';\nexport function dilation2D(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x,\n    filter\n  } = inputs;\n  const {\n    strides,\n    pad,\n    dilations\n  } = attrs;\n  const convInfo = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC'\n  /* dataFormat */\n  , dilations);\n  let out;\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n  const outReshaped = reshape({\n    inputs: {\n      x: out\n    },\n    backend,\n    attrs: {\n      shape: convInfo.outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(out);\n  return outReshaped;\n}\nexport const dilation2DConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,UAAtB,QAAgH,uBAAhH;AAGA,SAAQC,iBAAR,QAAgC,iBAAhC;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAUC,UAAV,CAAqBC,IAArB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,KAAD;AAAIC;AAAJ,MAAcJ,MAApB;AACA,QAAM;AAACK,WAAD;AAAUC,OAAV;AAAeC;AAAf,MAA4BL,KAAlC;AAEA,QAAMM,QAAQ,GAAGd,YAAY,CAACe,qBAAb,CACbN,CAAC,CAACO,KADW,EAEbN,MAAM,CAACM,KAFM,EAE6BL,OAF7B,EAEsCC,GAFtC,EAGb;AAAO;AAHM,IAGYC,SAHZ,CAAjB;AAIA,MAAII,GAAJ;AAEA,QAAMC,OAAO,GAAG,IAAIhB,iBAAJ,CAAsBY,QAAtB,CAAhB;AACAG,KAAG,GAAGV,OAAO,CAACY,eAAR,CAAwBD,OAAxB,EAAiC,CAACT,CAAD,EAAIC,MAAJ,CAAjC,EAA8C,SAA9C,CAAN;AAEA,QAAMU,WAAW,GACbjB,OAAO,CAAC;AAACG,UAAM,EAAE;AAACG,OAAC,EAAEQ;AAAJ,KAAT;AAAmBV,WAAnB;AAA4BC,SAAK,EAAE;AAACQ,WAAK,EAAEF,QAAQ,CAACO;AAAjB;AAAnC,GAAD,CADX;AAEAd,SAAO,CAACe,6BAAR,CAAsCL,GAAtC;AAEA,SAAOG,WAAP;AACD;AAED,OAAO,MAAMG,gBAAgB,GAAiB;AAC5CC,YAAU,EAAEvB,UADgC;AAE5CwB,aAAW,EAAE,OAF+B;AAG5CC,YAAU,EAAEtB;AAHgC,CAAvC","names":["backend_util","Dilation2D","Dilation2DProgram","reshape","dilation2D","args","inputs","backend","attrs","x","filter","strides","pad","dilations","convInfo","computeDilation2DInfo","shape","out","program","runWebGLProgram","outReshaped","outShape","disposeIntermediateTensorInfo","dilation2DConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Dilation2D.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, Dilation2D, Dilation2DAttrs, Dilation2DInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {Dilation2DProgram} from '../dilation_gpu';\nimport {reshape} from './Reshape';\n\nexport function dilation2D(args: {\n  inputs: Dilation2DInputs,\n  attrs: Dilation2DAttrs,\n  backend: MathBackendWebGL\n}) {\n  const {inputs, backend, attrs} = args;\n  const {x, filter} = inputs;\n  const {strides, pad, dilations} = attrs;\n\n  const convInfo = backend_util.computeDilation2DInfo(\n      x.shape as [number, number, number, number],\n      filter.shape as [number, number, number], strides, pad,\n      'NHWC' /* dataFormat */, dilations);\n  let out: TensorInfo;\n\n  const program = new Dilation2DProgram(convInfo);\n  out = backend.runWebGLProgram(program, [x, filter], 'float32');\n\n  const outReshaped =\n      reshape({inputs: {x: out}, backend, attrs: {shape: convInfo.outShape}});\n  backend.disposeIntermediateTensorInfo(out);\n\n  return outReshaped;\n}\n\nexport const dilation2DConfig: KernelConfig = {\n  kernelName: Dilation2D,\n  backendName: 'webgl',\n  kernelFunc: dilation2D as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}