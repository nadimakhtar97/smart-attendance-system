{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: _ref => {\n    let {\n      inputs,\n      attrs,\n      backend\n    } = _ref;\n    const {\n      x\n    } = inputs;\n    const {\n      filterSize,\n      strides,\n      pad,\n      includeBatchInIndex\n    } = attrs;\n    const cpuBackend = backend;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n    const values = cpuBackend.data.get(x.dataId).values;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n    const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n    const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n    return [{\n      dataId: pooledDataId,\n      shape: convInfo.outShape,\n      dtype: x.dtype\n    }, {\n      dataId: indexesDataId,\n      shape: convInfo.outShape,\n      dtype: 'int32'\n    }];\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,iBAAR,QAAiF,uBAAjF;AACA,SAAQC,YAAR,QAAqD,uBAArD;AAEA,SAAQC,gBAAR,QAA+B,aAA/B;AAEA,SAAQC,qBAAR,QAAoC,0BAApC;AAEA,OAAO,MAAMC,uBAAuB,GAAiB;AACnDC,YAAU,EAAEL,iBADuC;AAEnDM,aAAW,EAAE,KAFsC;AAGnDC,YAAU,EAAE,QAA6B;AAAA,QAA5B;AAACC,YAAD;AAASC,WAAT;AAAgBC;AAAhB,KAA4B;AACvC,UAAM;AAACC;AAAD,QAAMH,MAAZ;AACA,UAAM;AAACI,gBAAD;AAAaC,aAAb;AAAsBC,SAAtB;AAA2BC;AAA3B,QACFN,KADJ;AAEA,UAAMO,UAAU,GAAGN,OAAnB;AACAR,oBAAgB,CAACS,CAAD,EAAI,mBAAJ,CAAhB;AAEA,UAAMM,MAAM,GAAGD,UAAU,CAACE,IAAX,CAAgBC,GAAhB,CAAoBR,CAAC,CAACS,MAAtB,EAA8BH,MAA7C;AACA,UAAMI,QAAQ,GAAGpB,YAAY,CAACqB,iBAAb,CACbX,CAAC,CAACY,KADW,EACgCX,UADhC,EAC4CC,OAD5C,EAEb,CAAC,CAAD,EAAI,CAAJ,CAFa,EAELC,GAFK,CAAjB;AAGA,UAAM,CAACU,MAAD,EAASC,OAAT,IAAoBtB,qBAAqB,CAC3Cc,MAD2C,EACnCN,CAAC,CAACY,KADiC,EAC1BZ,CAAC,CAACe,KADwB,EACjBX,mBADiB,EACIM,QADJ,CAA/C;AAGA,UAAMM,YAAY,GACdX,UAAU,CAACY,KAAX,CAAiBJ,MAAjB,EAAyCH,QAAQ,CAACQ,QAAlD,EAA4DlB,CAAC,CAACe,KAA9D,CADJ;AAEA,UAAMI,aAAa,GACfd,UAAU,CAACY,KAAX,CAAiBH,OAAjB,EAAwCJ,QAAQ,CAACQ,QAAjD,EAA2DlB,CAAC,CAACe,KAA7D,CADJ;AAEA,WAAO,CACL;AAACN,YAAM,EAAEO,YAAT;AAAuBJ,WAAK,EAAEF,QAAQ,CAACQ,QAAvC;AAAiDH,WAAK,EAAEf,CAAC,CAACe;AAA1D,KADK,EAEL;AAACN,YAAM,EAAEU,aAAT;AAAwBP,WAAK,EAAEF,QAAQ,CAACQ,QAAxC;AAAkDH,WAAK,EAAE;AAAzD,KAFK,CAAP;AAID;AAzBkD,CAA9C","names":["MaxPoolWithArgmax","backend_util","assertNotComplex","maxPoolWithArgmaxImpl","maxPoolWithArgmaxConfig","kernelName","backendName","kernelFunc","inputs","attrs","backend","x","filterSize","strides","pad","includeBatchInIndex","cpuBackend","values","data","get","dataId","convInfo","computePool2DInfo","shape","pooled","indexes","dtype","pooledDataId","write","outShape","indexesDataId"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/MaxPoolWithArgmax.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {MaxPoolWithArgmax, MaxPoolWithArgmaxAttrs, MaxPoolWithArgmaxInputs} from '@tensorflow/tfjs-core';\nimport {backend_util, KernelConfig, TypedArray} from '@tensorflow/tfjs-core';\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\n\nimport {maxPoolWithArgmaxImpl} from './MaxPoolWithArgmax_impl';\n\nexport const maxPoolWithArgmaxConfig: KernelConfig = {\n  kernelName: MaxPoolWithArgmax,\n  backendName: 'cpu',\n  kernelFunc: ({inputs, attrs, backend}) => {\n    const {x} = inputs as MaxPoolWithArgmaxInputs;\n    const {filterSize, strides, pad, includeBatchInIndex} =\n        attrs as {} as MaxPoolWithArgmaxAttrs;\n    const cpuBackend = backend as MathBackendCPU;\n    assertNotComplex(x, 'MaxPoolWithArgmax');\n\n    const values = cpuBackend.data.get(x.dataId).values as TypedArray;\n    const convInfo = backend_util.computePool2DInfo(\n        x.shape as [number, number, number, number], filterSize, strides,\n        [1, 1], pad);\n    const [pooled, indexes] = maxPoolWithArgmaxImpl(\n        values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n\n    const pooledDataId =\n        cpuBackend.write(pooled as Float32Array, convInfo.outShape, x.dtype);\n    const indexesDataId =\n        cpuBackend.write(indexes as Int32Array, convInfo.outShape, x.dtype);\n    return [\n      {dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype},\n      {dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32'}\n    ];\n  }\n};\n"]},"metadata":{},"sourceType":"module"}