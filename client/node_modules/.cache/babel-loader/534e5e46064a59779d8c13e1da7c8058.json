{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { FromPixels } from '@tensorflow/tfjs-core';\nimport { TextureUsage } from '../tex_util';\nimport { FromPixelsProgram } from './FromPixels_utils/from_pixels_gpu';\nimport { FromPixelsPackedProgram } from './FromPixels_utils/from_pixels_packed_gpu';\nexport const fromPixelsConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels\n};\nlet fromPixels2DContext;\n\nfunction fromPixels(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  let {\n    pixels\n  } = inputs;\n  const {\n    numChannels\n  } = attrs;\n  const isVideo = typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement;\n  const isImage = typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  const texShape = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32'); // This is a byte texture with pixels.\n\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(backend.getTexture(tempPixelHandle.dataId), pixels);\n  const program = env().getBool('WEBGL_PACK') ? new FromPixelsPackedProgram(outShape) : new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,QAAwD,uBAAxD;AACA,SAAQC,UAAR,QAA4D,uBAA5D;AAGA,SAAQC,YAAR,QAA2B,aAA3B;AAEA,SAAQC,iBAAR,QAAgC,oCAAhC;AACA,SAAQC,uBAAR,QAAsC,2CAAtC;AAEA,OAAO,MAAMC,gBAAgB,GAAiB;AAC5CC,YAAU,EAAEL,UADgC;AAE5CM,aAAW,EAAE,OAF+B;AAG5CC,YAAU,EAAEC;AAHgC,CAAvC;AAMP,IAAIC,mBAAJ;;AAEA,SAASD,UAAT,CAAoBE,IAApB,EAIC;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,MAAI;AAACI;AAAD,MAAWH,MAAf;AACA,QAAM;AAACI;AAAD,MAAgBF,KAAtB;AAEA,QAAMG,OAAO,GAAG,OAAQC,gBAAR,KAA8B,WAA9B,IACZH,MAAM,YAAYG,gBADtB;AAEA,QAAMC,OAAO,GAAG,OAAQC,gBAAR,KAA8B,WAA9B,IACZL,MAAM,YAAYK,gBADtB;AAEA,QAAM,CAACC,KAAD,EAAQC,MAAR,IAAkBL,OAAO,GAC3B,CACGF,MAA2B,CAACQ,UAD/B,EAEGR,MAA2B,CAACS,WAF/B,CAD2B,GAK3B,CAACT,MAAM,CAACM,KAAR,EAAeN,MAAM,CAACO,MAAtB,CALJ;AAOA,QAAMG,QAAQ,GAAqB,CAACH,MAAD,EAASD,KAAT,CAAnC;AACA,QAAMK,QAAQ,GAAG,CAACJ,MAAD,EAASD,KAAT,EAAgBL,WAAhB,CAAjB;;AAEA,MAAIG,OAAO,IAAIF,OAAf,EAAwB;AACtB,QAAIP,mBAAmB,IAAI,IAA3B,EAAiC;AAC/BA,yBAAmB,GAAGiB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,EAAiCC,UAAjC,CAA4C,IAA5C,CAAtB;AACD;;AAEDnB,uBAAmB,CAACoB,MAApB,CAA2BT,KAA3B,GAAmCA,KAAnC;AACAX,uBAAmB,CAACoB,MAApB,CAA2BR,MAA3B,GAAoCA,MAApC;AACAZ,uBAAmB,CAACqB,SAApB,CACIhB,MADJ,EAEI,CAFJ,EAEO,CAFP,EAEUM,KAFV,EAEiBC,MAFjB;AAGAP,UAAM,GAAGL,mBAAmB,CAACoB,MAA7B;AACD;;AAED,QAAME,eAAe,GAAGnB,OAAO,CAACoB,cAAR,CAAuBR,QAAvB,EAAiC,OAAjC,CAAxB,CAhCD,CAiCC;;AACAZ,SAAO,CAACqB,OAAR,CAAgBC,GAAhB,CAAoBH,eAAe,CAACI,MAApC,EAA4CC,KAA5C,GAAoDnC,YAAY,CAACoC,MAAjE;AACAzB,SAAO,CAAC0B,KAAR,CAAcC,wBAAd,CACI3B,OAAO,CAAC4B,UAAR,CAAmBT,eAAe,CAACI,MAAnC,CADJ,EACgDrB,MADhD;AAEA,QAAM2B,OAAO,GAAG1C,GAAG,GAAG2C,OAAN,CAAc,YAAd,IACZ,IAAIvC,uBAAJ,CAA4BsB,QAA5B,CADY,GAEZ,IAAIvB,iBAAJ,CAAsBuB,QAAtB,CAFJ;AAGA,QAAMkB,GAAG,GAAG/B,OAAO,CAACgC,eAAR,CAAwBH,OAAxB,EAAiC,CAACV,eAAD,CAAjC,EAAoD,OAApD,CAAZ;AACAnB,SAAO,CAACiC,WAAR,CAAoBd,eAAe,CAACI,MAApC;AACA,SAAOQ,GAAP;AACD","names":["env","FromPixels","TextureUsage","FromPixelsProgram","FromPixelsPackedProgram","fromPixelsConfig","kernelName","backendName","kernelFunc","fromPixels","fromPixels2DContext","args","inputs","backend","attrs","pixels","numChannels","isVideo","HTMLVideoElement","isImage","HTMLImageElement","width","height","videoWidth","videoHeight","texShape","outShape","document","createElement","getContext","canvas","drawImage","tempPixelHandle","makeTensorInfo","texData","get","dataId","usage","PIXELS","gpgpu","uploadPixelDataToTexture","getTexture","program","getBool","res","runWebGLProgram","disposeData"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/FromPixels.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {TextureUsage} from '../tex_util';\n\nimport {FromPixelsProgram} from './FromPixels_utils/from_pixels_gpu';\nimport {FromPixelsPackedProgram} from './FromPixels_utils/from_pixels_packed_gpu';\n\nexport const fromPixelsConfig: KernelConfig = {\n  kernelName: FromPixels,\n  backendName: 'webgl',\n  kernelFunc: fromPixels as {} as KernelFunc,\n};\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\nfunction fromPixels(args: {\n  inputs: FromPixelsInputs,\n  backend: MathBackendWebGL,\n  attrs: FromPixelsAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  let {pixels} = inputs;\n  const {numChannels} = attrs;\n\n  const isVideo = typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement;\n  const isImage = typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement;\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n\n  const texShape: [number, number] = [height, width];\n  const outShape = [height, width, numChannels];\n\n  if (isImage || isVideo) {\n    if (fromPixels2DContext == null) {\n      fromPixels2DContext = document.createElement('canvas').getContext('2d');\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement | HTMLImageElement | ImageBitmap,\n        0, 0, width, height);\n    pixels = fromPixels2DContext.canvas;\n  }\n\n  const tempPixelHandle = backend.makeTensorInfo(texShape, 'int32');\n  // This is a byte texture with pixels.\n  backend.texData.get(tempPixelHandle.dataId).usage = TextureUsage.PIXELS;\n  backend.gpgpu.uploadPixelDataToTexture(\n      backend.getTexture(tempPixelHandle.dataId), pixels as ImageData);\n  const program = env().getBool('WEBGL_PACK') ?\n      new FromPixelsPackedProgram(outShape) :\n      new FromPixelsProgram(outShape);\n  const res = backend.runWebGLProgram(program, [tempPixelHandle], 'int32');\n  backend.disposeData(tempPixelHandle.dataId);\n  return res;\n}\n"]},"metadata":{},"sourceType":"module"}