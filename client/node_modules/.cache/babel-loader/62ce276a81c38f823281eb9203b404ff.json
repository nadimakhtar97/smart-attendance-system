{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, env } from '@tensorflow/tfjs-core';\nimport { simpleAbsImplCPU } from '../kernel_utils/shared';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nconst ABS = `return abs(x);`;\nexport function abs(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs; // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program;\n\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const absConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,EAAwBC,GAAxB,QAAoF,uBAApF;AAGA,SAAQC,gBAAR,QAA+B,wBAA/B;AACA,SAAQC,cAAR,QAA6B,gBAA7B;AACA,SAAQC,oBAAR,QAAmC,uBAAnC;AAEA,MAAMC,GAAG,GAAG,gBAAZ;AAEA,OAAM,SAAUC,GAAV,CAAcC,IAAd,EAAkE;AAEtE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG;AAAD,MAAMF,MAAZ,CAHsE,CAKtE;AACA;;AACA,MAAIC,OAAO,CAACE,kBAAR,CAA2B,CAACD,CAAD,CAA3B,KAAmCA,CAAC,CAACE,KAAF,KAAY,WAAnD,EAAgE;AAC9D,UAAMC,KAAK,GAAGJ,OAAO,CAACK,OAAR,CAAgBC,GAAhB,CAAoBL,CAAC,CAACM,MAAtB,CAAd;AACA,UAAMC,SAAS,GAAGf,gBAAgB,CAACW,KAAK,CAACK,MAAP,CAAlC;AACA,WAAOT,OAAO,CAACU,cAAR,CAAuBT,CAAC,CAACU,KAAzB,EAAgCV,CAAC,CAACE,KAAlC,EAAyCK,SAAzC,CAAP;AACD;;AAED,MAAII,OAAJ;;AACA,MAAIpB,GAAG,GAAGqB,OAAN,CAAc,6BAAd,CAAJ,EAAkD;AAChDD,WAAO,GAAG,IAAIjB,oBAAJ,CAAyBM,CAAC,CAACU,KAA3B,EAAkCf,GAAlC,CAAV;AACD,GAFD,MAEO;AACLgB,WAAO,GAAG,IAAIlB,cAAJ,CAAmBO,CAAC,CAACU,KAArB,EAA4Bf,GAA5B,CAAV;AACD;;AACD,SAAOI,OAAO,CAACc,eAAR,CAAwBF,OAAxB,EAAiC,CAACX,CAAD,CAAjC,EAAsCA,CAAC,CAACE,KAAxC,CAAP;AACD;AAED,OAAO,MAAMY,SAAS,GAAiB;AACrCC,YAAU,EAAEzB,GADyB;AAErC0B,aAAW,EAAE,OAFwB;AAGrCC,YAAU,EAAErB;AAHyB,CAAhC","names":["Abs","env","simpleAbsImplCPU","UnaryOpProgram","UnaryOpPackedProgram","ABS","abs","args","inputs","backend","x","shouldExecuteOnCPU","dtype","xData","texData","get","dataId","outValues","values","makeTensorInfo","shape","program","getBool","runWebGLProgram","absConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Abs.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Abs, AbsInputs, env, KernelConfig, KernelFunc, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {simpleAbsImplCPU} from '../kernel_utils/shared';\nimport {UnaryOpProgram} from '../unaryop_gpu';\nimport {UnaryOpPackedProgram} from '../unaryop_packed_gpu';\n\nconst ABS = `return abs(x);`;\n\nexport function abs(args: {inputs: AbsInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  // TODO: handle cases when x is complex. Once the cpu implementation\n  // can handle complex values, refactor to use unaryKernelFunc.\n  if (backend.shouldExecuteOnCPU([x]) && x.dtype !== 'complex64') {\n    const xData = backend.texData.get(x.dataId);\n    const outValues = simpleAbsImplCPU(xData.values as TypedArray);\n    return backend.makeTensorInfo(x.shape, x.dtype, outValues);\n  }\n\n  let program: UnaryOpProgram|UnaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_UNARY_OPERATIONS')) {\n    program = new UnaryOpPackedProgram(x.shape, ABS);\n  } else {\n    program = new UnaryOpProgram(x.shape, ABS);\n  }\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const absConfig: KernelConfig = {\n  kernelName: Abs,\n  backendName: 'webgl',\n  kernelFunc: abs as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}