{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n  const minusOne = util.createScalarValue(-1, xDtype);\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  assertNotComplex(x, 'neg');\n  const xVals = backend.data.get(x.dataId).values;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA4CA,GAA5C,EAAsFC,IAAtF,QAAiG,uBAAjG;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,YAAR,QAA2B,YAA3B;AAEA,OAAM,SAAUC,OAAV,CAAkBC,KAAlB,EAAqCC,MAArC,EAAuDC,MAAvD,EAAuE;AAE3E,QAAMC,QAAQ,GACVP,IAAI,CAACQ,iBAAL,CAAuB,CAAC,CAAxB,EAA8CF,MAA9C,CADJ;AAEA,SAAOJ,YAAY,CAAC,EAAD,EAAKG,MAAL,EAAaE,QAAb,EAAuBH,KAAvB,EAA8BE,MAA9B,CAAnB;AACD;AAED,OAAM,SAAUG,GAAV,CAAcC,IAAd,EAAkE;AAEtE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG;AAAD,MAAMF,MAAZ;AAEAV,kBAAgB,CAACY,CAAD,EAAI,KAAJ,CAAhB;AAEA,QAAMT,KAAK,GAAGQ,OAAO,CAACE,IAAR,CAAaC,GAAb,CAAiBF,CAAC,CAACG,MAAnB,EAA2BC,MAAzC;AACA,QAAM,CAACC,GAAD,EAAMC,QAAN,IAAkBhB,OAAO,CAACC,KAAD,EAAQS,CAAC,CAACO,KAAV,EAAiBP,CAAC,CAACQ,KAAnB,CAA/B;AAEA,SAAOT,OAAO,CAACU,cAAR,CAAuBH,QAAvB,EAAiCN,CAAC,CAACQ,KAAnC,EAA0CH,GAA1C,CAAP;AACD;AAED,OAAO,MAAMK,SAAS,GAAiB;AACrCC,YAAU,EAAEzB,GADyB;AAErC0B,aAAW,EAAE,KAFwB;AAGrCC,YAAU,EAAEjB;AAHyB,CAAhC","names":["Neg","util","assertNotComplex","multiplyImpl","negImpl","xVals","xShape","xDtype","minusOne","createScalarValue","neg","args","inputs","backend","x","data","get","dataId","values","res","newShape","shape","dtype","makeTensorInfo","negConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Neg.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, KernelConfig, KernelFunc, Neg, TensorInfo, TypedArray, UnaryInputs, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {multiplyImpl} from './Multiply';\n\nexport function negImpl(xVals: TypedArray, xShape: number[], xDtype: DataType):\n    [TypedArray, number[]] {\n  const minusOne =\n      util.createScalarValue(-1 as {} as 'float32', xDtype) as TypedArray;\n  return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\n\nexport function neg(args: {inputs: UnaryInputs, backend: MathBackendCPU}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  assertNotComplex(x, 'neg');\n\n  const xVals = backend.data.get(x.dataId).values as TypedArray;\n  const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n\n  return backend.makeTensorInfo(newShape, x.dtype, res);\n}\n\nexport const negConfig: KernelConfig = {\n  kernelName: Neg,\n  backendName: 'cpu',\n  kernelFunc: neg as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}