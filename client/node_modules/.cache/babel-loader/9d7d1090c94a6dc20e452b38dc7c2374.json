{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Tile, util } from '@tensorflow/tfjs-core';\nimport { tileImplCPU } from '../kernel_utils/shared';\nimport { TileProgram } from '../tile_gpu';\nexport function tile(params) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = params;\n  const {\n    x\n  } = inputs;\n  const {\n    reps\n  } = attrs; // tile gpu program cannot handle rank > 5 case.\n\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ? data.map(d => util.decodeString(d)) : data;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n  return output;\n}\nexport const tileConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,EAAsDC,IAAtD,EAA+FC,IAA/F,QAA0G,uBAA1G;AAGA,SAAQC,WAAR,QAA0B,wBAA1B;AACA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,OAAM,SAAUC,IAAV,CACFC,MADE,EACuE;AAE3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,MAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI;AAAD,MAASF,KAAf,CAJ2E,CAM3E;;AACA,MAAIC,CAAC,CAACE,KAAF,KAAY,QAAZ,IAAwBF,CAAC,CAACG,KAAF,CAAQC,MAAR,GAAiB,CAA7C,EAAgD;AAC9C;AACA;AACA,UAAMC,IAAI,GAAGP,OAAO,CAACQ,QAAR,CAAiBN,CAAC,CAACO,MAAnB,CAAb;AACA,UAAMC,KAAK,GAAGR,CAAC,CAACE,KAAF,KAAY,QAAZ,GACTG,IAAqB,CAACI,GAAtB,CAA0BC,CAAC,IAAIlB,IAAI,CAACmB,YAAL,CAAkBD,CAAlB,CAA/B,CADS,GAEVL,IAFJ;AAGA,UAAMO,GAAG,GAAGtB,MAAM,CAACU,CAAC,CAACG,KAAH,EAAUH,CAAC,CAACE,KAAZ,EAAmBM,KAAnB,CAAlB;AACA,UAAMK,MAAM,GAAGpB,WAAW,CAACmB,GAAD,EAAMX,IAAN,CAA1B;AACA,WAAOH,OAAO,CAACgB,cAAR,CAAuBD,MAAM,CAACV,KAA9B,EAAqCU,MAAM,CAACX,KAA5C,EAAmDW,MAAM,CAACE,MAA1D,CAAP;AACD;;AAED,QAAMC,OAAO,GAAG,IAAItB,WAAJ,CAAgBM,CAAC,CAACG,KAAlB,EAAyBF,IAAzB,CAAhB;AACA,QAAMgB,MAAM,GAAGnB,OAAO,CAACoB,eAAR,CAAwBF,OAAxB,EAAiC,CAAChB,CAAD,CAAjC,EAAsCA,CAAC,CAACE,KAAxC,CAAf;AAEA,SAAOe,MAAP;AACD;AAED,OAAO,MAAME,UAAU,GAAiB;AACtCC,YAAU,EAAE7B,IAD0B;AAEtC8B,aAAW,EAAE,OAFyB;AAGtCC,YAAU,EAAE3B;AAH0B,CAAjC","names":["buffer","Tile","util","tileImplCPU","TileProgram","tile","params","inputs","backend","attrs","x","reps","dtype","shape","length","data","readSync","dataId","value","map","d","decodeString","buf","outBuf","makeTensorInfo","values","program","output","runWebGLProgram","tileConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Tile.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {buffer, KernelConfig, KernelFunc, TensorInfo, Tile, TileAttrs, TileInputs, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {tileImplCPU} from '../kernel_utils/shared';\nimport {TileProgram} from '../tile_gpu';\n\nexport function tile(\n    params: {inputs: TileInputs, backend: MathBackendWebGL, attrs: TileAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = params;\n  const {x} = inputs;\n  const {reps} = attrs;\n\n  // tile gpu program cannot handle rank > 5 case.\n  if (x.dtype === 'string' || x.shape.length > 5) {\n    // Even thought string tensor is always on CPU, just to be consistent on how\n    // to access tensor data.\n    const data = backend.readSync(x.dataId);\n    const value = x.dtype === 'string' ?\n        (data as Uint8Array[]).map(d => util.decodeString(d)) :\n        data as TypedArray;\n    const buf = buffer(x.shape, x.dtype, value);\n    const outBuf = tileImplCPU(buf, reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n  }\n\n  const program = new TileProgram(x.shape, reps);\n  const output = backend.runWebGLProgram(program, [x], x.dtype);\n\n  return output;\n}\n\nexport const tileConfig: KernelConfig = {\n  kernelName: Tile,\n  backendName: 'webgl',\n  kernelFunc: tile as {} as KernelFunc,\n};\n"]},"metadata":{},"sourceType":"module"}