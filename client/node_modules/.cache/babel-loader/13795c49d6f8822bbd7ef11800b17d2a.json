{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat } from '../common';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { BaseConv, preprocessConv2DInput } from './convolutional';\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\n\nexport function depthwiseConv2d(x, depthwiseKernel) {\n  let strides = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [1, 1];\n  let padding = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'valid';\n  let dataFormat = arguments.length > 4 ? arguments[4] : undefined;\n  let dilationRate = arguments.length > 5 ? arguments[5] : undefined;\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n\n    if (x.rank !== 4) {\n      throw new ValueError(`Input for depthwiseConv2d is required to be 4-D, but is instead ` + `${x.rank}-D`);\n    }\n\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(`depthwiseKernel is required to be 4-D, but is instead ` + `${depthwiseKernel.rank}-D`);\n    }\n\n    y = tfc.depthwiseConv2d(y, depthwiseKernel, strides, padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n\n    return y;\n  });\n}\nexport class DepthwiseConv2D extends BaseConv {\n  constructor(args) {\n    super(2, args);\n    this.depthwiseKernel = null;\n    this.depthMultiplier = args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  build(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n\n    if (inputShape.length < 4) {\n      throw new ValueError(`Inputs to DepthwiseConv2D should have rank 4. ` + `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.built = true;\n  }\n\n  call(inputs, kwargs) {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null); // TODO(cais): Add support for dilation.\n\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape) {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  getConfig() {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] = serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] = serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] = serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n\n}\n/** @nocollapse */\n\nDepthwiseConv2D.className = 'DepthwiseConv2D';\nserialization.registerClass(DepthwiseConv2D);","map":{"version":3,"mappings":"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","names":["tfc","serialization","tidy","imageDataFormat","K","checkDataFormat","getConstraint","serializeConstraint","ValueError","getInitializer","serializeInitializer","getRegularizer","serializeRegularizer","convOutputLength","getExactlyOneShape","getExactlyOneTensor","BaseConv","preprocessConv2DInput","depthwiseConv2d","x","depthwiseKernel","strides","padding","dataFormat","dilationRate","y","rank","transpose","DepthwiseConv2D","constructor","args","depthMultiplier","depthwiseInitializer","DEFAULT_KERNEL_INITIALIZER","depthwiseConstraint","depthwiseRegularizer","build","inputShape","length","JSON","stringify","channelAxis","inputDim","depthwiseKernelShape","kernelSize","addWeight","useBias","bias","biasInitializer","biasRegularizer","biasConstraint","built","call","inputs","kwargs","outputs","read","biasAdd","activation","apply","computeOutputShape","rows","cols","outFilters","outRows","outCols","getConfig","config","registerClass"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-layers/src/layers/convolutional_depthwise.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n\n/**\n * TensorFlow.js Layers: Depthwise Convolutional Layers\n */\n\nimport * as tfc from '@tensorflow/tfjs-core';\nimport {serialization, Tensor, Tensor4D, tidy} from '@tensorflow/tfjs-core';\n\nimport {imageDataFormat} from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport {checkDataFormat} from '../common';\nimport {Constraint, ConstraintIdentifier, getConstraint, serializeConstraint} from '../constraints';\nimport {ValueError} from '../errors';\nimport {getInitializer, Initializer, InitializerIdentifier, serializeInitializer} from '../initializers';\nimport {DataFormat, Shape} from '../keras_format/common';\nimport {getRegularizer, Regularizer, RegularizerIdentifier, serializeRegularizer} from '../regularizers';\nimport {Kwargs} from '../types';\nimport {convOutputLength} from '../utils/conv_utils';\nimport {getExactlyOneShape, getExactlyOneTensor} from '../utils/types_utils';\nimport {LayerVariable} from '../variables';\n\nimport {BaseConv, BaseConvLayerArgs, ConvLayerArgs, preprocessConv2DInput} from './convolutional';\n\n/**\n * 2D convolution with separable filters.\n * @param x Input tensor.\n * @param depthwiseKernel Convolution kernel for depthwise convolution.\n * @param strides Strides (Array of two integers).\n * @param padding Padding model.\n * @param dataFormat Data format.\n * @param dilationRate Array of two integers, dilation rates for the separable\n *   convolution.\n * @returns Output tensor.\n * @throws ValueError If depthwiseKernel is not a 4D array.\n */\nexport function depthwiseConv2d(\n    x: Tensor, depthwiseKernel: Tensor, strides: [number, number] = [1, 1],\n    padding = 'valid', dataFormat?: DataFormat,\n    dilationRate?: [number, number]): Tensor {\n  return tidy(() => {\n    if (dataFormat == null) {\n      dataFormat = imageDataFormat();\n    }\n    checkDataFormat(dataFormat);\n    let y = preprocessConv2DInput(x, dataFormat);\n    if (x.rank !== 4) {\n      throw new ValueError(\n          `Input for depthwiseConv2d is required to be 4-D, but is instead ` +\n          `${x.rank}-D`);\n    }\n    if (depthwiseKernel.rank !== 4) {\n      throw new ValueError(\n          `depthwiseKernel is required to be 4-D, but is instead ` +\n          `${depthwiseKernel.rank}-D`);\n    }\n    y = tfc.depthwiseConv2d(\n        y as Tensor4D, depthwiseKernel as Tensor4D, strides,\n        padding === 'same' ? 'same' : 'valid', 'NHWC', dilationRate);\n    if (dataFormat === 'channelsFirst') {\n      y = tfc.transpose(y, [0, 3, 1, 2]);\n    }\n    return y;\n  });\n}\n\nexport declare interface DepthwiseConv2DLayerArgs extends BaseConvLayerArgs {\n  /**\n   * An integer or Array of 2 integers, specifying the width and height of the\n   * 2D convolution window. Can be a single integer to specify the same value\n   * for all spatial dimensions.\n   */\n  kernelSize: number|[number, number];\n\n  /**\n   * The number of depthwise convolution output channels for each input\n   * channel.\n   * The total number of depthwise convolution output channels will be equal to\n   * `filtersIn * depthMultiplier`.\n   * Default: 1.\n   */\n  depthMultiplier?: number;\n\n  /**\n   * Initializer for the depthwise kernel matrix.\n   * Default: GlorotNormal.\n   */\n  depthwiseInitializer?: InitializerIdentifier|Initializer;\n\n  /**\n   * Constraint for the depthwise kernel matrix.\n   */\n  depthwiseConstraint?: ConstraintIdentifier|Constraint;\n\n  /**\n   * Regulzarizer function for the depthwise kernel matrix.\n   */\n  depthwiseRegularizer?: RegularizerIdentifier|Regularizer;\n}\n\nexport class DepthwiseConv2D extends BaseConv {\n  /** @nocollapse */\n  static className = 'DepthwiseConv2D';\n  private readonly depthMultiplier: number;\n  private readonly depthwiseInitializer: Initializer;\n  private readonly depthwiseConstraint: Constraint;\n  private readonly depthwiseRegularizer: Regularizer;\n\n  private depthwiseKernel: LayerVariable = null;\n\n  constructor(args: DepthwiseConv2DLayerArgs) {\n    super(2, args as ConvLayerArgs);\n    this.depthMultiplier =\n        args.depthMultiplier == null ? 1 : args.depthMultiplier;\n    this.depthwiseInitializer = getInitializer(\n        args.depthwiseInitializer || this.DEFAULT_KERNEL_INITIALIZER);\n    this.depthwiseConstraint = getConstraint(args.depthwiseConstraint);\n    this.depthwiseRegularizer = getRegularizer(args.depthwiseRegularizer);\n  }\n\n  build(inputShape: Shape|Shape[]): void {\n    inputShape = getExactlyOneShape(inputShape);\n    if (inputShape.length < 4) {\n      throw new ValueError(\n          `Inputs to DepthwiseConv2D should have rank 4. ` +\n          `Received input shape: ${JSON.stringify(inputShape)}.`);\n    }\n    const channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new ValueError(\n          'The channel dimension of the inputs to DepthwiseConv2D should ' +\n          `be defined, but is not (${inputShape[channelAxis]}).`);\n    }\n    const inputDim = inputShape[channelAxis];\n    const depthwiseKernelShape: Shape = [\n      this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier\n    ];\n\n    this.depthwiseKernel = this.addWeight(\n        'depthwise_kernel', depthwiseKernelShape, null,\n        this.depthwiseInitializer, this.depthwiseRegularizer, true,\n        this.depthwiseConstraint);\n    if (this.useBias) {\n      this.bias = this.addWeight(\n          'bias', [inputDim * this.depthMultiplier], null, this.biasInitializer,\n          this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n    this.built = true;\n  }\n\n  call(inputs: Tensor|Tensor[], kwargs: Kwargs): Tensor|Tensor[] {\n    return tidy(() => {\n      inputs = getExactlyOneTensor(inputs);\n      let outputs = depthwiseConv2d(\n          inputs, this.depthwiseKernel.read(), this.strides as [number, number],\n          this.padding, this.dataFormat, null);\n      // TODO(cais): Add support for dilation.\n      if (this.useBias) {\n        outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n      }\n      if (this.activation != null) {\n        outputs = this.activation.apply(outputs);\n      }\n      return outputs;\n    });\n  }\n\n  computeOutputShape(inputShape: Shape|Shape[]): Shape|Shape[] {\n    inputShape = getExactlyOneShape(inputShape);\n    const rows =\n        this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    const cols =\n        this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    const outFilters = this.dataFormat === 'channelsFirst' ?\n        inputShape[1] * this.depthMultiplier :\n        inputShape[3] * this.depthMultiplier;\n    const outRows = convOutputLength(\n        rows, this.kernelSize[0], this.padding, this.strides[0]);\n    const outCols = convOutputLength(\n        cols, this.kernelSize[1], this.padding, this.strides[1]);\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      // In this case, assume 'channelsLast'.\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  }\n\n  getConfig(): serialization.ConfigDict {\n    const config = super.getConfig();\n    config['depthMultiplier'] = this.depthMultiplier;\n    config['depthwiseInitializer'] =\n        serializeInitializer(this.depthwiseInitializer);\n    config['depthwiseRegularizer'] =\n        serializeRegularizer(this.depthwiseRegularizer);\n    config['depthwiseConstraint'] =\n        serializeConstraint(this.depthwiseRegularizer);\n    return config;\n  }\n}\nserialization.registerClass(DepthwiseConv2D);\n"]},"metadata":{},"sourceType":"module"}