{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { io, Tensor } from '@tensorflow/tfjs-core';\nimport { OperationMapper } from '../operations/operation_mapper';\nimport { GraphExecutor } from './graph_executor';\nimport { ResourceManager } from './resource_manager';\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\n\nexport class GraphModel {\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(modelUrl) {\n    let loadOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.modelUrl = modelUrl;\n    this.loadOptions = loadOptions;\n    this.version = 'n/a';\n\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n\n    this.resourceManager = new ResourceManager();\n  } // Returns the version information for the tensorflow model GraphDef.\n\n\n  get modelVersion() {\n    return this.version;\n  }\n\n  get inputNodes() {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes() {\n    return this.executor.outputNodes;\n  }\n\n  get inputs() {\n    return this.executor.inputs;\n  }\n\n  get outputs() {\n    return this.executor.outputs;\n  }\n\n  get weights() {\n    return this.executor.weightMap;\n  }\n\n  get metadata() {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature() {\n    return this.signature;\n  }\n\n  findIOHandler() {\n    const path = this.modelUrl;\n\n    if (path.load != null) {\n      // Path is an IO Handler.\n      this.handler = path;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path, this.loadOptions);\n\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) load handlers for ` + `URL '${[path]}'`);\n      }\n\n      this.handler = handlers[0];\n    }\n  }\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n\n\n  async load() {\n    this.findIOHandler();\n\n    if (this.handler.load == null) {\n      throw new Error('Cannot proceed with model loading because the IOHandler provided ' + 'does not have the `load` method implemented.');\n    }\n\n    const artifacts = await this.handler.load();\n    return this.loadSync(artifacts);\n  }\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n\n\n  loadSync(artifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology;\n    let signature;\n\n    if (this.artifacts.userDefinedMetadata != null && this.artifacts.userDefinedMetadata.signature != null) {\n      signature = // tslint:disable-next-line:no-any\n      this.artifacts.userDefinedMetadata.signature;\n    } else {\n      signature = this.artifacts.signature;\n    }\n\n    this.signature = signature;\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap = io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap); // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null && artifacts.modelInitializer.node != null) {\n      const initializer = OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap; // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n\n    return true;\n  }\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n\n\n  async save(handlerOrURL, config) {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n\n      if (handlers.length === 0) {\n        throw new Error(`Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(`Found more than one (${handlers.length}) save handlers for ` + `URL '${handlerOrURL}'`);\n      }\n\n      handlerOrURL = handlers[0];\n    }\n\n    if (handlerOrURL.save == null) {\n      throw new Error('GraphModel.save() cannot proceed because the IOHandler ' + 'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  predict(inputs, config) {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  normalizeInputs(inputs) {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error('Input tensor count mismatch,' + `the graph model has ${this.inputNodes.length} placeholders, ` + `while there are ${inputs.length} input tensors.`);\n    }\n\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = inputs[i];\n      return map;\n    }, {});\n  }\n\n  normalizeOutputs(outputs) {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  execute(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  async executeAsync(inputs, outputs) {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Get intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  getIntermediateTensors() {\n    return this.executor.getIntermediateTensors();\n  }\n  /**\n   * Dispose intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  disposeIntermediateTensors() {\n    this.executor.disposeIntermediateTensors();\n  }\n\n  convertTensorMapToTensorsMap(map) {\n    return Object.keys(map).reduce((newMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n\n\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n\n    this.resourceManager.dispose();\n  }\n\n}\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\n\nexport async function loadGraphModel(modelUrl) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (modelUrl == null) {\n    throw new Error('modelUrl in loadGraphModel() cannot be null. Please provide a url ' + 'or an IOHandler that loads the model');\n  }\n\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if (modelUrl.load == null) {\n      if (!modelUrl.endsWith('/')) {\n        modelUrl = modelUrl + '/';\n      }\n\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}","map":{"version":3,"mappings":"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","names":["io","Tensor","OperationMapper","GraphExecutor","ResourceManager","TFHUB_SEARCH_PARAM","DEFAULT_MODEL_NAME","GraphModel","constructor","modelUrl","loadOptions","resourceManager","modelVersion","version","inputNodes","executor","outputNodes","inputs","outputs","weights","weightMap","metadata","artifacts","userDefinedMetadata","modelSignature","signature","findIOHandler","path","load","handler","requestInit","browserHTTPRequest","handlers","getLoadHandlers","length","push","Error","loadSync","graph","modelTopology","versions","producer","minConsumer","decodeWeights","weightData","weightSpecs","Instance","transformGraph","convertTensorMapToTensorsMap","modelInitializer","node","initializer","executeAsync","save","handlerOrURL","config","getSaveHandlers","predict","execute","normalizeInputs","Array","isArray","reduce","map","inputName","i","normalizeOutputs","result","getIntermediateTensors","disposeIntermediateTensors","Object","keys","newMap","key","dispose","loadGraphModel","options","fromTFHub","endsWith","model"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/executor/graph_model.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {InferenceModel, io, ModelPredictConfig, NamedTensorMap, Tensor} from '@tensorflow/tfjs-core';\n\nimport * as tensorflow from '../data/compiled_api';\nimport {NamedTensorsMap, TensorInfo} from '../data/types';\nimport {OperationMapper} from '../operations/operation_mapper';\n\nimport {GraphExecutor} from './graph_executor';\nimport {ResourceManager} from './resource_manager';\n\nexport const TFHUB_SEARCH_PARAM = '?tfjs-format=file';\nexport const DEFAULT_MODEL_NAME = 'model.json';\n/**\n * A `tf.GraphModel` is a directed, acyclic graph built from a\n * SavedModel GraphDef and allows inference execution.\n *\n * A `tf.GraphModel` can only be created by loading from a model converted from\n * a [TensorFlow SavedModel](https://www.tensorflow.org/guide/saved_model) using\n * the command line converter tool and loaded via `tf.loadGraphModel`.\n *\n * @doc {heading: 'Models', subheading: 'Classes'}\n */\nexport class GraphModel implements InferenceModel {\n  private executor: GraphExecutor;\n  private version = 'n/a';\n  private handler: io.IOHandler;\n  private artifacts: io.ModelArtifacts;\n  private initializer: GraphExecutor;\n  private resourceManager: ResourceManager;\n  private signature: tensorflow.ISignatureDef;\n\n  // Returns the version information for the tensorflow model GraphDef.\n  get modelVersion(): string {\n    return this.version;\n  }\n\n  get inputNodes(): string[] {\n    return this.executor.inputNodes;\n  }\n\n  get outputNodes(): string[] {\n    return this.executor.outputNodes;\n  }\n\n  get inputs(): TensorInfo[] {\n    return this.executor.inputs;\n  }\n\n  get outputs(): TensorInfo[] {\n    return this.executor.outputs;\n  }\n\n  get weights(): NamedTensorsMap {\n    return this.executor.weightMap;\n  }\n\n  get metadata(): {} {\n    return this.artifacts.userDefinedMetadata;\n  }\n\n  get modelSignature(): {} {\n    return this.signature;\n  }\n\n  /**\n   * @param modelUrl url for the model, or an `io.IOHandler`.\n   * @param weightManifestUrl url for the weight file generated by\n   * scripts/convert.py script.\n   * @param requestOption options for Request, which allows to send credentials\n   * and custom headers.\n   * @param onProgress Optional, progress callback function, fired periodically\n   * before the load is completed.\n   */\n  constructor(\n      private modelUrl: string|io.IOHandler,\n      private loadOptions: io.LoadOptions = {}) {\n    if (loadOptions == null) {\n      this.loadOptions = {};\n    }\n    this.resourceManager = new ResourceManager();\n  }\n\n  private findIOHandler() {\n    const path = this.modelUrl;\n    if ((path as io.IOHandler).load != null) {\n      // Path is an IO Handler.\n      this.handler = path as io.IOHandler;\n    } else if (this.loadOptions.requestInit != null) {\n      this.handler = io.browserHTTPRequest(path as string, this.loadOptions);\n    } else {\n      const handlers = io.getLoadHandlers(path as string, this.loadOptions);\n      if (handlers.length === 0) {\n        // For backward compatibility: if no load handler can be found,\n        // assume it is a relative http path.\n        handlers.push(io.browserHTTPRequest(path as string, this.loadOptions));\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) load handlers for ` +\n            `URL '${[path]}'`);\n      }\n      this.handler = handlers[0];\n    }\n  }\n\n  /**\n   * Loads the model and weight files, construct the in memory weight map and\n   * compile the inference graph.\n   */\n  async load(): Promise<boolean> {\n    this.findIOHandler();\n    if (this.handler.load == null) {\n      throw new Error(\n          'Cannot proceed with model loading because the IOHandler provided ' +\n          'does not have the `load` method implemented.');\n    }\n    const artifacts = await this.handler.load();\n\n    return this.loadSync(artifacts);\n  }\n\n  /**\n   * Synchronously construct the in memory weight map and\n   * compile the inference graph. Also initialize hashtable if any.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  loadSync(artifacts: io.ModelArtifacts) {\n    this.artifacts = artifacts;\n    const graph = this.artifacts.modelTopology as tensorflow.IGraphDef;\n\n    let signature;\n    if (this.artifacts.userDefinedMetadata != null &&\n        this.artifacts.userDefinedMetadata.signature != null) {\n      signature =  // tslint:disable-next-line:no-any\n          (this.artifacts.userDefinedMetadata as any).signature as\n          tensorflow.ISignatureDef;\n    } else {\n      signature = this.artifacts.signature;\n    }\n    this.signature = signature;\n\n    this.version = `${graph.versions.producer}.${graph.versions.minConsumer}`;\n    const weightMap =\n        io.decodeWeights(this.artifacts.weightData, this.artifacts.weightSpecs);\n    this.executor = new GraphExecutor(\n        OperationMapper.Instance.transformGraph(graph, this.signature));\n    this.executor.weightMap = this.convertTensorMapToTensorsMap(weightMap);\n    // Attach a model-level resourceManager to each executor to share resources,\n    // such as `HashTable`.\n    this.executor.resourceManager = this.resourceManager;\n\n    if (artifacts.modelInitializer != null &&\n        (artifacts.modelInitializer as tensorflow.IGraphDef).node != null) {\n      const initializer =\n          OperationMapper.Instance.transformGraph(artifacts.modelInitializer);\n      this.initializer = new GraphExecutor(initializer);\n      this.initializer.weightMap = this.executor.weightMap;\n      // Attach a model-level resourceManager to the initializer, the\n      // hashTables created from when executing the initializer will be stored\n      // in the resourceManager.\n      this.initializer.resourceManager = this.resourceManager;\n      this.initializer.executeAsync({}, []);\n    }\n\n    return true;\n  }\n\n  /**\n   * Save the configuration and/or weights of the GraphModel.\n   *\n   * An `IOHandler` is an object that has a `save` method of the proper\n   * signature defined. The `save` method manages the storing or\n   * transmission of serialized data (\"artifacts\") that represent the\n   * model's topology and weights onto or via a specific medium, such as\n   * file downloads, local storage, IndexedDB in the web browser and HTTP\n   * requests to a server. TensorFlow.js provides `IOHandler`\n   * implementations for a number of frequently used saving mediums, such as\n   * `tf.io.browserDownloads` and `tf.io.browserLocalStorage`. See `tf.io`\n   * for more details.\n   *\n   * This method also allows you to refer to certain types of `IOHandler`s\n   * as URL-like string shortcuts, such as 'localstorage://' and\n   * 'indexeddb://'.\n   *\n   * Example 1: Save `model`'s topology and weights to browser [local\n   * storage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage);\n   * then load it back.\n   *\n   * ```js\n   * const modelUrl =\n   *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n   * const model = await tf.loadGraphModel(modelUrl);\n   * const zeros = tf.zeros([1, 224, 224, 3]);\n   * model.predict(zeros).print();\n   *\n   * const saveResults = await model.save('localstorage://my-model-1');\n   *\n   * const loadedModel = await tf.loadGraphModel('localstorage://my-model-1');\n   * console.log('Prediction from loaded model:');\n   * model.predict(zeros).print();\n   * ```\n   *\n   * @param handlerOrURL An instance of `IOHandler` or a URL-like,\n   * scheme-based string shortcut for `IOHandler`.\n   * @param config Options for saving the model.\n   * @returns A `Promise` of `SaveResult`, which summarizes the result of\n   * the saving, such as byte sizes of the saved artifacts for the model's\n   *   topology and weight values.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes', ignoreCI: true}\n   */\n  async save(handlerOrURL: io.IOHandler|string, config?: io.SaveConfig):\n      Promise<io.SaveResult> {\n    if (typeof handlerOrURL === 'string') {\n      const handlers = io.getSaveHandlers(handlerOrURL);\n      if (handlers.length === 0) {\n        throw new Error(\n            `Cannot find any save handlers for URL '${handlerOrURL}'`);\n      } else if (handlers.length > 1) {\n        throw new Error(\n            `Found more than one (${handlers.length}) save handlers for ` +\n            `URL '${handlerOrURL}'`);\n      }\n      handlerOrURL = handlers[0];\n    }\n    if (handlerOrURL.save == null) {\n      throw new Error(\n          'GraphModel.save() cannot proceed because the IOHandler ' +\n          'provided does not have the `save` attribute defined.');\n    }\n\n    return handlerOrURL.save(this.artifacts);\n  }\n\n  /**\n   * Execute the inference for the input tensors.\n   *\n   * @param input The input tensors, when there is single input for the model,\n   * inputs param should be a `tf.Tensor`. For models with mutliple inputs,\n   * inputs params should be in either `tf.Tensor`[] if the input order is\n   * fixed, or otherwise NamedTensorMap format.\n   *\n   * For model with multiple inputs, we recommend you use NamedTensorMap as the\n   * input type, if you use `tf.Tensor`[], the order of the array needs to\n   * follow the\n   * order of inputNodes array. @see {@link GraphModel.inputNodes}\n   *\n   * You can also feed any intermediate nodes using the NamedTensorMap as the\n   * input type. For example, given the graph\n   *    InputNode => Intermediate => OutputNode,\n   * you can execute the subgraph Intermediate => OutputNode by calling\n   *    model.execute('IntermediateNode' : tf.tensor(...));\n   *\n   * This is useful for models that uses tf.dynamic_rnn, where the intermediate\n   * state needs to be fed manually.\n   *\n   * For batch inference execution, the tensors for each input need to be\n   * concatenated together. For example with mobilenet, the required input shape\n   * is [1, 244, 244, 3], which represents the [batch, height, width, channel].\n   * If we are provide a batched data of 100 images, the input tensor should be\n   * in the shape of [100, 244, 244, 3].\n   *\n   * @param config Prediction configuration for specifying the batch size and\n   * output node names. Currently the batch size option is ignored for graph\n   * model.\n   *\n   * @returns Inference result tensors. The output would be single `tf.Tensor`\n   * if model has single output node, otherwise Tensor[] or NamedTensorMap[]\n   * will be returned for model with multiple outputs.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  predict(inputs: Tensor|Tensor[]|NamedTensorMap, config?: ModelPredictConfig):\n      Tensor|Tensor[]|NamedTensorMap {\n    return this.execute(inputs, this.outputNodes);\n  }\n\n  private normalizeInputs(inputs: Tensor|Tensor[]|\n                          NamedTensorMap): NamedTensorMap {\n    if (!(inputs instanceof Tensor) && !Array.isArray(inputs)) {\n      // The input is already a NamedTensorMap.\n      return inputs;\n    }\n    inputs = Array.isArray(inputs) ? inputs : [inputs];\n    if (inputs.length !== this.inputNodes.length) {\n      throw new Error(\n          'Input tensor count mismatch,' +\n          `the graph model has ${this.inputNodes.length} placeholders, ` +\n          `while there are ${inputs.length} input tensors.`);\n    }\n    return this.inputNodes.reduce((map, inputName, i) => {\n      map[inputName] = (inputs as Tensor[])[i];\n      return map;\n    }, {} as NamedTensorMap);\n  }\n\n  private normalizeOutputs(outputs: string|string[]): string[] {\n    outputs = outputs || this.outputNodes;\n    return !Array.isArray(outputs) ? [outputs] : outputs;\n  }\n\n  /**\n   * Executes inference for the model for given input tensors.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no\n   * outputs are specified, the default outputs of the model would be used.\n   * You can inspect intermediate nodes of the model by adding them to the\n   * outputs array.\n   *\n   * @returns A single tensor if provided with a single output or no outputs\n   * are provided and there is only one default output, otherwise return a\n   * tensor array. The order of the tensor array is the same as the outputs\n   * if provided, otherwise the order of outputNodes attribute of the model.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  execute(inputs: Tensor|Tensor[]|NamedTensorMap, outputs?: string|string[]):\n      Tensor|Tensor[] {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = this.executor.execute(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n  /**\n   * Executes inference for the model for given input tensors in async\n   * fashion, use this method when your model contains control flow ops.\n   * @param inputs tensor, tensor array or tensor map of the inputs for the\n   * model, keyed by the input node names.\n   * @param outputs output node name from the Tensorflow model, if no outputs\n   * are specified, the default outputs of the model would be used. You can\n   * inspect intermediate nodes of the model by adding them to the outputs\n   * array.\n   *\n   * @returns A Promise of single tensor if provided with a single output or\n   * no outputs are provided and there is only one default output, otherwise\n   * return a tensor map.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  async executeAsync(\n      inputs: Tensor|Tensor[]|NamedTensorMap,\n      outputs?: string|string[]): Promise<Tensor|Tensor[]> {\n    inputs = this.normalizeInputs(inputs);\n    outputs = this.normalizeOutputs(outputs);\n    const result = await this.executor.executeAsync(inputs, outputs);\n    return result.length > 1 ? result : result[0];\n  }\n\n  /**\n   * Get intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  getIntermediateTensors(): NamedTensorsMap {\n    return this.executor.getIntermediateTensors();\n  }\n\n  /**\n   * Dispose intermediate tensors for model debugging mode (flag\n   * KEEP_INTERMEDIATE_TENSORS is true).\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  disposeIntermediateTensors() {\n    this.executor.disposeIntermediateTensors();\n  }\n\n  private convertTensorMapToTensorsMap(map: NamedTensorMap): NamedTensorsMap {\n    return Object.keys(map).reduce((newMap: NamedTensorsMap, key) => {\n      newMap[key] = [map[key]];\n      return newMap;\n    }, {});\n  }\n\n  /**\n   * Releases the memory used by the weight tensors and resourceManager.\n   *\n   * @doc {heading: 'Models', subheading: 'Classes'}\n   */\n  dispose() {\n    this.executor.dispose();\n\n    if (this.initializer) {\n      this.initializer.dispose();\n    }\n\n    this.resourceManager.dispose();\n  }\n}\n\n/**\n * Load a graph model given a URL to the model definition.\n *\n * Example of loading MobileNetV2 from a URL and making a prediction with a\n * zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://storage.googleapis.com/tfjs-models/savedmodel/mobilenet_v2_1.0_224/model.json';\n * const model = await tf.loadGraphModel(modelUrl);\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n *\n * Example of loading MobileNetV2 from a TF Hub URL and making a prediction with\n * a zeros input:\n *\n * ```js\n * const modelUrl =\n *    'https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/2';\n * const model = await tf.loadGraphModel(modelUrl, {fromTFHub: true});\n * const zeros = tf.zeros([1, 224, 224, 3]);\n * model.predict(zeros).print();\n * ```\n * @param modelUrl The url or an `io.IOHandler` that loads the model.\n * @param options Options for the HTTP request, which allows to send credentials\n *    and custom headers.\n *\n * @doc {heading: 'Models', subheading: 'Loading'}\n */\nexport async function loadGraphModel(\n    modelUrl: string|io.IOHandler,\n    options: io.LoadOptions = {}): Promise<GraphModel> {\n  if (modelUrl == null) {\n    throw new Error(\n        'modelUrl in loadGraphModel() cannot be null. Please provide a url ' +\n        'or an IOHandler that loads the model');\n  }\n  if (options == null) {\n    options = {};\n  }\n\n  if (options.fromTFHub) {\n    if ((modelUrl as io.IOHandler).load == null) {\n      if (!(modelUrl as string).endsWith('/')) {\n        modelUrl = (modelUrl as string) + '/';\n      }\n      modelUrl = `${modelUrl}${DEFAULT_MODEL_NAME}${TFHUB_SEARCH_PARAM}`;\n    }\n  }\n  const model = new GraphModel(modelUrl, options);\n  await model.load();\n  return model;\n}\n"]},"metadata":{},"sourceType":"module"}