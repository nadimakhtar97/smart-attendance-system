{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { Tensor } from './tensor';\nimport { assert, flatten, inferDtype, isTypedArray, toTypedArray } from './util';\nexport function inferShape(val, dtype) {\n  let firstElem = val;\n\n  if (isTypedArray(val)) {\n    return dtype === 'string' ? [] : [val.length];\n  }\n\n  if (!Array.isArray(val)) {\n    return []; // Scalar.\n  }\n\n  const shape = [];\n\n  while (Array.isArray(firstElem) || isTypedArray(firstElem) && dtype !== 'string') {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n\n  if (Array.isArray(val) && env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n\n  return shape;\n}\n\nfunction deepAssertShapeConsistency(val, shape, indices) {\n  indices = indices || [];\n\n  if (!Array.isArray(val) && !isTypedArray(val)) {\n    assert(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` + `but should be an array/TypedArray of ${shape[0]} elements`);\n    return;\n  }\n\n  assert(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` + `but is an array of ${val.length} elements`);\n  assert(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` + `elements, but has ${val.length} elements`);\n  const subShape = shape.slice(1);\n\n  for (let i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\n\nfunction assertDtype(expectedDtype, actualDType, argName, functionName) {\n  if (expectedDtype === 'string_or_numeric') {\n    return;\n  }\n\n  if (expectedDtype == null) {\n    throw new Error(`Expected dtype cannot be null.`);\n  }\n\n  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType || expectedDtype === 'numeric' && actualDType === 'string') {\n    throw new Error(`Argument '${argName}' passed to '${functionName}' must ` + `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n  }\n}\n\nexport function convertToTensor(x, argName, functionName) {\n  let parseAsDtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'numeric';\n\n  if (x instanceof Tensor) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n\n  let inferredDtype = inferDtype(x); // If the user expects a bool/int/float, use that info to update the\n  // inferredDtype when it is not a string.\n\n  if (inferredDtype !== 'string' && ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype;\n  }\n\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n\n  if (x == null || !isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' && typeof x !== 'boolean' && typeof x !== 'string') {\n    const type = x == null ? 'null' : x.constructor.name;\n    throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` + `Tensor or TensorLike, but got '${type}'`);\n  }\n\n  const inferredShape = inferShape(x, inferredDtype);\n\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x];\n  }\n\n  const skipTypedArray = true;\n  const values = inferredDtype !== 'string' ? toTypedArray(x, inferredDtype) : flatten(x, [], skipTypedArray);\n  return ENGINE.makeTensor(values, inferredShape, inferredDtype);\n}\nexport function convertToTensorArray(arg, argName, functionName) {\n  let parseAsDtype = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'numeric';\n\n  if (!Array.isArray(arg)) {\n    throw new Error(`Argument ${argName} passed to ${functionName} must be a ` + '`Tensor[]` or `TensorLike[]`');\n  }\n\n  const tensors = arg;\n  return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}","map":{"version":3,"mappings":"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","names":["ENGINE","env","Tensor","assert","flatten","inferDtype","isTypedArray","toTypedArray","inferShape","val","dtype","firstElem","length","Array","isArray","shape","push","getBool","deepAssertShapeConsistency","indices","join","subShape","slice","i","concat","assertDtype","expectedDtype","actualDType","argName","functionName","Error","convertToTensor","x","parseAsDtype","inferredDtype","indexOf","type","constructor","name","inferredShape","skipTypedArray","values","makeTensor","convertToTensorArray","arg","tensors","map","t"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/tensor_util_env.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from './engine';\nimport {env} from './environment';\nimport {Tensor} from './tensor';\nimport {DataType, TensorLike} from './types';\nimport {assert, flatten, inferDtype, isTypedArray, toTypedArray} from './util';\n\nexport function inferShape(val: TensorLike, dtype?: DataType): number[] {\n  let firstElem: typeof val = val;\n\n  if (isTypedArray(val)) {\n    return dtype === 'string' ? [] : [val.length];\n  }\n  if (!Array.isArray(val)) {\n    return [];  // Scalar.\n  }\n  const shape: number[] = [];\n\n  while (Array.isArray(firstElem) ||\n         isTypedArray(firstElem) && dtype !== 'string') {\n    shape.push(firstElem.length);\n    firstElem = firstElem[0];\n  }\n  if (Array.isArray(val) &&\n      env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n    deepAssertShapeConsistency(val, shape, []);\n  }\n\n  return shape;\n}\n\nfunction deepAssertShapeConsistency(\n    val: TensorLike, shape: number[], indices: number[]) {\n  indices = indices || [];\n  if (!(Array.isArray(val)) && !isTypedArray(val)) {\n    assert(\n        shape.length === 0,\n        () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n    return;\n  }\n  assert(\n      shape.length > 0,\n      () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n          `but is an array of ${val.length} elements`);\n  assert(\n      val.length === shape[0],\n      () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n          `elements, but has ${val.length} elements`);\n  const subShape = shape.slice(1);\n  for (let i = 0; i < val.length; ++i) {\n    deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n  }\n}\n\nfunction assertDtype(\n    expectedDtype: DataType|'numeric'|'string_or_numeric',\n    actualDType: DataType, argName: string, functionName: string) {\n  if (expectedDtype === 'string_or_numeric') {\n    return;\n  }\n  if (expectedDtype == null) {\n    throw new Error(`Expected dtype cannot be null.`);\n  }\n  if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n      expectedDtype === 'numeric' && actualDType === 'string') {\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must ` +\n        `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n  }\n}\n\nexport function convertToTensor<T extends Tensor>(\n    x: T|TensorLike, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric'|'string_or_numeric' = 'numeric'): T {\n  if (x instanceof Tensor) {\n    assertDtype(parseAsDtype, x.dtype, argName, functionName);\n    return x;\n  }\n  let inferredDtype = inferDtype(x);\n  // If the user expects a bool/int/float, use that info to update the\n  // inferredDtype when it is not a string.\n  if (inferredDtype !== 'string' &&\n      ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n    inferredDtype = parseAsDtype as DataType;\n  }\n  assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n\n  if ((x == null) ||\n      (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n       typeof x !== 'boolean' && typeof x !== 'string')) {\n    const type = x == null ? 'null' : (x as {}).constructor.name;\n    throw new Error(\n        `Argument '${argName}' passed to '${functionName}' must be a ` +\n        `Tensor or TensorLike, but got '${type}'`);\n  }\n  const inferredShape = inferShape(x, inferredDtype);\n  if (!isTypedArray(x) && !Array.isArray(x)) {\n    x = [x] as number[];\n  }\n  const skipTypedArray = true;\n  const values = inferredDtype !== 'string' ?\n      toTypedArray(x, inferredDtype as DataType) :\n      flatten(x as string[], [], skipTypedArray) as string[];\n  return ENGINE.makeTensor(values, inferredShape, inferredDtype) as T;\n}\n\nexport function convertToTensorArray<T extends Tensor>(\n    arg: Array<T|TensorLike>, argName: string, functionName: string,\n    parseAsDtype: DataType|'numeric'|'string_or_numeric' = 'numeric'): T[] {\n  if (!Array.isArray(arg)) {\n    throw new Error(\n        `Argument ${argName} passed to ${functionName} must be a ` +\n        '`Tensor[]` or `TensorLike[]`');\n  }\n  const tensors = arg as T[];\n  return tensors.map(\n      (t, i) =>\n          convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n"]},"metadata":{},"sourceType":"module"}