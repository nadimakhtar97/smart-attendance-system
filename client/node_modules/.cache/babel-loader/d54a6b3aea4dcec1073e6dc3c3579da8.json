{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherNd, util } from '@tensorflow/tfjs-core';\nimport { GatherNDProgram } from '../gather_nd_gpu';\nimport { gatherNdImplCPU } from '../kernel_utils/shared';\nimport { reshape } from './Reshape';\nexport function gatherNd(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    params,\n    indices\n  } = inputs;\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n  const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numSlices, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: params\n    },\n    backend,\n    attrs: {\n      shape: [util.sizeFromShape(params.shape) / sliceSize, sliceSize]\n    }\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) || params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId);\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize, strides, params.shape, paramsSize);\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n\n  const program = new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices], flattenX.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: resultShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  return reshaped;\n}\nexport const gatherNdConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd\n};","map":{"version":3,"mappings":"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","names":["backend_util","GatherNd","util","GatherNDProgram","gatherNdImplCPU","reshape","gatherNd","args","inputs","backend","params","indices","indicesShape","shape","sliceRank","length","paramsSize","sizeFromShape","resultShape","numSlices","sliceSize","strides","prepareAndValidate","flattenIndices","x","attrs","flattenX","shouldExecuteOnCPU","dtype","indicesData","readSync","dataId","paramsBuf","bufferSync","outValue","makeTensorInfo","values","program","res","runWebGLProgram","reshaped","disposeIntermediateTensorInfo","gatherNdConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/GatherNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, GatherNd, GatherNdInputs, KernelConfig, KernelFunc, TensorInfo, TypedArray, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {GatherNDProgram} from '../gather_nd_gpu';\nimport {gatherNdImplCPU} from '../kernel_utils/shared';\n\nimport {reshape} from './Reshape';\n\nexport function gatherNd(\n    args: {inputs: GatherNdInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {params, indices} = inputs;\n\n  const indicesShape = indices.shape;\n  const sliceRank = indicesShape[indicesShape.length - 1];\n  const paramsSize = util.sizeFromShape(params.shape);\n\n  const [resultShape, numSlices, sliceSize, strides] =\n      backend_util.prepareAndValidate(params, indices);\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numSlices, sliceRank]}});\n  const flattenX = reshape({\n    inputs: {x: params},\n    backend,\n    attrs: {shape: [(util.sizeFromShape(params.shape) / sliceSize), sliceSize]}\n  });\n\n  if (backend.shouldExecuteOnCPU([params, indices]) ||\n      params.dtype === 'string') {\n    const indicesData = backend.readSync(indices.dataId) as TypedArray;\n    const paramsBuf = backend.bufferSync(params);\n    const outValue = gatherNdImplCPU(\n        indicesData, paramsBuf, params.dtype, numSlices, sliceRank, sliceSize,\n        strides, params.shape, paramsSize);\n\n    return backend.makeTensorInfo(resultShape, params.dtype, outValue.values);\n  }\n  const program =\n      new GatherNDProgram(sliceRank, strides, [numSlices, sliceSize]);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices], flattenX.dtype);\n\n  const reshaped =\n      reshape({inputs: {x: res}, backend, attrs: {shape: resultShape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return reshaped;\n}\n\nexport const gatherNdConfig: KernelConfig = {\n  kernelName: GatherNd,\n  backendName: 'webgl',\n  kernelFunc: gatherNd as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}