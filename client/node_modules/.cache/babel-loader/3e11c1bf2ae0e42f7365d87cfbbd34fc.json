{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { gather } from './gather';\nimport { reshape } from './reshape';\nimport { squeeze } from './squeeze';\nimport { whereAsync } from './where_async';\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\n\nasync function booleanMaskAsync_(tensor, mask, axis) {\n  const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n  const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n  util.assert(maskDim > 0, () => 'mask cannot be scalar');\n  util.assertShapesMatch(tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape, `mask's shape must match the first K dimensions of tensor's shape,`);\n  let leadingSize = 1;\n\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n\n  const targetTensorShape = tensorShape.slice(0, axisFrom).concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = reshape($tensor, targetTensorShape);\n  const reshapedMask = reshape($mask, [-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = squeeze(positivePositions, [1]);\n  const res = gather(reshapedTensor, indices, axisFrom); // Ensure no memory leak.\n\n  if (tensor !== $tensor) {\n    $tensor.dispose();\n  }\n\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n  return res;\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,MAAR,QAAqB,UAArB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,UAAR,QAAyB,eAAzB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,eAAeC,iBAAf,CACIC,MADJ,EAC+BC,IAD/B,EAEIC,IAFJ,EAEiB;AACf,QAAMC,OAAO,GAAGV,eAAe,CAACO,MAAD,EAAS,QAAT,EAAmB,UAAnB,CAA/B;AACA,QAAMI,KAAK,GAAGX,eAAe,CAACQ,IAAD,EAAO,MAAP,EAAe,UAAf,EAA2B,MAA3B,CAA7B;AAEA,QAAMI,QAAQ,GAAGH,IAAI,IAAI,IAAR,GAAe,CAAf,GAAmBA,IAApC;AACA,QAAMI,OAAO,GAAGF,KAAK,CAACG,IAAtB;AACA,QAAMC,WAAW,GAAGL,OAAO,CAACM,KAA5B;AAEAf,MAAI,CAACgB,MAAL,CAAYJ,OAAO,GAAG,CAAtB,EAAyB,MAAM,uBAA/B;AACAZ,MAAI,CAACiB,iBAAL,CACIH,WAAW,CAACI,KAAZ,CAAkBP,QAAlB,EAA4BA,QAAQ,GAAGC,OAAvC,CADJ,EACqDF,KAAK,CAACK,KAD3D,EAEI,mEAFJ;AAIA,MAAII,WAAW,GAAG,CAAlB;;AACA,OAAK,IAAIC,CAAC,GAAGT,QAAb,EAAuBS,CAAC,GAAGT,QAAQ,GAAGC,OAAtC,EAA+CQ,CAAC,EAAhD,EAAoD;AAClDD,eAAW,IAAIL,WAAW,CAACM,CAAD,CAA1B;AACD;;AACD,QAAMC,iBAAiB,GACnBP,WAAW,CAACI,KAAZ,CAAkB,CAAlB,EAAqBP,QAArB,EACKW,MADL,CACY,CAACH,WAAD,CADZ,EAC2BL,WAAW,CAACI,KAAZ,CAAkBP,QAAQ,GAAGC,OAA7B,CAD3B,CADJ;AAGA,QAAMW,cAAc,GAAGrB,OAAO,CAACO,OAAD,EAAUY,iBAAV,CAA9B;AACA,QAAMG,YAAY,GAAGtB,OAAO,CAACQ,KAAD,EAAQ,CAAC,CAAC,CAAF,CAAR,CAA5B;AACA,QAAMe,iBAAiB,GAAG,MAAMrB,UAAU,CAACoB,YAAD,CAA1C;AACA,QAAME,OAAO,GAAGvB,OAAO,CAACsB,iBAAD,EAAoB,CAAC,CAAD,CAApB,CAAvB;AAEA,QAAME,GAAG,GAAG1B,MAAM,CAACsB,cAAD,EAAiBG,OAAjB,EAA0Bf,QAA1B,CAAlB,CAzBe,CA2Bf;;AACA,MAAIL,MAAM,KAAKG,OAAf,EAAwB;AACtBA,WAAO,CAACmB,OAAR;AACD;;AACD,MAAIrB,IAAI,KAAKG,KAAb,EAAoB;AAClBA,SAAK,CAACkB,OAAN;AACD;;AACDF,SAAO,CAACE,OAAR;AACAL,gBAAc,CAACK,OAAf;AACAJ,cAAY,CAACI,OAAb;AACAH,mBAAiB,CAACG,OAAlB;AAEA,SAAOD,GAAP;AACD;;AAED,OAAO,MAAME,gBAAgB,GAAGxB,iBAAzB","names":["convertToTensor","util","gather","reshape","squeeze","whereAsync","booleanMaskAsync_","tensor","mask","axis","$tensor","$mask","axisFrom","maskDim","rank","tensorShape","shape","assert","assertShapesMatch","slice","leadingSize","i","targetTensorShape","concat","reshapedTensor","reshapedMask","positivePositions","indices","res","dispose","booleanMaskAsync"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/boolean_mask.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {gather} from './gather';\nimport {reshape} from './reshape';\nimport {squeeze} from './squeeze';\nimport {whereAsync} from './where_async';\n\n/**\n * Apply boolean mask to tensor.\n *\n * ```js\n * const tensor = tf.tensor2d([1, 2, 3, 4, 5, 6], [3, 2]);\n * const mask = tf.tensor1d([1, 0, 1], 'bool');\n * const result = await tf.booleanMaskAsync(tensor, mask);\n * result.print();\n * ```\n *\n * @param tensor N-D tensor.\n * @param mask K-D boolean tensor, K <= N and K must be known statically.\n * @param axis A 0-D int Tensor representing the axis in tensor to mask from.\n *     By default, axis is 0 which will mask from the first dimension.\n *     Otherwise K + axis <= N.\n *\n * @doc {heading: 'Tensors', subheading: 'Slicing and Joining'}\n */\nasync function booleanMaskAsync_(\n    tensor: Tensor|TensorLike, mask: Tensor|TensorLike,\n    axis?: number): Promise<Tensor> {\n  const $tensor = convertToTensor(tensor, 'tensor', 'boolMask');\n  const $mask = convertToTensor(mask, 'mask', 'boolMask', 'bool');\n\n  const axisFrom = axis == null ? 0 : axis;\n  const maskDim = $mask.rank;\n  const tensorShape = $tensor.shape;\n\n  util.assert(maskDim > 0, () => 'mask cannot be scalar');\n  util.assertShapesMatch(\n      tensorShape.slice(axisFrom, axisFrom + maskDim), $mask.shape,\n      `mask's shape must match the first K dimensions of tensor's shape,`);\n\n  let leadingSize = 1;\n  for (let i = axisFrom; i < axisFrom + maskDim; i++) {\n    leadingSize *= tensorShape[i];\n  }\n  const targetTensorShape =\n      tensorShape.slice(0, axisFrom)\n          .concat([leadingSize], tensorShape.slice(axisFrom + maskDim));\n  const reshapedTensor = reshape($tensor, targetTensorShape);\n  const reshapedMask = reshape($mask, [-1]);\n  const positivePositions = await whereAsync(reshapedMask);\n  const indices = squeeze(positivePositions, [1]);\n\n  const res = gather(reshapedTensor, indices, axisFrom);\n\n  // Ensure no memory leak.\n  if (tensor !== $tensor) {\n    $tensor.dispose();\n  }\n  if (mask !== $mask) {\n    $mask.dispose();\n  }\n  indices.dispose();\n  reshapedTensor.dispose();\n  reshapedMask.dispose();\n  positivePositions.dispose();\n\n  return res;\n}\n\nexport const booleanMaskAsync = booleanMaskAsync_;\n"]},"metadata":{},"sourceType":"module"}