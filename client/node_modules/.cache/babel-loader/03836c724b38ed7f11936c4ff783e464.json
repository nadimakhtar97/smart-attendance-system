{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, Multiply } from '@tensorflow/tfjs-core';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport { BinaryOpComplexProgram } from '../binaryop_complex_gpu';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { multiplyImplCPU as cpuMultiply } from '../kernel_utils/shared';\nimport { complex } from './Complex';\nconst MUL = 'return a * b;';\nexport function multiply(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    a,\n    b\n  } = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const realProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n    const inputs = [{\n      dataId: aData.complexTensorInfos.real.dataId,\n      dtype: aData.complexTensorInfos.real.dtype,\n      shape: a.shape\n    }, {\n      dataId: aData.complexTensorInfos.imag.dataId,\n      dtype: aData.complexTensorInfos.imag.dtype,\n      shape: a.shape\n    }, {\n      dataId: bData.complexTensorInfos.real.dataId,\n      dtype: bData.complexTensorInfos.real.dtype,\n      shape: b.shape\n    }, {\n      dataId: bData.complexTensorInfos.imag.dataId,\n      dtype: bData.complexTensorInfos.imag.dtype,\n      shape: b.shape\n    }];\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n    const complexOutput = complex({\n      inputs: {\n        real: realPart,\n        imag: imagPart\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart); // TODO(annxingyuan): CPU forwarding for complex inputs.\n\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(a.shape, b.shape, aData.values, bData.values, dtype);\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program;\n\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\nexport const multiplyConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};","map":{"version":3,"mappings":"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","names":["backend_util","env","Multiply","binaryop_complex_gpu","BinaryOpComplexProgram","BinaryOpProgram","BinaryOpPackedProgram","multiplyImplCPU","cpuMultiply","complex","MUL","multiply","args","inputs","backend","a","b","dtype","upcastType","aData","texData","get","dataId","bData","realProgram","COMPLEX_MULTIPLY","REAL","shape","imagProgram","IMAG","complexTensorInfos","real","imag","realPart","runWebGLProgram","imagPart","complexOutput","disposeIntermediateTensorInfo","shouldExecuteOnCPU","outValues","outShape","values","out","makeTensorInfo","outData","program","getBool","multiplyConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Multiply.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BinaryInputs, env, KernelConfig, Multiply, TensorInfo, TypedArray} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport * as binaryop_complex_gpu from '../binaryop_complex_gpu';\nimport {BinaryOpComplexProgram} from '../binaryop_complex_gpu';\nimport {BinaryOpProgram} from '../binaryop_gpu';\nimport {BinaryOpPackedProgram} from '../binaryop_packed_gpu';\nimport {multiplyImplCPU as cpuMultiply} from '../kernel_utils/shared';\n\nimport {complex} from './Complex';\n\nconst MUL = 'return a * b;';\n\nexport function multiply(\n    args: {inputs: BinaryInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {a, b} = inputs;\n  const dtype = backend_util.upcastType(a.dtype, b.dtype);\n\n  if (a.dtype === 'complex64') {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n\n    const realProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.REAL, a.shape, b.shape);\n    const imagProgram = new BinaryOpComplexProgram(\n        binaryop_complex_gpu.COMPLEX_MULTIPLY.IMAG, a.shape, b.shape);\n\n    const inputs = [\n      {\n        dataId: aData.complexTensorInfos.real.dataId,\n        dtype: aData.complexTensorInfos.real.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: aData.complexTensorInfos.imag.dataId,\n        dtype: aData.complexTensorInfos.imag.dtype,\n        shape: a.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.real.dataId,\n        dtype: bData.complexTensorInfos.real.dtype,\n        shape: b.shape\n      },\n      {\n        dataId: bData.complexTensorInfos.imag.dataId,\n        dtype: bData.complexTensorInfos.imag.dtype,\n        shape: b.shape\n      }\n    ];\n\n    const realPart = backend.runWebGLProgram(realProgram, inputs, 'float32');\n    const imagPart = backend.runWebGLProgram(imagProgram, inputs, 'float32');\n\n    const complexOutput =\n        complex({inputs: {real: realPart, imag: imagPart}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(imagPart);\n\n    // TODO(annxingyuan): CPU forwarding for complex inputs.\n    return complexOutput;\n  }\n\n  if (backend.shouldExecuteOnCPU([a, b])) {\n    const aData = backend.texData.get(a.dataId);\n    const bData = backend.texData.get(b.dataId);\n    const [outValues, outShape] = cpuMultiply(\n        a.shape, b.shape, aData.values as TypedArray,\n        bData.values as TypedArray, dtype);\n\n    const out = backend.makeTensorInfo(outShape, dtype);\n    const outData = backend.texData.get(out.dataId);\n    outData.values = outValues;\n    return out;\n  }\n\n  let program: BinaryOpProgram|BinaryOpPackedProgram;\n  if (env().getBool('WEBGL_PACK_BINARY_OPERATIONS')) {\n    program = new BinaryOpPackedProgram(MUL, a.shape, b.shape);\n  } else {\n    program = new BinaryOpProgram(MUL, a.shape, b.shape);\n  }\n\n  return backend.runWebGLProgram(program, [a, b], dtype);\n}\n\nexport const multiplyConfig: KernelConfig = {\n  kernelName: Multiply,\n  backendName: 'webgl',\n  kernelFunc: multiply\n};\n"]},"metadata":{},"sourceType":"module"}