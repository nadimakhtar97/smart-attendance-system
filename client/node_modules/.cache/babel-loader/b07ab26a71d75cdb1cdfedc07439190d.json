{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { assert } from '../util';\nimport { arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\n\nexport function purgeLocalStorageArtifacts() {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n    throw new Error('purgeLocalStorageModels() cannot proceed because local storage is ' + 'unavailable in the current environment.');\n  }\n\n  const LS = window.localStorage;\n  const purgedModelPaths = [];\n\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n\n  return purgedModelPaths;\n}\n\nfunction getModelKeys(path) {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata: [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys) {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\n\n\nfunction getModelPathFromKey(key) {\n  const items = key.split(PATH_SEPARATOR);\n\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ? key.slice(BrowserLocalStorage.URL_SCHEME.length) : key;\n}\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\n\n\nexport class BrowserLocalStorage {\n  constructor(modelPath) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' || typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error('The current environment does not support local storage.');\n    }\n\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error('For local storage, modelPath must not be null, undefined or empty.');\n    }\n\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n\n\n  async save(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error('BrowserLocalStorage.save() does not support saving model topology ' + 'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n      const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(this.keys.weightData, arrayBufferToBase64String(modelArtifacts.weightData)); // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n\n        const metadata = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ? modelArtifacts.signature : undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ? modelArtifacts.userDefinedMetadata : undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ? modelArtifacts.modelInitializer : undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ? modelArtifacts.trainingConfig : undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n        return {\n          modelArtifactsInfo\n        };\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n        throw new Error(`Failed to save model '${this.modelPath}' to local storage: ` + `size quota being exceeded is a possible cause of this failure: ` + `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` + `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` + `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n\n\n  async load() {\n    const info = JSON.parse(this.LS.getItem(this.keys.info));\n\n    if (info == null) {\n      throw new Error(`In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error('BrowserLocalStorage does not support loading non-JSON model ' + 'topology yet.');\n    }\n\n    const out = {}; // Load topology.\n\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n\n    if (topology == null) {\n      throw new Error(`In local storage, the topology of model '${this.modelPath}' ` + `is missing.`);\n    }\n\n    out.modelTopology = topology; // Load weight specs.\n\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n\n    if (weightSpecs == null) {\n      throw new Error(`In local storage, the weight specs of model '${this.modelPath}' ` + `are missing.`);\n    }\n\n    out.weightSpecs = weightSpecs; // Load meta-data fields.\n\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString);\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    } // Load weight data.\n\n\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n\n    if (weightDataBase64 == null) {\n      throw new Error(`In local storage, the binary weight values of model ` + `'${this.modelPath}' are missing.`);\n    }\n\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n    return out;\n  }\n\n}\nBrowserLocalStorage.URL_SCHEME = 'localstorage://';\nexport const localStorageRouter = url => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\n\nexport function browserLocalStorage(modelPath) {\n  return new BrowserLocalStorage(modelPath);\n}\nexport class BrowserLocalStorageManager {\n  constructor() {\n    assert(env().getBool('IS_BROWSER'), () => 'Current environment is not a web browser');\n    assert(typeof window === 'undefined' || typeof window.localStorage !== 'undefined', () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels() {\n    const out = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key));\n      }\n    }\n\n    return out;\n  }\n\n  async removeModel(path) {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n\n    const info = JSON.parse(this.LS.getItem(keys.info));\n    removeItems(keys);\n    return info;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,OAAO,UAAP;AACA,SAAQA,GAAR,QAAkB,gBAAlB;AAEA,SAAQC,MAAR,QAAqB,SAArB;AACA,SAAQC,yBAAR,EAAmCC,yBAAnC,EAA8DC,4BAA9D,QAAiG,YAAjG;AACA,SAAkBC,gBAAlB,QAAyC,mBAAzC;AAGA,MAAMC,cAAc,GAAG,GAAvB;AACA,MAAMC,WAAW,GAAG,qBAApB;AACA,MAAMC,WAAW,GAAG,MAApB;AACA,MAAMC,qBAAqB,GAAG,gBAA9B;AACA,MAAMC,mBAAmB,GAAG,cAA5B;AACA,MAAMC,kBAAkB,GAAG,aAA3B;AACA,MAAMC,qBAAqB,GAAG,gBAA9B;AAEA;;;;;;AAKA,OAAM,SAAUC,0BAAV,GAAoC;AACxC,MAAI,CAACb,GAAG,GAAGc,OAAN,CAAc,YAAd,CAAD,IAAgC,OAAOC,MAAP,KAAkB,WAAlD,IACA,OAAOA,MAAM,CAACC,YAAd,KAA+B,WADnC,EACgD;AAC9C,UAAM,IAAIC,KAAJ,CACF,uEACA,yCAFE,CAAN;AAGD;;AACD,QAAMC,EAAE,GAAGH,MAAM,CAACC,YAAlB;AACA,QAAMG,gBAAgB,GAAa,EAAnC;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,EAAE,CAACG,MAAvB,EAA+B,EAAED,CAAjC,EAAoC;AAClC,UAAME,GAAG,GAAGJ,EAAE,CAACI,GAAH,CAAOF,CAAP,CAAZ;AACA,UAAMG,MAAM,GAAGhB,WAAW,GAAGD,cAA7B;;AACA,QAAIgB,GAAG,CAACE,UAAJ,CAAeD,MAAf,KAA0BD,GAAG,CAACD,MAAJ,GAAaE,MAAM,CAACF,MAAlD,EAA0D;AACxDH,QAAE,CAACO,UAAH,CAAcH,GAAd;AACA,YAAMI,SAAS,GAAGC,mBAAmB,CAACL,GAAD,CAArC;;AACA,UAAIH,gBAAgB,CAACS,OAAjB,CAAyBF,SAAzB,MAAwC,CAAC,CAA7C,EAAgD;AAC9CP,wBAAgB,CAACU,IAAjB,CAAsBH,SAAtB;AACD;AACF;AACF;;AACD,SAAOP,gBAAP;AACD;;AA0BD,SAASW,YAAT,CAAsBC,IAAtB,EAAkC;AAChC,SAAO;AACLC,QAAI,EAAE,CAACzB,WAAD,EAAcwB,IAAd,EAAoBvB,WAApB,EAAiCyB,IAAjC,CAAsC3B,cAAtC,CADD;AAEL4B,YAAQ,EAAE,CAAC3B,WAAD,EAAcwB,IAAd,EAAoBtB,qBAApB,EAA2CwB,IAA3C,CAAgD3B,cAAhD,CAFL;AAGL6B,eAAW,EAAE,CAAC5B,WAAD,EAAcwB,IAAd,EAAoBrB,mBAApB,EAAyCuB,IAAzC,CAA8C3B,cAA9C,CAHR;AAIL8B,cAAU,EAAE,CAAC7B,WAAD,EAAcwB,IAAd,EAAoBpB,kBAApB,EAAwCsB,IAAxC,CAA6C3B,cAA7C,CAJP;AAKL+B,iBAAa,EACT,CAAC9B,WAAD,EAAcwB,IAAd,EAAoBnB,qBAApB,EAA2CqB,IAA3C,CAAgD3B,cAAhD;AANC,GAAP;AAQD;;AAED,SAASgC,WAAT,CAAqBC,IAArB,EAA2C;AACzC,OAAK,MAAMjB,GAAX,IAAkBkB,MAAM,CAACC,MAAP,CAAcF,IAAd,CAAlB,EAAuC;AACrCxB,UAAM,CAACC,YAAP,CAAoBS,UAApB,CAA+BH,GAA/B;AACD;AACF;AAED;;;;;;;;;AAOA,SAASK,mBAAT,CAA6BL,GAA7B,EAAwC;AACtC,QAAMoB,KAAK,GAAGpB,GAAG,CAACqB,KAAJ,CAAUrC,cAAV,CAAd;;AACA,MAAIoC,KAAK,CAACrB,MAAN,GAAe,CAAnB,EAAsB;AACpB,UAAM,IAAIJ,KAAJ,CAAU,uBAAuBK,GAAG,EAApC,CAAN;AACD;;AACD,SAAOoB,KAAK,CAACE,KAAN,CAAY,CAAZ,EAAeF,KAAK,CAACrB,MAAN,GAAe,CAA9B,EAAiCY,IAAjC,CAAsC3B,cAAtC,CAAP;AACD;;AAED,SAASuC,gBAAT,CAA0BvB,GAA1B,EAAqC;AACnC,SAAOA,GAAG,CAACE,UAAJ,CAAesB,mBAAmB,CAACC,UAAnC,IACHzB,GAAG,CAACsB,KAAJ,CAAUE,mBAAmB,CAACC,UAApB,CAA+B1B,MAAzC,CADG,GAEHC,GAFJ;AAGD;AAED;;;;;;;AAKA,OAAM,MAAOwB,mBAAP,CAA0B;AAO9BE,cAAYC,SAAZ,EAA6B;AAC3B,QAAI,CAACjD,GAAG,GAAGc,OAAN,CAAc,YAAd,CAAD,IAAgC,OAAOC,MAAP,KAAkB,WAAlD,IACA,OAAOA,MAAM,CAACC,YAAd,KAA+B,WADnC,EACgD;AAC9C;AACA;AACA;AACA;AACA,YAAM,IAAIC,KAAJ,CACF,yDADE,CAAN;AAED;;AACD,SAAKC,EAAL,GAAUH,MAAM,CAACC,YAAjB;;AAEA,QAAIiC,SAAS,IAAI,IAAb,IAAqB,CAACA,SAA1B,EAAqC;AACnC,YAAM,IAAIhC,KAAJ,CACF,oEADE,CAAN;AAED;;AACD,SAAKgC,SAAL,GAAiBA,SAAjB;AACA,SAAKV,IAAL,GAAYT,YAAY,CAAC,KAAKmB,SAAN,CAAxB;AACD;AAED;;;;;;;;;;;AASU,QAAJC,IAAI,CAACC,cAAD,EAA+B;AACvC,QAAIA,cAAc,CAACC,aAAf,YAAwCC,WAA5C,EAAyD;AACvD,YAAM,IAAIpC,KAAJ,CACF,uEACA,wBAFE,CAAN;AAGD,KAJD,MAIO;AACL,YAAMiB,QAAQ,GAAGoB,IAAI,CAACC,SAAL,CAAeJ,cAAc,CAACC,aAA9B,CAAjB;AACA,YAAMjB,WAAW,GAAGmB,IAAI,CAACC,SAAL,CAAeJ,cAAc,CAAChB,WAA9B,CAApB;AAEA,YAAMqB,kBAAkB,GACpBpD,4BAA4B,CAAC+C,cAAD,CADhC;;AAGA,UAAI;AACF,aAAKjC,EAAL,CAAQuC,OAAR,CAAgB,KAAKlB,IAAL,CAAUP,IAA1B,EAAgCsB,IAAI,CAACC,SAAL,CAAeC,kBAAf,CAAhC;AACA,aAAKtC,EAAL,CAAQuC,OAAR,CAAgB,KAAKlB,IAAL,CAAUL,QAA1B,EAAoCA,QAApC;AACA,aAAKhB,EAAL,CAAQuC,OAAR,CAAgB,KAAKlB,IAAL,CAAUJ,WAA1B,EAAuCA,WAAvC;AACA,aAAKjB,EAAL,CAAQuC,OAAR,CACI,KAAKlB,IAAL,CAAUH,UADd,EAEIlC,yBAAyB,CAACiD,cAAc,CAACf,UAAhB,CAF7B,EAJE,CAQF;AACA;AACA;;AACA,cAAMsB,QAAQ,GAA4B;AACxCC,gBAAM,EAAER,cAAc,CAACQ,MADiB;AAExCC,qBAAW,EAAET,cAAc,CAACS,WAFY;AAGxCC,qBAAW,EAAEV,cAAc,CAACU,WAHY;AAIxCC,mBAAS,EAAEX,cAAc,CAACW,SAAf,IAA4B,IAA5B,GACPX,cAAc,CAACW,SADR,GAEPC,SANoC;AAOxCC,6BAAmB,EAAEb,cAAc,CAACa,mBAAf,IAAsC,IAAtC,GACjBb,cAAc,CAACa,mBADE,GAEjBD,SAToC;AAUxCE,0BAAgB,EAAEd,cAAc,CAACc,gBAAf,IAAmC,IAAnC,GACdd,cAAc,CAACc,gBADD,GAEdF,SAZoC;AAaxCG,wBAAc,EAAEf,cAAc,CAACe,cAAf,IAAiC,IAAjC,GACZf,cAAc,CAACe,cADH,GAEZH;AAfoC,SAA1C;AAiBA,aAAK7C,EAAL,CAAQuC,OAAR,CAAgB,KAAKlB,IAAL,CAAUF,aAA1B,EAAyCiB,IAAI,CAACC,SAAL,CAAeG,QAAf,CAAzC;AAEA,eAAO;AAACF;AAAD,SAAP;AACD,OA/BD,CA+BE,OAAOW,GAAP,EAAY;AACZ;AACA7B,mBAAW,CAAC,KAAKC,IAAN,CAAX;AAEA,cAAM,IAAItB,KAAJ,CACF,yBAAyB,KAAKgC,SAAS,sBAAvC,GACA,iEADA,GAEA,sBAAsBO,kBAAkB,CAACY,kBAAkB,IAF3D,GAGA,oBAAoBZ,kBAAkB,CAACa,gBAAgB,IAHvD,GAIA,mBAAmBb,kBAAkB,CAACc,eAAe,GALnD,CAAN;AAMD;AACF;AACF;AAED;;;;;;;;;;AAQU,QAAJC,IAAI;AACR,UAAMvC,IAAI,GACNsB,IAAI,CAACkB,KAAL,CAAW,KAAKtD,EAAL,CAAQuD,OAAR,CAAgB,KAAKlC,IAAL,CAAUP,IAA1B,CAAX,CADJ;;AAEA,QAAIA,IAAI,IAAI,IAAZ,EAAkB;AAChB,YAAM,IAAIf,KAAJ,CACF,kDAAkD,KAAKgC,SAAS,GAD9D,CAAN;AAED;;AAED,QAAIjB,IAAI,CAAC0C,iBAAL,KAA2B,MAA/B,EAAuC;AACrC,YAAM,IAAIzD,KAAJ,CACF,iEACA,eAFE,CAAN;AAGD;;AAED,UAAM0D,GAAG,GAAmB,EAA5B,CAdQ,CAgBR;;AACA,UAAMzC,QAAQ,GAAGoB,IAAI,CAACkB,KAAL,CAAW,KAAKtD,EAAL,CAAQuD,OAAR,CAAgB,KAAKlC,IAAL,CAAUL,QAA1B,CAAX,CAAjB;;AACA,QAAIA,QAAQ,IAAI,IAAhB,EAAsB;AACpB,YAAM,IAAIjB,KAAJ,CACF,4CAA4C,KAAKgC,SAAS,IAA1D,GACA,aAFE,CAAN;AAGD;;AACD0B,OAAG,CAACvB,aAAJ,GAAoBlB,QAApB,CAvBQ,CAyBR;;AACA,UAAMC,WAAW,GAAGmB,IAAI,CAACkB,KAAL,CAAW,KAAKtD,EAAL,CAAQuD,OAAR,CAAgB,KAAKlC,IAAL,CAAUJ,WAA1B,CAAX,CAApB;;AACA,QAAIA,WAAW,IAAI,IAAnB,EAAyB;AACvB,YAAM,IAAIlB,KAAJ,CACF,gDAAgD,KAAKgC,SAAS,IAA9D,GACA,cAFE,CAAN;AAGD;;AACD0B,OAAG,CAACxC,WAAJ,GAAkBA,WAAlB,CAhCQ,CAkCR;;AACA,UAAMyC,cAAc,GAAG,KAAK1D,EAAL,CAAQuD,OAAR,CAAgB,KAAKlC,IAAL,CAAUF,aAA1B,CAAvB;;AACA,QAAIuC,cAAc,IAAI,IAAtB,EAA4B;AAC1B,YAAMlB,QAAQ,GAAGJ,IAAI,CAACkB,KAAL,CAAWI,cAAX,CAAjB;AACAD,SAAG,CAAChB,MAAJ,GAAaD,QAAQ,CAACC,MAAtB;AACAgB,SAAG,CAACf,WAAJ,GAAkBF,QAAQ,CAACE,WAA3B;AACAe,SAAG,CAACd,WAAJ,GAAkBH,QAAQ,CAACG,WAA3B;;AACA,UAAIH,QAAQ,CAACI,SAAT,IAAsB,IAA1B,EAAgC;AAC9Ba,WAAG,CAACb,SAAJ,GAAgBJ,QAAQ,CAACI,SAAzB;AACD;;AACD,UAAIJ,QAAQ,CAACM,mBAAT,IAAgC,IAApC,EAA0C;AACxCW,WAAG,CAACX,mBAAJ,GAA0BN,QAAQ,CAACM,mBAAnC;AACD;;AACD,UAAIN,QAAQ,CAACO,gBAAT,IAA6B,IAAjC,EAAuC;AACrCU,WAAG,CAACV,gBAAJ,GAAuBP,QAAQ,CAACO,gBAAhC;AACD;;AACD,UAAIP,QAAQ,CAACQ,cAAT,IAA2B,IAA/B,EAAqC;AACnCS,WAAG,CAACT,cAAJ,GAAqBR,QAAQ,CAACQ,cAA9B;AACD;AACF,KArDO,CAuDR;;;AACA,UAAMW,gBAAgB,GAAG,KAAK3D,EAAL,CAAQuD,OAAR,CAAgB,KAAKlC,IAAL,CAAUH,UAA1B,CAAzB;;AACA,QAAIyC,gBAAgB,IAAI,IAAxB,EAA8B;AAC5B,YAAM,IAAI5D,KAAJ,CACF,yDACA,IAAI,KAAKgC,SAAS,gBAFhB,CAAN;AAGD;;AACD0B,OAAG,CAACvC,UAAJ,GAAiBjC,yBAAyB,CAAC0E,gBAAD,CAA1C;AAEA,WAAOF,GAAP;AACD;;AAtK6B;AAKd7B,iCAAa,iBAAb;AAoKlB,OAAO,MAAMgC,kBAAkB,GAAcC,GAAD,IAAyB;AACnE,MAAI,CAAC/E,GAAG,GAAGc,OAAN,CAAc,YAAd,CAAL,EAAkC;AAChC,WAAO,IAAP;AACD,GAFD,MAEO;AACL,QAAI,CAACkE,KAAK,CAACC,OAAN,CAAcF,GAAd,CAAD,IAAuBA,GAAG,CAACvD,UAAJ,CAAesB,mBAAmB,CAACC,UAAnC,CAA3B,EAA2E;AACzE,aAAOmC,mBAAmB,CACtBH,GAAG,CAACnC,KAAJ,CAAUE,mBAAmB,CAACC,UAApB,CAA+B1B,MAAzC,CADsB,CAA1B;AAED,KAHD,MAGO;AACL,aAAO,IAAP;AACD;AACF;AACF,CAXM;AAYPhB,gBAAgB,CAAC8E,kBAAjB,CAAoCL,kBAApC;AACAzE,gBAAgB,CAAC+E,kBAAjB,CAAoCN,kBAApC;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,OAAM,SAAUI,mBAAV,CAA8BjC,SAA9B,EAA+C;AACnD,SAAO,IAAIH,mBAAJ,CAAwBG,SAAxB,CAAP;AACD;AAED,OAAM,MAAOoC,0BAAP,CAAiC;AAGrCrC;AACE/C,UAAM,CACFD,GAAG,GAAGc,OAAN,CAAc,YAAd,CADE,EAEF,MAAM,0CAFJ,CAAN;AAGAb,UAAM,CACF,OAAOc,MAAP,KAAkB,WAAlB,IACI,OAAOA,MAAM,CAACC,YAAd,KAA+B,WAFjC,EAGF,MAAM,yDAHJ,CAAN;AAIA,SAAKE,EAAL,GAAUH,MAAM,CAACC,YAAjB;AACD;;AAEe,QAAVsE,UAAU;AACd,UAAMX,GAAG,GAAyC,EAAlD;AACA,UAAMpD,MAAM,GAAGhB,WAAW,GAAGD,cAA7B;AACA,UAAMiF,MAAM,GAAGjF,cAAc,GAAGE,WAAhC;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKF,EAAL,CAAQG,MAA5B,EAAoC,EAAED,CAAtC,EAAyC;AACvC,YAAME,GAAG,GAAG,KAAKJ,EAAL,CAAQI,GAAR,CAAYF,CAAZ,CAAZ;;AACA,UAAIE,GAAG,CAACE,UAAJ,CAAeD,MAAf,KAA0BD,GAAG,CAACkE,QAAJ,CAAaD,MAAb,CAA9B,EAAoD;AAClD,cAAMtC,SAAS,GAAGtB,mBAAmB,CAACL,GAAD,CAArC;AACAqD,WAAG,CAAC1B,SAAD,CAAH,GAAiBK,IAAI,CAACkB,KAAL,CAAW,KAAKtD,EAAL,CAAQuD,OAAR,CAAgBnD,GAAhB,CAAX,CAAjB;AACD;AACF;;AACD,WAAOqD,GAAP;AACD;;AAEgB,QAAXc,WAAW,CAAC1D,IAAD,EAAa;AAC5BA,QAAI,GAAGc,gBAAgB,CAACd,IAAD,CAAvB;AACA,UAAMQ,IAAI,GAAGT,YAAY,CAACC,IAAD,CAAzB;;AACA,QAAI,KAAKb,EAAL,CAAQuD,OAAR,CAAgBlC,IAAI,CAACP,IAArB,KAA8B,IAAlC,EAAwC;AACtC,YAAM,IAAIf,KAAJ,CAAU,8BAA8Bc,IAAI,GAA5C,CAAN;AACD;;AACD,UAAMC,IAAI,GAAGsB,IAAI,CAACkB,KAAL,CAAW,KAAKtD,EAAL,CAAQuD,OAAR,CAAgBlC,IAAI,CAACP,IAArB,CAAX,CAAb;AACAM,eAAW,CAACC,IAAD,CAAX;AACA,WAAOP,IAAP;AACD;;AArCoC","names":["env","assert","arrayBufferToBase64String","base64StringToArrayBuffer","getModelArtifactsInfoForJSON","IORouterRegistry","PATH_SEPARATOR","PATH_PREFIX","INFO_SUFFIX","MODEL_TOPOLOGY_SUFFIX","WEIGHT_SPECS_SUFFIX","WEIGHT_DATA_SUFFIX","MODEL_METADATA_SUFFIX","purgeLocalStorageArtifacts","getBool","window","localStorage","Error","LS","purgedModelPaths","i","length","key","prefix","startsWith","removeItem","modelName","getModelPathFromKey","indexOf","push","getModelKeys","path","info","join","topology","weightSpecs","weightData","modelMetadata","removeItems","keys","Object","values","items","split","slice","maybeStripScheme","BrowserLocalStorage","URL_SCHEME","constructor","modelPath","save","modelArtifacts","modelTopology","ArrayBuffer","JSON","stringify","modelArtifactsInfo","setItem","metadata","format","generatedBy","convertedBy","signature","undefined","userDefinedMetadata","modelInitializer","trainingConfig","err","modelTopologyBytes","weightSpecsBytes","weightDataBytes","load","parse","getItem","modelTopologyType","out","metadataString","weightDataBase64","localStorageRouter","url","Array","isArray","browserLocalStorage","registerSaveRouter","registerLoadRouter","BrowserLocalStorageManager","listModels","suffix","endsWith","removeModel"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/io/local_storage.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport '../flags';\nimport {env} from '../environment';\n\nimport {assert} from '../util';\nimport {arrayBufferToBase64String, base64StringToArrayBuffer, getModelArtifactsInfoForJSON} from './io_utils';\nimport {IORouter, IORouterRegistry} from './router_registry';\nimport {IOHandler, ModelArtifacts, ModelArtifactsInfo, ModelJSON, ModelStoreManager, SaveResult} from './types';\n\nconst PATH_SEPARATOR = '/';\nconst PATH_PREFIX = 'tensorflowjs_models';\nconst INFO_SUFFIX = 'info';\nconst MODEL_TOPOLOGY_SUFFIX = 'model_topology';\nconst WEIGHT_SPECS_SUFFIX = 'weight_specs';\nconst WEIGHT_DATA_SUFFIX = 'weight_data';\nconst MODEL_METADATA_SUFFIX = 'model_metadata';\n\n/**\n * Purge all tensorflow.js-saved model artifacts from local storage.\n *\n * @returns Paths of the models purged.\n */\nexport function purgeLocalStorageArtifacts(): string[] {\n  if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n      typeof window.localStorage === 'undefined') {\n    throw new Error(\n        'purgeLocalStorageModels() cannot proceed because local storage is ' +\n        'unavailable in the current environment.');\n  }\n  const LS = window.localStorage;\n  const purgedModelPaths: string[] = [];\n  for (let i = 0; i < LS.length; ++i) {\n    const key = LS.key(i);\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    if (key.startsWith(prefix) && key.length > prefix.length) {\n      LS.removeItem(key);\n      const modelName = getModelPathFromKey(key);\n      if (purgedModelPaths.indexOf(modelName) === -1) {\n        purgedModelPaths.push(modelName);\n      }\n    }\n  }\n  return purgedModelPaths;\n}\n\ntype LocalStorageKeys = {\n  /** Key of the localStorage entry storing `ModelArtifactsInfo`. */\n  info: string,\n  /**\n   * Key of the localStorage entry storing the 'modelTopology' key of\n   * `model.json`\n   */\n  topology: string,\n  /**\n   * Key of the localStorage entry storing the `weightsManifest.weights` entries\n   * of `model.json`\n   */\n  weightSpecs: string,\n  /** Key of the localStorage entry storing the weight data in Base64 */\n  weightData: string,\n  /**\n   * Key of the localStorage entry storing the remaining fields of `model.json`\n   * @see {@link ModelMetadata}\n   */\n  modelMetadata: string,\n};\n\ntype ModelMetadata = Omit<ModelJSON, 'modelTopology'|'weightsManifest'>;\n\nfunction getModelKeys(path: string): LocalStorageKeys {\n  return {\n    info: [PATH_PREFIX, path, INFO_SUFFIX].join(PATH_SEPARATOR),\n    topology: [PATH_PREFIX, path, MODEL_TOPOLOGY_SUFFIX].join(PATH_SEPARATOR),\n    weightSpecs: [PATH_PREFIX, path, WEIGHT_SPECS_SUFFIX].join(PATH_SEPARATOR),\n    weightData: [PATH_PREFIX, path, WEIGHT_DATA_SUFFIX].join(PATH_SEPARATOR),\n    modelMetadata:\n        [PATH_PREFIX, path, MODEL_METADATA_SUFFIX].join(PATH_SEPARATOR)\n  };\n}\n\nfunction removeItems(keys: LocalStorageKeys): void {\n  for (const key of Object.values(keys)) {\n    window.localStorage.removeItem(key);\n  }\n}\n\n/**\n * Get model path from a local-storage key.\n *\n * E.g., 'tensorflowjs_models/my/model/1/info' --> 'my/model/1'\n *\n * @param key\n */\nfunction getModelPathFromKey(key: string) {\n  const items = key.split(PATH_SEPARATOR);\n  if (items.length < 3) {\n    throw new Error(`Invalid key format: ${key}`);\n  }\n  return items.slice(1, items.length - 1).join(PATH_SEPARATOR);\n}\n\nfunction maybeStripScheme(key: string) {\n  return key.startsWith(BrowserLocalStorage.URL_SCHEME) ?\n      key.slice(BrowserLocalStorage.URL_SCHEME.length) :\n      key;\n}\n\n/**\n * IOHandler subclass: Browser Local Storage.\n *\n * See the doc string to `browserLocalStorage` for more details.\n */\nexport class BrowserLocalStorage implements IOHandler {\n  protected readonly LS: Storage;\n  protected readonly modelPath: string;\n  protected readonly keys: LocalStorageKeys;\n\n  static readonly URL_SCHEME = 'localstorage://';\n\n  constructor(modelPath: string) {\n    if (!env().getBool('IS_BROWSER') || typeof window === 'undefined' ||\n        typeof window.localStorage === 'undefined') {\n      // TODO(cais): Add more info about what IOHandler subtypes are\n      // available.\n      //   Maybe point to a doc page on the web and/or automatically determine\n      //   the available IOHandlers and print them in the error message.\n      throw new Error(\n          'The current environment does not support local storage.');\n    }\n    this.LS = window.localStorage;\n\n    if (modelPath == null || !modelPath) {\n      throw new Error(\n          'For local storage, modelPath must not be null, undefined or empty.');\n    }\n    this.modelPath = modelPath;\n    this.keys = getModelKeys(this.modelPath);\n  }\n\n  /**\n   * Save model artifacts to browser local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @param modelArtifacts The model artifacts to be stored.\n   * @returns An instance of SaveResult.\n   */\n  async save(modelArtifacts: ModelArtifacts): Promise<SaveResult> {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n      throw new Error(\n          'BrowserLocalStorage.save() does not support saving model topology ' +\n          'in binary formats yet.');\n    } else {\n      const topology = JSON.stringify(modelArtifacts.modelTopology);\n      const weightSpecs = JSON.stringify(modelArtifacts.weightSpecs);\n\n      const modelArtifactsInfo: ModelArtifactsInfo =\n          getModelArtifactsInfoForJSON(modelArtifacts);\n\n      try {\n        this.LS.setItem(this.keys.info, JSON.stringify(modelArtifactsInfo));\n        this.LS.setItem(this.keys.topology, topology);\n        this.LS.setItem(this.keys.weightSpecs, weightSpecs);\n        this.LS.setItem(\n            this.keys.weightData,\n            arrayBufferToBase64String(modelArtifacts.weightData));\n\n        // Note that JSON.stringify doesn't write out keys that have undefined\n        // values, so for some keys, we set undefined instead of a null-ish\n        // value.\n        const metadata: Required<ModelMetadata> = {\n          format: modelArtifacts.format,\n          generatedBy: modelArtifacts.generatedBy,\n          convertedBy: modelArtifacts.convertedBy,\n          signature: modelArtifacts.signature != null ?\n              modelArtifacts.signature :\n              undefined,\n          userDefinedMetadata: modelArtifacts.userDefinedMetadata != null ?\n              modelArtifacts.userDefinedMetadata :\n              undefined,\n          modelInitializer: modelArtifacts.modelInitializer != null ?\n              modelArtifacts.modelInitializer :\n              undefined,\n          trainingConfig: modelArtifacts.trainingConfig != null ?\n              modelArtifacts.trainingConfig :\n              undefined\n        };\n        this.LS.setItem(this.keys.modelMetadata, JSON.stringify(metadata));\n\n        return {modelArtifactsInfo};\n      } catch (err) {\n        // If saving failed, clean up all items saved so far.\n        removeItems(this.keys);\n\n        throw new Error(\n            `Failed to save model '${this.modelPath}' to local storage: ` +\n            `size quota being exceeded is a possible cause of this failure: ` +\n            `modelTopologyBytes=${modelArtifactsInfo.modelTopologyBytes}, ` +\n            `weightSpecsBytes=${modelArtifactsInfo.weightSpecsBytes}, ` +\n            `weightDataBytes=${modelArtifactsInfo.weightDataBytes}.`);\n      }\n    }\n  }\n\n  /**\n   * Load a model from local storage.\n   *\n   * See the documentation to `browserLocalStorage` for details on the saved\n   * artifacts.\n   *\n   * @returns The loaded model (if loading succeeds).\n   */\n  async load(): Promise<ModelArtifacts> {\n    const info =\n        JSON.parse(this.LS.getItem(this.keys.info)) as ModelArtifactsInfo;\n    if (info == null) {\n      throw new Error(\n          `In local storage, there is no model with name '${this.modelPath}'`);\n    }\n\n    if (info.modelTopologyType !== 'JSON') {\n      throw new Error(\n          'BrowserLocalStorage does not support loading non-JSON model ' +\n          'topology yet.');\n    }\n\n    const out: ModelArtifacts = {};\n\n    // Load topology.\n    const topology = JSON.parse(this.LS.getItem(this.keys.topology));\n    if (topology == null) {\n      throw new Error(\n          `In local storage, the topology of model '${this.modelPath}' ` +\n          `is missing.`);\n    }\n    out.modelTopology = topology;\n\n    // Load weight specs.\n    const weightSpecs = JSON.parse(this.LS.getItem(this.keys.weightSpecs));\n    if (weightSpecs == null) {\n      throw new Error(\n          `In local storage, the weight specs of model '${this.modelPath}' ` +\n          `are missing.`);\n    }\n    out.weightSpecs = weightSpecs;\n\n    // Load meta-data fields.\n    const metadataString = this.LS.getItem(this.keys.modelMetadata);\n    if (metadataString != null) {\n      const metadata = JSON.parse(metadataString) as ModelMetadata;\n      out.format = metadata.format;\n      out.generatedBy = metadata.generatedBy;\n      out.convertedBy = metadata.convertedBy;\n      if (metadata.signature != null) {\n        out.signature = metadata.signature;\n      }\n      if (metadata.userDefinedMetadata != null) {\n        out.userDefinedMetadata = metadata.userDefinedMetadata;\n      }\n      if (metadata.modelInitializer != null) {\n        out.modelInitializer = metadata.modelInitializer;\n      }\n      if (metadata.trainingConfig != null) {\n        out.trainingConfig = metadata.trainingConfig;\n      }\n    }\n\n    // Load weight data.\n    const weightDataBase64 = this.LS.getItem(this.keys.weightData);\n    if (weightDataBase64 == null) {\n      throw new Error(\n          `In local storage, the binary weight values of model ` +\n          `'${this.modelPath}' are missing.`);\n    }\n    out.weightData = base64StringToArrayBuffer(weightDataBase64);\n\n    return out;\n  }\n}\n\nexport const localStorageRouter: IORouter = (url: string|string[]) => {\n  if (!env().getBool('IS_BROWSER')) {\n    return null;\n  } else {\n    if (!Array.isArray(url) && url.startsWith(BrowserLocalStorage.URL_SCHEME)) {\n      return browserLocalStorage(\n          url.slice(BrowserLocalStorage.URL_SCHEME.length));\n    } else {\n      return null;\n    }\n  }\n};\nIORouterRegistry.registerSaveRouter(localStorageRouter);\nIORouterRegistry.registerLoadRouter(localStorageRouter);\n\n/**\n * Factory function for local storage IOHandler.\n *\n * This `IOHandler` supports both `save` and `load`.\n *\n * For each model's saved artifacts, four items are saved to local storage.\n *   - `${PATH_SEPARATOR}/${modelPath}/info`: Contains meta-info about the\n *     model, such as date saved, type of the topology, size in bytes, etc.\n *   - `${PATH_SEPARATOR}/${modelPath}/topology`: Model topology. For Keras-\n *     style models, this is a stringized JSON.\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_specs`: Weight specs of the\n *     model, can be used to decode the saved binary weight values (see\n *     item below).\n *   - `${PATH_SEPARATOR}/${modelPath}/weight_data`: Concatenated binary\n *     weight values, stored as a base64-encoded string.\n *\n * Saving may throw an `Error` if the total size of the artifacts exceed the\n * browser-specific quota.\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `IOHandler`, which can be used with, e.g.,\n *   `tf.Model.save`.\n */\nexport function browserLocalStorage(modelPath: string): IOHandler {\n  return new BrowserLocalStorage(modelPath);\n}\n\nexport class BrowserLocalStorageManager implements ModelStoreManager {\n  private readonly LS: Storage;\n\n  constructor() {\n    assert(\n        env().getBool('IS_BROWSER'),\n        () => 'Current environment is not a web browser');\n    assert(\n        typeof window === 'undefined' ||\n            typeof window.localStorage !== 'undefined',\n        () => 'Current browser does not appear to support localStorage');\n    this.LS = window.localStorage;\n  }\n\n  async listModels(): Promise<{[path: string]: ModelArtifactsInfo}> {\n    const out: {[path: string]: ModelArtifactsInfo} = {};\n    const prefix = PATH_PREFIX + PATH_SEPARATOR;\n    const suffix = PATH_SEPARATOR + INFO_SUFFIX;\n    for (let i = 0; i < this.LS.length; ++i) {\n      const key = this.LS.key(i);\n      if (key.startsWith(prefix) && key.endsWith(suffix)) {\n        const modelPath = getModelPathFromKey(key);\n        out[modelPath] = JSON.parse(this.LS.getItem(key)) as ModelArtifactsInfo;\n      }\n    }\n    return out;\n  }\n\n  async removeModel(path: string): Promise<ModelArtifactsInfo> {\n    path = maybeStripScheme(path);\n    const keys = getModelKeys(path);\n    if (this.LS.getItem(keys.info) == null) {\n      throw new Error(`Cannot find model at path '${path}'`);\n    }\n    const info = JSON.parse(this.LS.getItem(keys.info)) as ModelArtifactsInfo;\n    removeItems(keys);\n    return info;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}