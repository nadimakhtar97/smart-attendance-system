{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../../engine';\nimport { ResizeNearestNeighbor } from '../../kernel_names';\nimport { convertToTensor } from '../../tensor_util_env';\nimport * as util from '../../util';\nimport { op } from '../operation';\nimport { reshape } from '../reshape';\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assumes pixels are of\n *      half the actual dimensions, and yields more accurate resizes. This flag\n *      would also make the floating point coordinates of the top left pixel\n *      0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\n\nfunction resizeNearestNeighbor_(images, size) {\n  let alignCorners = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  let halfPixelCenters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n  util.assert($images.rank === 3 || $images.rank === 4, () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` + `rank ${$images.rank}.`);\n  util.assert(size.length === 2, () => `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` + `${size}.`);\n  util.assert($images.dtype === 'float32' || $images.dtype === 'int32', () => '`images` must have `int32` or `float32` as dtype');\n  util.assert(halfPixelCenters === false || alignCorners === false, () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` + `alignCorners must be false.`);\n  let batchImages = $images;\n  let reshapedTo4D = false;\n\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape($images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n\n  const [] = size;\n  const inputs = {\n    images: batchImages\n  };\n  const attrs = {\n    alignCorners,\n    halfPixelCenters,\n    size\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(ResizeNearestNeighbor, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const resizeNearestNeighbor = op({\n  resizeNearestNeighbor_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,cAArB;AACA,SAAQC,qBAAR,QAA6F,oBAA7F;AAIA,SAAQC,eAAR,QAA8B,uBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,YAAtB;AAEA,SAAQC,EAAR,QAAiB,cAAjB;AACA,SAAQC,OAAR,QAAsB,YAAtB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,SAASC,sBAAT,CACIC,MADJ,EAC0BC,IAD1B,EAE4B;AAAA,MADsBC,YACtB,uEADqC,KACrC;AAAA,MAAxBC,gBAAwB,uEAAL,KAAK;AAC1B,QAAMC,OAAO,GAAGT,eAAe,CAACK,MAAD,EAAS,QAAT,EAAmB,uBAAnB,CAA/B;AAEAJ,MAAI,CAACS,MAAL,CACID,OAAO,CAACE,IAAR,KAAiB,CAAjB,IAAsBF,OAAO,CAACE,IAAR,KAAiB,CAD3C,EAEI,MAAM,oEACF,QAAQF,OAAO,CAACE,IAAI,GAH5B;AAIAV,MAAI,CAACS,MAAL,CACIJ,IAAI,CAACM,MAAL,KAAgB,CADpB,EAEI,MACI,sEACA,GAAGN,IAAI,GAJf;AAKAL,MAAI,CAACS,MAAL,CACID,OAAO,CAACI,KAAR,KAAkB,SAAlB,IAA+BJ,OAAO,CAACI,KAAR,KAAkB,OADrD,EAEI,MAAM,kDAFV;AAGAZ,MAAI,CAACS,MAAL,CACIF,gBAAgB,KAAK,KAArB,IAA8BD,YAAY,KAAK,KADnD,EAEI,MAAM,kEACF,6BAHR;AAIA,MAAIO,WAAW,GAAGL,OAAlB;AACA,MAAIM,YAAY,GAAG,KAAnB;;AACA,MAAIN,OAAO,CAACE,IAAR,KAAiB,CAArB,EAAwB;AACtBI,gBAAY,GAAG,IAAf;AACAD,eAAW,GAAGX,OAAO,CACjBM,OADiB,EACR,CAAC,CAAD,EAAIA,OAAO,CAACO,KAAR,CAAc,CAAd,CAAJ,EAAsBP,OAAO,CAACO,KAAR,CAAc,CAAd,CAAtB,EAAwCP,OAAO,CAACO,KAAR,CAAc,CAAd,CAAxC,CADQ,CAArB;AAED;;AACD,QAAM,KAAKV,IAAX;AAEA,QAAMW,MAAM,GAAgC;AAACZ,UAAM,EAAES;AAAT,GAA5C;AACA,QAAMI,KAAK,GACsB;AAACX,gBAAD;AAAeC,oBAAf;AAAiCF;AAAjC,GADjC,CA7B0B,CAgC1B;;AACA,QAAMa,GAAG,GAAGrB,MAAM,CAACsB,SAAP,CACIrB,qBADJ,EAC2BkB,MAD3B,EAEIC,KAFJ,CAAZ;;AAIA,MAAIH,YAAJ,EAAkB;AAChB,WAAOZ,OAAO,CAACgB,GAAD,EAAM,CAACA,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAD,EAAeG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAf,EAA6BG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD;;AACD,SAAOG,GAAP;AACD;;AAED,OAAO,MAAME,qBAAqB,GAAGnB,EAAE,CAAC;AAACE;AAAD,CAAD,CAAhC","names":["ENGINE","ResizeNearestNeighbor","convertToTensor","util","op","reshape","resizeNearestNeighbor_","images","size","alignCorners","halfPixelCenters","$images","assert","rank","length","dtype","batchImages","reshapedTo4D","shape","inputs","attrs","res","runKernel","resizeNearestNeighbor"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/image/resize_nearest_neighbor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../../engine';\nimport {ResizeNearestNeighbor, ResizeNearestNeighborAttrs, ResizeNearestNeighborInputs} from '../../kernel_names';\nimport {NamedAttrMap} from '../../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../../tensor';\nimport {NamedTensorMap} from '../../tensor_types';\nimport {convertToTensor} from '../../tensor_util_env';\nimport {TensorLike} from '../../types';\nimport * as util from '../../util';\n\nimport {op} from '../operation';\nimport {reshape} from '../reshape';\n\n/**\n * NearestNeighbor resize a batch of 3D images to a new shape.\n *\n * @param images The images, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is assumed.\n * @param size The new shape `[newHeight, newWidth]` to resize the\n *     images to. Each channel is resized individually.\n * @param alignCorners Defaults to False. If true, rescale\n *     input by `(new_height - 1) / (height - 1)`, which exactly aligns the 4\n *     corners of images and resized images. If false, rescale by\n *     `new_height / height`. Treat similarly the width dimension.\n * @param halfPixelCenters Defaults to `false`. Whether to assumes pixels are of\n *      half the actual dimensions, and yields more accurate resizes. This flag\n *      would also make the floating point coordinates of the top left pixel\n *      0.5, 0.5.\n *\n * @doc {heading: 'Operations', subheading: 'Images', namespace: 'image'}\n */\nfunction resizeNearestNeighbor_<T extends Tensor3D|Tensor4D>(\n    images: T|TensorLike, size: [number, number], alignCorners = false,\n    halfPixelCenters = false): T {\n  const $images = convertToTensor(images, 'images', 'resizeNearestNeighbor');\n\n  util.assert(\n      $images.rank === 3 || $images.rank === 4,\n      () => `Error in resizeNearestNeighbor: x must be rank 3 or 4, but got ` +\n          `rank ${$images.rank}.`);\n  util.assert(\n      size.length === 2,\n      () =>\n          `Error in resizeNearestNeighbor: new shape must 2D, but got shape ` +\n          `${size}.`);\n  util.assert(\n      $images.dtype === 'float32' || $images.dtype === 'int32',\n      () => '`images` must have `int32` or `float32` as dtype');\n  util.assert(\n      halfPixelCenters === false || alignCorners === false,\n      () => `Error in resizeNearestNeighbor: If halfPixelCenters is true, ` +\n          `alignCorners must be false.`);\n  let batchImages = $images as Tensor4D;\n  let reshapedTo4D = false;\n  if ($images.rank === 3) {\n    reshapedTo4D = true;\n    batchImages = reshape(\n        $images, [1, $images.shape[0], $images.shape[1], $images.shape[2]]);\n  }\n  const [] = size;\n\n  const inputs: ResizeNearestNeighborInputs = {images: batchImages};\n  const attrs:\n      ResizeNearestNeighborAttrs = {alignCorners, halfPixelCenters, size};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  ResizeNearestNeighbor, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const resizeNearestNeighbor = op({resizeNearestNeighbor_});\n"]},"metadata":{},"sourceType":"module"}