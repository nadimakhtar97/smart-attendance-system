{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nimport { identity } from './Identity';\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\n\nexport function complex(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    real,\n    imag\n  } = inputs;\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n  const realTensorInfo = identity({\n    inputs: {\n      x: real\n    },\n    backend\n  });\n  const imagTensorInfo = identity({\n    inputs: {\n      x: imag\n    },\n    backend\n  });\n  complex.complexTensorInfos = {\n    real: realTensorInfo,\n    imag: imagTensorInfo\n  };\n  return complexInfo;\n}\nexport const complexConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,OAAR,QAA2E,uBAA3E;AAGA,SAAQC,QAAR,QAAuB,YAAvB;AAEA;;;;;;;;;;AASA,OAAM,SAAUC,OAAV,CACFC,IADE,EACsD;AAC1D,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG,QAAD;AAAOC;AAAP,MAAeH,MAArB;AAEA,QAAMI,WAAW,GAAGH,OAAO,CAACI,cAAR,CAAuBH,IAAI,CAACI,KAA5B,EAAmC,WAAnC,CAApB;AACA,QAAMR,OAAO,GAAGG,OAAO,CAACM,OAAR,CAAgBC,GAAhB,CAAoBJ,WAAW,CAACK,MAAhC,CAAhB;AAEA,QAAMC,cAAc,GAAGb,QAAQ,CAAC;AAACG,UAAM,EAAE;AAACW,OAAC,EAAET;AAAJ,KAAT;AAAoBD;AAApB,GAAD,CAA/B;AAEA,QAAMW,cAAc,GAAGf,QAAQ,CAAC;AAACG,UAAM,EAAE;AAACW,OAAC,EAAER;AAAJ,KAAT;AAAoBF;AAApB,GAAD,CAA/B;AAEAH,SAAO,CAACe,kBAAR,GAA6B;AAACX,QAAI,EAAEQ,cAAP;AAAuBP,QAAI,EAAES;AAA7B,GAA7B;AAEA,SAAOR,WAAP;AACD;AAED,OAAO,MAAMU,aAAa,GAAiB;AACzCC,YAAU,EAAEnB,OAD6B;AAEzCoB,aAAW,EAAE,OAF4B;AAGzCC,YAAU,EAAEnB;AAH6B,CAApC","names":["Complex","identity","complex","args","inputs","backend","real","imag","complexInfo","makeTensorInfo","shape","texData","get","dataId","realTensorInfo","x","imagTensorInfo","complexTensorInfos","complexConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Complex.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Complex, ComplexInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {identity} from './Identity';\n\n/**\n * In WebGL data is stored in GPU textures which can't be efficiently copied, so\n * complex tensors share data with their real and imaginary components. Complex\n * tensors' reference to the components is tracked by refCount on the individual\n * component. The refCounts are increased by the identity call.\n *\n * When a complex tensor is disposed, it will reduce the refCount on the\n * components by calling disposeData on each.\n */\nexport function complex(\n    args: {inputs: ComplexInputs, backend: MathBackendWebGL}): TensorInfo {\n  const {inputs, backend} = args;\n  const {real, imag} = inputs;\n\n  const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n  const complex = backend.texData.get(complexInfo.dataId);\n\n  const realTensorInfo = identity({inputs: {x: real}, backend});\n\n  const imagTensorInfo = identity({inputs: {x: imag}, backend});\n\n  complex.complexTensorInfos = {real: realTensorInfo, imag: imagTensorInfo};\n\n  return complexInfo;\n}\n\nexport const complexConfig: KernelConfig = {\n  kernelName: Complex,\n  backendName: 'webgl',\n  kernelFunc: complex as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}