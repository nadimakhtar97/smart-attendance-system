{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { HashTable } from '../../executor/hash_table';\nimport { getParamValue } from './utils';\nexport const executeOp = async (node, tensorMap, context, resourceManager) => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2':\n      {\n        const keyDType = getParamValue('keyDType', node, tensorMap, context);\n        const valueDType = getParamValue('valueDType', node, tensorMap, context);\n        const hashTable = new HashTable(keyDType, valueDType);\n        resourceManager.addHashTable(node.name, hashTable);\n        return [hashTable.handle];\n      }\n\n    case 'LookupTableImport':\n    case 'LookupTableImportV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const values = getParamValue('values', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.import(keys, values)];\n      }\n\n    case 'LookupTableFind':\n    case 'LookupTableFindV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const keys = getParamValue('keys', node, tensorMap, context);\n        const defaultValue = getParamValue('defaultValue', node, tensorMap, context);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [await hashTable.find(keys, defaultValue)];\n      }\n\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2':\n      {\n        const handle = getParamValue('tableHandle', node, tensorMap, context, resourceManager);\n        const hashTable = resourceManager.getHashTableById(handle.id);\n        return [hashTable.tensorSize()];\n      }\n\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\nexport const CATEGORY = 'hash_table';","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAqBA,SAAQA,SAAR,QAAwB,2BAAxB;AAIA,SAAQC,aAAR,QAA4B,SAA5B;AAEA,OAAO,MAAMC,SAAS,GAA4B,OAC9CC,IAD8C,EAClCC,SADkC,EACNC,OADM,EAE9CC,eAF8C,KAES;AACzD,UAAQH,IAAI,CAACI,EAAb;AACE,SAAK,WAAL;AACA,SAAK,aAAL;AAAoB;AAClB,cAAMC,QAAQ,GACVP,aAAa,CAAC,UAAD,EAAaE,IAAb,EAAmBC,SAAnB,EAA8BC,OAA9B,CADjB;AAEA,cAAMI,UAAU,GACZR,aAAa,CAAC,YAAD,EAAeE,IAAf,EAAqBC,SAArB,EAAgCC,OAAhC,CADjB;AAGA,cAAMK,SAAS,GAAG,IAAIV,SAAJ,CAAcQ,QAAd,EAAwBC,UAAxB,CAAlB;AACAH,uBAAe,CAACK,YAAhB,CAA6BR,IAAI,CAACS,IAAlC,EAAwCF,SAAxC;AACA,eAAO,CAACA,SAAS,CAACG,MAAX,CAAP;AACD;;AACD,SAAK,mBAAL;AACA,SAAK,qBAAL;AAA4B;AAC1B,cAAMA,MAAM,GAAGZ,aAAa,CACT,aADS,EACME,IADN,EACYC,SADZ,EACuBC,OADvB,EAETC,eAFS,CAA5B;AAGA,cAAMQ,IAAI,GAAGb,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;AACA,cAAMU,MAAM,GACRd,aAAa,CAAC,QAAD,EAAWE,IAAX,EAAiBC,SAAjB,EAA4BC,OAA5B,CADjB;AAGA,cAAMK,SAAS,GAAGJ,eAAe,CAACU,gBAAhB,CAAiCH,MAAM,CAACI,EAAxC,CAAlB;AAEA,eAAO,CAAC,MAAMP,SAAS,CAACQ,MAAV,CAAiBJ,IAAjB,EAAuBC,MAAvB,CAAP,CAAP;AACD;;AACD,SAAK,iBAAL;AACA,SAAK,mBAAL;AAA0B;AACxB,cAAMF,MAAM,GAAGZ,aAAa,CACT,aADS,EACME,IADN,EACYC,SADZ,EACuBC,OADvB,EAETC,eAFS,CAA5B;AAGA,cAAMQ,IAAI,GAAGb,aAAa,CAAC,MAAD,EAASE,IAAT,EAAeC,SAAf,EAA0BC,OAA1B,CAA1B;AACA,cAAMc,YAAY,GACdlB,aAAa,CAAC,cAAD,EAAiBE,IAAjB,EAAuBC,SAAvB,EAAkCC,OAAlC,CADjB;AAGA,cAAMK,SAAS,GAAGJ,eAAe,CAACU,gBAAhB,CAAiCH,MAAM,CAACI,EAAxC,CAAlB;AACA,eAAO,CAAC,MAAMP,SAAS,CAACU,IAAV,CAAeN,IAAf,EAAqBK,YAArB,CAAP,CAAP;AACD;;AACD,SAAK,iBAAL;AACA,SAAK,mBAAL;AAA0B;AACxB,cAAMN,MAAM,GAAGZ,aAAa,CACT,aADS,EACME,IADN,EACYC,SADZ,EACuBC,OADvB,EAETC,eAFS,CAA5B;AAIA,cAAMI,SAAS,GAAGJ,eAAe,CAACU,gBAAhB,CAAiCH,MAAM,CAACI,EAAxC,CAAlB;AACA,eAAO,CAACP,SAAS,CAACW,UAAV,EAAD,CAAP;AACD;;AACD;AACE,YAAMC,SAAS,CAAC,aAAanB,IAAI,CAACI,EAAE,qBAArB,CAAf;AA/CJ;AAiDD,CApDM;AAsDP,OAAO,MAAMgB,QAAQ,GAAG,YAAjB","names":["HashTable","getParamValue","executeOp","node","tensorMap","context","resourceManager","op","keyDType","valueDType","hashTable","addHashTable","name","handle","keys","values","getHashTableById","id","import","defaultValue","find","tensorSize","TypeError","CATEGORY"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-converter/src/operations/executors/hash_table_executor.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataType, Tensor} from '@tensorflow/tfjs-core';\n\nimport {NamedTensorsMap} from '../../data/types';\nimport {ExecutionContext} from '../../executor/execution_context';\nimport {HashTable} from '../../executor/hash_table';\nimport {ResourceManager} from '../../executor/resource_manager';\nimport {InternalOpAsyncExecutor, Node} from '../types';\n\nimport {getParamValue} from './utils';\n\nexport const executeOp: InternalOpAsyncExecutor = async(\n    node: Node, tensorMap: NamedTensorsMap, context: ExecutionContext,\n    resourceManager: ResourceManager): Promise<Tensor[]> => {\n  switch (node.op) {\n    case 'HashTable':\n    case 'HashTableV2': {\n      const keyDType =\n          getParamValue('keyDType', node, tensorMap, context) as DataType;\n      const valueDType =\n          getParamValue('valueDType', node, tensorMap, context) as DataType;\n\n      const hashTable = new HashTable(keyDType, valueDType);\n      resourceManager.addHashTable(node.name, hashTable);\n      return [hashTable.handle];\n    }\n    case 'LookupTableImport':\n    case 'LookupTableImportV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const values =\n          getParamValue('values', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n\n      return [await hashTable.import(keys, values)];\n    }\n    case 'LookupTableFind':\n    case 'LookupTableFindV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n      const keys = getParamValue('keys', node, tensorMap, context) as Tensor;\n      const defaultValue =\n          getParamValue('defaultValue', node, tensorMap, context) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [await hashTable.find(keys, defaultValue)];\n    }\n    case 'LookupTableSize':\n    case 'LookupTableSizeV2': {\n      const handle = getParamValue(\n                         'tableHandle', node, tensorMap, context,\n                         resourceManager) as Tensor;\n\n      const hashTable = resourceManager.getHashTableById(handle.id);\n      return [hashTable.tensorSize()];\n    }\n    default:\n      throw TypeError(`Node type ${node.op} is not implemented`);\n  }\n};\n\nexport const CATEGORY = 'hash_table';\n"]},"metadata":{},"sourceType":"module"}