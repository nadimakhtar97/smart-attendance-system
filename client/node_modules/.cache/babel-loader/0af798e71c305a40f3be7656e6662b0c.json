{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, util } from '@tensorflow/tfjs-core';\nexport var PackingScheme;\n\n(function (PackingScheme) {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  PackingScheme[PackingScheme[\"DENSE\"] = 0] = \"DENSE\";\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n\n  PackingScheme[PackingScheme[\"SHARED_BATCH\"] = 1] = \"SHARED_BATCH\";\n})(PackingScheme || (PackingScheme = {}));\n\nexport var TextureUsage;\n\n(function (TextureUsage) {\n  TextureUsage[TextureUsage[\"RENDER\"] = 0] = \"RENDER\";\n  TextureUsage[TextureUsage[\"UPLOAD\"] = 1] = \"UPLOAD\";\n  TextureUsage[TextureUsage[\"PIXELS\"] = 2] = \"PIXELS\";\n  TextureUsage[TextureUsage[\"DOWNLOAD\"] = 3] = \"DOWNLOAD\";\n})(TextureUsage || (TextureUsage = {}));\n\nexport var PhysicalTextureType;\n\n(function (PhysicalTextureType) {\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT16\"] = 0] = \"UNPACKED_FLOAT16\";\n  PhysicalTextureType[PhysicalTextureType[\"UNPACKED_FLOAT32\"] = 1] = \"UNPACKED_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_4X1_UNSIGNED_BYTE\"] = 2] = \"PACKED_4X1_UNSIGNED_BYTE\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT32\"] = 3] = \"PACKED_2X2_FLOAT32\";\n  PhysicalTextureType[PhysicalTextureType[\"PACKED_2X2_FLOAT16\"] = 4] = \"PACKED_2X2_FLOAT16\";\n})(PhysicalTextureType || (PhysicalTextureType = {}));\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns, rows];\n}\nexport function getUnpackedArraySizeFromMatrixSize(matrixSize, channelsPerTexture) {\n  return matrixSize * channelsPerTexture;\n}\nexport function getColorMatrixTextureShapeWidthHeight(rows, columns) {\n  return [columns * 4, rows];\n}\n/**\n * Get shape for densely packed RGBA texture.\n */\n\nexport function getDenseTexShape(shape) {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\nexport function getMatrixSizeFromUnpackedArraySize(unpackedSize, channelsPerTexture) {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(`unpackedSize (${unpackedSize}) must be a multiple of ` + `${channelsPerTexture}`);\n  }\n\n  return unpackedSize / channelsPerTexture;\n}\nexport function decodeMatrixFromUnpackedColorRGBAArray(unpackedArray, matrix, channels) {\n  const requiredSize = unpackedArray.length * channels / 4;\n\n  if (matrix.length < requiredSize) {\n    throw new Error(`matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n\n  let dst = 0;\n\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\nexport function getPackedMatrixTextureShapeWidthHeight(rows, columns) {\n  return [Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))];\n}\nexport function getPackedRGBAArraySizeFromMatrixShape(rows, columns) {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\nexport function getTextureConfig( // tslint:disable-next-line:no-any\ngl, textureHalfFloatExtension) {\n  // tslint:disable-next-line:no-any\n  const glany = gl;\n  let internalFormatFloat;\n  let internalFormatHalfFloat;\n  let internalFormatPackedHalfFloat;\n  let internalFormatPackedFloat;\n  let textureFormatFloat;\n  let downloadTextureFormat;\n  let downloadUnpackNumChannels;\n  let defaultNumChannels;\n  let textureTypeHalfFloat;\n  let textureTypeFloat;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ? textureHalfFloatExtension.HALF_FLOAT_OES : null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}","map":{"version":3,"mappings":"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","names":["env","util","PackingScheme","TextureUsage","PhysicalTextureType","getUnpackedMatrixTextureShapeWidthHeight","rows","columns","getUnpackedArraySizeFromMatrixSize","matrixSize","channelsPerTexture","getColorMatrixTextureShapeWidthHeight","getDenseTexShape","shape","size","sizeFromShape","texelsNeeded","Math","ceil","sizeToSquarishShape","getMatrixSizeFromUnpackedArraySize","unpackedSize","Error","decodeMatrixFromUnpackedColorRGBAArray","unpackedArray","matrix","channels","requiredSize","length","dst","src","c","getPackedMatrixTextureShapeWidthHeight","max","getPackedRGBAArraySizeFromMatrixShape","w","h","getTextureConfig","gl","textureHalfFloatExtension","glany","internalFormatFloat","internalFormatHalfFloat","internalFormatPackedHalfFloat","internalFormatPackedFloat","textureFormatFloat","downloadTextureFormat","downloadUnpackNumChannels","defaultNumChannels","textureTypeHalfFloat","textureTypeFloat","getNumber","R32F","R16F","RGBA16F","RGBA32F","RED","HALF_FLOAT","FLOAT","RGBA8","RGBA","HALF_FLOAT_OES"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/tex_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataId, DataType, env, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nexport enum PackingScheme {\n  /**\n   * All values in a single texel are densely packed without any constraints.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 4]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   010|011   020|021\n   * -------   -------   -------\n   * 002|003   012|013   022|023\n   *\n   * 100|101   110|111   120|121\n   * -------   -------   -------\n   * 102|103   112|113   122|123\n   *\n   */\n  DENSE,\n\n  /**\n   * Single texels contain only values from the same batch, and from adjacent\n   * rows and columns.\n   *\n   * This is how the shader encodes a tensor with shape = [2, 3, 5]\n   * (indices are [batch, row, col]).\n   *\n   * 000|001   002|003   004|xxx   020|021   022|023   024|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 010|011   012|013   014|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   * 100|101   102|103   104|xxx   120|121   122|123   124|xxx\n   * -------   -------   -------   -------   -------   -------\n   * 110|111   112|113   114|xxx   xxx|xxx   xxx|xxx   xxx|xxx\n   *\n   */\n  SHARED_BATCH\n}\n\nexport enum TextureUsage {\n  RENDER,\n  UPLOAD,\n  PIXELS,\n  DOWNLOAD\n}\n\nexport enum PhysicalTextureType {\n  UNPACKED_FLOAT16,\n  UNPACKED_FLOAT32,\n  PACKED_4X1_UNSIGNED_BYTE,\n  PACKED_2X2_FLOAT32,\n  PACKED_2X2_FLOAT16\n}\n\nexport interface Texture {\n  texture: WebGLTexture;\n  texShape: [number, number];\n}\nexport interface TextureData {\n  // Required.\n  shape: number[];\n  dtype: DataType;\n\n  // Optional.\n  values?: backend_util.BackendValues;\n  texture?: Texture;\n  // For complex numbers, the real and imaginary parts are stored as their own\n  // individual tensorInfos, with a parent joining the two with the\n  // complexTensors field. When this is defined, texture will be null.\n  complexTensorInfos?: {real: TensorInfo, imag: TensorInfo};\n  /** [rows, columns] shape of the texture. */\n  texShape?: [number, number];\n  usage?: TextureUsage;\n  isPacked?: boolean;\n\n  refCount: number;\n\n  // Available when the tensor has been sliced.\n  slice?: {\n    // Offset in the 'flat index' space.\n    flatOffset: number;\n    // Used for counting how many sliced tensors point to the same texture.\n    origDataId: DataId;\n  };\n}\n\nexport function getUnpackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns, rows];\n}\n\nexport function getUnpackedArraySizeFromMatrixSize(\n    matrixSize: number, channelsPerTexture: number): number {\n  return matrixSize * channelsPerTexture;\n}\n\nexport function getColorMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [columns * 4, rows];\n}\n\n/**\n * Get shape for densely packed RGBA texture.\n */\nexport function getDenseTexShape(shape: number[]): [number, number] {\n  const size = util.sizeFromShape(shape);\n  const texelsNeeded = Math.ceil(size / 4);\n  return util.sizeToSquarishShape(texelsNeeded);\n}\n\nexport function getMatrixSizeFromUnpackedArraySize(\n    unpackedSize: number, channelsPerTexture: number): number {\n  if (unpackedSize % channelsPerTexture !== 0) {\n    throw new Error(\n        `unpackedSize (${unpackedSize}) must be a multiple of ` +\n        `${channelsPerTexture}`);\n  }\n  return unpackedSize / channelsPerTexture;\n}\n\nexport function decodeMatrixFromUnpackedColorRGBAArray(\n    unpackedArray: Float32Array, matrix: Float32Array, channels: number) {\n  const requiredSize = unpackedArray.length * channels / 4;\n  if (matrix.length < requiredSize) {\n    throw new Error(\n        `matrix length (${matrix.length}) must be >= ${requiredSize}`);\n  }\n  let dst = 0;\n  for (let src = 0; src < unpackedArray.length; src += 4) {\n    for (let c = 0; c < channels; c++) {\n      matrix[dst++] = unpackedArray[src + c];\n    }\n  }\n}\n\nexport function getPackedMatrixTextureShapeWidthHeight(\n    rows: number, columns: number): [number, number] {\n  return [\n    Math.max(1, Math.ceil(columns / 2)), Math.max(1, Math.ceil(rows / 2))\n  ];\n}\n\nexport function getPackedRGBAArraySizeFromMatrixShape(\n    rows: number, columns: number): number {\n  const [w, h] = getPackedMatrixTextureShapeWidthHeight(rows, columns);\n  return w * h * 4;\n}\n\nexport interface TextureConfig {\n  internalFormatFloat: number;\n  textureFormatFloat: number;\n  internalFormatPackedHalfFloat: number;\n  internalFormatHalfFloat: number;\n  internalFormatPackedFloat: number;\n\n  // The format to use during a gl.readPixels call.\n  downloadTextureFormat: number;\n  // How many channels need to be unpacked after a gl.readPixels call.\n  downloadUnpackNumChannels: number;\n\n  defaultNumChannels: number;\n  textureTypeHalfFloat: number;\n  textureTypeFloat: number;\n}\n\nexport function getTextureConfig(\n    // tslint:disable-next-line:no-any\n    gl: WebGLRenderingContext, textureHalfFloatExtension?: any): TextureConfig {\n  // tslint:disable-next-line:no-any\n  const glany = gl as any;\n\n  let internalFormatFloat: number;\n  let internalFormatHalfFloat: number;\n  let internalFormatPackedHalfFloat: number;\n  let internalFormatPackedFloat: number;\n  let textureFormatFloat: number;\n\n  let downloadTextureFormat: number;\n  let downloadUnpackNumChannels: number;\n\n  let defaultNumChannels: number;\n  let textureTypeHalfFloat: number;\n  let textureTypeFloat: number;\n\n  if (env().getNumber('WEBGL_VERSION') === 2) {\n    internalFormatFloat = glany.R32F;\n    internalFormatHalfFloat = glany.R16F;\n    internalFormatPackedHalfFloat = glany.RGBA16F;\n    internalFormatPackedFloat = glany.RGBA32F;\n    textureFormatFloat = glany.RED;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 1;\n    textureTypeHalfFloat = glany.HALF_FLOAT;\n    textureTypeFloat = glany.FLOAT;\n    downloadTextureFormat = glany.RGBA8;\n  } else {\n    internalFormatFloat = gl.RGBA;\n    internalFormatHalfFloat = gl.RGBA;\n    internalFormatPackedHalfFloat = gl.RGBA;\n    internalFormatPackedFloat = glany.RGBA;\n    textureFormatFloat = gl.RGBA;\n    downloadUnpackNumChannels = 4;\n    defaultNumChannels = 4;\n    textureTypeHalfFloat = textureHalfFloatExtension != null ?\n        textureHalfFloatExtension.HALF_FLOAT_OES :\n        null;\n    textureTypeFloat = gl.FLOAT;\n    downloadTextureFormat = gl.RGBA;\n  }\n\n  return {\n    internalFormatFloat,\n    internalFormatHalfFloat,\n    internalFormatPackedHalfFloat,\n    internalFormatPackedFloat,\n    textureFormatFloat,\n    downloadTextureFormat,\n    downloadUnpackNumChannels,\n    defaultNumChannels,\n    textureTypeHalfFloat,\n    textureTypeFloat\n  };\n}\n"]},"metadata":{},"sourceType":"module"}