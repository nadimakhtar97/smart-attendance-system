{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { AvgPoolGrad } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n */\n\nfunction avgPoolGrad_(dy, input, filterSize, strides, pad) {\n  const $dy = convertToTensor(dy, 'dy', 'avgPoolGrad');\n  const $input = convertToTensor(input, 'input', 'avgPoolGrad');\n  util.assert($input.rank === $dy.rank, () => `Rank of input (${$input.rank}) does not match rank of dy (${$dy.rank})`);\n  let input4D = $input;\n  let dy4D = $dy;\n  let reshapedTo4D = false;\n\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D = reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n    dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n  }\n\n  util.assert(dy4D.rank === 4, () => `Error in avgPoolGrad: dy must be rank 4 but got rank ` + `${dy4D.rank}.`);\n  util.assert(input4D.rank === 4, () => `Error in avgPoolGrad: input must be rank 4 but got rank ` + `${input4D.rank}.`);\n  const inputs = {\n    dy: dy4D,\n    input: input4D\n  };\n  const attrs = {\n    filterSize,\n    strides,\n    pad\n  }; // tslint:disable-next-line: no-unnecessary-type-assertion\n\n  const res = ENGINE.runKernel(AvgPoolGrad, inputs, attrs);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const avgPoolGrad = op({\n  avgPoolGrad_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,WAAR,QAA+D,iBAA/D;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAGA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;AAkBA,SAASC,YAAT,CACIC,EADJ,EACsBC,KADtB,EAC2CC,UAD3C,EAEIC,OAFJ,EAGIC,GAHJ,EAG8C;AAC5C,QAAMC,GAAG,GAAGV,eAAe,CAACK,EAAD,EAAK,IAAL,EAAW,aAAX,CAA3B;AACA,QAAMM,MAAM,GAAGX,eAAe,CAACM,KAAD,EAAQ,OAAR,EAAiB,aAAjB,CAA9B;AAEAL,MAAI,CAACW,MAAL,CACID,MAAM,CAACE,IAAP,KAAgBH,GAAG,CAACG,IADxB,EAEI,MAAM,kBAAkBF,MAAM,CAACE,IAAI,gCAC/BH,GAAG,CAACG,IAAI,GAHhB;AAKA,MAAIC,OAAO,GAAGH,MAAd;AACA,MAAII,IAAI,GAAGL,GAAX;AACA,MAAIM,YAAY,GAAG,KAAnB;;AAEA,MAAIL,MAAM,CAACE,IAAP,KAAgB,CAApB,EAAuB;AACrBG,gBAAY,GAAG,IAAf;AACAF,WAAO,GACHX,OAAO,CAACQ,MAAD,EAAS,CAAC,CAAD,EAAIA,MAAM,CAACM,KAAP,CAAa,CAAb,CAAJ,EAAqBN,MAAM,CAACM,KAAP,CAAa,CAAb,CAArB,EAAsCN,MAAM,CAACM,KAAP,CAAa,CAAb,CAAtC,CAAT,CADX;AAEAF,QAAI,GAAGZ,OAAO,CAACO,GAAD,EAAM,CAAC,CAAD,EAAIA,GAAG,CAACO,KAAJ,CAAU,CAAV,CAAJ,EAAkBP,GAAG,CAACO,KAAJ,CAAU,CAAV,CAAlB,EAAgCP,GAAG,CAACO,KAAJ,CAAU,CAAV,CAAhC,CAAN,CAAd;AACD;;AAEDhB,MAAI,CAACW,MAAL,CACIG,IAAI,CAACF,IAAL,KAAc,CADlB,EAEI,MAAM,0DACF,GAAGE,IAAI,CAACF,IAAI,GAHpB;AAIAZ,MAAI,CAACW,MAAL,CACIE,OAAO,CAACD,IAAR,KAAiB,CADrB,EAEI,MAAM,6DACF,GAAGC,OAAO,CAACD,IAAI,GAHvB;AAKA,QAAMK,MAAM,GAAsB;AAACb,MAAE,EAAEU,IAAL;AAAWT,SAAK,EAAEQ;AAAlB,GAAlC;AAEA,QAAMK,KAAK,GAAqB;AAACZ,cAAD;AAAaC,WAAb;AAAsBC;AAAtB,GAAhC,CA/B4C,CAiC5C;;AACA,QAAMW,GAAG,GAAGtB,MAAM,CAACuB,SAAP,CACItB,WADJ,EACiBmB,MADjB,EAEIC,KAFJ,CAAZ;;AAIA,MAAIH,YAAJ,EAAkB;AAChB,WAAOb,OAAO,CAACiB,GAAD,EAAM,CAACA,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAD,EAAeG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAAf,EAA6BG,GAAG,CAACH,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD;;AACD,SAAOG,GAAP;AACD;;AAED,OAAO,MAAME,WAAW,GAAGpB,EAAE,CAAC;AAACE;AAAD,CAAD,CAAtB","names":["ENGINE","AvgPoolGrad","convertToTensor","util","op","reshape","avgPoolGrad_","dy","input","filterSize","strides","pad","$dy","$input","assert","rank","input4D","dy4D","reshapedTo4D","shape","inputs","attrs","res","runKernel","avgPoolGrad"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/avg_pool_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {AvgPoolGrad, AvgPoolGradAttrs, AvgPoolGradInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {ExplicitPadding} from './conv_util';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * Computes the backprop of an 2D avg pool.\n *\n * @param dy The dy error, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param input The input image, of rank 4 or rank 3 of shape\n *     [batchSize, height, width, channels]. If rank 3, batch of 1 is\n * assumed.\n * @param filterSize The filter size: `[filterHeight, filterWidth]`. If\n *     `filterSize` is a single number, then `filterHeight == filterWidth`.\n * @param strides The strides of the pooling: `[strideHeight, strideWidth]`. If\n *     `strides` is a single number, then `strideHeight == strideWidth`.\n * @param pad The type of padding algorithm used in the forward prop of the op.\n *     'same', 'valid', for more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *         https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n */\nfunction avgPoolGrad_<T extends Tensor3D|Tensor4D>(\n    dy: T|TensorLike, input: T|TensorLike, filterSize: [number, number]|number,\n    strides: [number, number]|number,\n    pad: 'valid'|'same'|number|ExplicitPadding): T {\n  const $dy = convertToTensor(dy, 'dy', 'avgPoolGrad');\n  const $input = convertToTensor(input, 'input', 'avgPoolGrad');\n\n  util.assert(\n      $input.rank === $dy.rank,\n      () => `Rank of input (${$input.rank}) does not match rank of dy (${\n          $dy.rank})`);\n\n  let input4D = $input as Tensor4D;\n  let dy4D = $dy as Tensor4D;\n  let reshapedTo4D = false;\n\n  if ($input.rank === 3) {\n    reshapedTo4D = true;\n    input4D =\n        reshape($input, [1, $input.shape[0], $input.shape[1], $input.shape[2]]);\n    dy4D = reshape($dy, [1, $dy.shape[0], $dy.shape[1], $dy.shape[2]]);\n  }\n\n  util.assert(\n      dy4D.rank === 4,\n      () => `Error in avgPoolGrad: dy must be rank 4 but got rank ` +\n          `${dy4D.rank}.`);\n  util.assert(\n      input4D.rank === 4,\n      () => `Error in avgPoolGrad: input must be rank 4 but got rank ` +\n          `${input4D.rank}.`);\n\n  const inputs: AvgPoolGradInputs = {dy: dy4D, input: input4D};\n\n  const attrs: AvgPoolGradAttrs = {filterSize, strides, pad};\n\n  // tslint:disable-next-line: no-unnecessary-type-assertion\n  const res = ENGINE.runKernel(\n                  AvgPoolGrad, inputs as {} as NamedTensorMap,\n                  attrs as {} as NamedAttrMap) as T;\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res;\n}\n\nexport const avgPoolGrad = op({avgPoolGrad_});\n"]},"metadata":{},"sourceType":"module"}