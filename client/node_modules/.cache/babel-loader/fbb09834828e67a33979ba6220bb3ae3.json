{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { getCoordsDataType } from './shader_compiler';\nexport class StridedSliceProgram {\n  constructor(begin, strides, size) {\n    this.variableNames = ['x'];\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n    let newCoords = '';\n\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords = size.map((_, i) => {\n        outputAxis++;\n        return size.length === 1 ? `coords * strides[${i}] + begin[${i}]` : `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n      }).join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAOC,mBAAP,CAA0B;AAK9BC,cAAYC,KAAZ,EAA6BC,OAA7B,EAAgDC,IAAhD,EAA8D;AAJ9D,yBAAgB,CAAC,GAAD,CAAhB;AAKE,SAAKC,WAAL,GAAmBD,IAAnB;AACA,UAAME,IAAI,GAAGF,IAAI,CAACG,MAAlB;AACA,UAAMC,UAAU,GAAGT,iBAAiB,CAACK,IAAI,CAACG,MAAN,CAApC;AACA,UAAME,KAAK,GAAGV,iBAAiB,CAACK,IAAI,CAACG,MAAN,CAA/B;AAEA,QAAIG,SAAS,GAAG,EAAhB;;AACA,QAAIJ,IAAI,KAAK,CAAb,EAAgB;AACdI,eAAS,GAAG,0BAAZ;AACD,KAFD,MAEO;AACL,UAAIC,UAAU,GAAG,CAAjB;AACAD,eAAS,GACLN,IAAI,CAACQ,GAAL,CAAS,CAACC,CAAD,EAAIC,CAAJ,KAAS;AACZH,kBAAU;AACV,eAAOP,IAAI,CAACG,MAAL,KAAgB,CAAhB,GACH,oBAAoBO,CAAC,aAAaA,CAAC,GADhC,GAEH,UAAUH,UAAU,GAAG,CAAC,eAAeG,CAAC,aAAaA,CAAC,GAF1D;AAGD,OALL,EAMKC,IANL,CAMU,GANV,CADJ;AAQD;;AAED,SAAKC,QAAL,GAAgB;QACZR,UAAU,YAAYA,UAAU,IAAIN,KAAK;QACzCM,UAAU,cAAcA,UAAU,IAAIL,OAAO;;;UAG3CM,KAAK;yBACUC,SAAS;;KAN9B;AASD;;AAnC6B","names":["getCoordsDataType","StridedSliceProgram","constructor","begin","strides","size","outputShape","rank","length","inputDtype","dtype","newCoords","outputAxis","map","_","i","join","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/strided_slice_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram} from './gpgpu_math';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class StridedSliceProgram implements GPGPUProgram {\n  variableNames = ['x'];\n  outputShape: number[];\n  userCode: string;\n\n  constructor(begin: number[], strides: number[], size: number[]) {\n    this.outputShape = size;\n    const rank = size.length;\n    const inputDtype = getCoordsDataType(size.length);\n    const dtype = getCoordsDataType(size.length);\n\n    let newCoords = '';\n    if (rank === 1) {\n      newCoords = 'coords * strides + begin';\n    } else {\n      let outputAxis = 0;\n      newCoords =\n          size.map((_, i) => {\n                outputAxis++;\n                return size.length === 1 ?\n                    `coords * strides[${i}] + begin[${i}]` :\n                    `coords[${outputAxis - 1}] * strides[${i}] + begin[${i}]`;\n              })\n              .join(',');\n    }\n\n    this.userCode = `\n      ${inputDtype} begin = ${inputDtype}(${begin});\n      ${inputDtype} strides = ${inputDtype}(${strides});\n\n      void main() {\n        ${dtype} coords = getOutputCoords();\n        setOutput(getX(${newCoords}));\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}