{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, ResizeBilinear } from '@tensorflow/tfjs-core';\nimport { ResizeBilinearProgram } from '../resize_bilinear_gpu';\nimport { ResizeBilinearPackedProgram } from '../resize_bilinear_packed_gpu';\nexport function resizeBilinear(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    images\n  } = inputs;\n  const {\n    alignCorners,\n    halfPixelCenters,\n    size\n  } = attrs;\n  const [newHeight, newWidth] = size;\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ? new ResizeBilinearPackedProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters) : new ResizeBilinearProgram(images.shape, newHeight, newWidth, alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\nexport const resizeBilinearConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,GAAR,EAAuCC,cAAvC,QAAmH,uBAAnH;AAGA,SAAQC,qBAAR,QAAoC,wBAApC;AACA,SAAQC,2BAAR,QAA0C,+BAA1C;AAEA,OAAM,SAAUC,cAAV,CAAyBC,IAAzB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAWH,MAAjB;AACA,QAAM;AAACI,gBAAD;AAAeC,oBAAf;AAAiCC;AAAjC,MAAyCJ,KAA/C;AAEA,QAAM,CAACK,SAAD,EAAYC,QAAZ,IAAwBF,IAA9B;AAEA,QAAMG,OAAO,GAAGf,GAAG,GAAGgB,OAAN,CAAc,6BAAd,IACZ,IAAIb,2BAAJ,CACIM,MAAM,CAACQ,KADX,EACsDJ,SADtD,EACiEC,QADjE,EAEIJ,YAFJ,EAEkBC,gBAFlB,CADY,GAIZ,IAAIT,qBAAJ,CACIO,MAAM,CAACQ,KADX,EACsDJ,SADtD,EACiEC,QADjE,EAEIJ,YAFJ,EAEkBC,gBAFlB,CAJJ;AAOA,SAAOJ,OAAO,CAACW,eAAR,CAAwBH,OAAxB,EAAiC,CAACN,MAAD,CAAjC,EAA2C,SAA3C,CAAP;AACD;AAED,OAAO,MAAMU,oBAAoB,GAAiB;AAChDC,YAAU,EAAEnB,cADoC;AAEhDoB,aAAW,EAAE,OAFmC;AAGhDC,YAAU,EAAElB;AAHoC,CAA3C","names":["env","ResizeBilinear","ResizeBilinearProgram","ResizeBilinearPackedProgram","resizeBilinear","args","inputs","backend","attrs","images","alignCorners","halfPixelCenters","size","newHeight","newWidth","program","getBool","shape","runWebGLProgram","resizeBilinearConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/ResizeBilinear.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {env, KernelConfig, KernelFunc, ResizeBilinear, ResizeBilinearAttrs, ResizeBilinearInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ResizeBilinearProgram} from '../resize_bilinear_gpu';\nimport {ResizeBilinearPackedProgram} from '../resize_bilinear_packed_gpu';\n\nexport function resizeBilinear(args: {\n  inputs: ResizeBilinearInputs,\n  backend: MathBackendWebGL,\n  attrs: ResizeBilinearAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {images} = inputs;\n  const {alignCorners, halfPixelCenters, size} = attrs;\n\n  const [newHeight, newWidth] = size;\n\n  const program = env().getBool('WEBGL_PACK_IMAGE_OPERATIONS') ?\n      new ResizeBilinearPackedProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters) :\n      new ResizeBilinearProgram(\n          images.shape as [number, number, number, number], newHeight, newWidth,\n          alignCorners, halfPixelCenters);\n  return backend.runWebGLProgram(program, [images], 'float32');\n}\n\nexport const resizeBilinearConfig: KernelConfig = {\n  kernelName: ResizeBilinear,\n  backendName: 'webgl',\n  kernelFunc: resizeBilinear as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}