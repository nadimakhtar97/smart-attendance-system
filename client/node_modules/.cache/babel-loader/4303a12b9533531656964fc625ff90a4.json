{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep || decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n\n  return values;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAqBA,IAArB,QAAgC,uBAAhC;AAEA,OAAM,SAAUC,SAAV,CACFC,KADE,EACaC,IADb,EAC2BC,IAD3B,EAEFC,KAFE,EAEsB;AAC1B,QAAMC,aAAa,GAAGJ,KAAK,KAAKC,IAAhC;AACA,QAAMI,2BAA2B,GAAGL,KAAK,GAAGC,IAAR,IAAgBC,IAAI,GAAG,CAA3D;AACA,QAAMI,2BAA2B,GAAGL,IAAI,GAAGD,KAAP,IAAgBE,IAAI,GAAG,CAA3D;;AAEA,MAAIE,aAAa,IAAIC,2BAAjB,IACAC,2BADJ,EACiC;AAC/B,WAAOR,IAAI,CAACS,mBAAL,CAAyB,CAAzB,EAA4BJ,KAA5B,CAAP;AACD;;AAED,QAAMK,WAAW,GAAGC,IAAI,CAACC,GAAL,CAASD,IAAI,CAACE,IAAL,CAAU,CAACV,IAAI,GAAGD,KAAR,IAAiBE,IAA3B,CAAT,CAApB;AACA,QAAMU,MAAM,GAAGd,IAAI,CAACS,mBAAL,CAAyBC,WAAzB,EAAsCL,KAAtC,CAAf;;AAEA,MAAIF,IAAI,GAAGD,KAAP,IAAgBE,IAAI,KAAK,CAA7B,EAAgC;AAC9B;AACA;AACAA,QAAI,GAAG,CAAC,CAAR;AACD;;AAEDU,QAAM,CAAC,CAAD,CAAN,GAAYZ,KAAZ;;AACA,OAAK,IAAIa,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAACE,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtCD,UAAM,CAACC,CAAD,CAAN,GAAYD,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,GAAgBX,IAA5B;AACD;;AACD,SAAOU,MAAP;AACD","names":["util","rangeImpl","start","stop","step","dtype","sameStartStop","increasingRangeNegativeStep","decreasingRangePositiveStep","makeZerosTypedArray","numElements","Math","abs","ceil","values","i","length"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Range_impl.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DataTypeMap, util} from '@tensorflow/tfjs-core';\n\nexport function rangeImpl(\n    start: number, stop: number, step: number,\n    dtype: 'float32'|'int32'): DataTypeMap['float32' | 'int32'] {\n  const sameStartStop = start === stop;\n  const increasingRangeNegativeStep = start < stop && step < 0;\n  const decreasingRangePositiveStep = stop < start && step > 1;\n\n  if (sameStartStop || increasingRangeNegativeStep ||\n      decreasingRangePositiveStep) {\n    return util.makeZerosTypedArray(0, dtype);\n  }\n\n  const numElements = Math.abs(Math.ceil((stop - start) / step));\n  const values = util.makeZerosTypedArray(numElements, dtype);\n\n  if (stop < start && step === 1) {\n    // Auto adjust the step's sign if it hasn't been set\n    // (or was set to 1)\n    step = -1;\n  }\n\n  values[0] = start;\n  for (let i = 1; i < values.length; i++) {\n    values[i] = values[i - 1] + step;\n  }\n  return values;\n}\n"]},"metadata":{},"sourceType":"module"}