{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    value\n  } = inputs;\n  let {\n    axis\n  } = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n  const num = value.shape[axis];\n  const outShape = new Array(xRank - 1);\n  let outIndex = 0;\n\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res = new Array(num);\n\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({\n      inputs: {\n        x\n      },\n      backend,\n      attrs: {\n        begin,\n        size\n      }\n    });\n    const reshaped = reshape({\n      inputs: {\n        x: sliced\n      },\n      backend,\n      attrs: {\n        shape: outShape\n      }\n    });\n    res[i] = reshaped;\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\nexport const unpackConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAA8CA,MAA9C,QAAsF,uBAAtF;AAIA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,KAAR,QAAoB,SAApB;AAEA,OAAM,SAAUC,MAAV,CACFC,IADE,EAEuE;AAE3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAUH,MAAhB;AACA,MAAI;AAACI;AAAD,MAASF,KAAb;;AAEA,MAAIE,IAAI,GAAG,CAAX,EAAc;AACZA,QAAI,IAAID,KAAK,CAACE,KAAN,CAAYC,MAApB;AACD;;AAED,QAAMC,CAAC,GAAGJ,KAAV;AACA,QAAMK,KAAK,GAAGD,CAAC,CAACF,KAAF,CAAQC,MAAtB;AAEA,QAAMG,GAAG,GAAGN,KAAK,CAACE,KAAN,CAAYD,IAAZ,CAAZ;AACA,QAAMM,QAAQ,GAAa,IAAIC,KAAJ,CAAUH,KAAK,GAAG,CAAlB,CAA3B;AACA,MAAII,QAAQ,GAAG,CAAf;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,KAApB,EAA2BK,CAAC,EAA5B,EAAgC;AAC9B,QAAIA,CAAC,KAAKT,IAAV,EAAgB;AACdM,cAAQ,CAACE,QAAQ,EAAT,CAAR,GAAuBL,CAAC,CAACF,KAAF,CAAQQ,CAAR,CAAvB;AACD;AACF;;AAED,QAAMC,SAAS,GAAG,EAAlB;AAEA,QAAMC,KAAK,GAAG,IAAIJ,KAAJ,CAAUH,KAAV,EAAiBQ,IAAjB,CAAsB,CAAtB,CAAd;AACA,QAAMC,IAAI,GAAGV,CAAC,CAACF,KAAF,CAAQR,KAAR,EAAb;AACAoB,MAAI,CAACb,IAAD,CAAJ,GAAa,CAAb;AACA,QAAMc,GAAG,GAAiB,IAAIP,KAAJ,CAAUF,GAAV,CAA1B;;AACA,OAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGK,GAAG,CAACZ,MAAxB,EAAgCO,CAAC,EAAjC,EAAqC;AACnCE,SAAK,CAACX,IAAD,CAAL,GAAcS,CAAd;AACA,UAAMM,MAAM,GAAGtB,KAAK,CAAC;AAACG,YAAM,EAAE;AAACO;AAAD,OAAT;AAAcN,aAAd;AAAuBC,WAAK,EAAE;AAACa,aAAD;AAAQE;AAAR;AAA9B,KAAD,CAApB;AACA,UAAMG,QAAQ,GACVxB,OAAO,CAAC;AAACI,YAAM,EAAE;AAACO,SAAC,EAAEY;AAAJ,OAAT;AAAsBlB,aAAtB;AAA+BC,WAAK,EAAE;AAACG,aAAK,EAAEK;AAAR;AAAtC,KAAD,CADX;AAEAQ,OAAG,CAACL,CAAD,CAAH,GAASO,QAAT;AAEAN,aAAS,CAACO,IAAV,CAAeF,MAAf;AACD;;AAEDL,WAAS,CAACQ,OAAV,CAAkBC,CAAC,IAAItB,OAAO,CAACuB,6BAAR,CAAsCD,CAAtC,CAAvB;AACA,SAAOL,GAAP;AACD;AAED,OAAO,MAAMO,YAAY,GAAiB;AACxCC,YAAU,EAAE/B,MAD4B;AAExCgC,aAAW,EAAE,OAF2B;AAGxCC,YAAU,EAAE9B;AAH4B,CAAnC","names":["Unpack","reshape","slice","unpack","args","inputs","backend","attrs","value","axis","shape","length","x","xRank","num","outShape","Array","outIndex","i","toDispose","begin","fill","size","res","sliced","reshaped","push","forEach","t","disposeIntermediateTensorInfo","unpackConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Unpack.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, TensorInfo, Unpack, UnpackAttrs, UnpackInputs} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\n\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\n\nexport function unpack(\n    args:\n        {inputs: UnpackInputs, backend: MathBackendWebGL, attrs: UnpackAttrs}):\n    TensorInfo[] {\n  const {inputs, backend, attrs} = args;\n  const {value} = inputs;\n  let {axis} = attrs;\n\n  if (axis < 0) {\n    axis += value.shape.length;\n  }\n\n  const x = value;\n  const xRank = x.shape.length;\n\n  const num = value.shape[axis];\n  const outShape: number[] = new Array(xRank - 1);\n  let outIndex = 0;\n  for (let i = 0; i < xRank; i++) {\n    if (i !== axis) {\n      outShape[outIndex++] = x.shape[i];\n    }\n  }\n\n  const toDispose = [];\n\n  const begin = new Array(xRank).fill(0);\n  const size = x.shape.slice();\n  size[axis] = 1;\n  const res: TensorInfo[] = new Array(num);\n  for (let i = 0; i < res.length; i++) {\n    begin[axis] = i;\n    const sliced = slice({inputs: {x}, backend, attrs: {begin, size}});\n    const reshaped =\n        reshape({inputs: {x: sliced}, backend, attrs: {shape: outShape}});\n    res[i] = reshaped;\n\n    toDispose.push(sliced);\n  }\n\n  toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n  return res;\n}\n\nexport const unpackConfig: KernelConfig = {\n  kernelName: Unpack,\n  backendName: 'webgl',\n  kernelFunc: unpack as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}