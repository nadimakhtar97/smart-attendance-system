{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { Cast } from '../kernel_names';\nimport { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { op } from './operation';\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\n\nfunction cast_(x, dtype) {\n  const $x = convertToTensor(x, 'x', 'cast'); // Sanity checks.\n\n  if (!util.isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n\n  if (dtype === 'string' && $x.dtype !== 'string' || dtype !== 'string' && $x.dtype === 'string') {\n    throw new Error('Only strings can be casted to strings');\n  }\n\n  const inputs = {\n    x: $x\n  };\n  const attrs = {\n    dtype\n  };\n  return ENGINE.runKernel(Cast, inputs, attrs);\n}\n\nexport const cast = op({\n  cast_\n});","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAgBA,SAAQA,MAAR,QAAqB,WAArB;AACA,SAAQC,IAAR,QAA0C,iBAA1C;AAIA,SAAQC,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,EAAR,QAAiB,aAAjB;AAEA;;;;;;;;;;;;;AAYA,SAASC,KAAT,CAAiCC,CAAjC,EAAkDC,KAAlD,EAAiE;AAC/D,QAAMC,EAAE,GAAGN,eAAe,CAACI,CAAD,EAAI,GAAJ,EAAS,MAAT,CAA1B,CAD+D,CAG/D;;AACA,MAAI,CAACH,IAAI,CAACM,YAAL,CAAkBF,KAAlB,CAAL,EAA+B;AAC7B,UAAM,IAAIG,KAAJ,CAAU,mCAAmCH,KAAK,EAAlD,CAAN;AACD;;AACD,MAAIA,KAAK,KAAK,QAAV,IAAsBC,EAAE,CAACD,KAAH,KAAa,QAAnC,IACAA,KAAK,KAAK,QAAV,IAAsBC,EAAE,CAACD,KAAH,KAAa,QADvC,EACiD;AAC/C,UAAM,IAAIG,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,QAAMC,MAAM,GAAe;AAACL,KAAC,EAAEE;AAAJ,GAA3B;AACA,QAAMI,KAAK,GAAc;AAACL;AAAD,GAAzB;AAEA,SAAOP,MAAM,CAACa,SAAP,CACHZ,IADG,EACGU,MADH,EACmCC,KADnC,CAAP;AAED;;AAED,OAAO,MAAME,IAAI,GAAGV,EAAE,CAAC;AAACC;AAAD,CAAD,CAAf","names":["ENGINE","Cast","convertToTensor","util","op","cast_","x","dtype","$x","isValidDtype","Error","inputs","attrs","runKernel","cast"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/cast.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {ENGINE} from '../engine';\nimport {Cast, CastAttrs, CastInputs} from '../kernel_names';\nimport {NamedAttrMap} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {DataType, TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {op} from './operation';\n\n/**\n * Casts a `tf.Tensor` to a new dtype.\n *\n * ```js\n * const x = tf.tensor1d([1.5, 2.5, 3]);\n * tf.cast(x, 'int32').print();\n * ```\n * @param x The input tensor to be casted.\n * @param dtype The dtype to cast the input tensor to.\n *\n * @doc {heading: 'Tensors', subheading: 'Transformations'}\n */\nfunction cast_<T extends Tensor>(x: T|TensorLike, dtype: DataType): T {\n  const $x = convertToTensor(x, 'x', 'cast');\n\n  // Sanity checks.\n  if (!util.isValidDtype(dtype)) {\n    throw new Error(`Failed to cast to unknown dtype ${dtype}`);\n  }\n  if (dtype === 'string' && $x.dtype !== 'string' ||\n      dtype !== 'string' && $x.dtype === 'string') {\n    throw new Error('Only strings can be casted to strings');\n  }\n\n  const inputs: CastInputs = {x: $x};\n  const attrs: CastAttrs = {dtype};\n\n  return ENGINE.runKernel(\n      Cast, inputs as {} as NamedTensorMap, attrs as {} as NamedAttrMap);\n}\n\nexport const cast = op({cast_});\n"]},"metadata":{},"sourceType":"module"}