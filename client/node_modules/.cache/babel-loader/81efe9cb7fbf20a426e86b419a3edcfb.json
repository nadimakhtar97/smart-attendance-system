{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { browser, cast, env, expandDims, image, reshape, tensor1d, tensor2d, tidy, util } from '@tensorflow/tfjs-core';\nimport { LazyIterator } from './lazy_iterator';\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\n\nexport class WebcamIterator extends LazyIterator {\n  constructor(webcamVideoElement, webcamConfig) {\n    super();\n    this.webcamVideoElement = webcamVideoElement;\n    this.webcamConfig = webcamConfig;\n    this.isClosed = true;\n    this.resize = false;\n\n    if (this.needToResize()) {\n      this.resize = true;\n      this.cropSize = [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];\n      this.cropBoxInd = tensor1d([0], 'int32');\n\n      if (this.webcamConfig.centerCrop) {\n        // Calculate the box based on resizing shape.\n        const widthCroppingRatio = this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;\n        const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 / this.webcamVideoElement.height;\n        const widthCropStart = (1 - widthCroppingRatio) / 2;\n        const heightCropStart = (1 - heightCroppingRatio) / 2;\n        const widthCropEnd = widthCropStart + widthCroppingRatio;\n        const heightCropEnd = heightCroppingRatio + heightCropStart;\n        this.cropBox = tensor2d([heightCropStart, widthCropStart, heightCropEnd, widthCropEnd], [1, 4]);\n      } else {\n        this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n  }\n\n  summary() {\n    return `webcam`;\n  } // Construct a WebcamIterator and start it's video stream.\n\n\n  static async create(webcamVideoElement) {\n    let webcamConfig = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (env().get('IS_NODE')) {\n      throw new Error('tf.data.webcam is only supported in browser environment.');\n    }\n\n    if (!webcamVideoElement) {\n      // If webcam video element is not provided, create a hidden video element\n      // with provided width and height.\n      webcamVideoElement = document.createElement('video');\n\n      if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {\n        throw new Error('Please provide webcam video element, or resizeWidth and ' + 'resizeHeight to create a hidden video element.');\n      }\n\n      webcamVideoElement.width = webcamConfig.resizeWidth;\n      webcamVideoElement.height = webcamConfig.resizeHeight;\n    }\n\n    const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig); // Call async function to initialize the video stream.\n\n    await webcamIterator.start();\n    return webcamIterator;\n  } // Async function to start video stream.\n\n\n  async start() {\n    if (this.webcamConfig.facingMode) {\n      util.assert(this.webcamConfig.facingMode === 'user' || this.webcamConfig.facingMode === 'environment', () => `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. ` + `Please provide 'user' or 'environment'`);\n    }\n\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: this.webcamConfig.deviceId,\n          facingMode: this.webcamConfig.facingMode ? this.webcamConfig.facingMode : 'user',\n          width: this.webcamVideoElement.width,\n          height: this.webcamVideoElement.height\n        }\n      });\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message = `Error thrown while initializing video stream: ${e.message}`;\n      throw e;\n    }\n\n    if (!this.stream) {\n      throw new Error('Could not obtain video from webcam.');\n    } // Older browsers may not have srcObject\n\n\n    try {\n      this.webcamVideoElement.srcObject = this.stream;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n    } // Start the webcam video stream\n\n\n    this.webcamVideoElement.play();\n    this.isClosed = false;\n    return new Promise(resolve => {\n      // Add event listener to make sure the webcam has been fully initialized.\n      this.webcamVideoElement.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n  }\n\n  async next() {\n    if (this.isClosed) {\n      return {\n        value: null,\n        done: true\n      };\n    }\n\n    let img;\n\n    try {\n      img = browser.fromPixels(this.webcamVideoElement);\n    } catch (e) {\n      throw new Error(`Error thrown converting video to pixels: ${JSON.stringify(e)}`);\n    }\n\n    if (this.resize) {\n      try {\n        return {\n          value: this.cropAndResizeFrame(img),\n          done: false\n        };\n      } catch (e) {\n        throw new Error(`Error thrown cropping the video: ${e.message}`);\n      } finally {\n        img.dispose();\n      }\n    } else {\n      return {\n        value: img,\n        done: false\n      };\n    }\n  }\n\n  needToResize() {\n    // If resizeWidth and resizeHeight are provided, and different from the\n    // width and height of original HTMLVideoElement, then resizing and cropping\n    // is required.\n    if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight && (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth || this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n      return true;\n    }\n\n    return false;\n  } // Cropping and resizing each frame based on config\n\n\n  cropAndResizeFrame(img) {\n    return tidy(() => {\n      const expandedImage = expandDims(cast(img, 'float32'), 0);\n      let resizedImage;\n      resizedImage = image.cropAndResize(expandedImage, this.cropBox, this.cropBoxInd, this.cropSize, 'bilinear'); // Extract image from batch cropping.\n\n      const shape = resizedImage.shape;\n      return reshape(resizedImage, shape.slice(1));\n    });\n  } // Capture one frame from the video stream, and extract the value from\n  // iterator.next() result.\n\n\n  async capture() {\n    return (await this.next()).value;\n  } // Stop the video stream and pause webcam iterator.\n\n\n  stop() {\n    const tracks = this.stream.getTracks();\n    tracks.forEach(track => track.stop());\n\n    try {\n      this.webcamVideoElement.srcObject = null;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = null;\n    }\n\n    this.isClosed = true;\n  } // Override toArray() function to prevent collecting.\n\n\n  toArray() {\n    throw new Error('Can not convert infinite video stream to array.');\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;;AAkBA,SAAQA,OAAR,EAAiBC,IAAjB,EAAuBC,GAAvB,EAA4BC,UAA5B,EAAwCC,KAAxC,EAA+CC,OAA/C,EAAwDC,QAAxD,EAA4EC,QAA5E,EAAoHC,IAApH,EAA0HC,IAA1H,QAAqI,uBAArI;AAEA,SAAQC,YAAR,QAA2B,iBAA3B;AAEA;;;;;AAIA,OAAM,MAAOC,cAAP,SAA8BD,YAA9B,CAAoD;AAQxDE,cACuBC,kBADvB,EAEuBC,YAFvB,EAEiD;AAC/C;AAFqB;AACA;AATf,oBAAW,IAAX;AAEA,kBAAS,KAAT;;AASN,QAAI,KAAKC,YAAL,EAAJ,EAAyB;AACvB,WAAKC,MAAL,GAAc,IAAd;AACA,WAAKC,QAAL,GACI,CAAC,KAAKH,YAAL,CAAkBI,YAAnB,EAAiC,KAAKJ,YAAL,CAAkBK,WAAnD,CADJ;AAEA,WAAKC,UAAL,GAAkBd,QAAQ,CAAC,CAAC,CAAD,CAAD,EAAM,OAAN,CAA1B;;AACA,UAAI,KAAKQ,YAAL,CAAkBO,UAAtB,EAAkC;AAChC;AACA,cAAMC,kBAAkB,GACpB,KAAKR,YAAL,CAAkBK,WAAlB,GAAgC,GAAhC,GAAsC,KAAKN,kBAAL,CAAwBU,KADlE;AAEA,cAAMC,mBAAmB,GAAG,KAAKV,YAAL,CAAkBI,YAAlB,GAAiC,GAAjC,GACxB,KAAKL,kBAAL,CAAwBY,MAD5B;AAEA,cAAMC,cAAc,GAAG,CAAC,IAAIJ,kBAAL,IAA2B,CAAlD;AACA,cAAMK,eAAe,GAAG,CAAC,IAAIH,mBAAL,IAA4B,CAApD;AACA,cAAMI,YAAY,GAAGF,cAAc,GAAGJ,kBAAtC;AACA,cAAMO,aAAa,GAAGL,mBAAmB,GAAGG,eAA5C;AACA,aAAKG,OAAL,GAAevB,QAAQ,CACnB,CAACoB,eAAD,EAAkBD,cAAlB,EAAkCG,aAAlC,EAAiDD,YAAjD,CADmB,EAEnB,CAAC,CAAD,EAAI,CAAJ,CAFmB,CAAvB;AAGD,OAbD,MAaO;AACL,aAAKE,OAAL,GAAevB,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAD,EAAe,CAAC,CAAD,EAAI,CAAJ,CAAf,CAAvB;AACD;AACF;AACF;;AAEDwB,SAAO;AACL,WAAO,QAAP;AACD,GAtCuD,CAwCxD;;;AACmB,eAANC,MAAM,CACfnB,kBADe,EACuD;AAAA,QAA/BC,YAA+B,uEAAF,EAAE;;AACxE,QAAIZ,GAAG,GAAG+B,GAAN,CAAU,SAAV,CAAJ,EAA0B;AACxB,YAAM,IAAIC,KAAJ,CACF,0DADE,CAAN;AAED;;AAED,QAAI,CAACrB,kBAAL,EAAyB;AACvB;AACA;AACAA,wBAAkB,GAAGsB,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAArB;;AACA,UAAI,CAACtB,YAAY,CAACK,WAAd,IAA6B,CAACL,YAAY,CAACI,YAA/C,EAA6D;AAC3D,cAAM,IAAIgB,KAAJ,CACF,6DACA,gDAFE,CAAN;AAGD;;AACDrB,wBAAkB,CAACU,KAAnB,GAA2BT,YAAY,CAACK,WAAxC;AACAN,wBAAkB,CAACY,MAAnB,GAA4BX,YAAY,CAACI,YAAzC;AACD;;AACD,UAAMmB,cAAc,GAAG,IAAI1B,cAAJ,CAAmBE,kBAAnB,EAAuCC,YAAvC,CAAvB,CAlBwE,CAoBxE;;AACA,UAAMuB,cAAc,CAACC,KAAf,EAAN;AAEA,WAAOD,cAAP;AACD,GAlEuD,CAoExD;;;AACW,QAALC,KAAK;AACT,QAAI,KAAKxB,YAAL,CAAkByB,UAAtB,EAAkC;AAChC9B,UAAI,CAAC+B,MAAL,CACK,KAAK1B,YAAL,CAAkByB,UAAlB,KAAiC,MAAlC,IACK,KAAKzB,YAAL,CAAkByB,UAAlB,KAAiC,aAF1C,EAGI,MACI,+BAA+B,KAAKzB,YAAL,CAAkByB,UAAU,IAA3D,GACA,wCALR;AAMD;;AAED,QAAI;AACF,WAAKE,MAAL,GAAc,MAAMC,SAAS,CAACC,YAAV,CAAuBC,YAAvB,CAAoC;AACtDC,aAAK,EAAE;AACLC,kBAAQ,EAAE,KAAKhC,YAAL,CAAkBgC,QADvB;AAELP,oBAAU,EAAE,KAAKzB,YAAL,CAAkByB,UAAlB,GACR,KAAKzB,YAAL,CAAkByB,UADV,GAER,MAJC;AAKLhB,eAAK,EAAE,KAAKV,kBAAL,CAAwBU,KAL1B;AAMLE,gBAAM,EAAE,KAAKZ,kBAAL,CAAwBY;AAN3B;AAD+C,OAApC,CAApB;AAUD,KAXD,CAWE,OAAOsB,CAAP,EAAU;AACV;AACAA,OAAC,CAACC,OAAF,GAAY,iDAAiDD,CAAC,CAACC,OAAO,EAAtE;AACA,YAAMD,CAAN;AACD;;AAED,QAAI,CAAC,KAAKN,MAAV,EAAkB;AAChB,YAAM,IAAIP,KAAJ,CAAU,qCAAV,CAAN;AACD,KA7BQ,CA+BT;;;AACA,QAAI;AACF,WAAKrB,kBAAL,CAAwBoC,SAAxB,GAAoC,KAAKR,MAAzC;AACD,KAFD,CAEE,OAAOS,KAAP,EAAc;AACdC,aAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAKrC,kBAAL,CAAwBwC,GAAxB,GAA8BC,MAAM,CAACC,GAAP,CAAWC,eAAX,CAA2B,KAAKf,MAAhC,CAA9B;AACD,KArCQ,CAsCT;;;AACA,SAAK5B,kBAAL,CAAwB4C,IAAxB;AAEA,SAAKC,QAAL,GAAgB,KAAhB;AAEA,WAAO,IAAIC,OAAJ,CAAkBC,OAAO,IAAG;AACjC;AACA,WAAK/C,kBAAL,CAAwBgD,gBAAxB,GAA2C,MAAK;AAC9CD,eAAO;AACR,OAFD;AAGD,KALM,CAAP;AAMD;;AAES,QAAJE,IAAI;AACR,QAAI,KAAKJ,QAAT,EAAmB;AACjB,aAAO;AAACK,aAAK,EAAE,IAAR;AAAcC,YAAI,EAAE;AAApB,OAAP;AACD;;AAED,QAAIC,GAAJ;;AACA,QAAI;AACFA,SAAG,GAAGjE,OAAO,CAACkE,UAAR,CAAmB,KAAKrD,kBAAxB,CAAN;AACD,KAFD,CAEE,OAAOkC,CAAP,EAAU;AACV,YAAM,IAAIb,KAAJ,CACF,4CAA4CiC,IAAI,CAACC,SAAL,CAAerB,CAAf,CAAiB,EAD3D,CAAN;AAED;;AACD,QAAI,KAAK/B,MAAT,EAAiB;AACf,UAAI;AACF,eAAO;AAAC+C,eAAK,EAAE,KAAKM,kBAAL,CAAwBJ,GAAxB,CAAR;AAAsCD,cAAI,EAAE;AAA5C,SAAP;AACD,OAFD,CAEE,OAAOjB,CAAP,EAAU;AACV,cAAM,IAAIb,KAAJ,CAAU,oCAAoCa,CAAC,CAACC,OAAO,EAAvD,CAAN;AACD,OAJD,SAIU;AACRiB,WAAG,CAACK,OAAJ;AACD;AACF,KARD,MAQO;AACL,aAAO;AAACP,aAAK,EAAEE,GAAR;AAAaD,YAAI,EAAE;AAAnB,OAAP;AACD;AACF;;AAEOjD,cAAY;AAClB;AACA;AACA;AACA,QAAI,KAAKD,YAAL,CAAkBK,WAAlB,IAAiC,KAAKL,YAAL,CAAkBI,YAAnD,KACC,KAAKL,kBAAL,CAAwBU,KAAxB,KAAkC,KAAKT,YAAL,CAAkBK,WAApD,IACA,KAAKN,kBAAL,CAAwBY,MAAxB,KAAmC,KAAKX,YAAL,CAAkBI,YAFtD,CAAJ,EAEyE;AACvE,aAAO,IAAP;AACD;;AACD,WAAO,KAAP;AACD,GA3JuD,CA6JxD;;;AACAmD,oBAAkB,CAACJ,GAAD,EAAc;AAC9B,WAAOzD,IAAI,CAAC,MAAK;AACf,YAAM+D,aAAa,GAAapE,UAAU,CAACF,IAAI,CAACgE,GAAD,EAAM,SAAN,CAAL,EAAwB,CAAxB,CAA1C;AACA,UAAIO,YAAJ;AACAA,kBAAY,GAAGpE,KAAK,CAACqE,aAAN,CACXF,aADW,EACI,KAAKzC,OADT,EACkB,KAAKV,UADvB,EACmC,KAAKH,QADxC,EAEX,UAFW,CAAf,CAHe,CAMf;;AACA,YAAMyD,KAAK,GAAGF,YAAY,CAACE,KAA3B;AACA,aAAOrE,OAAO,CAACmE,YAAD,EAAeE,KAAK,CAACC,KAAN,CAAY,CAAZ,CAAf,CAAd;AACD,KATU,CAAX;AAUD,GAzKuD,CA2KxD;AACA;;;AACa,QAAPC,OAAO;AACX,WAAO,CAAC,MAAM,KAAKd,IAAL,EAAP,EAAoBC,KAA3B;AACD,GA/KuD,CAiLxD;;;AACAc,MAAI;AACF,UAAMC,MAAM,GAAG,KAAKrC,MAAL,CAAYsC,SAAZ,EAAf;AAEAD,UAAM,CAACE,OAAP,CAAeC,KAAK,IAAIA,KAAK,CAACJ,IAAN,EAAxB;;AAEA,QAAI;AACF,WAAKhE,kBAAL,CAAwBoC,SAAxB,GAAoC,IAApC;AACD,KAFD,CAEE,OAAOC,KAAP,EAAc;AACdC,aAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAKrC,kBAAL,CAAwBwC,GAAxB,GAA8B,IAA9B;AACD;;AACD,SAAKK,QAAL,GAAgB,IAAhB;AACD,GA9LuD,CAgMxD;;;AACAwB,SAAO;AACL,UAAM,IAAIhD,KAAJ,CAAU,iDAAV,CAAN;AACD;;AAnMuD","names":["browser","cast","env","expandDims","image","reshape","tensor1d","tensor2d","tidy","util","LazyIterator","WebcamIterator","constructor","webcamVideoElement","webcamConfig","needToResize","resize","cropSize","resizeHeight","resizeWidth","cropBoxInd","centerCrop","widthCroppingRatio","width","heightCroppingRatio","height","widthCropStart","heightCropStart","widthCropEnd","heightCropEnd","cropBox","summary","create","get","Error","document","createElement","webcamIterator","start","facingMode","assert","stream","navigator","mediaDevices","getUserMedia","video","deviceId","e","message","srcObject","error","console","log","src","window","URL","createObjectURL","play","isClosed","Promise","resolve","onloadedmetadata","next","value","done","img","fromPixels","JSON","stringify","cropAndResizeFrame","dispose","expandedImage","resizedImage","cropAndResize","shape","slice","capture","stop","tracks","getTracks","forEach","track","toArray"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-data/src/iterators/webcam_iterator.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport {browser, cast, env, expandDims, image, reshape, tensor1d, Tensor1D, tensor2d, Tensor2D, Tensor3D, Tensor4D, tidy, util} from '@tensorflow/tfjs-core';\nimport {WebcamConfig} from '../types';\nimport {LazyIterator} from './lazy_iterator';\n\n/**\n * Provide a stream of image tensors from webcam video stream. Only works in\n * browser environment.\n */\nexport class WebcamIterator extends LazyIterator<Tensor3D> {\n  private isClosed = true;\n  private stream: MediaStream;\n  private resize = false;\n  private cropSize: [number, number];\n  private cropBox: Tensor2D;\n  private cropBoxInd: Tensor1D;\n\n  private constructor(\n      protected readonly webcamVideoElement: HTMLVideoElement,\n      protected readonly webcamConfig: WebcamConfig) {\n    super();\n    if (this.needToResize()) {\n      this.resize = true;\n      this.cropSize =\n          [this.webcamConfig.resizeHeight, this.webcamConfig.resizeWidth];\n      this.cropBoxInd = tensor1d([0], 'int32');\n      if (this.webcamConfig.centerCrop) {\n        // Calculate the box based on resizing shape.\n        const widthCroppingRatio =\n            this.webcamConfig.resizeWidth * 1.0 / this.webcamVideoElement.width;\n        const heightCroppingRatio = this.webcamConfig.resizeHeight * 1.0 /\n            this.webcamVideoElement.height;\n        const widthCropStart = (1 - widthCroppingRatio) / 2;\n        const heightCropStart = (1 - heightCroppingRatio) / 2;\n        const widthCropEnd = widthCropStart + widthCroppingRatio;\n        const heightCropEnd = heightCroppingRatio + heightCropStart;\n        this.cropBox = tensor2d(\n            [heightCropStart, widthCropStart, heightCropEnd, widthCropEnd],\n            [1, 4]);\n      } else {\n        this.cropBox = tensor2d([0, 0, 1, 1], [1, 4]);\n      }\n    }\n  }\n\n  summary() {\n    return `webcam`;\n  }\n\n  // Construct a WebcamIterator and start it's video stream.\n  static async create(\n      webcamVideoElement?: HTMLVideoElement, webcamConfig: WebcamConfig = {}) {\n    if (env().get('IS_NODE')) {\n      throw new Error(\n          'tf.data.webcam is only supported in browser environment.');\n    }\n\n    if (!webcamVideoElement) {\n      // If webcam video element is not provided, create a hidden video element\n      // with provided width and height.\n      webcamVideoElement = document.createElement('video');\n      if (!webcamConfig.resizeWidth || !webcamConfig.resizeHeight) {\n        throw new Error(\n            'Please provide webcam video element, or resizeWidth and ' +\n            'resizeHeight to create a hidden video element.');\n      }\n      webcamVideoElement.width = webcamConfig.resizeWidth;\n      webcamVideoElement.height = webcamConfig.resizeHeight;\n    }\n    const webcamIterator = new WebcamIterator(webcamVideoElement, webcamConfig);\n\n    // Call async function to initialize the video stream.\n    await webcamIterator.start();\n\n    return webcamIterator;\n  }\n\n  // Async function to start video stream.\n  async start(): Promise<void> {\n    if (this.webcamConfig.facingMode) {\n      util.assert(\n          (this.webcamConfig.facingMode === 'user') ||\n              (this.webcamConfig.facingMode === 'environment'),\n          () =>\n              `Invalid webcam facing mode: ${this.webcamConfig.facingMode}. ` +\n              `Please provide 'user' or 'environment'`);\n    }\n\n    try {\n      this.stream = await navigator.mediaDevices.getUserMedia({\n        video: {\n          deviceId: this.webcamConfig.deviceId,\n          facingMode: this.webcamConfig.facingMode ?\n              this.webcamConfig.facingMode :\n              'user',\n          width: this.webcamVideoElement.width,\n          height: this.webcamVideoElement.height\n        }\n      });\n    } catch (e) {\n      // Modify the error message but leave the stack trace intact\n      e.message = `Error thrown while initializing video stream: ${e.message}`;\n      throw e;\n    }\n\n    if (!this.stream) {\n      throw new Error('Could not obtain video from webcam.');\n    }\n\n    // Older browsers may not have srcObject\n    try {\n      this.webcamVideoElement.srcObject = this.stream;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = window.URL.createObjectURL(this.stream);\n    }\n    // Start the webcam video stream\n    this.webcamVideoElement.play();\n\n    this.isClosed = false;\n\n    return new Promise<void>(resolve => {\n      // Add event listener to make sure the webcam has been fully initialized.\n      this.webcamVideoElement.onloadedmetadata = () => {\n        resolve();\n      };\n    });\n  }\n\n  async next(): Promise<IteratorResult<Tensor3D>> {\n    if (this.isClosed) {\n      return {value: null, done: true};\n    }\n\n    let img;\n    try {\n      img = browser.fromPixels(this.webcamVideoElement);\n    } catch (e) {\n      throw new Error(\n          `Error thrown converting video to pixels: ${JSON.stringify(e)}`);\n    }\n    if (this.resize) {\n      try {\n        return {value: this.cropAndResizeFrame(img), done: false};\n      } catch (e) {\n        throw new Error(`Error thrown cropping the video: ${e.message}`);\n      } finally {\n        img.dispose();\n      }\n    } else {\n      return {value: img, done: false};\n    }\n  }\n\n  private needToResize() {\n    // If resizeWidth and resizeHeight are provided, and different from the\n    // width and height of original HTMLVideoElement, then resizing and cropping\n    // is required.\n    if (this.webcamConfig.resizeWidth && this.webcamConfig.resizeHeight &&\n        (this.webcamVideoElement.width !== this.webcamConfig.resizeWidth ||\n         this.webcamVideoElement.height !== this.webcamConfig.resizeHeight)) {\n      return true;\n    }\n    return false;\n  }\n\n  // Cropping and resizing each frame based on config\n  cropAndResizeFrame(img: Tensor3D): Tensor3D {\n    return tidy(() => {\n      const expandedImage: Tensor4D = expandDims(cast(img, 'float32'), (0));\n      let resizedImage;\n      resizedImage = image.cropAndResize(\n          expandedImage, this.cropBox, this.cropBoxInd, this.cropSize,\n          'bilinear');\n      // Extract image from batch cropping.\n      const shape = resizedImage.shape;\n      return reshape(resizedImage, shape.slice(1) as [number, number, number]);\n    });\n  }\n\n  // Capture one frame from the video stream, and extract the value from\n  // iterator.next() result.\n  async capture(): Promise<Tensor3D> {\n    return (await this.next()).value;\n  }\n\n  // Stop the video stream and pause webcam iterator.\n  stop(): void {\n    const tracks = this.stream.getTracks();\n\n    tracks.forEach(track => track.stop());\n\n    try {\n      this.webcamVideoElement.srcObject = null;\n    } catch (error) {\n      console.log(error);\n      this.webcamVideoElement.src = null;\n    }\n    this.isClosed = true;\n  }\n\n  // Override toArray() function to prevent collecting.\n  toArray(): Promise<Tensor3D[]> {\n    throw new Error('Can not convert infinite video stream to array.');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}