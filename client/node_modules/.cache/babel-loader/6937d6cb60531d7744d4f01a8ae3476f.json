{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const r = onesLike({\n      inputs: {\n        x: realPart\n      },\n      backend\n    });\n    const imagPart = imag({\n      inputs: {\n        input: x\n      },\n      backend\n    });\n    const i = zerosLike({\n      inputs: {\n        x: imagPart\n      },\n      backend\n    });\n    const result = complex({\n      inputs: {\n        real: r,\n        imag: i\n      },\n      backend\n    });\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n    return result;\n  } else {\n    return fill({\n      backend,\n      attrs: {\n        shape: x.shape,\n        value: 1,\n        dtype: x.dtype\n      }\n    });\n  }\n}\nexport const onesLikeConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,QAAlC,QAA6E,uBAA7E;AAGA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,IAAR,QAAmB,QAAnB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA,OAAM,SAAUC,QAAV,CACFC,IADE,EACqD;AACzD,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG;AAAD,MAAMF,MAAZ;;AAEA,MAAIE,CAAC,CAACC,KAAF,KAAY,QAAhB,EAA0B;AACxB,UAAM,IAAIC,KAAJ,CAAU,8CAAV,CAAN;AACD,GAFD,MAEO,IAAIF,CAAC,CAACC,KAAF,KAAY,WAAhB,EAA6B;AAClC,UAAME,QAAQ,GAAGT,IAAI,CAAC;AAACI,YAAM,EAAE;AAACM,aAAK,EAAEJ;AAAR,OAAT;AAAqBD;AAArB,KAAD,CAArB;AACA,UAAMM,CAAC,GAAGT,QAAQ,CAAC;AAACE,YAAM,EAAE;AAACE,SAAC,EAAEG;AAAJ,OAAT;AAAwBJ;AAAxB,KAAD,CAAlB;AACA,UAAMO,QAAQ,GAAGb,IAAI,CAAC;AAACK,YAAM,EAAE;AAACM,aAAK,EAAEJ;AAAR,OAAT;AAAqBD;AAArB,KAAD,CAArB;AACA,UAAMQ,CAAC,GAAGZ,SAAS,CAAC;AAACG,YAAM,EAAE;AAACE,SAAC,EAAEM;AAAJ,OAAT;AAAwBP;AAAxB,KAAD,CAAnB;AAEA,UAAMS,MAAM,GAAGjB,OAAO,CAAC;AAACO,YAAM,EAAE;AAACJ,YAAI,EAAEW,CAAP;AAAUZ,YAAI,EAAEc;AAAhB,OAAT;AAA6BR;AAA7B,KAAD,CAAtB;AAEAA,WAAO,CAACU,6BAAR,CAAsCN,QAAtC;AACAJ,WAAO,CAACU,6BAAR,CAAsCJ,CAAtC;AACAN,WAAO,CAACU,6BAAR,CAAsCH,QAAtC;AACAP,WAAO,CAACU,6BAAR,CAAsCF,CAAtC;AAEA,WAAOC,MAAP;AACD,GAdM,MAcA;AACL,WAAOhB,IAAI,CAAC;AAACO,aAAD;AAAUW,WAAK,EAAE;AAACC,aAAK,EAAEX,CAAC,CAACW,KAAV;AAAiBC,aAAK,EAAE,CAAxB;AAA2BX,aAAK,EAAED,CAAC,CAACC;AAApC;AAAjB,KAAD,CAAX;AACD;AACF;AAED,OAAO,MAAMY,cAAc,GAAiB;AAC1CC,YAAU,EAAExB,QAD8B;AAE1CyB,aAAW,EAAE,KAF6B;AAG1CC,YAAU,EAAEpB;AAH8B,CAArC","names":["OnesLike","complex","fill","imag","real","zerosLike","onesLike","args","inputs","backend","x","dtype","Error","realPart","input","r","imagPart","i","result","disposeIntermediateTensorInfo","attrs","shape","value","onesLikeConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/OnesLike.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, OnesLike, OnesLikeInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {complex} from './Complex';\nimport {fill} from './Fill';\nimport {imag} from './Imag';\nimport {real} from './Real';\nimport {zerosLike} from './ZerosLike';\n\nexport function onesLike(\n    args: {inputs: OnesLikeInputs, backend: MathBackendCPU}): TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  if (x.dtype === 'string') {\n    throw new Error('onesLike is not supported for string tensors');\n  } else if (x.dtype === 'complex64') {\n    const realPart = real({inputs: {input: x}, backend});\n    const r = onesLike({inputs: {x: realPart}, backend});\n    const imagPart = imag({inputs: {input: x}, backend});\n    const i = zerosLike({inputs: {x: imagPart}, backend});\n\n    const result = complex({inputs: {real: r, imag: i}, backend});\n\n    backend.disposeIntermediateTensorInfo(realPart);\n    backend.disposeIntermediateTensorInfo(r);\n    backend.disposeIntermediateTensorInfo(imagPart);\n    backend.disposeIntermediateTensorInfo(i);\n\n    return result;\n  } else {\n    return fill({backend, attrs: {shape: x.shape, value: 1, dtype: x.dtype}});\n  }\n}\n\nexport const onesLikeConfig: KernelConfig = {\n  kernelName: OnesLike,\n  backendName: 'cpu',\n  kernelFunc: onesLike as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}