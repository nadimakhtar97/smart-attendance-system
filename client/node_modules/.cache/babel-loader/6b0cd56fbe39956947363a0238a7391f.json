{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nexport class BatchNormProgram {\n  constructor(xShape, meanShape, varianceShape, offsetShape, scaleShape, varianceEpsilon) {\n    this.outputShape = [];\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n    let offsetSnippet = '0.0';\n\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,QAA2B,uBAA3B;AAGA,OAAM,MAAOC,gBAAP,CAAuB;AAK3BC,cACIC,MADJ,EACsBC,SADtB,EAC2CC,aAD3C,EAEIC,WAFJ,EAEgCC,UAFhC,EAGIC,eAHJ,EAG2B;AAN3B,uBAAwB,EAAxB;AAOE,SAAKC,aAAL,GAAqB,CAAC,GAAD,EAAM,MAAN,EAAc,UAAd,CAArB;AACAT,gBAAY,CAACU,0BAAb,CAAwCP,MAAxC,EAAgDC,SAAhD;AACAJ,gBAAY,CAACU,0BAAb,CAAwCP,MAAxC,EAAgDE,aAAhD;AAEA,QAAIM,aAAa,GAAG,KAApB;;AACA,QAAIL,WAAW,IAAI,IAAnB,EAAyB;AACvBN,kBAAY,CAACU,0BAAb,CAAwCP,MAAxC,EAAgDG,WAAhD;AACA,WAAKG,aAAL,CAAmBG,IAAnB,CAAwB,QAAxB;AACAD,mBAAa,GAAG,wBAAhB;AACD;;AAED,QAAIE,YAAY,GAAG,KAAnB;;AACA,QAAIN,UAAU,IAAI,IAAlB,EAAwB;AACtBP,kBAAY,CAACU,0BAAb,CAAwCP,MAAxC,EAAgDI,UAAhD;AACA,WAAKE,aAAL,CAAmBG,IAAnB,CAAwB,OAAxB;AACAC,kBAAY,GAAG,uBAAf;AACD;;AAED,SAAKC,WAAL,GAAmBX,MAAnB;AACA,SAAKY,QAAL,GAAgB;;;;;yBAKKJ,aAAa;wBACdE,YAAY;2DACuBL,eAAe;;;KAPtE;AAWD;;AAvC0B","names":["backend_util","BatchNormProgram","constructor","xShape","meanShape","varianceShape","offsetShape","scaleShape","varianceEpsilon","variableNames","assertAndGetBroadcastShape","offsetSnippet","push","scaleSnippet","outputShape","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/batchnorm_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util} from '@tensorflow/tfjs-core';\nimport {GPGPUProgram} from './gpgpu_math';\n\nexport class BatchNormProgram implements GPGPUProgram {\n  variableNames: string[];\n  outputShape: number[] = [];\n  userCode: string;\n\n  constructor(\n      xShape: number[], meanShape: number[], varianceShape: number[],\n      offsetShape: number[]|null, scaleShape: number[]|null,\n      varianceEpsilon: number) {\n    this.variableNames = ['x', 'mean', 'variance'];\n    backend_util.assertAndGetBroadcastShape(xShape, meanShape);\n    backend_util.assertAndGetBroadcastShape(xShape, varianceShape);\n\n    let offsetSnippet = '0.0';\n    if (offsetShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, offsetShape);\n      this.variableNames.push('offset');\n      offsetSnippet = 'getOffsetAtOutCoords()';\n    }\n\n    let scaleSnippet = '1.0';\n    if (scaleShape != null) {\n      backend_util.assertAndGetBroadcastShape(xShape, scaleShape);\n      this.variableNames.push('scale');\n      scaleSnippet = 'getScaleAtOutCoords()';\n    }\n\n    this.outputShape = xShape;\n    this.userCode = `\n      void main() {\n        float x = getXAtOutCoords();\n        float mean = getMeanAtOutCoords();\n        float variance = getVarianceAtOutCoords();\n        float offset = ${offsetSnippet};\n        float scale = ${scaleSnippet};\n        float inv = scale * inversesqrt(variance + float(${varianceEpsilon}));\n        setOutput(dot(vec3(x, -mean, offset), vec3(inv, inv, 1)));\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}