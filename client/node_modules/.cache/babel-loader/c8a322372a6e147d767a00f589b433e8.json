{"ast":null,"code":"import { convertToTensor } from '../tensor_util_env';\nimport * as util from '../util';\nimport { conv2d } from './conv2d';\nimport { depthwiseConv2d } from './depthwise_conv2d';\nimport { op } from './operation';\nimport { reshape } from './reshape';\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\n\nfunction separableConv2d_(x, depthwiseFilter, pointwiseFilter, strides, pad) {\n  let dilation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : [1, 1];\n  let dataFormat = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 'NHWC';\n  const $x = convertToTensor(x, 'x', 'separableConv2d');\n  const $depthwiseFilter = convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  const $pointwiseFilter = convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n  let x4D = $x;\n  let reshapedTo4D = false;\n\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error('separableConv2d currently does not support dataFormat NCHW; only ' + 'NHWC is supported');\n  }\n\n  util.assert(x4D.rank === 4, () => `Error in separableConv2d: input must be rank 4, but got ` + `rank ${x4D.rank}.`);\n  util.assert($depthwiseFilter.rank === 4, () => `Error in separableConv2d: depthwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);\n  util.assert($pointwiseFilter.rank === 4, () => `Error in separableConv2d: pointwise filter must be rank 4, but ` + `got rank ${$depthwiseFilter.rank}.`);\n  util.assert($pointwiseFilter.shape[0] === 1, () => `Error in separableConv2d: the first dimension of pointwise filter ` + ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n  util.assert($pointwiseFilter.shape[1] === 1, () => `Error in separableConv2d: the second dimension of pointwise ` + `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n  const inChannels = $depthwiseFilter.shape[2];\n  const channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert($pointwiseFilter.shape[2] === inChannels * channelMultiplier, () => `Error in separableConv2d: the third dimension of pointwise filter ` + `must be ${inChannels * channelMultiplier}, ` + `but got ${$pointwiseFilter.shape[2]}.`);\n  const depthwise = depthwiseConv2d(x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  const pointwiseStride = 1;\n  const res = conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]);\n  }\n\n  return res;\n}\n\nexport const separableConv2d = op({\n  separableConv2d_\n});","map":{"version":3,"mappings":"AAiBA,SAAQA,eAAR,QAA8B,oBAA9B;AAEA,OAAO,KAAKC,IAAZ,MAAsB,SAAtB;AAEA,SAAQC,MAAR,QAAqB,UAArB;AACA,SAAQC,eAAR,QAA8B,oBAA9B;AACA,SAAQC,EAAR,QAAiB,aAAjB;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,SAASC,gBAAT,CACIC,CADJ,EACqBC,eADrB,EAEIC,eAFJ,EAE0CC,OAF1C,EAGIC,GAHJ,EAIsC;AAAA,MADbC,QACa,uEADuB,CAAC,CAAD,EAAI,CAAJ,CACvB;AAAA,MAAlCC,UAAkC,uEAAN,MAAM;AACpC,QAAMC,EAAE,GAAGd,eAAe,CAACO,CAAD,EAAI,GAAJ,EAAS,iBAAT,CAA1B;AACA,QAAMQ,gBAAgB,GAClBf,eAAe,CAACQ,eAAD,EAAkB,iBAAlB,EAAqC,iBAArC,CADnB;AAEA,QAAMQ,gBAAgB,GAClBhB,eAAe,CAACS,eAAD,EAAkB,iBAAlB,EAAqC,iBAArC,CADnB;AAGA,MAAIQ,GAAG,GAAGH,EAAV;AACA,MAAII,YAAY,GAAG,KAAnB;;AACA,MAAIJ,EAAE,CAACK,IAAH,KAAY,CAAhB,EAAmB;AACjBD,gBAAY,GAAG,IAAf;AACAD,OAAG,GAAGZ,OAAO,CAACS,EAAD,EAAK,CAAC,CAAD,EAAIA,EAAE,CAACM,KAAH,CAAS,CAAT,CAAJ,EAAiBN,EAAE,CAACM,KAAH,CAAS,CAAT,CAAjB,EAA8BN,EAAE,CAACM,KAAH,CAAS,CAAT,CAA9B,CAAL,CAAb;AACD;;AAED,MAAIP,UAAU,KAAK,MAAnB,EAA2B;AACzB,UAAM,IAAIQ,KAAJ,CACF,sEACA,mBAFE,CAAN;AAGD;;AAEDpB,MAAI,CAACqB,MAAL,CACIL,GAAG,CAACE,IAAJ,KAAa,CADjB,EAEI,MAAM,6DACF,QAAQF,GAAG,CAACE,IAAI,GAHxB;AAIAlB,MAAI,CAACqB,MAAL,CACIP,gBAAgB,CAACI,IAAjB,KAA0B,CAD9B,EAEI,MAAM,oEACF,YAAYJ,gBAAgB,CAACI,IAAI,GAHzC;AAIAlB,MAAI,CAACqB,MAAL,CACIN,gBAAgB,CAACG,IAAjB,KAA0B,CAD9B,EAEI,MAAM,oEACF,YAAYJ,gBAAgB,CAACI,IAAI,GAHzC;AAIAlB,MAAI,CAACqB,MAAL,CACIN,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,MAA8B,CADlC,EAEI,MACI,uEACA,uBAAuBJ,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,CAAyB,GAJxD;AAKAnB,MAAI,CAACqB,MAAL,CACIN,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,MAA8B,CADlC,EAEI,MAAM,iEACF,6BAA6BJ,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,CAAyB,GAH9D;AAKA,QAAMG,UAAU,GAAGR,gBAAgB,CAACK,KAAjB,CAAuB,CAAvB,CAAnB;AACA,QAAMI,iBAAiB,GAAGT,gBAAgB,CAACK,KAAjB,CAAuB,CAAvB,CAA1B;AACAnB,MAAI,CAACqB,MAAL,CACIN,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,MAA8BG,UAAU,GAAGC,iBAD/C,EAEI,MACI,uEACA,WAAWD,UAAU,GAAGC,iBAAiB,IADzC,GAEA,WAAWR,gBAAgB,CAACI,KAAjB,CAAuB,CAAvB,CAAyB,GAL5C;AAOA,QAAMK,SAAS,GAAGtB,eAAe,CAC7Bc,GAD6B,EACxBF,gBADwB,EACNL,OADM,EACGC,GADH,EACQE,UADR,EACoBD,QADpB,CAAjC;AAEA,QAAMc,eAAe,GAAG,CAAxB;AACA,QAAMC,GAAG,GACLzB,MAAM,CAACuB,SAAD,EAAYT,gBAAZ,EAA8BU,eAA9B,EAA+C,OAA/C,EAAwDb,UAAxD,CADV;;AAGA,MAAIK,YAAJ,EAAkB;AAChB,WAAOb,OAAO,CAACsB,GAAD,EAAM,CAACA,GAAG,CAACP,KAAJ,CAAU,CAAV,CAAD,EAAeO,GAAG,CAACP,KAAJ,CAAU,CAAV,CAAf,EAA6BO,GAAG,CAACP,KAAJ,CAAU,CAAV,CAA7B,CAAN,CAAd;AACD;;AACD,SAAOO,GAAP;AACD;;AAED,OAAO,MAAMC,eAAe,GAAGxB,EAAE,CAAC;AAACE;AAAD,CAAD,CAA1B","names":["convertToTensor","util","conv2d","depthwiseConv2d","op","reshape","separableConv2d_","x","depthwiseFilter","pointwiseFilter","strides","pad","dilation","dataFormat","$x","$depthwiseFilter","$pointwiseFilter","x4D","reshapedTo4D","rank","shape","Error","assert","inChannels","channelMultiplier","depthwise","pointwiseStride","res","separableConv2d"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/separable_conv2d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {Tensor3D, Tensor4D} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport * as util from '../util';\n\nimport {conv2d} from './conv2d';\nimport {depthwiseConv2d} from './depthwise_conv2d';\nimport {op} from './operation';\nimport {reshape} from './reshape';\n\n/**\n * 2-D convolution with separable filters.\n *\n * Performs a depthwise convolution that acts separately on channels followed\n * by a pointwise convolution that mixes channels. Note that this is\n * separability between dimensions [1, 2] and 3, not spatial separability\n * between dimensions 1 and 2.\n *\n * See\n * [https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d](\n *     https://www.tensorflow.org/api_docs/python/tf/nn/separable_conv2d)\n * for more details.\n *\n * @param x The input tensor, of rank 4 or rank 3, of shape\n *     `[batch, height, width, inChannels]`. If rank 3, batch of 1 is\n * assumed.\n * @param depthwiseFilter The depthwise filter tensor, rank 4, of shape\n *     `[filterHeight, filterWidth, inChannels, channelMultiplier]`. This is\n *     the filter used in the first step.\n * @param pointwiseFilter The pointwise filter tensor, rank 4, of shape\n *     `[1, 1, inChannels * channelMultiplier, outChannels]`. This is\n *     the filter used in the second step.\n * @param strides The strides of the convolution: `[strideHeight,\n * strideWidth]`. If strides is a single number, then `strideHeight ==\n * strideWidth`.\n * @param pad The type of padding algorithm.\n *   - `same` and stride 1: output will be of same size as input,\n *       regardless of filter size.\n *   - `valid`: output will be smaller than input if filter is larger\n *       than 1x1.\n *   - For more info, see this guide:\n *     [https://www.tensorflow.org/api_docs/python/tf/nn/convolution](\n *          https://www.tensorflow.org/api_docs/python/tf/nn/convolution)\n * @param dilations The dilation rates: `[dilationHeight, dilationWidth]`\n *     in which we sample input values across the height and width dimensions\n *     in atrous convolution. Defaults to `[1, 1]`. If `rate` is a single\n *     number, then `dilationHeight == dilationWidth`. If it is greater than\n *     1, then all values of `strides` must be 1.\n * @param dataFormat: An optional string from: \"NHWC\", \"NCHW\". Defaults to\n *     \"NHWC\". Specify the data format of the input and output data. With the\n *     default format \"NHWC\", the data is stored in the order of: [batch,\n *     height, width, channels]. Only \"NHWC\" is currently supported.\n *\n * @doc {heading: 'Operations', subheading: 'Convolution'}\n */\nfunction separableConv2d_<T extends Tensor3D|Tensor4D>(\n    x: T|TensorLike, depthwiseFilter: Tensor4D|TensorLike,\n    pointwiseFilter: Tensor4D|TensorLike, strides: [number, number]|number,\n    pad: 'valid'|'same', dilation: [number, number]|number = [1, 1],\n    dataFormat: 'NHWC'|'NCHW' = 'NHWC'): T {\n  const $x = convertToTensor(x, 'x', 'separableConv2d');\n  const $depthwiseFilter =\n      convertToTensor(depthwiseFilter, 'depthwiseFilter', 'separableConv2d');\n  const $pointwiseFilter =\n      convertToTensor(pointwiseFilter, 'pointwiseFilter', 'separableConv2d');\n\n  let x4D = $x as Tensor4D;\n  let reshapedTo4D = false;\n  if ($x.rank === 3) {\n    reshapedTo4D = true;\n    x4D = reshape($x, [1, $x.shape[0], $x.shape[1], $x.shape[2]]);\n  }\n\n  if (dataFormat === 'NCHW') {\n    throw new Error(\n        'separableConv2d currently does not support dataFormat NCHW; only ' +\n        'NHWC is supported');\n  }\n\n  util.assert(\n      x4D.rank === 4,\n      () => `Error in separableConv2d: input must be rank 4, but got ` +\n          `rank ${x4D.rank}.`);\n  util.assert(\n      $depthwiseFilter.rank === 4,\n      () => `Error in separableConv2d: depthwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.rank === 4,\n      () => `Error in separableConv2d: pointwise filter must be rank 4, but ` +\n          `got rank ${$depthwiseFilter.rank}.`);\n  util.assert(\n      $pointwiseFilter.shape[0] === 1,\n      () =>\n          `Error in separableConv2d: the first dimension of pointwise filter ` +\n          ` must be 1, but got ${$pointwiseFilter.shape[0]}.`);\n  util.assert(\n      $pointwiseFilter.shape[1] === 1,\n      () => `Error in separableConv2d: the second dimension of pointwise ` +\n          `filter must be 1, but got ${$pointwiseFilter.shape[1]}.`);\n\n  const inChannels = $depthwiseFilter.shape[2];\n  const channelMultiplier = $depthwiseFilter.shape[3];\n  util.assert(\n      $pointwiseFilter.shape[2] === inChannels * channelMultiplier,\n      () =>\n          `Error in separableConv2d: the third dimension of pointwise filter ` +\n          `must be ${inChannels * channelMultiplier}, ` +\n          `but got ${$pointwiseFilter.shape[2]}.`);\n\n  const depthwise = depthwiseConv2d(\n      x4D, $depthwiseFilter, strides, pad, dataFormat, dilation);\n  const pointwiseStride = 1;\n  const res =\n      conv2d(depthwise, $pointwiseFilter, pointwiseStride, 'valid', dataFormat);\n\n  if (reshapedTo4D) {\n    return reshape(res, [res.shape[1], res.shape[2], res.shape[3]]) as T;\n  }\n  return res as T;\n}\n\nexport const separableConv2d = op({separableConv2d_});\n"]},"metadata":{},"sourceType":"module"}