{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { convertToTensor } from '../tensor_util_env';\nimport { assert, assertShapesMatch, getTypedArrayFromDType } from '../util';\nimport { tensor } from './tensor';\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\n\nasync function inTopKAsync_(predictions, targets) {\n  let k = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;\n  const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n  const $targets = convertToTensor(targets, 'targets', 'inTopK');\n  assert($predictions.rank > 1, () => 'inTopK() expects the predictions to be of rank 2 or higher, ' + `but got ${$predictions.rank}`);\n  assert($predictions.rank - 1 === $targets.rank, () => `predictions rank should be 1 larger than ` + `targets rank, but got predictions rank ` + `${$predictions.rank} and targets rank ${$targets.rank}`);\n  assertShapesMatch($predictions.shape.slice(0, $predictions.shape.length - 1), $targets.shape, `predictions's shape should be align with the targets' shape, ` + 'except the last dimension.');\n  const lastDim = $predictions.shape[$predictions.shape.length - 1];\n  assert(k > 0 && k <= lastDim, () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` + `dimension (${lastDim}), but got ${k}`);\n  const predictionsVals = await $predictions.data();\n  const targetsVals = await $targets.data(); // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n  // and look up topK along lastDim.\n\n  const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n  const precision = getTypedArrayFromDType('bool', batch);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = predictionsVals.subarray(offset, offset + size);\n    const valAndInd = [];\n\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({\n        value: vals[i],\n        index: i\n      });\n    }\n\n    valAndInd.sort((a, b) => b.value - a.value);\n    precision[b] = 0;\n\n    for (let i = 0; i < k; i++) {\n      if (valAndInd[i].index === targetsVals[b]) {\n        precision[b] = 1;\n        break;\n      }\n    }\n  }\n\n  if (predictions !== $predictions) {\n    $predictions.dispose();\n  }\n\n  if (targets !== $targets) {\n    $targets.dispose();\n  } // Output precision has the same shape as targets.\n\n\n  return tensor(precision, $targets.shape, 'bool');\n}\n\nexport const inTopKAsync = inTopKAsync_;","map":{"version":3,"mappings":"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","names":["convertToTensor","assert","assertShapesMatch","getTypedArrayFromDType","tensor","inTopKAsync_","predictions","targets","k","$predictions","$targets","rank","shape","slice","length","lastDim","predictionsVals","data","targetsVals","batch","size","precision","b","offset","vals","subarray","valAndInd","i","push","value","index","sort","a","dispose","inTopKAsync"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/in_top_k.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor} from '../tensor';\nimport {convertToTensor} from '../tensor_util_env';\nimport {TensorLike} from '../types';\nimport {assert, assertShapesMatch, getTypedArrayFromDType} from '../util';\nimport {tensor} from './tensor';\n\n/**\n * Returns whether the targets are in the top K predictions.\n *\n * ```js\n * const predictions = tf.tensor2d([[20, 10, 40, 30], [30, 50, -20, 10]]);\n * const targets = tf.tensor1d([2, 0]);\n * const precision = await tf.inTopKAsync(predictions, targets);\n * precision.print();\n * ```\n * @param predictions 2-D or higher `tf.Tensor` with last dimension being\n *     at least `k`.\n * @param targets 1-D or higher `tf.Tensor`.\n * @param k Optional Number of top elements to look at for computing precision,\n *     default to 1.\n *\n * @doc {heading: 'Operations', subheading: 'Evaluation'}\n */\nasync function inTopKAsync_<T extends Tensor, U extends Tensor>(\n    predictions: T|TensorLike, targets: U|TensorLike, k = 1): Promise<U> {\n  const $predictions = convertToTensor(predictions, 'predictions', 'inTopK');\n  const $targets = convertToTensor(targets, 'targets', 'inTopK');\n\n  assert(\n      $predictions.rank > 1,\n      () => 'inTopK() expects the predictions to be of rank 2 or higher, ' +\n          `but got ${$predictions.rank}`);\n  assert(\n      $predictions.rank - 1 === $targets.rank,\n      () => `predictions rank should be 1 larger than ` +\n          `targets rank, but got predictions rank ` +\n          `${$predictions.rank} and targets rank ${$targets.rank}`);\n  assertShapesMatch(\n      $predictions.shape.slice(0, $predictions.shape.length - 1),\n      $targets.shape,\n      `predictions's shape should be align with the targets' shape, ` +\n          'except the last dimension.');\n  const lastDim = $predictions.shape[$predictions.shape.length - 1];\n  assert(\n      k > 0 && k <= lastDim,\n      () => `'k' passed to inTopK() must be > 0 && <= the predictions last ` +\n          `dimension (${lastDim}), but got ${k}`);\n\n  const predictionsVals = await $predictions.data();\n  const targetsVals = await $targets.data();\n\n  // Reshape predictionsVals into a 2d tensor [batch, lastDim]\n  // and look up topK along lastDim.\n  const [batch, size] = [predictionsVals.length / lastDim, lastDim];\n  const precision = getTypedArrayFromDType('bool', batch);\n\n  for (let b = 0; b < batch; b++) {\n    const offset = b * size;\n    const vals = predictionsVals.subarray(offset, offset + size);\n    const valAndInd: Array<{value: number, index: number}> = [];\n    for (let i = 0; i < vals.length; i++) {\n      valAndInd.push({value: vals[i], index: i});\n    }\n    valAndInd.sort((a, b) => b.value - a.value);\n\n    precision[b] = 0;\n    for (let i = 0; i < k; i++) {\n      if (valAndInd[i].index === targetsVals[b]) {\n        precision[b] = 1;\n        break;\n      }\n    }\n  }\n\n  if (predictions !== $predictions) {\n    $predictions.dispose();\n  }\n  if (targets !== $targets) {\n    $targets.dispose();\n  }\n\n  // Output precision has the same shape as targets.\n  return tensor(precision, $targets.shape, 'bool') as U;\n}\n\nexport const inTopKAsync = inTopKAsync_;\n"]},"metadata":{},"sourceType":"module"}