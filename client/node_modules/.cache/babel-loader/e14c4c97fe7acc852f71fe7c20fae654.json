{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul } from '../kernel_names';\nimport { matMul } from '../ops/mat_mul';\nexport const batchMatMulGradConfig = {\n  kernelName: BatchMatMul,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy, saved, attrs) => {\n    const [a, b] = saved;\n    const {\n      transposeA,\n      transposeB\n    } = attrs;\n\n    if (!transposeA && !transposeB) {\n      return {\n        a: () => matMul(dy, b, false, true),\n        b: () => matMul(a, dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        a: () => matMul(dy, b, false, false),\n        b: () => matMul(dy, a, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        a: () => matMul(b, dy, false, true),\n        b: () => matMul(a, dy, false, false)\n      };\n    } else {\n      return {\n        a: () => matMul(b, dy, true, true),\n        b: () => matMul(dy, a, true, true)\n      };\n    }\n  }\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,WAAR,QAA4C,iBAA5C;AAEA,SAAQC,MAAR,QAAqB,gBAArB;AAGA,OAAO,MAAMC,qBAAqB,GAAe;AAC/CC,YAAU,EAAEH,WADmC;AAE/CI,cAAY,EAAE,CAAC,GAAD,EAAM,GAAN,CAFiC;AAG/CC,UAAQ,EAAE,CAACC,EAAD,EAAaC,KAAb,EAA8BC,KAA9B,KAAqD;AAC7D,UAAM,CAACC,CAAD,EAAIC,CAAJ,IAASH,KAAf;AAEA,UAAM;AAACI,gBAAD;AAAaC;AAAb,QAA2BJ,KAAjC;;AAEA,QAAI,CAACG,UAAD,IAAe,CAACC,UAApB,EAAgC;AAC9B,aAAO;AACLH,SAAC,EAAE,MAAMR,MAAM,CAACK,EAAD,EAAKI,CAAL,EAAQ,KAAR,EAAe,IAAf,CADV;AAELA,SAAC,EAAE,MAAMT,MAAM,CAACQ,CAAD,EAAIH,EAAJ,EAAQ,IAAR,EAAc,KAAd;AAFV,OAAP;AAID,KALD,MAKO,IAAI,CAACK,UAAD,IAAeC,UAAnB,EAA+B;AACpC,aAAO;AACLH,SAAC,EAAE,MAAMR,MAAM,CAACK,EAAD,EAAKI,CAAL,EAAQ,KAAR,EAAe,KAAf,CADV;AAELA,SAAC,EAAE,MAAMT,MAAM,CAACK,EAAD,EAAKG,CAAL,EAAQ,IAAR,EAAc,KAAd;AAFV,OAAP;AAID,KALM,MAKA,IAAIE,UAAU,IAAI,CAACC,UAAnB,EAA+B;AACpC,aAAO;AACLH,SAAC,EAAE,MAAMR,MAAM,CAACS,CAAD,EAAIJ,EAAJ,EAAQ,KAAR,EAAe,IAAf,CADV;AAELI,SAAC,EAAE,MAAMT,MAAM,CAACQ,CAAD,EAAIH,EAAJ,EAAQ,KAAR,EAAe,KAAf;AAFV,OAAP;AAID,KALM,MAKA;AACL,aAAO;AACLG,SAAC,EAAE,MAAMR,MAAM,CAACS,CAAD,EAAIJ,EAAJ,EAAQ,IAAR,EAAc,IAAd,CADV;AAELI,SAAC,EAAE,MAAMT,MAAM,CAACK,EAAD,EAAKG,CAAL,EAAQ,IAAR,EAAc,IAAd;AAFV,OAAP;AAID;AACF;AA7B8C,CAA1C","names":["BatchMatMul","matMul","batchMatMulGradConfig","kernelName","inputsToSave","gradFunc","dy","saved","attrs","a","b","transposeA","transposeB"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/gradients/BatchMatMul_grad.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {BatchMatMul, BatchMatMulAttrs} from '../kernel_names';\nimport {GradConfig, NamedAttrMap} from '../kernel_registry';\nimport {matMul} from '../ops/mat_mul';\nimport {Tensor} from '../tensor';\n\nexport const batchMatMulGradConfig: GradConfig = {\n  kernelName: BatchMatMul,\n  inputsToSave: ['a', 'b'],\n  gradFunc: (dy: Tensor, saved: Tensor[], attrs: NamedAttrMap) => {\n    const [a, b] = saved;\n\n    const {transposeA, transposeB} = attrs as {} as BatchMatMulAttrs;\n\n    if (!transposeA && !transposeB) {\n      return {\n        a: () => matMul(dy, b, false, true),\n        b: () => matMul(a, dy, true, false)\n      };\n    } else if (!transposeA && transposeB) {\n      return {\n        a: () => matMul(dy, b, false, false),\n        b: () => matMul(dy, a, true, false)\n      };\n    } else if (transposeA && !transposeB) {\n      return {\n        a: () => matMul(b, dy, false, true),\n        b: () => matMul(a, dy, false, false)\n      };\n    } else {\n      return {\n        a: () => matMul(b, dy, true, true),\n        b: () => matMul(dy, a, true, true)\n      };\n    }\n  }\n};\n"]},"metadata":{},"sourceType":"module"}