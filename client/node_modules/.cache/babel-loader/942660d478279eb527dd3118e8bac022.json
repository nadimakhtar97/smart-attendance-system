{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu'; // Returns an array of configuration objects that describe each stage of the\n// reduction.\n\nfunction getReductionStages(inShape) {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(x, dtype, reductionType, backend) {\n  const reductionStages = getReductionStages(x.shape);\n  let result = x;\n\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {\n      inSize,\n      windowSize,\n      outSize\n    } = reductionStages[i];\n    let program;\n    let previousResult;\n\n    if (reductionType === 'mean') {\n      program = i === 0 ? new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, inSize) : new MeanProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      });\n    } else {\n      program = new ReduceProgram({\n        windowSize,\n        inSize,\n        batchSize: x.shape[0],\n        outSize\n      }, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,QAAiD,uBAAjD;AAGA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,aAAR,QAA4B,eAA5B,C,CAIA;AACA;;AACA,SAASC,kBAAT,CAA4BC,OAA5B,EAA6C;AAE3C,QAAMC,MAAM,GAAG,EAAf;;AAEA,SAAOA,MAAM,CAACC,MAAP,KAAkB,CAAlB,IAAuBD,MAAM,CAACA,MAAM,CAACC,MAAP,GAAgB,CAAjB,CAAN,CAA0BC,OAA1B,KAAsC,CAApE,EAAuE;AACrE,UAAMA,OAAO,GACTF,MAAM,CAACC,MAAP,GAAgBD,MAAM,CAACA,MAAM,CAACC,MAAP,GAAgB,CAAjB,CAAN,CAA0BC,OAA1C,GAAoDH,OAAO,CAAC,CAAD,CAD/D;AAEA,UAAMI,UAAU,GAAGR,YAAY,CAACS,wBAAb,CAAsCF,OAAtC,CAAnB;AACAF,UAAM,CAACK,IAAP,CAAY;AACVC,YAAM,EAAEJ,OADE;AAEVC,gBAFU;AAGVD,aAAO,EAAEK,IAAI,CAACC,IAAL,CAAUN,OAAO,GAAGC,UAApB;AAHC,KAAZ;AAKD;;AAED,SAAOH,MAAP;AACD;;AAED,OAAM,SAAUS,MAAV,CACFC,CADE,EACaC,KADb,EAC8BC,aAD9B,EAEFC,OAFE,EAEuB;AAC3B,QAAMC,eAAe,GAAGhB,kBAAkB,CAACY,CAAC,CAACK,KAAH,CAA1C;AAEA,MAAIC,MAAM,GAAGN,CAAb;;AACA,OAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,eAAe,CAACb,MAApC,EAA4CgB,CAAC,EAA7C,EAAiD;AAC/C,UAAM;AAACX,YAAD;AAASH,gBAAT;AAAqBD;AAArB,QAAgCY,eAAe,CAACG,CAAD,CAArD;AAEA,QAAIC,OAAJ;AACA,QAAIC,cAAJ;;AACA,QAAIP,aAAa,KAAK,MAAtB,EAA8B;AAC5BM,aAAO,GAAGD,CAAC,KAAK,CAAN,GACN,IAAIrB,WAAJ,CACI;AAACO,kBAAD;AAAaG,cAAb;AAAqBc,iBAAS,EAAEV,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAhC;AAA4Cb;AAA5C,OADJ,EAC0DI,MAD1D,CADM,GAGN,IAAIV,WAAJ,CAAgB;AAACO,kBAAD;AAAaG,cAAb;AAAqBc,iBAAS,EAAEV,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAhC;AAA4Cb;AAA5C,OAAhB,CAHJ;AAID,KALD,MAKO;AACLgB,aAAO,GAAG,IAAIrB,aAAJ,CACN;AAACM,kBAAD;AAAaG,cAAb;AAAqBc,iBAAS,EAAEV,CAAC,CAACK,KAAF,CAAQ,CAAR,CAAhC;AAA4Cb;AAA5C,OADM,EACgDU,aADhD,CAAV;AAED;;AAEDO,kBAAc,GAAGH,MAAjB;AACAA,UAAM,GAAGH,OAAO,CAACQ,eAAR,CAAwBH,OAAxB,EAAiC,CAACF,MAAD,CAAjC,EAA2CL,KAA3C,CAAT;;AAEA,QAAIQ,cAAc,CAACG,MAAf,KAA0BZ,CAAC,CAACY,MAAhC,EAAwC;AACtCT,aAAO,CAACU,6BAAR,CAAsCJ,cAAtC;AACD;AACF;;AAED,SAAOH,MAAP;AACD","names":["backend_util","MeanProgram","ReduceProgram","getReductionStages","inShape","stages","length","outSize","windowSize","computeOptimalWindowSize","push","inSize","Math","ceil","reduce","x","dtype","reductionType","backend","reductionStages","shape","result","i","program","previousResult","batchSize","runWebGLProgram","dataId","disposeIntermediateTensorInfo"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernel_utils/reduce.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, DataType, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {MeanProgram} from '../mean_gpu';\nimport {ReduceProgram} from '../reduce_gpu';\n\ntype ReduceTypes = 'all'|'any'|'max'|'min'|'sum'|'prod'|'mean';\n\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape: number[]):\n    Array<{inSize: number, windowSize: number, outSize: number}> {\n  const stages = [];\n\n  while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n    const outSize: number =\n        stages.length ? stages[stages.length - 1].outSize : inShape[1];\n    const windowSize = backend_util.computeOptimalWindowSize(outSize);\n    stages.push({\n      inSize: outSize,\n      windowSize,\n      outSize: Math.ceil(outSize / windowSize)\n    });\n  }\n\n  return stages;\n}\n\nexport function reduce(\n    x: TensorInfo, dtype: DataType, reductionType: ReduceTypes,\n    backend: MathBackendWebGL): TensorInfo {\n  const reductionStages = getReductionStages(x.shape);\n\n  let result = x;\n  for (let i = 0; i < reductionStages.length; i++) {\n    const {inSize, windowSize, outSize} = reductionStages[i];\n\n    let program: ReduceProgram|MeanProgram;\n    let previousResult: TensorInfo;\n    if (reductionType === 'mean') {\n      program = i === 0 ?\n          new MeanProgram(\n              {windowSize, inSize, batchSize: x.shape[0], outSize}, inSize) :\n          new MeanProgram({windowSize, inSize, batchSize: x.shape[0], outSize});\n    } else {\n      program = new ReduceProgram(\n          {windowSize, inSize, batchSize: x.shape[0], outSize}, reductionType);\n    }\n\n    previousResult = result;\n    result = backend.runWebGLProgram(program, [result], dtype);\n\n    if (previousResult.dataId !== x.dataId) {\n      backend.disposeIntermediateTensorInfo(previousResult);\n    }\n  }\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}