{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport function batchToSpaceND(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockShape,\n    crops\n  } = attrs;\n  assertNotComplex([x], 'batchToSpaceND');\n  const prod = blockShape.reduce((a, b) => a * b);\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n  const xReshaped = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: reshaped\n    }\n  });\n  const xTransposed = transpose({\n    inputs: {\n      x: xReshaped\n    },\n    backend,\n    attrs: {\n      perm: permuted\n    }\n  });\n  const xTransposedReshaped = reshape({\n    inputs: {\n      x: xTransposed\n    },\n    backend,\n    attrs: {\n      shape: reshapedPermuted\n    }\n  });\n  const result = slice({\n    inputs: {\n      x: xTransposedReshaped\n    },\n    backend,\n    attrs: {\n      begin: sliceBeginCoords,\n      size: sliceSize\n    }\n  });\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n  return result;\n}\nexport const batchToSpaceNDConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAsBC,cAAtB,QAA4H,uBAA5H;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,OAAR,QAAsB,WAAtB;AACA,SAAQC,KAAR,QAAoB,SAApB;AACA,SAAQC,SAAR,QAAwB,aAAxB;AAEA,OAAM,SAAUC,cAAV,CAAyBC,IAAzB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,cAAD;AAAaC;AAAb,MAAsBH,KAA5B;AAEAR,kBAAgB,CAAC,CAACS,CAAD,CAAD,EAAM,gBAAN,CAAhB;AAEA,QAAMG,IAAI,GAAGF,UAAU,CAACG,MAAX,CAAkB,CAACC,CAAD,EAAIC,CAAJ,KAAUD,CAAC,GAAGC,CAAhC,CAAb;AAEA,QAAMC,QAAQ,GAAGlB,YAAY,CAACmB,WAAb,CAAyBR,CAAC,CAACS,KAA3B,EAAkCR,UAAlC,EAA8CE,IAA9C,CAAjB;AACA,QAAMO,QAAQ,GAAGrB,YAAY,CAACsB,WAAb,CAAyBJ,QAAQ,CAACK,MAAlC,EAA0CX,UAAU,CAACW,MAArD,CAAjB;AACA,QAAMC,gBAAgB,GAClBxB,YAAY,CAACyB,mBAAb,CAAiCd,CAAC,CAACS,KAAnC,EAA0CR,UAA1C,EAAsDE,IAAtD,CADJ;AAEA,QAAMY,gBAAgB,GAClB1B,YAAY,CAAC2B,mBAAb,CAAiCd,KAAjC,EAAwCD,UAAU,CAACW,MAAnD,CADJ;AAEA,QAAMK,SAAS,GACX5B,YAAY,CAAC6B,YAAb,CAA0BL,gBAA1B,EAA4CX,KAA5C,EAAmDD,UAAU,CAACW,MAA9D,CADJ;AAGA,QAAMO,SAAS,GAAG3B,OAAO,CAAC;AAACK,UAAM,EAAE;AAACG;AAAD,KAAT;AAAcF,WAAd;AAAuBC,SAAK,EAAE;AAACU,WAAK,EAAEF;AAAR;AAA9B,GAAD,CAAzB;AACA,QAAMa,WAAW,GACb1B,SAAS,CAAC;AAACG,UAAM,EAAE;AAACG,OAAC,EAAEmB;AAAJ,KAAT;AAAyBrB,WAAzB;AAAkCC,SAAK,EAAE;AAACsB,UAAI,EAAEX;AAAP;AAAzC,GAAD,CADb;AAEA,QAAMY,mBAAmB,GAAG9B,OAAO,CAC/B;AAACK,UAAM,EAAE;AAACG,OAAC,EAAEoB;AAAJ,KAAT;AAA2BtB,WAA3B;AAAoCC,SAAK,EAAE;AAACU,WAAK,EAAEI;AAAR;AAA3C,GAD+B,CAAnC;AAEA,QAAMU,MAAM,GAAG9B,KAAK,CAAC;AACnBI,UAAM,EAAE;AAACG,OAAC,EAAEsB;AAAJ,KADW;AAEnBxB,WAFmB;AAGnBC,SAAK,EAAE;AAACyB,WAAK,EAAET,gBAAR;AAA0BU,UAAI,EAAER;AAAhC;AAHY,GAAD,CAApB;AAMAnB,SAAO,CAAC4B,6BAAR,CAAsCP,SAAtC;AACArB,SAAO,CAAC4B,6BAAR,CAAsCN,WAAtC;AACAtB,SAAO,CAAC4B,6BAAR,CAAsCJ,mBAAtC;AAEA,SAAOC,MAAP;AACD;AAED,OAAO,MAAMI,oBAAoB,GAAiB;AAChDC,YAAU,EAAEtC,cADoC;AAEhDuC,aAAW,EAAE,KAFmC;AAGhDC,YAAU,EAAEnC;AAHoC,CAA3C","names":["backend_util","BatchToSpaceND","assertNotComplex","reshape","slice","transpose","batchToSpaceND","args","inputs","backend","attrs","x","blockShape","crops","prod","reduce","a","b","reshaped","getReshaped","shape","permuted","getPermuted","length","reshapedPermuted","getReshapedPermuted","sliceBeginCoords","getSliceBeginCoords","sliceSize","getSliceSize","xReshaped","xTransposed","perm","xTransposedReshaped","result","begin","size","disposeIntermediateTensorInfo","batchToSpaceNDConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/BatchToSpaceND.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, BatchToSpaceND, BatchToSpaceNDAttrs, BatchToSpaceNDInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {reshape} from './Reshape';\nimport {slice} from './Slice';\nimport {transpose} from './Transpose';\n\nexport function batchToSpaceND(args: {\n  inputs: BatchToSpaceNDInputs,\n  backend: MathBackendCPU,\n  attrs: BatchToSpaceNDAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockShape, crops} = attrs;\n\n  assertNotComplex([x], 'batchToSpaceND');\n\n  const prod = blockShape.reduce((a, b) => a * b);\n\n  const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n  const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n  const reshapedPermuted =\n      backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n  const sliceBeginCoords =\n      backend_util.getSliceBeginCoords(crops, blockShape.length);\n  const sliceSize =\n      backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n\n  const xReshaped = reshape({inputs: {x}, backend, attrs: {shape: reshaped}});\n  const xTransposed =\n      transpose({inputs: {x: xReshaped}, backend, attrs: {perm: permuted}});\n  const xTransposedReshaped = reshape(\n      {inputs: {x: xTransposed}, backend, attrs: {shape: reshapedPermuted}});\n  const result = slice({\n    inputs: {x: xTransposedReshaped},\n    backend,\n    attrs: {begin: sliceBeginCoords, size: sliceSize}\n  });\n\n  backend.disposeIntermediateTensorInfo(xReshaped);\n  backend.disposeIntermediateTensorInfo(xTransposed);\n  backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n\n  return result;\n}\n\nexport const batchToSpaceNDConfig: KernelConfig = {\n  kernelName: BatchToSpaceND,\n  backendName: 'cpu',\n  kernelFunc: batchToSpaceND as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}