{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { identity } from './Identity';\nexport function reverse(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    dims\n  } = attrs;\n  assertNotComplex(x, 'reverse');\n  const xRank = x.shape.length;\n  const $dims = util.parseAxisParam(dims, x.shape);\n\n  if (xRank === 0) {\n    return identity({\n      inputs: {\n        x\n      },\n      backend\n    });\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const reverseConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAkCA,OAAlC,EAAwEC,YAAxE,EAAkGC,IAAlG,QAA6G,uBAA7G;AAGA,SAAQC,gBAAR,QAA+B,aAA/B;AACA,SAAQC,QAAR,QAAuB,YAAvB;AAEA,OAAM,SAAUC,OAAV,CACFC,IADE,EAEuE;AAE3E,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI;AAAD,MAASF,KAAf;AAEAN,kBAAgB,CAACO,CAAD,EAAI,SAAJ,CAAhB;AAEA,QAAME,KAAK,GAAGF,CAAC,CAACG,KAAF,CAAQC,MAAtB;AAEA,QAAMC,KAAK,GAAGb,IAAI,CAACc,cAAL,CAAoBL,IAApB,EAA0BD,CAAC,CAACG,KAA5B,CAAd;;AACA,MAAID,KAAK,KAAK,CAAd,EAAiB;AACf,WAAOR,QAAQ,CAAC;AAACG,YAAM,EAAE;AAACG;AAAD,OAAT;AAAcF;AAAd,KAAD,CAAf;AACD;;AAED,QAAMS,MAAM,GAAG,IAAIhB,YAAJ,CAAiBS,CAAC,CAACG,KAAnB,EAA0BH,CAAC,CAACQ,KAA5B,CAAf;AACA,QAAMC,IAAI,GAAGX,OAAO,CAACY,UAAR,CAAmBV,CAAnB,CAAb;;AAEA,OAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,IAA3B,EAAiCD,CAAC,EAAlC,EAAsC;AACpC,UAAME,MAAM,GAAGN,MAAM,CAACO,UAAP,CAAkBH,CAAlB,CAAf;AACA,UAAMI,KAAK,GAAGF,MAAM,CAACG,KAAP,EAAd;AACAX,SAAK,CAACY,OAAN,CAAcC,CAAC,IAAIH,KAAK,CAACG,CAAD,CAAL,GAAWlB,CAAC,CAACG,KAAF,CAAQe,CAAR,IAAa,CAAb,GAAiBH,KAAK,CAACG,CAAD,CAApD;AACAX,UAAM,CAACY,GAAP,CAAWV,IAAI,CAACW,GAAL,CAAS,GAAGL,KAAZ,CAAX,EAA+B,GAAGF,MAAlC;AACD;;AAED,SAAOf,OAAO,CAACuB,cAAR,CAAuBd,MAAM,CAACJ,KAA9B,EAAqCI,MAAM,CAACC,KAA5C,EAAmDD,MAAM,CAACe,MAA1D,CAAP;AACD;AAED,OAAO,MAAMC,aAAa,GAAiB;AACzCC,YAAU,EAAElC,OAD6B;AAEzCmC,aAAW,EAAE,KAF4B;AAGzCC,YAAU,EAAE/B;AAH6B,CAApC","names":["Reverse","TensorBuffer","util","assertNotComplex","identity","reverse","args","inputs","backend","attrs","x","dims","xRank","shape","length","$dims","parseAxisParam","outBuf","dtype","xBuf","bufferSync","i","size","outLoc","indexToLoc","inLoc","slice","forEach","d","set","get","makeTensorInfo","values","reverseConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-cpu/src/kernels/Reverse.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {KernelConfig, KernelFunc, Reverse, ReverseAttrs, ReverseInputs, TensorBuffer, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendCPU} from '../backend_cpu';\nimport {assertNotComplex} from '../cpu_util';\nimport {identity} from './Identity';\n\nexport function reverse(\n    args:\n        {inputs: ReverseInputs, backend: MathBackendCPU, attrs: ReverseAttrs}):\n    TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {dims} = attrs;\n\n  assertNotComplex(x, 'reverse');\n\n  const xRank = x.shape.length;\n\n  const $dims = util.parseAxisParam(dims, x.shape);\n  if (xRank === 0) {\n    return identity({inputs: {x}, backend});\n  }\n\n  const outBuf = new TensorBuffer(x.shape, x.dtype);\n  const xBuf = backend.bufferSync(x);\n\n  for (let i = 0; i < outBuf.size; i++) {\n    const outLoc = outBuf.indexToLoc(i);\n    const inLoc = outLoc.slice();\n    $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n    outBuf.set(xBuf.get(...inLoc), ...outLoc);\n  }\n\n  return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\n\nexport const reverseConfig: KernelConfig = {\n  kernelName: Reverse,\n  backendName: 'cpu',\n  kernelFunc: reverse as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}