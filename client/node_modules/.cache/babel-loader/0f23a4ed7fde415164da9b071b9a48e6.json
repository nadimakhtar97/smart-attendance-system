{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { inferShape } from '../tensor_util_env';\nimport { assertNonNull } from '../util';\nimport { makeTensor } from './tensor_ops_util';\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\n\nexport function tensor3d(values, shape, dtype) {\n  assertNonNull(values);\n\n  if (shape != null && shape.length !== 3) {\n    throw new Error('tensor3d() requires shape to have three numbers');\n  }\n\n  const inferredShape = inferShape(values, dtype);\n\n  if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n    throw new Error('tensor3d() requires values to be number[][][] or flat/TypedArray');\n  }\n\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error('tensor3d() requires shape to be provided when `values` ' + 'are a flat array');\n  }\n\n  return makeTensor(values, shape, inferredShape, dtype);\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAkBA,SAAQA,UAAR,QAAyB,oBAAzB;AAGA,SAAQC,aAAR,QAA4B,SAA5B;AACA,SAAQC,UAAR,QAAyB,mBAAzB;AAEA;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAM,SAAUC,QAAV,CACFC,MADE,EACoBC,KADpB,EAEFC,KAFE,EAEc;AAClBL,eAAa,CAACG,MAAD,CAAb;;AACA,MAAIC,KAAK,IAAI,IAAT,IAAiBA,KAAK,CAACE,MAAN,KAAiB,CAAtC,EAAyC;AACvC,UAAM,IAAIC,KAAJ,CAAU,iDAAV,CAAN;AACD;;AACD,QAAMC,aAAa,GAAGT,UAAU,CAACI,MAAD,EAASE,KAAT,CAAhC;;AACA,MAAIG,aAAa,CAACF,MAAd,KAAyB,CAAzB,IAA8BE,aAAa,CAACF,MAAd,KAAyB,CAA3D,EAA8D;AAC5D,UAAM,IAAIC,KAAJ,CACF,kEADE,CAAN;AAED;;AACD,MAAIC,aAAa,CAACF,MAAd,KAAyB,CAAzB,IAA8BF,KAAK,IAAI,IAA3C,EAAiD;AAC/C,UAAM,IAAIG,KAAJ,CACF,4DACA,kBAFE,CAAN;AAGD;;AACD,SAAON,UAAU,CAACE,MAAD,EAASC,KAAT,EAAgBI,aAAhB,EAA+BH,KAA/B,CAAjB;AACD","names":["inferShape","assertNonNull","makeTensor","tensor3d","values","shape","dtype","length","Error","inferredShape"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/tensor3d.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Tensor3D} from '../tensor';\nimport {inferShape} from '../tensor_util_env';\nimport {TensorLike3D} from '../types';\nimport {DataType} from '../types';\nimport {assertNonNull} from '../util';\nimport {makeTensor} from './tensor_ops_util';\n\n/**\n * Creates rank-3 `tf.Tensor` with the provided values, shape and dtype.\n *\n * The same functionality can be achieved with `tf.tensor`, but in general\n * we recommend using `tf.tensor3d` as it makes the code more readable.\n *\n *  ```js\n * // Pass a nested array.\n * tf.tensor3d([[[1], [2]], [[3], [4]]]).print();\n * ```\n * ```js\n * // Pass a flat array and specify a shape.\n * tf.tensor3d([1, 2, 3, 4], [2, 2, 1]).print();\n * ```\n *\n * @param values The values of the tensor. Can be nested array of numbers,\n *     or a flat array, or a `TypedArray`.\n * @param shape The shape of the tensor. If not provided,  it is inferred from\n *     `values`.\n * @param dtype The data type.\n *\n * @doc {heading: 'Tensors', subheading: 'Creation'}\n */\nexport function tensor3d(\n    values: TensorLike3D, shape?: [number, number, number],\n    dtype?: DataType): Tensor3D {\n  assertNonNull(values);\n  if (shape != null && shape.length !== 3) {\n    throw new Error('tensor3d() requires shape to have three numbers');\n  }\n  const inferredShape = inferShape(values, dtype);\n  if (inferredShape.length !== 3 && inferredShape.length !== 1) {\n    throw new Error(\n        'tensor3d() requires values to be number[][][] or flat/TypedArray');\n  }\n  if (inferredShape.length === 1 && shape == null) {\n    throw new Error(\n        'tensor3d() requires shape to be provided when `values` ' +\n        'are a flat array');\n  }\n  return makeTensor(values, shape, inferredShape, dtype) as Tensor3D;\n}\n"]},"metadata":{},"sourceType":"module"}