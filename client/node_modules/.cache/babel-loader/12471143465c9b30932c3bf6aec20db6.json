{"ast":null,"code":"import { computeStrides, sizeFromShape } from '../util';\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\n\nexport function validateUpdateShape(shape, indices, updates) {\n  const sliceDim = indices.rank > 1 ? indices.shape[indices.rank - 1] : 1;\n  const batchDim = indices.rank > 1 ? indices.rank - 1 : 1;\n  const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' + `shape[sliceDim:], got updates.shape: ${updates.shape}` + `, indices.shape: ${indices.shape}, shape: ${shape}` + `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n\n  if (updates.rank < batchDim) {\n    throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n  }\n\n  if (shape.length < sliceDim + (updates.rank - batchDim)) {\n    throw new Error(shapeError + ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n  }\n\n  if (updates.rank !== batchDim + shape.length - sliceDim) {\n    throw new Error(shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n  }\n\n  for (let d = 0; d < batchDim; ++d) {\n    if (updates.shape[d] !== indices.shape[d]) {\n      throw new Error(shapeError + ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${indices.shape[d]}).`);\n    }\n  }\n\n  for (let d = 0; d < updates.rank - batchDim; ++d) {\n    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n      throw new Error(shapeError + ` updates.shape[${d + batchDim}] (${updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${shape[d + batchDim]})`);\n    }\n  }\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\n\nexport function validateInput(updates, indices, shape) {\n  if (indices.rank < 1) {\n    throw new Error('tf.scatterND() expects the indices to be rank 1 or higher,' + ` but the rank was ${indices.rank}.`);\n  }\n\n  if (updates.rank < 1) {\n    throw new Error('tf.scatterND() expects the updates to be rank 1 or higher,' + ` but the rank was ${updates.rank}.`);\n  }\n\n  if (indices.dtype !== 'int32') {\n    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${indices.dtype}`);\n  }\n\n  if (shape.length < 1) {\n    throw new Error(`Output rank must be greater or equal to 1, but got shape: ${shape}`);\n  }\n\n  if (shape.length === 0) {\n    if (indices.size === 0) {\n      throw new Error(`Indices specified for empty output. indices shape: ${indices.shape}`);\n    }\n\n    if (updates.size === 0) {\n      throw new Error(`Updates specified for empty output. updates shape: ${updates.shape}`);\n    }\n  }\n\n  validateUpdateShape(shape, indices, updates);\n}\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\n\nexport function calculateShapes(updates, indices, shape) {\n  // Calculate the number of dimensions in indices\n  const indicesRank = indices.shape.length;\n  const sliceRank = indicesRank > 1 ? indices.shape[indicesRank - 1] : 1; // Calculate the number of elements that make up each slice of our updated\n  // tensor. This allows us to work with flattened tensors and copy over whole\n  // slices at a time.\n\n  const totalNd = shape.length;\n  let sliceSize = 1;\n\n  for (let i = sliceRank; i < totalNd; ++i) {\n    sliceSize *= shape[i];\n  }\n\n  const safeSliceDim = sliceRank < 1 ? 1 : sliceRank;\n  const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n  const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n  const outputSize = sizeFromShape(shape);\n  return {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  };\n}","map":{"version":3,"mappings":"AAkBA,SAAQA,cAAR,EAAwBC,aAAxB,QAA4C,SAA5C;AAEA;;;;;;;AAMA,OAAM,SAAUC,mBAAV,CACFC,KADE,EACeC,OADf,EACgCC,OADhC,EAC+C;AACnD,QAAMC,QAAQ,GAAIF,OAAO,CAACG,IAAR,GAAe,CAAhB,GAAqBH,OAAO,CAACD,KAAR,CAAcC,OAAO,CAACG,IAAR,GAAe,CAA7B,CAArB,GAAuD,CAAxE;AACA,QAAMC,QAAQ,GAAIJ,OAAO,CAACG,IAAR,GAAe,CAAhB,GAAqBH,OAAO,CAACG,IAAR,GAAe,CAApC,GAAwC,CAAzD;AAEA,QAAME,UAAU,GAAG,0DACf,wCAAwCJ,OAAO,CAACF,KAAK,EADtC,GAEf,oBAAoBC,OAAO,CAACD,KAAK,YAAYA,KAAK,EAFnC,GAGf,eAAeG,QAAQ,mBAAmBE,QAAQ,GAHtD;;AAKA,MAAIH,OAAO,CAACE,IAAR,GAAeC,QAAnB,EAA6B;AAC3B,UAAM,IAAIE,KAAJ,CAAUD,UAAU,GAAG,kBAAkBD,QAAQ,IAAjD,CAAN;AACD;;AACD,MAAIL,KAAK,CAACQ,MAAN,GAAeL,QAAQ,IAAID,OAAO,CAACE,IAAR,GAAeC,QAAnB,CAA3B,EAAyD;AACvD,UAAM,IAAIE,KAAJ,CACFD,UAAU,GACV,0BAA0BH,QAAQ,IAAID,OAAO,CAACE,IAAR,GAAeC,QAAnB,CAA4B,EAF5D,CAAN;AAGD;;AACD,MAAIH,OAAO,CAACE,IAAR,KAAiBC,QAAQ,GAAGL,KAAK,CAACQ,MAAjB,GAA0BL,QAA/C,EAAyD;AACvD,UAAM,IAAII,KAAJ,CACFD,UAAU,GAAG,mBAAmBD,QAAQ,GAAGL,KAAK,CAACQ,MAAjB,GAA0BL,QAAQ,EADhE,CAAN;AAED;;AACD,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,QAApB,EAA8B,EAAEI,CAAhC,EAAmC;AACjC,QAAIP,OAAO,CAACF,KAAR,CAAcS,CAAd,MAAqBR,OAAO,CAACD,KAAR,CAAcS,CAAd,CAAzB,EAA2C;AACzC,YAAM,IAAIF,KAAJ,CACFD,UAAU,GACV,kBAAkBG,CAAC,MAAMP,OAAO,CAACF,KAAR,CAAcS,CAAd,CAAgB,sBAAsBA,CAAC,MAC5DR,OAAO,CAACD,KAAR,CAAcS,CAAd,CAAgB,IAHlB,CAAN;AAID;AACF;;AACD,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,OAAO,CAACE,IAAR,GAAeC,QAAnC,EAA6C,EAAEI,CAA/C,EAAkD;AAChD,QAAIP,OAAO,CAACF,KAAR,CAAcS,CAAC,GAAGJ,QAAlB,MAAgCL,KAAK,CAACS,CAAC,GAAGN,QAAL,CAAzC,EAAyD;AACvD,YAAM,IAAII,KAAJ,CACFD,UAAU,GACV,kBAAkBG,CAAC,GAAGJ,QAAQ,MAC1BH,OAAO,CAACF,KAAR,CAAcS,CAAC,GAAGJ,QAAlB,CAA2B,cAAcI,CAAC,GAAGJ,QAAQ,MACrDL,KAAK,CAACS,CAAC,GAAGJ,QAAL,CAAc,GAJrB,CAAN;AAKD;AACF;AACF;AASD;;;;;;;;AAOA,OAAM,SAAUK,aAAV,CACFR,OADE,EACeD,OADf,EACgCD,KADhC,EAC+C;AACnD,MAAIC,OAAO,CAACG,IAAR,GAAe,CAAnB,EAAsB;AACpB,UAAM,IAAIG,KAAJ,CACF,+DACA,qBAAqBN,OAAO,CAACG,IAAI,GAF/B,CAAN;AAGD;;AACD,MAAIF,OAAO,CAACE,IAAR,GAAe,CAAnB,EAAsB;AACpB,UAAM,IAAIG,KAAJ,CACF,+DACA,qBAAqBL,OAAO,CAACE,IAAI,GAF/B,CAAN;AAGD;;AACD,MAAIH,OAAO,CAACU,KAAR,KAAkB,OAAtB,EAA+B;AAC7B,UAAM,IAAIJ,KAAJ,CAAU,0DACZN,OAAO,CAACU,KAAK,EADX,CAAN;AAED;;AACD,MAAIX,KAAK,CAACQ,MAAN,GAAe,CAAnB,EAAsB;AACpB,UAAM,IAAID,KAAJ,CACF,6DAA6DP,KAAK,EADhE,CAAN;AAED;;AAED,MAAIA,KAAK,CAACQ,MAAN,KAAiB,CAArB,EAAwB;AACtB,QAAIP,OAAO,CAACW,IAAR,KAAiB,CAArB,EAAwB;AACtB,YAAM,IAAIL,KAAJ,CAAU,sDACZN,OAAO,CAACD,KAAK,EADX,CAAN;AAED;;AACD,QAAIE,OAAO,CAACU,IAAR,KAAiB,CAArB,EAAwB;AACtB,YAAM,IAAIL,KAAJ,CAAU,sDACZL,OAAO,CAACF,KAAK,EADX,CAAN;AAED;AACF;;AAEDD,qBAAmB,CAACC,KAAD,EAAQC,OAAR,EAAiBC,OAAjB,CAAnB;AACD;AAED;;;;;;;;;;AASA,OAAM,SAAUW,eAAV,CACFX,OADE,EACmBD,OADnB,EAEFD,KAFE,EAEa;AACjB;AACA,QAAMc,WAAW,GAAGb,OAAO,CAACD,KAAR,CAAcQ,MAAlC;AACA,QAAMO,SAAS,GAAID,WAAW,GAAG,CAAf,GAAoBb,OAAO,CAACD,KAAR,CAAcc,WAAW,GAAG,CAA5B,CAApB,GAAqD,CAAvE,CAHiB,CAKjB;AACA;AACA;;AACA,QAAME,OAAO,GAAGhB,KAAK,CAACQ,MAAtB;AAEA,MAAIS,SAAS,GAAG,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAGH,SAAb,EAAwBG,CAAC,GAAGF,OAA5B,EAAqC,EAAEE,CAAvC,EAA0C;AACxCD,aAAS,IAAIjB,KAAK,CAACkB,CAAD,CAAlB;AACD;;AAED,QAAMC,YAAY,GAAIJ,SAAS,GAAG,CAAb,GAAkB,CAAlB,GAAsBA,SAA3C;AACA,QAAMK,UAAU,GAAGtB,aAAa,CAACG,OAAO,CAACD,KAAT,CAAb,GAA+BmB,YAAlD;AAEA,QAAME,OAAO,GAAG,CAAC,GAAGxB,cAAc,CAACG,KAAK,CAACsB,KAAN,CAAY,CAAZ,EAAeP,SAAf,CAAD,CAAlB,EAA+C,CAA/C,CAAhB;AACA,QAAMQ,UAAU,GAAGzB,aAAa,CAACE,KAAD,CAAhC;AACA,SAAO;AAACe,aAAD;AAAYK,cAAZ;AAAwBH,aAAxB;AAAmCI,WAAnC;AAA4CE;AAA5C,GAAP;AACD","names":["computeStrides","sizeFromShape","validateUpdateShape","shape","indices","updates","sliceDim","rank","batchDim","shapeError","Error","length","d","validateInput","dtype","size","calculateShapes","indicesRank","sliceRank","totalNd","sliceSize","i","safeSliceDim","numUpdates","strides","slice","outputSize"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/scatter_nd_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport {TensorInfo} from '../kernel_registry';\nimport {Tensor} from '../tensor';\nimport {computeStrides, sizeFromShape} from '../util';\n\n/**\n * Check whether updates.shape = indices.shape[:batchDim] +\n * shape[sliceDim:]\n *\n * @param x The input tensor.\n */\nexport function validateUpdateShape(\n    shape: number[], indices: Tensor, updates: Tensor) {\n  const sliceDim = (indices.rank > 1) ? indices.shape[indices.rank - 1] : 1;\n  const batchDim = (indices.rank > 1) ? indices.rank - 1 : 1;\n\n  const shapeError = 'Must have updates.shape = indices.shape[:batchDim] + ' +\n      `shape[sliceDim:], got updates.shape: ${updates.shape}` +\n      `, indices.shape: ${indices.shape}, shape: ${shape}` +\n      `, sliceDim: ${sliceDim}, and batchDim: ${batchDim}.`;\n\n  if (updates.rank < batchDim) {\n    throw new Error(shapeError + ` update.rank < ${batchDim}. `);\n  }\n  if (shape.length < sliceDim + (updates.rank - batchDim)) {\n    throw new Error(\n        shapeError +\n        ` Output shape length < ${sliceDim + (updates.rank - batchDim)}`);\n  }\n  if (updates.rank !== batchDim + shape.length - sliceDim) {\n    throw new Error(\n        shapeError + ` update.rank != ${batchDim + shape.length - sliceDim}`);\n  }\n  for (let d = 0; d < batchDim; ++d) {\n    if (updates.shape[d] !== indices.shape[d]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d}] (${updates.shape[d]}) != indices.shape[${d}] (${\n              indices.shape[d]}).`);\n    }\n  }\n  for (let d = 0; d < updates.rank - batchDim; ++d) {\n    if (updates.shape[d + batchDim] !== shape[d + sliceDim]) {\n      throw new Error(\n          shapeError +\n          ` updates.shape[${d + batchDim}] (${\n              updates.shape[d + batchDim]}) != shape[${d + batchDim}] (${\n              shape[d + batchDim]})`);\n    }\n  }\n}\n\nexport interface ScatterShapeInfo {\n  sliceRank: number;\n  numUpdates: number;\n  sliceSize: number;\n  strides: number[];\n  outputSize: number;\n}\n/**\n * Validate scatter nd inputs.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n */\nexport function validateInput(\n    updates: Tensor, indices: Tensor, shape: number[]) {\n  if (indices.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the indices to be rank 1 or higher,' +\n        ` but the rank was ${indices.rank}.`);\n  }\n  if (updates.rank < 1) {\n    throw new Error(\n        'tf.scatterND() expects the updates to be rank 1 or higher,' +\n        ` but the rank was ${updates.rank}.`);\n  }\n  if (indices.dtype !== 'int32') {\n    throw new Error(`The dtype of 'indices' should be int32, but got dtype: ${\n        indices.dtype}`);\n  }\n  if (shape.length < 1) {\n    throw new Error(\n        `Output rank must be greater or equal to 1, but got shape: ${shape}`);\n  }\n\n  if (shape.length === 0) {\n    if (indices.size === 0) {\n      throw new Error(`Indices specified for empty output. indices shape: ${\n          indices.shape}`);\n    }\n    if (updates.size === 0) {\n      throw new Error(`Updates specified for empty output. updates shape: ${\n          updates.shape}`);\n    }\n  }\n\n  validateUpdateShape(shape, indices, updates);\n}\n\n/**\n * Calculate the shape information for the output.\n *\n * @param update The tensor contains the update values.\n * @param indices The tensor contains the indices for the update values.\n * @param shape The shape of the output tensor.\n *\n * @returns ScatterShapeInfo\n */\nexport function calculateShapes(\n    updates: TensorInfo, indices: TensorInfo,\n    shape: number[]): ScatterShapeInfo {\n  // Calculate the number of dimensions in indices\n  const indicesRank = indices.shape.length;\n  const sliceRank = (indicesRank > 1) ? indices.shape[indicesRank - 1] : 1;\n\n  // Calculate the number of elements that make up each slice of our updated\n  // tensor. This allows us to work with flattened tensors and copy over whole\n  // slices at a time.\n  const totalNd = shape.length;\n\n  let sliceSize = 1;\n  for (let i = sliceRank; i < totalNd; ++i) {\n    sliceSize *= shape[i];\n  }\n\n  const safeSliceDim = (sliceRank < 1) ? 1 : sliceRank;\n  const numUpdates = sizeFromShape(indices.shape) / safeSliceDim;\n\n  const strides = [...computeStrides(shape.slice(0, sliceRank)), 1];\n  const outputSize = sizeFromShape(shape);\n  return {sliceRank, numUpdates, sliceSize, strides, outputSize};\n}\n"]},"metadata":{},"sourceType":"module"}