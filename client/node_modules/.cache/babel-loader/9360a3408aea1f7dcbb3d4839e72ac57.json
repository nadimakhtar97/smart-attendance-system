{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace } from '@tensorflow/tfjs-core';\nimport { DepthToSpaceProgram } from '../depth_to_space_gpu';\nexport function depthToSpace(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    x\n  } = inputs;\n  const {\n    blockSize,\n    dataFormat\n  } = attrs;\n  const batchSize = x.shape[0];\n  const inputHeight = dataFormat === 'NHWC' ? x.shape[1] : x.shape[2];\n  const inputWidth = dataFormat === 'NHWC' ? x.shape[2] : x.shape[3];\n  const inputDepth = dataFormat === 'NHWC' ? x.shape[3] : x.shape[1];\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n  const outputShape = dataFormat === 'NHWC' ? [batchSize, outputHeight, outputWidth, outputDepth] : [batchSize, outputDepth, outputHeight, outputWidth];\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\nexport const depthToSpaceConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,QAAwG,uBAAxG;AAGA,SAAQC,mBAAR,QAAkC,uBAAlC;AAEA,OAAM,SAAUC,YAAV,CAAuBC,IAAvB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI;AAAD,MAAMH,MAAZ;AACA,QAAM;AAACI,aAAD;AAAYC;AAAZ,MAA0BH,KAAhC;AAEA,QAAMI,SAAS,GAAGH,CAAC,CAACI,KAAF,CAAQ,CAAR,CAAlB;AACA,QAAMC,WAAW,GAAIH,UAAU,KAAK,MAAhB,GAA0BF,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1B,GAAuCJ,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA3D;AACA,QAAME,UAAU,GAAIJ,UAAU,KAAK,MAAhB,GAA0BF,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1B,GAAuCJ,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1D;AACA,QAAMG,UAAU,GAAIL,UAAU,KAAK,MAAhB,GAA0BF,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1B,GAAuCJ,CAAC,CAACI,KAAF,CAAQ,CAAR,CAA1D;AAEA,QAAMI,YAAY,GAAGH,WAAW,GAAGJ,SAAnC;AACA,QAAMQ,WAAW,GAAGH,UAAU,GAAGL,SAAjC;AACA,QAAMS,WAAW,GAAGH,UAAU,IAAIN,SAAS,GAAGA,SAAhB,CAA9B;AAEA,QAAMU,WAAW,GAAIT,UAAU,KAAK,MAAhB,GAChB,CAACC,SAAD,EAAYK,YAAZ,EAA0BC,WAA1B,EAAuCC,WAAvC,CADgB,GAEhB,CAACP,SAAD,EAAYO,WAAZ,EAAyBF,YAAzB,EAAuCC,WAAvC,CAFJ;AAIA,QAAMG,OAAO,GAAG,IAAIlB,mBAAJ,CAAwBiB,WAAxB,EAAqCV,SAArC,EAAgDC,UAAhD,CAAhB;AACA,SAAOJ,OAAO,CAACe,eAAR,CAAwBD,OAAxB,EAAiC,CAACZ,CAAD,CAAjC,EAAsCA,CAAC,CAACc,KAAxC,CAAP;AACD;AAED,OAAO,MAAMC,kBAAkB,GAAiB;AAC9CC,YAAU,EAAEvB,YADkC;AAE9CwB,aAAW,EAAE,OAFiC;AAG9CC,YAAU,EAAEvB;AAHkC,CAAzC","names":["DepthToSpace","DepthToSpaceProgram","depthToSpace","args","inputs","backend","attrs","x","blockSize","dataFormat","batchSize","shape","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputShape","program","runWebGLProgram","dtype","depthToSpaceConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/DepthToSpace.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {DepthToSpace, DepthToSpaceAttrs, DepthToSpaceInputs, KernelConfig, KernelFunc, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DepthToSpaceProgram} from '../depth_to_space_gpu';\n\nexport function depthToSpace(args: {\n  inputs: DepthToSpaceInputs,\n  backend: MathBackendWebGL,\n  attrs: DepthToSpaceAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {x} = inputs;\n  const {blockSize, dataFormat} = attrs;\n\n  const batchSize = x.shape[0];\n  const inputHeight = (dataFormat === 'NHWC') ? x.shape[1] : x.shape[2];\n  const inputWidth = (dataFormat === 'NHWC') ? x.shape[2] : x.shape[3];\n  const inputDepth = (dataFormat === 'NHWC') ? x.shape[3] : x.shape[1];\n\n  const outputHeight = inputHeight * blockSize;\n  const outputWidth = inputWidth * blockSize;\n  const outputDepth = inputDepth / (blockSize * blockSize);\n\n  const outputShape = (dataFormat === 'NHWC') ?\n      [batchSize, outputHeight, outputWidth, outputDepth] :\n      [batchSize, outputDepth, outputHeight, outputWidth];\n\n  const program = new DepthToSpaceProgram(outputShape, blockSize, dataFormat);\n  return backend.runWebGLProgram(program, [x], x.dtype);\n}\n\nexport const depthToSpaceConfig: KernelConfig = {\n  kernelName: DepthToSpace,\n  backendName: 'webgl',\n  kernelFunc: depthToSpace as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}