{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\n\nexport function deepMap(input, mapFn) {\n  return deepMapInternal(input, mapFn);\n}\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\n\nfunction deepMapInternal(input, mapFn) {\n  let seen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Map();\n  let containedIn = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : new Set();\n\n  if (input == null) {\n    return null;\n  }\n\n  if (typeof Blob === 'function' && input instanceof Blob) {\n    return input.slice();\n  }\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n\n  const result = mapFn(input);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep map function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n\n    containedIn.delete(input);\n\n    if (input.__proto__) {\n      mappedIterable.__proto__ = input.__proto__;\n    }\n\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n} // TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\n\n\nexport function deepZip(inputs) {\n  let zipFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : zipToList;\n  return deepZipInternal(inputs, zipFn);\n}\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\n\nfunction deepZipInternal(inputs, zipFn) {\n  let containedIn = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : new Set();\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n\n  const result = zipFn(inputs);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error('A deep zip function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n} // tslint:disable-next-line:no-any\n\n\nexport function zipToList(x) {\n  if (x === null) {\n    return null;\n  } // TODO(soergel): validate array type?\n\n\n  if (isIterable(x[0])) {\n    return {\n      value: null,\n      recurse: true\n    };\n  } else {\n    return {\n      value: x,\n      recurse: false\n    };\n  }\n}\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\n\nexport async function deepMapAndAwaitAll(input, mapFn) {\n  const seen = new Map(); // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n\n  deepMapInternal(input, mapFn, seen); // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n\n    if (tf.util.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  } // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n\n\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\n\nexport function isIterable(obj) {\n  let isTextDecoder = false;\n\n  if (tf.env().get('IS_BROWSER')) {\n    isTextDecoder = obj instanceof TextDecoder;\n  } else {\n    // tslint:disable-next-line:no-require-imports\n    const {\n      StringDecoder\n    } = require('string_decoder');\n\n    isTextDecoder = obj instanceof StringDecoder;\n  }\n\n  return obj != null && !ArrayBuffer.isView(obj) && (Array.isArray(obj) || typeof obj === 'object' && !(obj instanceof tf.Tensor) && !(obj instanceof Promise) && !isTextDecoder);\n}\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\n\nexport function canTensorify(obj) {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) || typeof obj === 'object' && obj instanceof tf.Tensor || tf.util.isTypedArray(obj);\n}\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\n\nfunction isPrimitive(value) {\n  return value === null || typeof value !== 'object' && typeof value !== 'function';\n}","map":{"version":3,"mappings":"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","names":["tf","deepMap","input","mapFn","deepMapInternal","seen","Map","containedIn","Set","Blob","slice","has","Error","get","result","recurse","value","set","isIterable","mappedIterable","Array","isArray","add","k","child","childResult","delete","__proto__","deepZip","inputs","zipFn","zipToList","deepZipInternal","children","map","x","deepMapAndAwaitAll","key","from","keys","util","isPromise","mappedValue","obj","isTextDecoder","env","TextDecoder","StringDecoder","require","ArrayBuffer","isView","Tensor","Promise","canTensorify","isPrimitive","isTypedArray"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-data/src/util/deep_map.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n\nimport * as tf from '@tensorflow/tfjs-core';\n\n// tslint:disable:no-any\n\n/**\n * A return value for a mapping function that can be applied via deepMap.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapResult = {\n  value: any,\n  recurse: boolean\n};\n\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input: any, mapFn: (x: any) => DeepMapResult): any|\n    any[] {\n  return deepMapInternal(input, mapFn);\n}\n\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(\n    input: any, mapFn: (x: any) => DeepMapResult,\n    seen: Map<any, any> = new Map(), containedIn: Set<{}> = new Set()): any|\n    any[] {\n  if (input == null) {\n    return null;\n  }\n  if (typeof Blob === 'function' && input instanceof Blob) {\n    return input.slice();\n  }\n\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  if (seen.has(input)) {\n    return seen.get(input);\n  }\n  const result = mapFn(input);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep map function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    seen.set(input, result.value);\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const child = input[k];\n      const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    if (input.__proto__) {\n      mappedIterable.__proto__ = input.__proto__;\n    }\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult = zipToList): any|any[] {\n  return deepZipInternal(inputs, zipFn);\n}\n\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(\n    inputs: any[], zipFn: (xs: any[]) => DeepMapResult,\n    containedIn: Set<{}> = new Set()): any|any[] {\n  // The recursion follows the structure of input 0; it's assumed that all the\n  // other inputs have the same structure.\n  const input = inputs[0];\n  if (containedIn.has(input)) {\n    throw new Error('Circular references are not supported.');\n  }\n  const result = zipFn(inputs);\n\n  if (result.recurse && result.value !== null) {\n    throw new Error(\n        'A deep zip function may not return both a value and recurse=true.');\n  }\n\n  if (!result.recurse) {\n    return result.value;\n  } else if (isIterable(input)) {\n    // tslint:disable-next-line:no-any\n    const mappedIterable: any|any[] = Array.isArray(input) ? [] : {};\n    containedIn.add(input);\n    for (const k in input) {\n      const children = inputs.map(x => x[k]);\n      const childResult = deepZipInternal(children, zipFn, containedIn);\n      mappedIterable[k] = childResult;\n    }\n    containedIn.delete(input);\n    return mappedIterable;\n  } else {\n    throw new Error(`Can't recurse into non-iterable type: ${input}`);\n  }\n}\n\n// tslint:disable-next-line:no-any\nexport function zipToList(x: any[]): DeepMapResult {\n  if (x === null) {\n    return null;\n  }\n  // TODO(soergel): validate array type?\n\n  if (isIterable(x[0])) {\n    return {value: null, recurse: true};\n  } else {\n    return {value: x, recurse: false};\n  }\n}\n\n/**\n * A return value for an async map function for use with deepMapAndAwaitAll.\n *\n * If recurse is true, the value should be empty, and iteration will continue\n * into the object or array.\n */\nexport type DeepMapAsyncResult = {\n  value: Promise<any>,\n  recurse: boolean\n};\n\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(\n    input: any, mapFn: (x: any) => DeepMapAsyncResult): Promise<any|any[]> {\n  const seen: Map<any, any> = new Map();\n\n  // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n  deepMapInternal(input, mapFn, seen);\n\n  // Replace the Promises in 'seen' in place.\n  // Note TypeScript provides no async map iteration, and regular map iteration\n  // is broken too, so sadly we have to do Array.from() to make it work.\n  // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n  for (const key of Array.from(seen.keys())) {\n    const value = seen.get(key);\n    if (tf.util.isPromise(value)) {\n      const mappedValue = await value;\n      seen.set(key, mappedValue);\n    }\n  }\n\n  // Normal deepMap again, this time filling in the resolved values.\n  // It's unfortunate that we have to do two passes.\n  // TODO(soergel): test performance and think harder about a fast solution.\n  const result = deepMapInternal(input, mapFn, seen);\n  return result;\n}\n\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj: any): boolean {\n  let isTextDecoder = false;\n  if (tf.env().get('IS_BROWSER')) {\n    isTextDecoder = obj instanceof TextDecoder;\n  } else {\n    // tslint:disable-next-line:no-require-imports\n    const {StringDecoder} = require('string_decoder');\n    isTextDecoder = obj instanceof StringDecoder;\n  }\n  return obj != null && (!ArrayBuffer.isView(obj)) &&\n      (Array.isArray(obj) ||\n       (typeof obj === 'object' && !(obj instanceof tf.Tensor) &&\n        !(obj instanceof Promise) && !isTextDecoder));\n}\n\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj: any): boolean {\n  return obj == null || isPrimitive(obj) || Array.isArray(obj) ||\n      (typeof obj === 'object' && (obj instanceof tf.Tensor)) ||\n      tf.util.isTypedArray(obj);\n}\n\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value: any): boolean {\n  return (\n      value === null ||\n      (typeof value !== 'object' && typeof value !== 'function'));\n}\n"]},"metadata":{},"sourceType":"module"}