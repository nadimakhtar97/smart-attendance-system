{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst contexts = {};\nconst WEBGL_ATTRIBUTES = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\nexport function clearWebGLContext(webGLVersion) {\n  delete contexts[webGLVersion];\n}\nexport function setWebGLContext(webGLVersion, gl) {\n  contexts[webGLVersion] = gl;\n}\nexport function getWebGLContext(webGLVersion, customCanvas) {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n\n  const gl = contexts[webGLVersion];\n\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(webGLVersion, customCanvas) {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n\n  const canvas = customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n  canvas.addEventListener('webglcontextlost', ev => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n\n  if (webGLVersion === 1) {\n    return canvas.getContext('webgl', WEBGL_ATTRIBUTES) || canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES);\n  }\n\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES);\n}","map":{"version":3,"mappings":"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","names":["contexts","WEBGL_ATTRIBUTES","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","depth","stencil","failIfMajorPerformanceCaveat","clearWebGLContext","webGLVersion","setWebGLContext","gl","getWebGLContext","customCanvas","newCtx","getWebGLRenderingContext","console","log","isContextLost","disable","DEPTH_TEST","STENCIL_TEST","BLEND","DITHER","POLYGON_OFFSET_FILL","SAMPLE_COVERAGE","enable","SCISSOR_TEST","CULL_FACE","cullFace","BACK","createCanvas","OffscreenCanvas","document","createElement","Error","canvas","addEventListener","ev","preventDefault","getContext"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/canvas_util.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nconst contexts: {[key: string]: WebGLRenderingContext} = {};\n\nconst WEBGL_ATTRIBUTES: WebGLContextAttributes = {\n  alpha: false,\n  antialias: false,\n  premultipliedAlpha: false,\n  preserveDrawingBuffer: false,\n  depth: false,\n  stencil: false,\n  failIfMajorPerformanceCaveat: true\n};\n\nexport function clearWebGLContext(webGLVersion: number) {\n  delete contexts[webGLVersion];\n}\n\nexport function setWebGLContext(\n    webGLVersion: number, gl: WebGLRenderingContext) {\n  contexts[webGLVersion] = gl;\n}\n\nexport function getWebGLContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (!(webGLVersion in contexts) || customCanvas != null) {\n    const newCtx = getWebGLRenderingContext(webGLVersion, customCanvas);\n    if (newCtx !== null) {\n      contexts[webGLVersion] = newCtx;\n    } else {\n      console.log('Could not get context for WebGL version', webGLVersion);\n      return null;\n    }\n  }\n  const gl = contexts[webGLVersion];\n  if (gl == null || gl.isContextLost()) {\n    delete contexts[webGLVersion];\n    return getWebGLContext(webGLVersion);\n  }\n\n  gl.disable(gl.DEPTH_TEST);\n  gl.disable(gl.STENCIL_TEST);\n  gl.disable(gl.BLEND);\n  gl.disable(gl.DITHER);\n  gl.disable(gl.POLYGON_OFFSET_FILL);\n  gl.disable(gl.SAMPLE_COVERAGE);\n  gl.enable(gl.SCISSOR_TEST);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  return contexts[webGLVersion];\n}\n\nfunction createCanvas(webGLVersion: number) {\n  if (typeof OffscreenCanvas !== 'undefined' && webGLVersion === 2) {\n    return new OffscreenCanvas(300, 150);\n  } else if (typeof document !== 'undefined') {\n    return document.createElement('canvas');\n  } else {\n    throw new Error('Cannot create a canvas in this context');\n  }\n}\n\nfunction getWebGLRenderingContext(\n    webGLVersion: number,\n    customCanvas?: HTMLCanvasElement|OffscreenCanvas): WebGLRenderingContext {\n  if (webGLVersion !== 1 && webGLVersion !== 2) {\n    throw new Error('Cannot get WebGL rendering context, WebGL is disabled.');\n  }\n  const canvas =\n      customCanvas == null ? createCanvas(webGLVersion) : customCanvas;\n\n  canvas.addEventListener('webglcontextlost', (ev: Event) => {\n    ev.preventDefault();\n    delete contexts[webGLVersion];\n  }, false);\n  if (webGLVersion === 1) {\n    return (canvas.getContext('webgl', WEBGL_ATTRIBUTES) ||\n            canvas.getContext('experimental-webgl', WEBGL_ATTRIBUTES)) as\n        WebGLRenderingContext;\n  }\n  return canvas.getContext('webgl2', WEBGL_ATTRIBUTES) as WebGLRenderingContext;\n}\n"]},"metadata":{},"sourceType":"module"}