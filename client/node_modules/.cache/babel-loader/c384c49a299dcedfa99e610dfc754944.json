{"ast":null,"code":"/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from '../engine';\nimport { env } from '../environment';\nimport { FromPixels } from '../kernel_names';\nimport { getKernel } from '../kernel_registry';\nimport { Tensor } from '../tensor';\nimport { convertToTensor } from '../tensor_util_env';\nimport { cast } from './cast';\nimport { op } from './operation';\nimport { tensor3d } from './tensor3d';\nlet fromPixels2DContext;\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\n\nfunction fromPixels_(pixels) {\n  let numChannels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error('Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n\n  if (pixels.data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (typeof ImageData !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (typeof HTMLVideoElement !== 'undefined' && pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (typeof HTMLImageElement !== 'undefined' && pixels instanceof HTMLImageElement) {\n    isImage = true; // tslint:disable-next-line: no-any\n  } else if (pixels.getContext != null) {\n    isCanvasLike = true;\n  } else if (typeof ImageBitmap !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error('pixels passed to tf.browser.fromPixels() must be either an ' + `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` + `in browser, or OffscreenCanvas, ImageData in webworker` + ` or {data: Uint32Array, width: number, height: number}, ` + `but was ${pixels.constructor.name}`);\n  }\n\n  if (isVideo) {\n    const HAVE_CURRENT_DATA_READY_STATE = 2;\n\n    if (isVideo && pixels.readyState < HAVE_CURRENT_DATA_READY_STATE) {\n      throw new Error('The video element has not loaded data yet. Please wait for ' + '`loadeddata` event on the <video> element.');\n    }\n  } // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n\n\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n\n  if (kernel != null) {\n    const inputs = {\n      pixels\n    };\n    const attrs = {\n      numChannels\n    };\n    return ENGINE.runKernel(FromPixels, inputs, attrs);\n  }\n\n  const [width, height] = isVideo ? [pixels.videoWidth, pixels.videoHeight] : [pixels.width, pixels.height];\n  let vals;\n\n  if (isCanvasLike) {\n    vals = // tslint:disable-next-line:no-any\n    pixels.getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = pixels.data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' && typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error('Cannot parse input in current context. ' + 'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext = document.createElement('canvas').getContext('2d');\n      }\n    }\n\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(pixels, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n\n  let values;\n\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n\n  const outShape = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n} // Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\n\n\nfunction isPixelData(pixels) {\n  return pixels != null && pixels.data instanceof Uint8Array;\n}\n\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' && typeof ImageBitmap !== 'undefined' && window.hasOwnProperty('createImageBitmap');\n}\n\nfunction isNonEmptyPixels(pixels) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\n\nfunction canWrapPixelsToImageBitmap(pixels) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) && isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\n\n\nexport async function fromPixelsAsync(pixels) {\n  let numChannels = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;\n  let inputs = null; // Check whether the backend needs to wrap |pixels| to imageBitmap and\n  // whether |pixels| can be wrapped to imageBitmap.\n\n  if (env().getBool('WRAP_TO_IMAGEBITMAP') && canWrapPixelsToImageBitmap(pixels)) {\n    // Force the imageBitmap creation to not do any premultiply alpha\n    // ops.\n    let imageBitmap;\n\n    try {\n      // wrap in try-catch block, because createImageBitmap may not work\n      // properly in some browsers, e.g.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n      // tslint:disable-next-line: no-any\n      imageBitmap = await createImageBitmap(pixels, {\n        premultiplyAlpha: 'none'\n      });\n    } catch (e) {\n      imageBitmap = null;\n    } // createImageBitmap will clip the source size.\n    // In some cases, the input will have larger size than its content.\n    // E.g. new Image(10, 10) but with 1 x 1 content. Using\n    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n    // is not correct. We should avoid wrapping such resouce to\n    // imageBitmap.\n\n\n    if (imageBitmap != null && imageBitmap.width === pixels.width && imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n\n  return fromPixels_(inputs, numChannels);\n}\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\n\nexport async function toPixels(img, canvas) {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n\n  if ($img.rank !== 2 && $img.rank !== 3) {\n    throw new Error(`toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n  }\n\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(`toPixels only supports depth of size ` + `1, 3 or 4 but got ${depth}`);\n  }\n\n  if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n    throw new Error(`Unsupported type for toPixels: ${$img.dtype}.` + ` Please use float32 or int32 tensors.`);\n  }\n\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(`Tensor values for a float32 Tensor must be in the ` + `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(`Tensor values for a int32 Tensor must be in the ` + `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  if (canvas != null) {\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n\n  if ($img !== img) {\n    $img.dispose();\n  }\n\n  return bytes;\n}\nexport const fromPixels = op({\n  fromPixels_\n});","map":{"version":3,"mappings":"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","names":["ENGINE","env","FromPixels","getKernel","Tensor","convertToTensor","cast","op","tensor3d","fromPixels2DContext","fromPixels_","pixels","numChannels","Error","isPixelData","isImageData","isVideo","isImage","isCanvasLike","isImageBitmap","data","Uint8Array","ImageData","HTMLVideoElement","HTMLImageElement","getContext","ImageBitmap","constructor","name","HAVE_CURRENT_DATA_READY_STATE","readyState","kernel","backendName","inputs","attrs","runKernel","width","height","videoWidth","videoHeight","vals","getImageData","document","OffscreenCanvas","OffscreenCanvasRenderingContext2D","createElement","canvas","drawImage","values","Int32Array","numPixels","i","channel","outShape","isImageBitmapFullySupported","window","hasOwnProperty","isNonEmptyPixels","canWrapPixelsToImageBitmap","fromPixelsAsync","getBool","imageBitmap","createImageBitmap","premultiplyAlpha","e","toPixels","img","$img","originalImgTensor","dispose","rank","shape","slice","depth","dtype","multiplier","bytes","Uint8ClampedArray","rgba","d","value","j","Math","round","ctx","imageData","putImageData","fromPixels"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-core/src/ops/browser.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {ENGINE} from '../engine';\nimport {env} from '../environment';\nimport {FromPixels, FromPixelsAttrs, FromPixelsInputs} from '../kernel_names';\nimport {getKernel, NamedAttrMap} from '../kernel_registry';\nimport {Tensor, Tensor2D, Tensor3D} from '../tensor';\nimport {NamedTensorMap} from '../tensor_types';\nimport {convertToTensor} from '../tensor_util_env';\nimport {PixelData, TensorLike} from '../types';\n\nimport {cast} from './cast';\nimport {op} from './operation';\nimport {tensor3d} from './tensor3d';\n\nlet fromPixels2DContext: CanvasRenderingContext2D;\n\n/**\n * Creates a `tf.Tensor` from an image.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * tf.browser.fromPixels(image).print();\n * ```\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @returns A Tensor3D with the shape `[height, width, numChannels]`.\n *\n * Note: fromPixels can be lossy in some cases, same image may result in\n * slightly different tensor values, if rendered by different rendering\n * engines. This means that results from different browsers, or even same\n * browser with CPU and GPU rendering engines can be different. See discussion\n * in details:\n * https://github.com/tensorflow/tfjs/issues/5482\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nfunction fromPixels_(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3): Tensor3D {\n  // Sanity checks.\n  if (numChannels > 4) {\n    throw new Error(\n        'Cannot construct Tensor with more than 4 channels from pixels.');\n  }\n  if (pixels == null) {\n    throw new Error('pixels passed to tf.browser.fromPixels() can not be null');\n  }\n  let isPixelData = false;\n  let isImageData = false;\n  let isVideo = false;\n  let isImage = false;\n  let isCanvasLike = false;\n  let isImageBitmap = false;\n  if ((pixels as PixelData).data instanceof Uint8Array) {\n    isPixelData = true;\n  } else if (\n      typeof (ImageData) !== 'undefined' && pixels instanceof ImageData) {\n    isImageData = true;\n  } else if (\n      typeof (HTMLVideoElement) !== 'undefined' &&\n      pixels instanceof HTMLVideoElement) {\n    isVideo = true;\n  } else if (\n      typeof (HTMLImageElement) !== 'undefined' &&\n      pixels instanceof HTMLImageElement) {\n    isImage = true;\n    // tslint:disable-next-line: no-any\n  } else if ((pixels as any).getContext != null) {\n    isCanvasLike = true;\n  } else if (\n      typeof (ImageBitmap) !== 'undefined' && pixels instanceof ImageBitmap) {\n    isImageBitmap = true;\n  } else {\n    throw new Error(\n        'pixels passed to tf.browser.fromPixels() must be either an ' +\n        `HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData ` +\n        `in browser, or OffscreenCanvas, ImageData in webworker` +\n        ` or {data: Uint32Array, width: number, height: number}, ` +\n        `but was ${(pixels as {}).constructor.name}`);\n  }\n  if (isVideo) {\n    const HAVE_CURRENT_DATA_READY_STATE = 2;\n    if (isVideo &&\n        (pixels as HTMLVideoElement).readyState <\n            HAVE_CURRENT_DATA_READY_STATE) {\n      throw new Error(\n          'The video element has not loaded data yet. Please wait for ' +\n          '`loadeddata` event on the <video> element.');\n    }\n  }\n  // If the current backend has 'FromPixels' registered, it has a more\n  // efficient way of handling pixel uploads, so we call that.\n  const kernel = getKernel(FromPixels, ENGINE.backendName);\n  if (kernel != null) {\n    const inputs: FromPixelsInputs = {pixels};\n    const attrs: FromPixelsAttrs = {numChannels};\n    return ENGINE.runKernel(\n        FromPixels, inputs as {} as NamedTensorMap,\n        attrs as {} as NamedAttrMap);\n  }\n\n  const [width, height] = isVideo ?\n      [\n        (pixels as HTMLVideoElement).videoWidth,\n        (pixels as HTMLVideoElement).videoHeight\n      ] :\n      [pixels.width, pixels.height];\n  let vals: Uint8ClampedArray|Uint8Array;\n\n  if (isCanvasLike) {\n    vals =\n        // tslint:disable-next-line:no-any\n        (pixels as any).getContext('2d').getImageData(0, 0, width, height).data;\n  } else if (isImageData || isPixelData) {\n    vals = (pixels as PixelData | ImageData).data;\n  } else if (isImage || isVideo || isImageBitmap) {\n    if (fromPixels2DContext == null) {\n      if (typeof document === 'undefined') {\n        if (typeof OffscreenCanvas !== 'undefined' &&\n            typeof OffscreenCanvasRenderingContext2D !== 'undefined') {\n          // @ts-ignore\n          fromPixels2DContext = new OffscreenCanvas(1, 1).getContext('2d');\n        } else {\n          throw new Error(\n              'Cannot parse input in current context. ' +\n              'Reason: OffscreenCanvas Context2D rendering is not supported.');\n        }\n      } else {\n        fromPixels2DContext = document.createElement('canvas').getContext('2d');\n      }\n    }\n    fromPixels2DContext.canvas.width = width;\n    fromPixels2DContext.canvas.height = height;\n    fromPixels2DContext.drawImage(\n        pixels as HTMLVideoElement, 0, 0, width, height);\n    vals = fromPixels2DContext.getImageData(0, 0, width, height).data;\n  }\n  let values: Int32Array;\n  if (numChannels === 4) {\n    values = new Int32Array(vals);\n  } else {\n    const numPixels = width * height;\n    values = new Int32Array(numPixels * numChannels);\n    for (let i = 0; i < numPixels; i++) {\n      for (let channel = 0; channel < numChannels; ++channel) {\n        values[i * numChannels + channel] = vals[i * 4 + channel];\n      }\n    }\n  }\n  const outShape: [number, number, number] = [height, width, numChannels];\n  return tensor3d(values, outShape, 'int32');\n}\n\n// Helper functions for |fromPixelsAsync| to check whether the input can\n// be wrapped into imageBitmap.\nfunction isPixelData(pixels: PixelData|ImageData|HTMLImageElement|\n                     HTMLCanvasElement|HTMLVideoElement|\n                     ImageBitmap): pixels is PixelData {\n  return (pixels != null) && ((pixels as PixelData).data instanceof Uint8Array);\n}\n\nfunction isImageBitmapFullySupported() {\n  return typeof window !== 'undefined' &&\n      typeof (ImageBitmap) !== 'undefined' &&\n      window.hasOwnProperty('createImageBitmap');\n}\n\nfunction isNonEmptyPixels(pixels: PixelData|ImageData|HTMLImageElement|\n                          HTMLCanvasElement|HTMLVideoElement|ImageBitmap) {\n  return pixels != null && pixels.width !== 0 && pixels.height !== 0;\n}\n\nfunction canWrapPixelsToImageBitmap(pixels: PixelData|ImageData|\n                                    HTMLImageElement|HTMLCanvasElement|\n                                    HTMLVideoElement|ImageBitmap) {\n  return isImageBitmapFullySupported() && !(pixels instanceof ImageBitmap) &&\n      isNonEmptyPixels(pixels) && !isPixelData(pixels);\n}\n\n/**\n * Creates a `tf.Tensor` from an image in async way.\n *\n * ```js\n * const image = new ImageData(1, 1);\n * image.data[0] = 100;\n * image.data[1] = 150;\n * image.data[2] = 200;\n * image.data[3] = 255;\n *\n * (await tf.browser.fromPixelsAsync(image)).print();\n * ```\n * This API is the async version of fromPixels. The API will first\n * check |WRAP_TO_IMAGEBITMAP| flag, and try to wrap the input to\n * imageBitmap if the flag is set to true.\n *\n * @param pixels The input image to construct the tensor from. The\n * supported image types are all 4-channel. You can also pass in an image\n * object with following attributes:\n * `{data: Uint8Array; width: number; height: number}`\n * @param numChannels The number of channels of the output tensor. A\n * numChannels value less than 4 allows you to ignore channels. Defaults to\n * 3 (ignores alpha channel of input image).\n *\n * @doc {heading: 'Browser', namespace: 'browser', ignoreCI: true}\n */\nexport async function fromPixelsAsync(\n    pixels: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n    HTMLVideoElement|ImageBitmap,\n    numChannels = 3) {\n  let inputs: PixelData|ImageData|HTMLImageElement|HTMLCanvasElement|\n      HTMLVideoElement|ImageBitmap = null;\n\n  // Check whether the backend needs to wrap |pixels| to imageBitmap and\n  // whether |pixels| can be wrapped to imageBitmap.\n  if (env().getBool('WRAP_TO_IMAGEBITMAP') &&\n      canWrapPixelsToImageBitmap(pixels)) {\n    // Force the imageBitmap creation to not do any premultiply alpha\n    // ops.\n    let imageBitmap;\n\n    try {\n      // wrap in try-catch block, because createImageBitmap may not work\n      // properly in some browsers, e.g.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=1335594\n      // tslint:disable-next-line: no-any\n      imageBitmap = await (createImageBitmap as any)(\n          pixels as ImageBitmapSource, {premultiplyAlpha: 'none'});\n    } catch (e) {\n      imageBitmap = null;\n    }\n\n    // createImageBitmap will clip the source size.\n    // In some cases, the input will have larger size than its content.\n    // E.g. new Image(10, 10) but with 1 x 1 content. Using\n    // createImageBitmap will clip the size from 10 x 10 to 1 x 1, which\n    // is not correct. We should avoid wrapping such resouce to\n    // imageBitmap.\n    if (imageBitmap != null && imageBitmap.width === pixels.width &&\n        imageBitmap.height === pixels.height) {\n      inputs = imageBitmap;\n    } else {\n      inputs = pixels;\n    }\n  } else {\n    inputs = pixels;\n  }\n\n  return fromPixels_(inputs, numChannels);\n}\n\n/**\n * Draws a `tf.Tensor` of pixel values to a byte array or optionally a\n * canvas.\n *\n * When the dtype of the input is 'float32', we assume values in the range\n * [0-1]. Otherwise, when input is 'int32', we assume values in the range\n * [0-255].\n *\n * Returns a promise that resolves when the canvas has been drawn to.\n *\n * @param img A rank-2 tensor with shape `[height, width]`, or a rank-3 tensor\n * of shape `[height, width, numChannels]`. If rank-2, draws grayscale. If\n * rank-3, must have depth of 1, 3 or 4. When depth of 1, draws\n * grayscale. When depth of 3, we draw with the first three components of\n * the depth dimension corresponding to r, g, b and alpha = 1. When depth of\n * 4, all four components of the depth dimension correspond to r, g, b, a.\n * @param canvas The canvas to draw to.\n *\n * @doc {heading: 'Browser', namespace: 'browser'}\n */\nexport async function toPixels(\n    img: Tensor2D|Tensor3D|TensorLike,\n    canvas?: HTMLCanvasElement): Promise<Uint8ClampedArray> {\n  let $img = convertToTensor(img, 'img', 'toPixels');\n  if (!(img instanceof Tensor)) {\n    // Assume int32 if user passed a native array.\n    const originalImgTensor = $img;\n    $img = cast(originalImgTensor, 'int32');\n    originalImgTensor.dispose();\n  }\n  if ($img.rank !== 2 && $img.rank !== 3) {\n    throw new Error(\n        `toPixels only supports rank 2 or 3 tensors, got rank ${$img.rank}.`);\n  }\n  const [height, width] = $img.shape.slice(0, 2);\n  const depth = $img.rank === 2 ? 1 : $img.shape[2];\n\n  if (depth > 4 || depth === 2) {\n    throw new Error(\n        `toPixels only supports depth of size ` +\n        `1, 3 or 4 but got ${depth}`);\n  }\n\n  if ($img.dtype !== 'float32' && $img.dtype !== 'int32') {\n    throw new Error(\n        `Unsupported type for toPixels: ${$img.dtype}.` +\n        ` Please use float32 or int32 tensors.`);\n  }\n\n  const data = await $img.data();\n  const multiplier = $img.dtype === 'float32' ? 255 : 1;\n  const bytes = new Uint8ClampedArray(width * height * 4);\n\n  for (let i = 0; i < height * width; ++i) {\n    const rgba = [0, 0, 0, 255];\n\n    for (let d = 0; d < depth; d++) {\n      const value = data[i * depth + d];\n\n      if ($img.dtype === 'float32') {\n        if (value < 0 || value > 1) {\n          throw new Error(\n              `Tensor values for a float32 Tensor must be in the ` +\n              `range [0 - 1] but encountered ${value}.`);\n        }\n      } else if ($img.dtype === 'int32') {\n        if (value < 0 || value > 255) {\n          throw new Error(\n              `Tensor values for a int32 Tensor must be in the ` +\n              `range [0 - 255] but encountered ${value}.`);\n        }\n      }\n\n      if (depth === 1) {\n        rgba[0] = value * multiplier;\n        rgba[1] = value * multiplier;\n        rgba[2] = value * multiplier;\n      } else {\n        rgba[d] = value * multiplier;\n      }\n    }\n\n    const j = i * 4;\n    bytes[j + 0] = Math.round(rgba[0]);\n    bytes[j + 1] = Math.round(rgba[1]);\n    bytes[j + 2] = Math.round(rgba[2]);\n    bytes[j + 3] = Math.round(rgba[3]);\n  }\n\n  if (canvas != null) {\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext('2d');\n    const imageData = new ImageData(bytes, width, height);\n    ctx.putImageData(imageData, 0, 0);\n  }\n  if ($img !== img) {\n    $img.dispose();\n  }\n  return bytes;\n}\n\nexport const fromPixels = op({fromPixels_});\n"]},"metadata":{},"sourceType":"module"}