{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Diag, util } from '@tensorflow/tfjs-core';\nimport { DiagProgram } from '../diag_gpu';\nimport { reshape } from './Reshape';\nexport function diag(args) {\n  const {\n    inputs,\n    backend\n  } = args;\n  const {\n    x\n  } = inputs;\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n  const flat = reshape({\n    inputs: {\n      x\n    },\n    backend,\n    attrs: {\n      shape: [xSize]\n    }\n  });\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n  const out = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape: outShape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n  return out;\n}\nexport const diagConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,IAAR,EAAgEC,IAAhE,QAA2E,uBAA3E;AAGA,SAAQC,WAAR,QAA0B,aAA1B;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAUC,IAAV,CAAeC,IAAf,EAAoE;AAExE,QAAM;AAACC,UAAD;AAASC;AAAT,MAAoBF,IAA1B;AACA,QAAM;AAACG;AAAD,MAAMF,MAAZ;AAEA,QAAMG,QAAQ,GAAG,CAAC,GAAGD,CAAC,CAACE,KAAN,EAAa,GAAGF,CAAC,CAACE,KAAlB,CAAjB;AACA,QAAMC,KAAK,GAAGV,IAAI,CAACW,aAAL,CAAmBJ,CAAC,CAACE,KAArB,CAAd;AAEA,QAAMG,IAAI,GAAGV,OAAO,CAAC;AAACG,UAAM,EAAE;AAACE;AAAD,KAAT;AAAcD,WAAd;AAAuBO,SAAK,EAAE;AAACJ,WAAK,EAAE,CAACC,KAAD;AAAR;AAA9B,GAAD,CAApB;AAEA,QAAMI,OAAO,GAAG,IAAIb,WAAJ,CAAgBS,KAAhB,CAAhB;AACA,QAAMK,GAAG,GAAGT,OAAO,CAACU,eAAR,CAAwBF,OAAxB,EAAiC,CAACF,IAAD,CAAjC,EAAyCA,IAAI,CAACK,KAA9C,CAAZ;AAEA,QAAMC,GAAG,GAAGhB,OAAO,CAAC;AAACG,UAAM,EAAE;AAACE,OAAC,EAAEQ;AAAJ,KAAT;AAAmBT,WAAnB;AAA4BO,SAAK,EAAE;AAACJ,WAAK,EAAED;AAAR;AAAnC,GAAD,CAAnB;AAEAF,SAAO,CAACa,6BAAR,CAAsCP,IAAtC;AACAN,SAAO,CAACa,6BAAR,CAAsCJ,GAAtC;AAEA,SAAOG,GAAP;AACD;AAED,OAAO,MAAME,UAAU,GAAiB;AACtCC,YAAU,EAAEtB,IAD0B;AAEtCuB,aAAW,EAAE,OAFyB;AAGtCC,YAAU,EAAEpB;AAH0B,CAAjC","names":["Diag","util","DiagProgram","reshape","diag","args","inputs","backend","x","outShape","shape","xSize","sizeFromShape","flat","attrs","program","res","runWebGLProgram","dtype","out","disposeIntermediateTensorInfo","diagConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/Diag.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {Diag, DiagInputs, KernelConfig, KernelFunc, TensorInfo, util} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {DiagProgram} from '../diag_gpu';\nimport {reshape} from './Reshape';\n\nexport function diag(args: {inputs: DiagInputs, backend: MathBackendWebGL}):\n    TensorInfo {\n  const {inputs, backend} = args;\n  const {x} = inputs;\n\n  const outShape = [...x.shape, ...x.shape];\n  const xSize = util.sizeFromShape(x.shape);\n\n  const flat = reshape({inputs: {x}, backend, attrs: {shape: [xSize]}});\n\n  const program = new DiagProgram(xSize);\n  const res = backend.runWebGLProgram(program, [flat], flat.dtype);\n\n  const out = reshape({inputs: {x: res}, backend, attrs: {shape: outShape}});\n\n  backend.disposeIntermediateTensorInfo(flat);\n  backend.disposeIntermediateTensorInfo(res);\n\n  return out;\n}\n\nexport const diagConfig: KernelConfig = {\n  kernelName: Diag,\n  backendName: 'webgl',\n  kernelFunc: diag as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}