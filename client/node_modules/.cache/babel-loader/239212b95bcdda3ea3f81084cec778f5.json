{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class PackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = false;\n    this.packedOutput = true; // Only input / output 3D tensors.\n\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  getSourceCoordsArr(dims) {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n\n    return coords;\n  }\n\n  getOutOfBoundsCondition(dims) {\n    if (this.rank === 1) {\n      return `rc > ${this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  getSetup(dims) {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` : this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` : this.outputShape[this.rank - 2];\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  getOutput(dims) {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n\n    if (this.rank === 1) {\n      const outShape = this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n\n}","map":{"version":3,"mappings":"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","names":["useShapeUniforms","getChannels","getCoordsDataType","PackProgram","constructor","outputShape","rank","length","enableShapeUniforms","userCode","channels","dtype","outOfBoundsCondition","getOutOfBoundsCondition","setup","getSetup","output","getOutput","getSourceCoordsArr","dims","coords","row","col","coord","d","push","cond","i","innerDims","slice","sourceCoords","outShape"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/pack_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class PackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  outputShape: number[];\n  userCode: string;\n  packedInputs = false;\n  packedOutput = true;\n  enableShapeUniforms: boolean;\n  rank: number;\n\n  constructor(\n      outputShape:\n          number[]) {  // TODO(https://github.com/tensorflow/tfjs/issues/893):\n                       // Only input / output 3D tensors.\n    this.outputShape = outputShape;\n    this.rank = outputShape.length;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n\n    if (this.rank === 0) {\n      this.userCode = `\n        void main() {\n          setOutput(vec4(getA(), 0., 0., 0.));\n        }\n      `;\n    } else {\n      const channels = getChannels('rc', this.rank);\n      const dtype = getCoordsDataType(this.rank);\n      const outOfBoundsCondition = this.getOutOfBoundsCondition(channels);\n      const setup = this.getSetup(channels);\n      const output = this.getOutput(channels);\n\n      this.userCode = `\n        void main() {\n          ${dtype} rc = getOutputCoords();\n\n          if(${outOfBoundsCondition}) {\n            setOutput(vec4(0));\n          } else {\n            ${setup}\n\n            setOutput(vec4(${output}));\n          }\n        }\n      `;\n    }\n  }\n\n  private getSourceCoordsArr(dims: string[]): string[] {\n    const coords = [];\n\n    for (let row = 0; row <= 1; row++) {\n      for (let col = 0; col <= 1; col++) {\n        let coord = `${row === 0 ? 'r' : 'rp1'}, ${col === 0 ? 'c' : 'cp1'}`;\n\n        for (let d = 2; d < this.rank; d++) {\n          coord = `${dims[dims.length - 1 - d]},` + coord;\n        }\n\n        coords.push(coord);\n      }\n    }\n    return coords;\n  }\n\n  private getOutOfBoundsCondition(dims: string[]): string {\n    if (this.rank === 1) {\n      return `rc > ${\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0]}`;\n    }\n\n    let cond = '';\n    for (let i = this.rank - 2; i < this.rank; i++) {\n      cond += `${dims[i]} >= ${\n          this.enableShapeUniforms ? `outShape[${i}]` : this.outputShape[i]}`;\n      if (i < this.rank - 1) {\n        cond += '||';\n      }\n    }\n\n    return cond;\n  }\n\n  private getSetup(dims: string[]): string {\n    if (this.rank === 1) {\n      return '';\n    }\n\n    const innerDims = dims.slice(-2);\n    const col = this.enableShapeUniforms ? `outShape[${this.rank} - 1]` :\n                                           this.outputShape[this.rank - 1];\n    const row = this.enableShapeUniforms ? `outShape[${this.rank} - 2]` :\n                                           this.outputShape[this.rank - 2];\n\n    return `\n      int r = ${innerDims[0]};\n      int c = ${innerDims[1]};\n      int rp1 = r + 1;\n      int cp1 = c + 1;\n\n      bool cEdge = cp1 >= ${col};\n      bool rEdge = rp1 >= ${row};\n    `;\n  }\n\n  private getOutput(dims: string[]): string {\n    const sourceCoords = this.getSourceCoordsArr(dims);\n    if (this.rank === 1) {\n      const outShape =\n          this.enableShapeUniforms ? 'outShape' : this.outputShape[0];\n      return `getA(rc), (rc + 1 >= ${outShape} ? 0. : getA(rc + 1)), 0, 0`;\n    }\n\n    return `getA(${sourceCoords[0]}),\n            cEdge ? 0. : getA(${sourceCoords[1]}),\n            rEdge ? 0. : getA(${sourceCoords[2]}),\n            rEdge || cEdge ? 0. : getA(${sourceCoords[3]})`;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}