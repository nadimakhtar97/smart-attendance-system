{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { useShapeUniforms } from './gpgpu_math';\nimport { getChannels, getSourceCoords } from './packing_util';\nimport { getCoordsDataType } from './shader_compiler';\nexport class UnpackProgram {\n  constructor(outputShape) {\n    this.variableNames = ['A'];\n    this.packedInputs = true;\n    this.packedOutput = false;\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n\n}","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAsBA,gBAAtB,QAA6C,cAA7C;AACA,SAAQC,WAAR,EAAqBC,eAArB,QAA2C,gBAA3C;AACA,SAAQC,iBAAR,QAAgC,mBAAhC;AAEA,OAAM,MAAOC,aAAP,CAAoB;AAQxBC,cAAYC,WAAZ,EAAiC;AAPjC,yBAAgB,CAAC,GAAD,CAAhB;AACA,wBAAe,IAAf;AACA,wBAAe,KAAf;AAME,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,mBAAL,GAA2BP,gBAAgB,CAAC,KAAKM,WAAL,CAAiBE,MAAlB,CAA3C;AACA,UAAMC,IAAI,GAAGH,WAAW,CAACE,MAAzB;AAEA,UAAME,QAAQ,GAAGT,WAAW,CAAC,IAAD,EAAOQ,IAAP,CAA5B;AACA,UAAME,KAAK,GAAGR,iBAAiB,CAACM,IAAD,CAA/B;AACA,UAAMG,YAAY,GAAGV,eAAe,CAACO,IAAD,EAAOC,QAAP,CAApC;AACA,UAAMG,SAAS,GAAGH,QAAQ,CAACI,KAAT,CAAe,CAAC,CAAhB,CAAlB;AACA,UAAMC,MAAM,GAAGN,IAAI,IAAI,CAAR,GAAY,IAAZ,GAAmB,QAAQI,SAAS,CAACG,IAAV,CAAe,GAAf,CAAmB,GAA7D;AAEA,SAAKC,QAAL,GAAgB;;UAEVN,KAAK;kCACmBC,YAAY;;4CAEFG,MAAM;;KAL9C;AAQD;;AA3BuB","names":["useShapeUniforms","getChannels","getSourceCoords","getCoordsDataType","UnpackProgram","constructor","outputShape","enableShapeUniforms","length","rank","channels","dtype","sourceCoords","innerDims","slice","coords","join","userCode"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/unpack_gpu.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {GPGPUProgram, useShapeUniforms} from './gpgpu_math';\nimport {getChannels, getSourceCoords} from './packing_util';\nimport {getCoordsDataType} from './shader_compiler';\n\nexport class UnpackProgram implements GPGPUProgram {\n  variableNames = ['A'];\n  packedInputs = true;\n  packedOutput = false;\n  outputShape: number[];\n  userCode: string;\n  enableShapeUniforms: boolean;\n\n  constructor(outputShape: number[]) {\n    this.outputShape = outputShape;\n    this.enableShapeUniforms = useShapeUniforms(this.outputShape.length);\n    const rank = outputShape.length;\n\n    const channels = getChannels('rc', rank);\n    const dtype = getCoordsDataType(rank);\n    const sourceCoords = getSourceCoords(rank, channels);\n    const innerDims = channels.slice(-2);\n    const coords = rank <= 1 ? 'rc' : `vec2(${innerDims.join(',')})`;\n\n    this.userCode = `\n      void main() {\n        ${dtype} rc = getOutputCoords();\n        vec4 packedInput = getA(${sourceCoords});\n\n        setOutput(getChannel(packedInput, ${coords}));\n      }\n    `;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}