{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { ScatterProgram } from '../scatter_gpu';\nimport { reshape } from './Reshape';\nexport function scatterNd(args) {\n  const {\n    inputs,\n    backend,\n    attrs\n  } = args;\n  const {\n    indices,\n    updates\n  } = inputs;\n  const {\n    shape\n  } = attrs;\n  const {\n    sliceRank,\n    numUpdates,\n    sliceSize,\n    strides,\n    outputSize\n  } = backend_util.calculateShapes(updates, indices, shape);\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape({\n    inputs: {\n      x: indices\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceRank]\n    }\n  });\n  const flattenX = reshape({\n    inputs: {\n      x: updates\n    },\n    backend,\n    attrs: {\n      shape: [numUpdates, sliceSize]\n    }\n  });\n  const defaultValue = backend.makeTensorInfo([], 'float32', new Float32Array([0])); // scalar(0)\n\n  const program = new ScatterProgram(numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length, strides, flattenShape);\n  const res = backend.runWebGLProgram(program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n  const reshaped = reshape({\n    inputs: {\n      x: res\n    },\n    backend,\n    attrs: {\n      shape\n    }\n  });\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n  return reshaped;\n}\nexport const scatterNdConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd\n};","map":{"version":3,"mappings":"AAAA;;;;;;;;;;;;;;;;AAiBA,SAAQA,YAAR,EAAgDC,SAAhD,QAA6G,uBAA7G;AAGA,SAAQC,cAAR,QAA6B,gBAA7B;AACA,SAAQC,OAAR,QAAsB,WAAtB;AAEA,OAAM,SAAUC,SAAV,CAAoBC,IAApB,EAIL;AACC,QAAM;AAACC,UAAD;AAASC,WAAT;AAAkBC;AAAlB,MAA2BH,IAAjC;AACA,QAAM;AAACI,WAAD;AAAUC;AAAV,MAAqBJ,MAA3B;AACA,QAAM;AAACK;AAAD,MAAUH,KAAhB;AAEA,QAAM;AAACI,aAAD;AAAYC,cAAZ;AAAwBC,aAAxB;AAAmCC,WAAnC;AAA4CC;AAA5C,MACFhB,YAAY,CAACiB,eAAb,CAA6BP,OAA7B,EAAsCD,OAAtC,EAA+CE,KAA/C,CADJ;AAGA,QAAMO,YAAY,GAAG,CAACF,UAAU,GAAGF,SAAd,EAAyBA,SAAzB,CAArB;;AAEA,MAAIE,UAAU,KAAK,CAAnB,EAAsB;AACpB,WAAOT,OAAO,CAACY,cAAR,CAAuBR,KAAvB,EAA8BF,OAAO,CAACW,KAAtC,CAAP;AACD;;AAED,QAAMC,cAAc,GAAGlB,OAAO,CAC1B;AAACG,UAAM,EAAE;AAACgB,OAAC,EAAEb;AAAJ,KAAT;AAAuBF,WAAvB;AAAgCC,SAAK,EAAE;AAACG,WAAK,EAAE,CAACE,UAAD,EAAaD,SAAb;AAAR;AAAvC,GAD0B,CAA9B;AAEA,QAAMW,QAAQ,GAAGpB,OAAO,CACpB;AAACG,UAAM,EAAE;AAACgB,OAAC,EAAEZ;AAAJ,KAAT;AAAuBH,WAAvB;AAAgCC,SAAK,EAAE;AAACG,WAAK,EAAE,CAACE,UAAD,EAAaC,SAAb;AAAR;AAAvC,GADoB,CAAxB;AAGA,QAAMU,YAAY,GAAGjB,OAAO,CAACY,cAAR,CACjB,EADiB,EACb,SADa,EACF,IAAIM,YAAJ,CAAiB,CAAC,CAAD,CAAjB,CADE,CAArB,CAnBD,CAoB6C;;AAC5C,QAAMC,OAAO,GAAG,IAAIxB,cAAJ,CACZW,UADY,EACAD,SADA,EACWS,cAAc,CAACV,KAAf,CAAqBgB,MADhC,EACwCJ,QAAQ,CAACZ,KAAT,CAAegB,MADvD,EAEZZ,OAFY,EAEHG,YAFG,CAAhB;AAGA,QAAMU,GAAG,GAAGrB,OAAO,CAACsB,eAAR,CACRH,OADQ,EACC,CAACH,QAAD,EAAWF,cAAX,EAA2BG,YAA3B,CADD,EAC2CD,QAAQ,CAACH,KADpD,CAAZ;AAGA,QAAMU,QAAQ,GAAG3B,OAAO,CAAC;AAACG,UAAM,EAAE;AAACgB,OAAC,EAAEM;AAAJ,KAAT;AAAmBrB,WAAnB;AAA4BC,SAAK,EAAE;AAACG;AAAD;AAAnC,GAAD,CAAxB;AAEAJ,SAAO,CAACwB,6BAAR,CAAsCV,cAAtC;AACAd,SAAO,CAACwB,6BAAR,CAAsCR,QAAtC;AACAhB,SAAO,CAACwB,6BAAR,CAAsCH,GAAtC;AACArB,SAAO,CAACwB,6BAAR,CAAsCP,YAAtC;AAEA,SAAOM,QAAP;AACD;AAED,OAAO,MAAME,eAAe,GAAiB;AAC3CC,YAAU,EAAEhC,SAD+B;AAE3CiC,aAAW,EAAE,OAF8B;AAG3CC,YAAU,EAAE/B;AAH+B,CAAtC","names":["backend_util","ScatterNd","ScatterProgram","reshape","scatterNd","args","inputs","backend","attrs","indices","updates","shape","sliceRank","numUpdates","sliceSize","strides","outputSize","calculateShapes","flattenShape","makeTensorInfo","dtype","flattenIndices","x","flattenX","defaultValue","Float32Array","program","length","res","runWebGLProgram","reshaped","disposeIntermediateTensorInfo","scatterNdConfig","kernelName","backendName","kernelFunc"],"sources":["/home/nadimakhtar97/smart-attendance-system/tfjs-backend-webgl/src/kernels/ScatterNd.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n\nimport {backend_util, KernelConfig, KernelFunc, ScatterNd, ScatterNdAttrs, ScatterNdInputs, TensorInfo} from '@tensorflow/tfjs-core';\n\nimport {MathBackendWebGL} from '../backend_webgl';\nimport {ScatterProgram} from '../scatter_gpu';\nimport {reshape} from './Reshape';\n\nexport function scatterNd(args: {\n  inputs: ScatterNdInputs,\n  backend: MathBackendWebGL,\n  attrs: ScatterNdAttrs\n}): TensorInfo {\n  const {inputs, backend, attrs} = args;\n  const {indices, updates} = inputs;\n  const {shape} = attrs;\n\n  const {sliceRank, numUpdates, sliceSize, strides, outputSize} =\n      backend_util.calculateShapes(updates, indices, shape);\n\n  const flattenShape = [outputSize / sliceSize, sliceSize];\n\n  if (outputSize === 0) {\n    return backend.makeTensorInfo(shape, indices.dtype);\n  }\n\n  const flattenIndices = reshape(\n      {inputs: {x: indices}, backend, attrs: {shape: [numUpdates, sliceRank]}});\n  const flattenX = reshape(\n      {inputs: {x: updates}, backend, attrs: {shape: [numUpdates, sliceSize]}});\n\n  const defaultValue = backend.makeTensorInfo(\n      [], 'float32', new Float32Array([0]));  // scalar(0)\n  const program = new ScatterProgram(\n      numUpdates, sliceRank, flattenIndices.shape.length, flattenX.shape.length,\n      strides, flattenShape);\n  const res = backend.runWebGLProgram(\n      program, [flattenX, flattenIndices, defaultValue], flattenX.dtype);\n\n  const reshaped = reshape({inputs: {x: res}, backend, attrs: {shape}});\n\n  backend.disposeIntermediateTensorInfo(flattenIndices);\n  backend.disposeIntermediateTensorInfo(flattenX);\n  backend.disposeIntermediateTensorInfo(res);\n  backend.disposeIntermediateTensorInfo(defaultValue);\n\n  return reshaped;\n}\n\nexport const scatterNdConfig: KernelConfig = {\n  kernelName: ScatterNd,\n  backendName: 'webgl',\n  kernelFunc: scatterNd as {} as KernelFunc\n};\n"]},"metadata":{},"sourceType":"module"}